global = window; process = {browser: true, env: {}};
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('url'), require('chai')) :
  typeof define === 'function' && define.amd ? define(['url', 'chai'], factory) :
  (factory(global.url,global.chai));
}(this, (function (url,chai) { 'use strict';

  url = url && url.hasOwnProperty('default') ? url['default'] : url;
  chai = chai && chai.hasOwnProperty('default') ? chai['default'] : chai;

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  /* !
   * Chai - checkError utility
   * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */

  /**
   * ### .checkError
   *
   * Checks that an error conforms to a given set of criteria and/or retrieves information about it.
   *
   * @api public
   */

  /**
   * ### .compatibleInstance(thrown, errorLike)
   *
   * Checks if two instances are compatible (strict equal).
   * Returns false if errorLike is not an instance of Error, because instances
   * can only be compatible if they're both error instances.
   *
   * @name compatibleInstance
   * @param {Error} thrown error
   * @param {Error|ErrorConstructor} errorLike object to compare against
   * @namespace Utils
   * @api public
   */

  function compatibleInstance(thrown, errorLike) {
    return errorLike instanceof Error && thrown === errorLike;
  }

  /**
   * ### .compatibleConstructor(thrown, errorLike)
   *
   * Checks if two constructors are compatible.
   * This function can receive either an error constructor or
   * an error instance as the `errorLike` argument.
   * Constructors are compatible if they're the same or if one is
   * an instance of another.
   *
   * @name compatibleConstructor
   * @param {Error} thrown error
   * @param {Error|ErrorConstructor} errorLike object to compare against
   * @namespace Utils
   * @api public
   */

  function compatibleConstructor(thrown, errorLike) {
    if (errorLike instanceof Error) {
      // If `errorLike` is an instance of any error we compare their constructors
      return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;
    } else if (errorLike.prototype instanceof Error || errorLike === Error) {
      // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly
      return thrown.constructor === errorLike || thrown instanceof errorLike;
    }

    return false;
  }

  /**
   * ### .compatibleMessage(thrown, errMatcher)
   *
   * Checks if an error's message is compatible with a matcher (String or RegExp).
   * If the message contains the String or passes the RegExp test,
   * it is considered compatible.
   *
   * @name compatibleMessage
   * @param {Error} thrown error
   * @param {String|RegExp} errMatcher to look for into the message
   * @namespace Utils
   * @api public
   */

  function compatibleMessage(thrown, errMatcher) {
    var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;
    if (errMatcher instanceof RegExp) {
      return errMatcher.test(comparisonString);
    } else if (typeof errMatcher === 'string') {
      return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers
    }

    return false;
  }

  /**
   * ### .getFunctionName(constructorFn)
   *
   * Returns the name of a function.
   * This also includes a polyfill function if `constructorFn.name` is not defined.
   *
   * @name getFunctionName
   * @param {Function} constructorFn
   * @namespace Utils
   * @api private
   */

  var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;
  function getFunctionName(constructorFn) {
    var name = '';
    if (typeof constructorFn.name === 'undefined') {
      // Here we run a polyfill if constructorFn.name is not defined
      var match = String(constructorFn).match(functionNameMatch);
      if (match) {
        name = match[1];
      }
    } else {
      name = constructorFn.name;
    }

    return name;
  }

  /**
   * ### .getConstructorName(errorLike)
   *
   * Gets the constructor name for an Error instance or constructor itself.
   *
   * @name getConstructorName
   * @param {Error|ErrorConstructor} errorLike
   * @namespace Utils
   * @api public
   */

  function getConstructorName(errorLike) {
    var constructorName = errorLike;
    if (errorLike instanceof Error) {
      constructorName = getFunctionName(errorLike.constructor);
    } else if (typeof errorLike === 'function') {
      // If `err` is not an instance of Error it is an error constructor itself or another function.
      // If we've got a common function we get its name, otherwise we may need to create a new instance
      // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.
      constructorName = getFunctionName(errorLike).trim() ||
          getFunctionName(new errorLike()); // eslint-disable-line new-cap
    }

    return constructorName;
  }

  /**
   * ### .getMessage(errorLike)
   *
   * Gets the error message from an error.
   * If `err` is a String itself, we return it.
   * If the error has no message, we return an empty string.
   *
   * @name getMessage
   * @param {Error|String} errorLike
   * @namespace Utils
   * @api public
   */

  function getMessage(errorLike) {
    var msg = '';
    if (errorLike && errorLike.message) {
      msg = errorLike.message;
    } else if (typeof errorLike === 'string') {
      msg = errorLike;
    }

    return msg;
  }

  var checkError = {
    compatibleInstance: compatibleInstance,
    compatibleConstructor: compatibleConstructor,
    compatibleMessage: compatibleMessage,
    getMessage: getMessage,
    getConstructorName: getConstructorName,
  };

  var chaiAsPromised = createCommonjsModule(function (module) {
  /* eslint-disable no-invalid-this */
  let checkError$$1 = checkError;

  module.exports = (chai$$1, utils) => {
      const Assertion = chai$$1.Assertion;
      const assert = chai$$1.assert;
      const proxify = utils.proxify;

      // If we are using a version of Chai that has checkError on it,
      // we want to use that version to be consistent. Otherwise, we use
      // what was passed to the factory.
      if (utils.checkError) {
          checkError$$1 = utils.checkError;
      }

      function isLegacyJQueryPromise(thenable) {
          // jQuery promises are Promises/A+-compatible since 3.0.0. jQuery 3.0.0 is also the first version
          // to define the catch method.
          return typeof thenable.catch !== "function" &&
                 typeof thenable.always === "function" &&
                 typeof thenable.done === "function" &&
                 typeof thenable.fail === "function" &&
                 typeof thenable.pipe === "function" &&
                 typeof thenable.progress === "function" &&
                 typeof thenable.state === "function";
      }

      function assertIsAboutPromise(assertion) {
          if (typeof assertion._obj.then !== "function") {
              throw new TypeError(utils.inspect(assertion._obj) + " is not a thenable.");
          }
          if (isLegacyJQueryPromise(assertion._obj)) {
              throw new TypeError("Chai as Promised is incompatible with thenables of jQuery<3.0.0, sorry! Please " +
                                  "upgrade jQuery or use another Promises/A+ compatible library (see " +
                                  "http://promisesaplus.com/).");
          }
      }

      function proxifyIfSupported(assertion) {
          return proxify === undefined ? assertion : proxify(assertion);
      }

      function method(name, asserter) {
          utils.addMethod(Assertion.prototype, name, function () {
              assertIsAboutPromise(this);
              return asserter.apply(this, arguments);
          });
      }

      function property(name, asserter) {
          utils.addProperty(Assertion.prototype, name, function () {
              assertIsAboutPromise(this);
              return proxifyIfSupported(asserter.apply(this, arguments));
          });
      }

      function doNotify(promise, done) {
          promise.then(() => done(), done);
      }

      // These are for clarity and to bypass Chai refusing to allow `undefined` as actual when used with `assert`.
      function assertIfNegated(assertion, message, extra) {
          assertion.assert(true, null, message, extra.expected, extra.actual);
      }

      function assertIfNotNegated(assertion, message, extra) {
          assertion.assert(false, message, null, extra.expected, extra.actual);
      }

      function getBasePromise(assertion) {
          // We need to chain subsequent asserters on top of ones in the chain already (consider
          // `eventually.have.property("foo").that.equals("bar")`), only running them after the existing ones pass.
          // So the first base-promise is `assertion._obj`, but after that we use the assertions themselves, i.e.
          // previously derived promises, to chain off of.
          return typeof assertion.then === "function" ? assertion : assertion._obj;
      }

      function getReasonName(reason) {
          return reason instanceof Error ? reason.toString() : checkError$$1.getConstructorName(reason);
      }

      // Grab these first, before we modify `Assertion.prototype`.

      const propertyNames = Object.getOwnPropertyNames(Assertion.prototype);

      const propertyDescs = {};
      for (const name of propertyNames) {
          propertyDescs[name] = Object.getOwnPropertyDescriptor(Assertion.prototype, name);
      }

      property("fulfilled", function () {
          const derivedPromise = getBasePromise(this).then(
              value => {
                  assertIfNegated(this,
                                  "expected promise not to be fulfilled but it was fulfilled with #{act}",
                                  { actual: value });
                  return value;
              },
              reason => {
                  assertIfNotNegated(this,
                                     "expected promise to be fulfilled but it was rejected with #{act}",
                                     { actual: getReasonName(reason) });
                  return reason;
              }
          );

          module.exports.transferPromiseness(this, derivedPromise);
          return this;
      });

      property("rejected", function () {
          const derivedPromise = getBasePromise(this).then(
              value => {
                  assertIfNotNegated(this,
                                     "expected promise to be rejected but it was fulfilled with #{act}",
                                     { actual: value });
                  return value;
              },
              reason => {
                  assertIfNegated(this,
                                  "expected promise not to be rejected but it was rejected with #{act}",
                                  { actual: getReasonName(reason) });

                  // Return the reason, transforming this into a fulfillment, to allow further assertions, e.g.
                  // `promise.should.be.rejected.and.eventually.equal("reason")`.
                  return reason;
              }
          );

          module.exports.transferPromiseness(this, derivedPromise);
          return this;
      });

      method("rejectedWith", function (errorLike, errMsgMatcher, message) {
          let errorLikeName = null;
          const negate = utils.flag(this, "negate") || false;

          // rejectedWith with that is called without arguments is
          // the same as a plain ".rejected" use.
          if (errorLike === undefined && errMsgMatcher === undefined &&
              message === undefined) {
              /* eslint-disable no-unused-expressions */
              return this.rejected;
              /* eslint-enable no-unused-expressions */
          }

          if (message !== undefined) {
              utils.flag(this, "message", message);
          }

          if (errorLike instanceof RegExp || typeof errorLike === "string") {
              errMsgMatcher = errorLike;
              errorLike = null;
          } else if (errorLike && errorLike instanceof Error) {
              errorLikeName = errorLike.toString();
          } else if (typeof errorLike === "function") {
              errorLikeName = checkError$$1.getConstructorName(errorLike);
          } else {
              errorLike = null;
          }
          const everyArgIsDefined = Boolean(errorLike && errMsgMatcher);

          let matcherRelation = "including";
          if (errMsgMatcher instanceof RegExp) {
              matcherRelation = "matching";
          }

          const derivedPromise = getBasePromise(this).then(
              value => {
                  let assertionMessage = null;
                  let expected = null;

                  if (errorLike) {
                      assertionMessage = "expected promise to be rejected with #{exp} but it was fulfilled with #{act}";
                      expected = errorLikeName;
                  } else if (errMsgMatcher) {
                      assertionMessage = `expected promise to be rejected with an error ${matcherRelation} #{exp} but ` +
                                         `it was fulfilled with #{act}`;
                      expected = errMsgMatcher;
                  }

                  assertIfNotNegated(this, assertionMessage, { expected, actual: value });
                  return value;
              },
              reason => {
                  const errorLikeCompatible = errorLike && (errorLike instanceof Error ?
                                                          checkError$$1.compatibleInstance(reason, errorLike) :
                                                          checkError$$1.compatibleConstructor(reason, errorLike));

                  const errMsgMatcherCompatible = errMsgMatcher && checkError$$1.compatibleMessage(reason, errMsgMatcher);

                  const reasonName = getReasonName(reason);

                  if (negate && everyArgIsDefined) {
                      if (errorLikeCompatible && errMsgMatcherCompatible) {
                          this.assert(true,
                                      null,
                                      "expected promise not to be rejected with #{exp} but it was rejected " +
                                      "with #{act}",
                                      errorLikeName,
                                      reasonName);
                      }
                  } else {
                      if (errorLike) {
                          this.assert(errorLikeCompatible,
                                      "expected promise to be rejected with #{exp} but it was rejected with #{act}",
                                      "expected promise not to be rejected with #{exp} but it was rejected " +
                                      "with #{act}",
                                      errorLikeName,
                                      reasonName);
                      }

                      if (errMsgMatcher) {
                          this.assert(errMsgMatcherCompatible,
                                      `expected promise to be rejected with an error ${matcherRelation} #{exp} but got ` +
                                      `#{act}`,
                                      `expected promise not to be rejected with an error ${matcherRelation} #{exp}`,
                                      errMsgMatcher,
                                      checkError$$1.getMessage(reason));
                      }
                  }

                  return reason;
              }
          );

          module.exports.transferPromiseness(this, derivedPromise);
          return this;
      });

      property("eventually", function () {
          utils.flag(this, "eventually", true);
          return this;
      });

      method("notify", function (done) {
          doNotify(getBasePromise(this), done);
          return this;
      });

      method("become", function (value, message) {
          return this.eventually.deep.equal(value, message);
      });

      // ### `eventually`

      // We need to be careful not to trigger any getters, thus `Object.getOwnPropertyDescriptor` usage.
      const methodNames = propertyNames.filter(name => {
          return name !== "assert" && typeof propertyDescs[name].value === "function";
      });

      methodNames.forEach(methodName => {
          Assertion.overwriteMethod(methodName, originalMethod => function () {
              return doAsserterAsyncAndAddThen(originalMethod, this, arguments);
          });
      });

      const getterNames = propertyNames.filter(name => {
          return name !== "_obj" && typeof propertyDescs[name].get === "function";
      });

      getterNames.forEach(getterName => {
          // Chainable methods are things like `an`, which can work both for `.should.be.an.instanceOf` and as
          // `should.be.an("object")`. We need to handle those specially.
          const isChainableMethod = Assertion.prototype.__methods.hasOwnProperty(getterName);

          if (isChainableMethod) {
              Assertion.overwriteChainableMethod(
                  getterName,
                  originalMethod => function () {
                      return doAsserterAsyncAndAddThen(originalMethod, this, arguments);
                  },
                  originalGetter => function () {
                      return doAsserterAsyncAndAddThen(originalGetter, this);
                  }
              );
          } else {
              Assertion.overwriteProperty(getterName, originalGetter => function () {
                  return proxifyIfSupported(doAsserterAsyncAndAddThen(originalGetter, this));
              });
          }
      });

      function doAsserterAsyncAndAddThen(asserter, assertion, args) {
          // Since we're intercepting all methods/properties, we need to just pass through if they don't want
          // `eventually`, or if we've already fulfilled the promise (see below).
          if (!utils.flag(assertion, "eventually")) {
              asserter.apply(assertion, args);
              return assertion;
          }

          const derivedPromise = getBasePromise(assertion).then(value => {
              // Set up the environment for the asserter to actually run: `_obj` should be the fulfillment value, and
              // now that we have the value, we're no longer in "eventually" mode, so we won't run any of this code,
              // just the base Chai code that we get to via the short-circuit above.
              assertion._obj = value;
              utils.flag(assertion, "eventually", false);

              return args ? module.exports.transformAsserterArgs(args) : args;
          }).then(newArgs => {
              asserter.apply(assertion, newArgs);

              // Because asserters, for example `property`, can change the value of `_obj` (i.e. change the "object"
              // flag), we need to communicate this value change to subsequent chained asserters. Since we build a
              // promise chain paralleling the asserter chain, we can use it to communicate such changes.
              return assertion._obj;
          });

          module.exports.transferPromiseness(assertion, derivedPromise);
          return assertion;
      }

      // ### Now use the `Assertion` framework to build an `assert` interface.
      const originalAssertMethods = Object.getOwnPropertyNames(assert).filter(propName => {
          return typeof assert[propName] === "function";
      });

      assert.isFulfilled = (promise, message) => (new Assertion(promise, message)).to.be.fulfilled;

      assert.isRejected = (promise, errorLike, errMsgMatcher, message) => {
          const assertion = new Assertion(promise, message);
          return assertion.to.be.rejectedWith(errorLike, errMsgMatcher, message);
      };

      assert.becomes = (promise, value, message) => assert.eventually.deepEqual(promise, value, message);

      assert.doesNotBecome = (promise, value, message) => assert.eventually.notDeepEqual(promise, value, message);

      assert.eventually = {};
      originalAssertMethods.forEach(assertMethodName => {
          assert.eventually[assertMethodName] = function (promise) {
              const otherArgs = Array.prototype.slice.call(arguments, 1);

              let customRejectionHandler;
              const message = arguments[assert[assertMethodName].length - 1];
              if (typeof message === "string") {
                  customRejectionHandler = reason => {
                      throw new chai$$1.AssertionError(`${message}\n\nOriginal reason: ${utils.inspect(reason)}`);
                  };
              }

              const returnedPromise = promise.then(
                  fulfillmentValue => assert[assertMethodName].apply(assert, [fulfillmentValue].concat(otherArgs)),
                  customRejectionHandler
              );

              returnedPromise.notify = done => {
                  doNotify(returnedPromise, done);
              };

              return returnedPromise;
          };
      });
  };

  module.exports.transferPromiseness = (assertion, promise) => {
      assertion.then = promise.then.bind(promise);
  };

  module.exports.transformAsserterArgs = values => values;
  });
  var chaiAsPromised_1 = chaiAsPromised.transferPromiseness;
  var chaiAsPromised_2 = chaiAsPromised.transformAsserterArgs;

  var $jscomp={scope:{},getGlobal:function(a){return "undefined"!=typeof window&&window===a?a:"undefined"!=typeof commonjsGlobal?commonjsGlobal:a}};$jscomp.global=$jscomp.getGlobal(commonjsGlobal);$jscomp.initSymbol=function(){$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol);$jscomp.initSymbol=function(){};};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(a){return "jscomp_symbol_"+a+$jscomp.symbolCounter_++};
  $jscomp.initSymbolIterator=function(){$jscomp.initSymbol();$jscomp.global.Symbol.iterator||($jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));$jscomp.initSymbolIterator=function(){};};$jscomp.makeIterator=function(a){$jscomp.initSymbolIterator();$jscomp.initSymbol();$jscomp.initSymbolIterator();var b=a[Symbol.iterator];if(b)return b.call(a);var c=0;return {next:function(){return c<a.length?{done:!1,value:a[c++]}:{done:!0}}}};
  $jscomp.arrayFromIterator=function(a){for(var b,c=[];!(b=a.next()).done;)c.push(b.value);return c};$jscomp.arrayFromIterable=function(a){return a instanceof Array?a:$jscomp.arrayFromIterator($jscomp.makeIterator(a))};$jscomp.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.prototype=new c;a.prototype.constructor=a;for(var d in b)if(Object.defineProperties){var e=Object.getOwnPropertyDescriptor(b,d);e&&Object.defineProperty(a,d,e);}else a[d]=b[d];};$jscomp.array=$jscomp.array||{};
  $jscomp.iteratorFromArray=function(a,b){$jscomp.initSymbolIterator();a instanceof String&&(a+="");var c=0,d={next:function(){if(c<a.length){var e=c++;return {value:b(e,a[e]),done:!1}}d.next=function(){return {done:!0,value:void 0}};return d.next()}};$jscomp.initSymbol();$jscomp.initSymbolIterator();d[Symbol.iterator]=function(){return d};return d};
  $jscomp.findInternal=function(a,b,c){a instanceof String&&(a=String(a));for(var d=a.length,e=0;e<d;e++){var f=a[e];if(b.call(c,f,e,a))return {i:e,v:f}}return {i:-1,v:void 0}};
  $jscomp.array.from=function(a,b,c){$jscomp.initSymbolIterator();b=null!=b?b:function(a){return a};var d=[];$jscomp.initSymbol();$jscomp.initSymbolIterator();var e=a[Symbol.iterator];"function"==typeof e&&(a=e.call(a));if("function"==typeof a.next)for(;!(e=a.next()).done;)d.push(b.call(c,e.value));else for(var e=a.length,f=0;f<e;f++)d.push(b.call(c,a[f]));return d};$jscomp.array.of=function(a){return $jscomp.array.from(arguments)};
  $jscomp.array.entries=function(){return $jscomp.iteratorFromArray(this,function(a,b){return [a,b]})};$jscomp.array.installHelper_=function(a,b){!Array.prototype[a]&&Object.defineProperties&&Object.defineProperty&&Object.defineProperty(Array.prototype,a,{configurable:!0,enumerable:!1,writable:!0,value:b});};$jscomp.array.entries$install=function(){$jscomp.array.installHelper_("entries",$jscomp.array.entries);};$jscomp.array.keys=function(){return $jscomp.iteratorFromArray(this,function(a){return a})};
  $jscomp.array.keys$install=function(){$jscomp.array.installHelper_("keys",$jscomp.array.keys);};$jscomp.array.values=function(){return $jscomp.iteratorFromArray(this,function(a,b){return b})};$jscomp.array.values$install=function(){$jscomp.array.installHelper_("values",$jscomp.array.values);};
  $jscomp.array.copyWithin=function(a,b,c){var d=this.length;a=Number(a);b=Number(b);c=Number(null!=c?c:d);if(a<b)for(c=Math.min(c,d);b<c;)b in this?this[a++]=this[b++]:(delete this[a++],b++);else for(c=Math.min(c,d+b-a),a+=c-b;c>b;)--c in this?this[--a]=this[c]:delete this[a];return this};$jscomp.array.copyWithin$install=function(){$jscomp.array.installHelper_("copyWithin",$jscomp.array.copyWithin);};
  $jscomp.array.fill=function(a,b,c){var d=this.length||0;0>b&&(b=Math.max(0,d+b));if(null==c||c>d)c=d;c=Number(c);0>c&&(c=Math.max(0,d+c));for(b=Number(b||0);b<c;b++)this[b]=a;return this};$jscomp.array.fill$install=function(){$jscomp.array.installHelper_("fill",$jscomp.array.fill);};$jscomp.array.find=function(a,b){return $jscomp.findInternal(this,a,b).v};$jscomp.array.find$install=function(){$jscomp.array.installHelper_("find",$jscomp.array.find);};
  $jscomp.array.findIndex=function(a,b){return $jscomp.findInternal(this,a,b).i};$jscomp.array.findIndex$install=function(){$jscomp.array.installHelper_("findIndex",$jscomp.array.findIndex);};$jscomp.ASSUME_NO_NATIVE_MAP=!1;
  $jscomp.Map$isConformant=function(){if($jscomp.ASSUME_NO_NATIVE_MAP)return !1;var a=$jscomp.global.Map;if(!a||!a.prototype.entries||"function"!=typeof Object.seal)return !1;try{var b=Object.seal({x:4}),c=new a($jscomp.makeIterator([[b,"s"]]));if("s"!=c.get(b)||1!=c.size||c.get({x:4})||c.set({x:4},"t")!=c||2!=c.size)return !1;var d=c.entries(),e=d.next();if(e.done||e.value[0]!=b||"s"!=e.value[1])return !1;e=d.next();return e.done||4!=e.value[0].x||"t"!=e.value[1]||!d.next().done?!1:!0}catch(f){return !1}};
  $jscomp.Map=function(a){this.data_={};this.head_=$jscomp.Map.createHead();this.size=0;if(a){a=$jscomp.makeIterator(a);for(var b;!(b=a.next()).done;)b=b.value,this.set(b[0],b[1]);}};
  $jscomp.Map.prototype.set=function(a,b){var c=$jscomp.Map.maybeGetEntry(this,a);c.list||(c.list=this.data_[c.id]=[]);c.entry?c.entry.value=b:(c.entry={next:this.head_,previous:this.head_.previous,head:this.head_,key:a,value:b},c.list.push(c.entry),this.head_.previous.next=c.entry,this.head_.previous=c.entry,this.size++);return this};
  $jscomp.Map.prototype["delete"]=function(a){a=$jscomp.Map.maybeGetEntry(this,a);return a.entry&&a.list?(a.list.splice(a.index,1),a.list.length||delete this.data_[a.id],a.entry.previous.next=a.entry.next,a.entry.next.previous=a.entry.previous,a.entry.head=null,this.size--,!0):!1};$jscomp.Map.prototype.clear=function(){this.data_={};this.head_=this.head_.previous=$jscomp.Map.createHead();this.size=0;};$jscomp.Map.prototype.has=function(a){return !!$jscomp.Map.maybeGetEntry(this,a).entry};
  $jscomp.Map.prototype.get=function(a){return (a=$jscomp.Map.maybeGetEntry(this,a).entry)&&a.value};$jscomp.Map.prototype.entries=function(){return $jscomp.Map.makeIterator_(this,function(a){return [a.key,a.value]})};$jscomp.Map.prototype.keys=function(){return $jscomp.Map.makeIterator_(this,function(a){return a.key})};$jscomp.Map.prototype.values=function(){return $jscomp.Map.makeIterator_(this,function(a){return a.value})};
  $jscomp.Map.prototype.forEach=function(a,b){for(var c=this.entries(),d;!(d=c.next()).done;)d=d.value,a.call(b,d[1],d[0],this);};$jscomp.Map.maybeGetEntry=function(a,b){var c=$jscomp.Map.getId(b),d=a.data_[c];if(d&&Object.prototype.hasOwnProperty.call(a.data_,c))for(var e=0;e<d.length;e++){var f=d[e];if(b!==b&&f.key!==f.key||b===f.key)return {id:c,list:d,index:e,entry:f}}return {id:c,list:d,index:-1,entry:void 0}};
  $jscomp.Map.makeIterator_=function(a,b){var c=a.head_,d={next:function(){if(c){for(;c.head!=a.head_;)c=c.previous;for(;c.next!=c.head;)return c=c.next,{done:!1,value:b(c)};c=null;}return {done:!0,value:void 0}}};$jscomp.initSymbol();$jscomp.initSymbolIterator();d[Symbol.iterator]=function(){return d};return d};$jscomp.Map.mapIndex_=0;$jscomp.Map.createHead=function(){var a={};return a.previous=a.next=a.head=a};
  $jscomp.Map.getId=function(a){if(!(a instanceof Object))return "p_"+a;if(!($jscomp.Map.idKey in a))try{$jscomp.Map.defineProperty(a,$jscomp.Map.idKey,{value:++$jscomp.Map.mapIndex_});}catch(b){}return $jscomp.Map.idKey in a?a[$jscomp.Map.idKey]:"o_ "+a};$jscomp.Map.defineProperty=Object.defineProperty?function(a,b,c){Object.defineProperty(a,b,{value:String(c)});}:function(a,b,c){a[b]=String(c);};$jscomp.Map.Entry=function(){};
  $jscomp.Map$install=function(){$jscomp.initSymbol();$jscomp.initSymbolIterator();$jscomp.Map$isConformant()?$jscomp.Map=$jscomp.global.Map:($jscomp.initSymbol(),$jscomp.initSymbolIterator(),$jscomp.Map.prototype[Symbol.iterator]=$jscomp.Map.prototype.entries,$jscomp.initSymbol(),$jscomp.Map.idKey=Symbol("map-id-key"),$jscomp.Map$install=function(){});};$jscomp.math=$jscomp.math||{};
  $jscomp.math.clz32=function(a){a=Number(a)>>>0;if(0===a)return 32;var b=0;0===(a&4294901760)&&(a<<=16,b+=16);0===(a&4278190080)&&(a<<=8,b+=8);0===(a&4026531840)&&(a<<=4,b+=4);0===(a&3221225472)&&(a<<=2,b+=2);0===(a&2147483648)&&b++;return b};$jscomp.math.imul=function(a,b){a=Number(a);b=Number(b);var c=a&65535,d=b&65535;return c*d+((a>>>16&65535)*d+c*(b>>>16&65535)<<16>>>0)|0};$jscomp.math.sign=function(a){a=Number(a);return 0===a||isNaN(a)?a:0<a?1:-1};
  $jscomp.math.log10=function(a){return Math.log(a)/Math.LN10};$jscomp.math.log2=function(a){return Math.log(a)/Math.LN2};$jscomp.math.log1p=function(a){a=Number(a);if(.25>a&&-.25<a){for(var b=a,c=1,d=a,e=0,f=1;e!=d;)b*=a,f*=-1,d=(e=d)+f*b/++c;return d}return Math.log(1+a)};$jscomp.math.expm1=function(a){a=Number(a);if(.25>a&&-.25<a){for(var b=a,c=1,d=a,e=0;e!=d;)b*=a/++c,d=(e=d)+b;return d}return Math.exp(a)-1};$jscomp.math.cosh=function(a){a=Number(a);return (Math.exp(a)+Math.exp(-a))/2};
  $jscomp.math.sinh=function(a){a=Number(a);return 0===a?a:(Math.exp(a)-Math.exp(-a))/2};$jscomp.math.tanh=function(a){a=Number(a);if(0===a)return a;var b=Math.exp(-2*Math.abs(a)),b=(1-b)/(1+b);return 0>a?-b:b};$jscomp.math.acosh=function(a){a=Number(a);return Math.log(a+Math.sqrt(a*a-1))};$jscomp.math.asinh=function(a){a=Number(a);if(0===a)return a;var b=Math.log(Math.abs(a)+Math.sqrt(a*a+1));return 0>a?-b:b};
  $jscomp.math.atanh=function(a){a=Number(a);return ($jscomp.math.log1p(a)-$jscomp.math.log1p(-a))/2};$jscomp.math.hypot=function(a,b,c){a=Number(a);b=Number(b);var d,e,f,g=Math.max(Math.abs(a),Math.abs(b));for(d=2;d<arguments.length;d++)g=Math.max(g,Math.abs(arguments[d]));if(1E100<g||1E-100>g){a/=g;b/=g;f=a*a+b*b;for(d=2;d<arguments.length;d++)e=Number(arguments[d])/g,f+=e*e;return Math.sqrt(f)*g}f=a*a+b*b;for(d=2;d<arguments.length;d++)e=Number(arguments[d]),f+=e*e;return Math.sqrt(f)};
  $jscomp.math.trunc=function(a){a=Number(a);if(isNaN(a)||Infinity===a||-Infinity===a||0===a)return a;var b=Math.floor(Math.abs(a));return 0>a?-b:b};$jscomp.math.cbrt=function(a){if(0===a)return a;a=Number(a);var b=Math.pow(Math.abs(a),1/3);return 0>a?-b:b};$jscomp.number=$jscomp.number||{};$jscomp.number.isFinite=function(a){return "number"!==typeof a?!1:!isNaN(a)&&Infinity!==a&&-Infinity!==a};$jscomp.number.isInteger=function(a){return $jscomp.number.isFinite(a)?a===Math.floor(a):!1};
  $jscomp.number.isNaN=function(a){return "number"===typeof a&&isNaN(a)};$jscomp.number.isSafeInteger=function(a){return $jscomp.number.isInteger(a)&&Math.abs(a)<=$jscomp.number.MAX_SAFE_INTEGER};$jscomp.number.EPSILON=function(){return Math.pow(2,-52)}();$jscomp.number.MAX_SAFE_INTEGER=function(){return 9007199254740991}();$jscomp.number.MIN_SAFE_INTEGER=function(){return -9007199254740991}();$jscomp.object=$jscomp.object||{};
  $jscomp.object.assign=function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(d)for(var e in d)Object.prototype.hasOwnProperty.call(d,e)&&(a[e]=d[e]);}return a};$jscomp.object.is=function(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b};$jscomp.ASSUME_NO_NATIVE_SET=!1;
  $jscomp.Set$isConformant=function(){if($jscomp.ASSUME_NO_NATIVE_SET)return !1;var a=$jscomp.global.Set;if(!a||!a.prototype.entries||"function"!=typeof Object.seal)return !1;try{var b=Object.seal({x:4}),c=new a($jscomp.makeIterator([b]));if(!c.has(b)||1!=c.size||c.add(b)!=c||1!=c.size||c.add({x:4})!=c||2!=c.size)return !1;var d=c.entries(),e=d.next();if(e.done||e.value[0]!=b||e.value[1]!=b)return !1;e=d.next();return e.done||e.value[0]==b||4!=e.value[0].x||e.value[1]!=e.value[0]?!1:d.next().done}catch(f){return !1}};
  $jscomp.Set=function(a){this.map_=new $jscomp.Map;if(a){a=$jscomp.makeIterator(a);for(var b;!(b=a.next()).done;)this.add(b.value);}this.size=this.map_.size;};$jscomp.Set.prototype.add=function(a){this.map_.set(a,a);this.size=this.map_.size;return this};$jscomp.Set.prototype["delete"]=function(a){a=this.map_["delete"](a);this.size=this.map_.size;return a};$jscomp.Set.prototype.clear=function(){this.map_.clear();this.size=0;};$jscomp.Set.prototype.has=function(a){return this.map_.has(a)};
  $jscomp.Set.prototype.entries=function(){return this.map_.entries()};$jscomp.Set.prototype.values=function(){return this.map_.values()};$jscomp.Set.prototype.forEach=function(a,b){var c=this;this.map_.forEach(function(d){return a.call(b,d,d,c)});};$jscomp.Set$install=function(){$jscomp.Map$install();$jscomp.Set$isConformant()?$jscomp.Set=$jscomp.global.Set:($jscomp.initSymbol(),$jscomp.initSymbolIterator(),$jscomp.Set.prototype[Symbol.iterator]=$jscomp.Set.prototype.values,$jscomp.Set$install=function(){});};
  $jscomp.string=$jscomp.string||{};$jscomp.checkStringArgs=function(a,b,c){if(null==a)throw new TypeError("The 'this' value for String.prototype."+c+" must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype."+c+" must not be a regular expression");return a+""};
  $jscomp.string.fromCodePoint=function(a){for(var b="",c=0;c<arguments.length;c++){var d=Number(arguments[c]);if(0>d||1114111<d||d!==Math.floor(d))throw new RangeError("invalid_code_point "+d);65535>=d?b+=String.fromCharCode(d):(d-=65536,b+=String.fromCharCode(d>>>10&1023|55296),b+=String.fromCharCode(d&1023|56320));}return b};
  $jscomp.string.repeat=function(a){var b=$jscomp.checkStringArgs(this,null,"repeat");if(0>a||1342177279<a)throw new RangeError("Invalid count value");a|=0;for(var c="";a;)if(a&1&&(c+=b),a>>>=1)b+=b;return c};$jscomp.string.repeat$install=function(){String.prototype.repeat||(String.prototype.repeat=$jscomp.string.repeat);};
  $jscomp.string.codePointAt=function(a){var b=$jscomp.checkStringArgs(this,null,"codePointAt"),c=b.length;a=Number(a)||0;if(0<=a&&a<c){a|=0;var d=b.charCodeAt(a);if(55296>d||56319<d||a+1===c)return d;a=b.charCodeAt(a+1);return 56320>a||57343<a?d:1024*(d-55296)+a+9216}};$jscomp.string.codePointAt$install=function(){String.prototype.codePointAt||(String.prototype.codePointAt=$jscomp.string.codePointAt);};
  $jscomp.string.includes=function(a,b){return -1!==$jscomp.checkStringArgs(this,a,"includes").indexOf(a,b||0)};$jscomp.string.includes$install=function(){String.prototype.includes||(String.prototype.includes=$jscomp.string.includes);};$jscomp.string.startsWith=function(a,b){var c=$jscomp.checkStringArgs(this,a,"startsWith");a+="";for(var d=c.length,e=a.length,f=Math.max(0,Math.min(b|0,c.length)),g=0;g<e&&f<d;)if(c[f++]!=a[g++])return !1;return g>=e};
  $jscomp.string.startsWith$install=function(){String.prototype.startsWith||(String.prototype.startsWith=$jscomp.string.startsWith);};$jscomp.string.endsWith=function(a,b){var c=$jscomp.checkStringArgs(this,a,"endsWith");a+="";void 0===b&&(b=c.length);for(var d=Math.max(0,Math.min(b|0,c.length)),e=a.length;0<e&&0<d;)if(c[--d]!=a[--e])return !1;return 0>=e};$jscomp.string.endsWith$install=function(){String.prototype.endsWith||(String.prototype.endsWith=$jscomp.string.endsWith);};
  var COMPILED$1=!0,goog=goog||{};goog.global=commonjsGlobal;goog.isDef=function(a){return void 0!==a};goog.exportPath_=function(a,b,c){a=a.split(".");c=c||goog.global;a[0]in c||!c.execScript||c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());)!a.length&&goog.isDef(b)?c[d]=b:c=c[d]?c[d]:c[d]={};};
  goog.define=function(a,b){var c=b;goog.exportPath_(a,c);};goog.DEBUG=!0;goog.LOCALE="en";goog.TRUSTED_SITE=!0;goog.STRICT_MODE_COMPATIBLE=!1;goog.DISALLOW_TEST_ONLY_CODE=!goog.DEBUG;
  goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;goog.provide=function(a){goog.constructNamespace_(a);};goog.constructNamespace_=function(a,b){goog.exportPath_(a,b);};goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
  goog.module=function(a){if(!goog.isString(a)||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInModuleLoader_())throw Error("Module "+a+" has been loaded incorrectly.");if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");goog.moduleLoaderState_.moduleName=a;};goog.module.get=function(a){return goog.module.getInternal_(a)};
  goog.module.getInternal_=function(a){};goog.moduleLoaderState_=null;goog.isInModuleLoader_=function(){return null!=goog.moduleLoaderState_};
  goog.module.declareLegacyNamespace=function(){goog.moduleLoaderState_.declareLegacyNamespace=!0;};
  goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||"",Error("Importing test-only code into non-debug environment"+(a?": "+a:"."));};goog.forwardDeclare=function(a){};goog.getObjectByName=function(a,b){for(var c=a.split("."),d=b||goog.global,e;e=c.shift();)if(goog.isDefAndNotNull(d[e]))d=d[e];else return null;return d};goog.globalize=function(a,b){var c=b||goog.global,d;for(d in a)c[d]=a[d];};goog.addDependency=function(a,b,c,d){if(goog.DEPENDENCIES_ENABLED){var e;a=a.replace(/\\/g,"/");for(var f=goog.dependencies_,g=0;e=b[g];g++)f.nameToPath[e]=a,f.pathIsModule[a]=!!d;for(d=0;b=c[d];d++)a in f.requires||(f.requires[a]={}),f.requires[a][b]=!0;}};
  goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a);};goog.require=function(a){};
  goog.basePath="";goog.nullFunction=function(){};goog.abstractMethod=function(){throw Error("unimplemented abstract method");};goog.addSingletonGetter=function(a){a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a};};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED$1;
  goog.DEPENDENCIES_ENABLED&&(goog.dependencies_={pathIsModule:{},nameToPath:{},requires:{},visited:{},written:{},deferred:{}},goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&"write"in a},goog.findBasePath_=function(){if(goog.isDef(goog.global.CLOSURE_BASE_PATH))goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_())for(var a=goog.global.document.getElementsByTagName("SCRIPT"),b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf("?"),d=-1==d?c.length:
  d;if("base.js"==c.substr(d-7,7)){goog.basePath=c.substr(0,d-7);break}}},goog.importScript_=function(a,b){(goog.global.CLOSURE_IMPORT_SCRIPT||goog.writeScriptTag_)(a,b)&&(goog.dependencies_.written[a]=!0);},goog.IS_OLD_IE_=!(goog.global.atob||!goog.global.document||!goog.global.document.all),goog.importModule_=function(a){goog.importScript_("",'goog.retrieveAndExecModule_("'+a+'");')&&(goog.dependencies_.written[a]=!0);},goog.queuedModules_=[],goog.wrapModule_=function(a,b){return goog.LOAD_MODULE_USING_EVAL&&
  goog.isDef(goog.global.JSON)?"goog.loadModule("+goog.global.JSON.stringify(b+"\n//# sourceURL="+a+"\n")+");":'goog.loadModule(function(exports) {"use strict";'+b+"\n;return exports});\n//# sourceURL="+a+"\n"},goog.loadQueuedModules_=function(){var a=goog.queuedModules_.length;if(0<a){var b=goog.queuedModules_;goog.queuedModules_=[];for(var c=0;c<a;c++)goog.maybeProcessDeferredPath_(b[c]);}},goog.maybeProcessDeferredDep_=function(a){goog.isDeferredModule_(a)&&goog.allDepsAreAvailable_(a)&&(a=goog.getPathFromDeps_(a),
  goog.maybeProcessDeferredPath_(goog.basePath+a));},goog.isDeferredModule_=function(a){return (a=goog.getPathFromDeps_(a))&&goog.dependencies_.pathIsModule[a]?goog.basePath+a in goog.dependencies_.deferred:!1},goog.allDepsAreAvailable_=function(a){if((a=goog.getPathFromDeps_(a))&&a in goog.dependencies_.requires)for(var b in goog.dependencies_.requires[a])if(!goog.isProvided_(b)&&!goog.isDeferredModule_(b))return !1;return !0},goog.maybeProcessDeferredPath_=function(a){if(a in goog.dependencies_.deferred){var b=
  goog.dependencies_.deferred[a];delete goog.dependencies_.deferred[a];goog.globalEval(b);}},goog.loadModuleFromUrl=function(a){goog.retrieveAndExecModule_(a);},goog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:void 0,declareLegacyNamespace:!1};var c;if(goog.isFunction(a))c=a.call(goog.global,{});else if(goog.isString(a))c=goog.loadModuleFromSource_.call(goog.global,a);else throw Error("Invalid module definition");var d=goog.moduleLoaderState_.moduleName;
  if(!goog.isString(d)||!d)throw Error('Invalid module name "'+d+'"');goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(d,c):goog.SEAL_MODULE_EXPORTS&&Object.seal&&Object.seal(c);goog.loadedModules_[d]=c;}finally{goog.moduleLoaderState_=b;}},goog.loadModuleFromSource_=function(a){eval(a);return {}},goog.writeScriptSrcNode_=function(a){goog.global.document.write('<script type="text/javascript" src="'+a+'">\x3c/script>');},goog.appendScriptSrcNode_=function(a){var b=goog.global.document,
  c=b.createElement("script");c.type="text/javascript";c.src=a;c.defer=!1;c.async=!1;b.head.appendChild(c);},goog.writeScriptTag_=function(a,b){if(goog.inHtmlDocument_()){var c=goog.global.document;if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&"complete"==c.readyState){if(/\bdeps.js$/.test(a))return !1;throw Error('Cannot write "'+a+'" after document load');}var d=goog.IS_OLD_IE_;void 0===b?d?(d=" onreadystatechange='goog.onScriptLoad_(this, "+ ++goog.lastNonModuleScriptIndex_+")' ",c.write('<script type="text/javascript" src="'+
  a+'"'+d+">\x3c/script>")):goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING?goog.appendScriptSrcNode_(a):goog.writeScriptSrcNode_(a):c.write('<script type="text/javascript">'+b+"\x3c/script>");return !0}return !1},goog.lastNonModuleScriptIndex_=0,goog.onScriptLoad_=function(a,b){"complete"==a.readyState&&goog.lastNonModuleScriptIndex_==b&&goog.loadQueuedModules_();return !0},goog.writeScripts_=function(a){function b(a){if(!(a in e.written||a in e.visited)){e.visited[a]=!0;if(a in e.requires)for(var f in e.requires[a])if(!goog.isProvided_(f))if(f in
  e.nameToPath)b(e.nameToPath[f]);else throw Error("Undefined nameToPath for "+f);a in d||(d[a]=!0,c.push(a));}}var c=[],d={},e=goog.dependencies_;b(a);for(a=0;a<c.length;a++){var f=c[a];goog.dependencies_.written[f]=!0;}var g=goog.moduleLoaderState_;goog.moduleLoaderState_=null;for(a=0;a<c.length;a++)if(f=c[a])e.pathIsModule[f]?goog.importModule_(goog.basePath+f):goog.importScript_(goog.basePath+f);else throw goog.moduleLoaderState_=g,Error("Undefined script input");goog.moduleLoaderState_=g;},goog.getPathFromDeps_=
  function(a){return a in goog.dependencies_.nameToPath?goog.dependencies_.nameToPath[a]:null},goog.findBasePath_(),goog.global.CLOSURE_NO_DEPS||goog.importScript_(goog.basePath+"deps.js"));goog.normalizePath_=function(a){a=a.split("/");for(var b=0;b<a.length;)"."==a[b]?a.splice(b,1):b&&".."==a[b]&&a[b-1]&&".."!=a[b-1]?a.splice(--b,2):b++;return a.join("/")};
  goog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);var b=new goog.global.XMLHttpRequest;b.open("get",a,!1);b.send();return b.responseText};
  goog.retrieveAndExecModule_=function(a){};
  goog.typeOf=function(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return "array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return "object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return "array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return "function"}else return "null";
  else if("function"==b&&"undefined"==typeof a.call)return "object";return b};goog.isNull=function(a){return null===a};goog.isDefAndNotNull=function(a){return null!=a};goog.isArray=function(a){return "array"==goog.typeOf(a)};goog.isArrayLike=function(a){var b=goog.typeOf(a);return "array"==b||"object"==b&&"number"==typeof a.length};goog.isDateLike=function(a){return goog.isObject(a)&&"function"==typeof a.getFullYear};goog.isString=function(a){return "string"==typeof a};
  goog.isBoolean=function(a){return "boolean"==typeof a};goog.isNumber=function(a){return "number"==typeof a};goog.isFunction=function(a){return "function"==goog.typeOf(a)};goog.isObject=function(a){var b=typeof a;return "object"==b&&null!=a||"function"==b};goog.getUid=function(a){return a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.hasUid=function(a){return !!a[goog.UID_PROPERTY_]};
  goog.removeUid=function(a){null!==a&&"removeAttribute"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_];}catch(b){}};goog.UID_PROPERTY_="closure_uid_"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.getHashCode=goog.getUid;goog.removeHashCode=goog.removeUid;goog.cloneObject=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if(a.clone)return a.clone();var b="array"==b?[]:{},c;for(c in a)b[c]=goog.cloneObject(a[c]);return b}return a};
  goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};goog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}};
  goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments)};goog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}};goog.mixin=function(a,b){for(var c in b)a[c]=b[c];};goog.now=goog.TRUSTED_SITE&&Date.now||function(){return +new Date};
  goog.globalEval=function(a){if(goog.global.execScript)goog.global.execScript(a,"JavaScript");else if(goog.global.eval){if(null==goog.evalWorksForGlobals_)if(goog.global.eval("var _evalTest_ = 1;"),"undefined"!=typeof goog.global._evalTest_){try{delete goog.global._evalTest_;}catch(d){}goog.evalWorksForGlobals_=!0;}else goog.evalWorksForGlobals_=!1;if(goog.evalWorksForGlobals_)goog.global.eval(a);else{var b=goog.global.document,c=b.createElement("SCRIPT");c.type="text/javascript";c.defer=!1;c.appendChild(b.createTextNode(a));
  b.body.appendChild(c);b.body.removeChild(c);}}else throw Error("goog.globalEval not available");};goog.evalWorksForGlobals_=null;goog.getCssName=function(a,b){var c=function(a){return goog.cssNameMapping_[a]||a},d=function(a){a=a.split("-");for(var b=[],d=0;d<a.length;d++)b.push(c(a[d]));return b.join("-")},d=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?c:d:function(a){return a};return b?a+"-"+d(b):d(a)};
  goog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b;};goog.getMsg=function(a,b){b&&(a=a.replace(/\{\$([^}]+)}/g,function(a,d){return null!=b&&d in b?b[d]:a}));return a};goog.getMsgWithFallback=function(a,b){return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,c);};goog.exportProperty=function(a,b,c){a[b]=c;};
  goog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(a,c,f){for(var g=Array(arguments.length-2),h=2;h<arguments.length;h++)g[h-2]=arguments[h];return b.prototype[c].apply(a,g)};};
  goog.base=function(a,b,c){var d=arguments.callee.caller;if(goog.STRICT_MODE_COMPATIBLE||goog.DEBUG&&!d)throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");if(d.superClass_){for(var e=Array(arguments.length-1),f=1;f<arguments.length;f++)e[f-1]=arguments[f];return d.superClass_.constructor.apply(a,e)}e=Array(arguments.length-2);for(f=2;f<arguments.length;f++)e[f-2]=arguments[f];for(var f=!1,g=a.constructor;g;g=
  g.superClass_&&g.superClass_.constructor)if(g.prototype[b]===d)f=!0;else if(f)return g.prototype[b].apply(a,e);if(a[b]===d)return a.constructor.prototype[b].apply(a,e);throw Error("goog.base called from a method of one name to a method of a different name");};goog.scope=function(a){a.call(goog.global);};goog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error("cannot instantiate an interface (no constructor defined).");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c};goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;
  goog.defineClass.createSealingConstructor_=function(a,b){if(goog.defineClass.SEAL_CLASS_INSTANCES&&Object.seal instanceof Function){if(b&&b.prototype&&b.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_])return a;var c=function(){var b=a.apply(this,arguments)||this;b[goog.UID_PROPERTY_]=b[goog.UID_PROPERTY_];this.constructor===c&&Object.seal(b);return b};return c}return a};goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
  goog.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++)c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);};goog.tagUnsealableClass=function(a){};goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_="goog_defineClass_legacy_unsealable";goog.dom={};goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};goog.debug={};goog.debug.Error=function(a){if(Error.captureStackTrace)Error.captureStackTrace(this,goog.debug.Error);else{var b=Error().stack;b&&(this.stack=b);}a&&(this.message=String(a));this.reportErrorToServer=!0;};goog.inherits(goog.debug.Error,Error);goog.debug.Error.prototype.name="CustomError";goog.string={};goog.string.DETECT_DOUBLE_ESCAPING=!1;goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;goog.string.Unicode={NBSP:"\u00a0"};goog.string.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};goog.string.endsWith=function(a,b){var c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};goog.string.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.caseInsensitiveCompare(b,a.substr(0,b.length))};
  goog.string.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.caseInsensitiveCompare(b,a.substr(a.length-b.length,b.length))};goog.string.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};goog.string.subs=function(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")};goog.string.collapseWhitespace=function(a){return a.replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"")};
  goog.string.isEmptyOrWhitespace=function(a){return /^[\s\xa0]*$/.test(a)};goog.string.isEmptyString=function(a){return 0==a.length};goog.string.isEmpty=goog.string.isEmptyOrWhitespace;goog.string.isEmptyOrWhitespaceSafe=function(a){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a))};goog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe;goog.string.isBreakingWhitespace=function(a){return !/[^\t\n\r ]/.test(a)};goog.string.isAlpha=function(a){return !/[^a-zA-Z]/.test(a)};
  goog.string.isNumeric=function(a){return !/[^0-9]/.test(a)};goog.string.isAlphaNumeric=function(a){return !/[^a-zA-Z0-9]/.test(a)};goog.string.isSpace=function(a){return " "==a};goog.string.isUnicodeChar=function(a){return 1==a.length&&" "<=a&&"~">=a||"\u0080"<=a&&"\ufffd">=a};goog.string.stripNewlines=function(a){return a.replace(/(\r\n|\r|\n)+/g," ")};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\r\n|\r|\n)/g,"\n")};
  goog.string.normalizeWhitespace=function(a){return a.replace(/\xa0|\s/g," ")};goog.string.normalizeSpaces=function(a){return a.replace(/\xa0|[ \t]+/g," ")};goog.string.collapseBreakingSpaces=function(a){return a.replace(/[\t\r\n ]+/g," ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g,"")};goog.string.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")};goog.string.trimLeft=function(a){return a.replace(/^[\s\xa0]+/,"")};
  goog.string.trimRight=function(a){return a.replace(/[\s\xa0]+$/,"")};goog.string.caseInsensitiveCompare=function(a,b){var c=String(a).toLowerCase(),d=String(b).toLowerCase();return c<d?-1:c==d?0:1};
  goog.string.numberAwareCompare_=function(a,b,c){if(a==b)return 0;if(!a)return -1;if(!b)return 1;for(var d=a.toLowerCase().match(c),e=b.toLowerCase().match(c),f=Math.min(d.length,e.length),g=0;g<f;g++){c=d[g];var h=e[g];if(c!=h)return a=parseInt(c,10),!isNaN(a)&&(b=parseInt(h,10),!isNaN(b)&&a-b)?a-b:c<h?-1:1}return d.length!=e.length?d.length-e.length:a<b?-1:1};goog.string.intAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\D+/g)};
  goog.string.floatAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\.\d+|\D+/g)};goog.string.numerateCompare=goog.string.floatAwareCompare;goog.string.urlEncode=function(a){return encodeURIComponent(String(a))};goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\+/g," "))};goog.string.newLineToBr=function(a,b){return a.replace(/(\r\n|\r|\n)/g,b?"<br />":"<br>")};
  goog.string.htmlEscape=function(a,b){if(b)a=a.replace(goog.string.AMP_RE_,"&amp;").replace(goog.string.LT_RE_,"&lt;").replace(goog.string.GT_RE_,"&gt;").replace(goog.string.QUOT_RE_,"&quot;").replace(goog.string.SINGLE_QUOTE_RE_,"&#39;").replace(goog.string.NULL_RE_,"&#0;"),goog.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(goog.string.E_RE_,"&#101;"));else{if(!goog.string.ALL_RE_.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(goog.string.AMP_RE_,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(goog.string.LT_RE_,
  "&lt;"));-1!=a.indexOf(">")&&(a=a.replace(goog.string.GT_RE_,"&gt;"));-1!=a.indexOf('"')&&(a=a.replace(goog.string.QUOT_RE_,"&quot;"));-1!=a.indexOf("'")&&(a=a.replace(goog.string.SINGLE_QUOTE_RE_,"&#39;"));-1!=a.indexOf("\x00")&&(a=a.replace(goog.string.NULL_RE_,"&#0;"));goog.string.DETECT_DOUBLE_ESCAPING&&-1!=a.indexOf("e")&&(a=a.replace(goog.string.E_RE_,"&#101;"));}return a};goog.string.AMP_RE_=/&/g;goog.string.LT_RE_=/</g;goog.string.GT_RE_=/>/g;goog.string.QUOT_RE_=/"/g;
  goog.string.SINGLE_QUOTE_RE_=/'/g;goog.string.NULL_RE_=/\x00/g;goog.string.E_RE_=/e/g;goog.string.ALL_RE_=goog.string.DETECT_DOUBLE_ESCAPING?/[\x00&<>"'e]/:/[\x00&<>"']/;goog.string.unescapeEntities=function(a){return goog.string.contains(a,"&")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a};
  goog.string.unescapeEntitiesWithDocument=function(a,b){return goog.string.contains(a,"&")?goog.string.unescapeEntitiesUsingDom_(a,b):a};
  goog.string.unescapeEntitiesUsingDom_=function(a,b){var c={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"'},d;d=b?b.createElement("div"):goog.global.document.createElement("div");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(a,b){var g=c[a];if(g)return g;if("#"==b.charAt(0)){var h=Number("0"+b.substr(1));isNaN(h)||(g=String.fromCharCode(h));}g||(d.innerHTML=a+" ",g=d.firstChild.nodeValue.slice(0,-1));return c[a]=g})};
  goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(a,c){switch(c){case "amp":return "&";case "lt":return "<";case "gt":return ">";case "quot":return '"';default:if("#"==c.charAt(0)){var d=Number("0"+c.substr(1));if(!isNaN(d))return String.fromCharCode(d)}return a}})};goog.string.HTML_ENTITY_PATTERN_=/&([^;\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g," &#160;"),b)};
  goog.string.preserveSpaces=function(a){return a.replace(/(^|[\n ]) /g,"$1"+goog.string.Unicode.NBSP)};goog.string.stripQuotes=function(a,b){for(var c=b.length,d=0;d<c;d++){var e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1)}return a};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+"...");c&&(a=goog.string.htmlEscape(a));return a};
  goog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d;a=a.substring(0,b-d)+"..."+a.substring(e);}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+"..."+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a};goog.string.specialEscapeChars_={"\x00":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\x0B",'"':'\\"',"\\":"\\\\","<":"<"};goog.string.jsEscapeCache_={"'":"\\'"};
  goog.string.quote=function(a){a=String(a);for(var b=['"'],c=0;c<a.length;c++){var d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d));}b.push('"');return b.join("")};goog.string.escapeString=function(a){for(var b=[],c=0;c<a.length;c++)b[c]=goog.string.escapeChar(a.charAt(c));return b.join("")};
  goog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];var b,c=a.charCodeAt(0);if(31<c&&127>c)b=a;else{if(256>c){if(b="\\x",16>c||256<c)b+="0";}else b="\\u",4096>c&&(b+="0");b+=c.toString(16).toUpperCase();}return goog.string.jsEscapeCache_[a]=b};goog.string.contains=function(a,b){return -1!=a.indexOf(b)};
  goog.string.caseInsensitiveContains=function(a,b){return goog.string.contains(a.toLowerCase(),b.toLowerCase())};goog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};goog.string.removeAt=function(a,b,c){var d=a;0<=b&&b<a.length&&0<c&&(d=a.substr(0,b)+a.substr(b+c,a.length-b-c));return d};goog.string.remove=function(a,b){var c=new RegExp(goog.string.regExpEscape(b),"");return a.replace(c,"")};
  goog.string.removeAll=function(a,b){var c=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(c,"")};goog.string.regExpEscape=function(a){return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")};goog.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};
  goog.string.padNumber=function(a,b,c){a=goog.isDef(c)?a.toFixed(c):String(a);c=a.indexOf(".");-1==c&&(c=a.length);return goog.string.repeat("0",Math.max(0,b-c))+a};goog.string.makeSafe=function(a){return null==a?"":String(a)};goog.string.buildString=function(a){return Array.prototype.join.call(arguments,"")};goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)};
  goog.string.compareVersions=function(a,b){for(var c=0,d=goog.string.trim(String(a)).split("."),e=goog.string.trim(String(b)).split("."),f=Math.max(d.length,e.length),g=0;0==c&&g<f;g++){var h=d[g]||"",k=e[g]||"",l=RegExp("(\\d*)(\\D*)","g"),p=RegExp("(\\d*)(\\D*)","g");do{var m=l.exec(h)||["","",""],n=p.exec(k)||["","",""];if(0==m[0].length&&0==n[0].length)break;var c=0==m[1].length?0:parseInt(m[1],10),q=0==n[1].length?0:parseInt(n[1],10),c=goog.string.compareElements_(c,q)||goog.string.compareElements_(0==
  m[2].length,0==n[2].length)||goog.string.compareElements_(m[2],n[2]);}while(0==c)}return c};goog.string.compareElements_=function(a,b){return a<b?-1:a>b?1:0};goog.string.hashCode=function(a){for(var b=0,c=0;c<a.length;++c)b=31*b+a.charCodeAt(c)>>>0;return b};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;goog.string.createUniqueString=function(){return "goog_"+goog.string.uniqueStringCounter_++};
  goog.string.toNumber=function(a){var b=Number(a);return 0==b&&goog.string.isEmptyOrWhitespace(a)?NaN:b};goog.string.isLowerCamelCase=function(a){return /^[a-z]+([A-Z][a-z]*)*$/.test(a)};goog.string.isUpperCamelCase=function(a){return /^([A-Z][a-z]*)+$/.test(a)};goog.string.toCamelCase=function(a){return String(a).replace(/\-([a-z])/g,function(a,c){return c.toUpperCase()})};goog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,"-$1").toLowerCase()};
  goog.string.toTitleCase=function(a,b){var c=goog.isString(b)?goog.string.regExpEscape(b):"\\s";return a.replace(new RegExp("(^"+(c?"|["+c+"]+":"")+")([a-z])","g"),function(a,b,c){return b+c.toUpperCase()})};goog.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.substr(1)).toLowerCase()};goog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return goog.isString(a)?/^\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};
  goog.string.splitLimit=function(a,b,c){a=a.split(b);for(var d=[];0<c&&a.length;)d.push(a.shift()),c--;a.length&&d.push(a.join(b));return d};goog.string.editDistance=function(a,b){var c=[],d=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var e=0;e<b.length+1;e++)c[e]=e;for(e=0;e<a.length;e++){d[0]=e+1;for(var f=0;f<b.length;f++)d[f+1]=Math.min(d[f]+1,c[f+1]+1,c[f]+Number(a[e]!=b[f]));for(f=0;f<c.length;f++)c[f]=d[f];}return d[b.length]};goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;goog.asserts.AssertionError=function(a,b){b.unshift(a);goog.debug.Error.call(this,goog.string.subs.apply(null,b));b.shift();this.messagePattern=a;};goog.inherits(goog.asserts.AssertionError,goog.debug.Error);goog.asserts.AssertionError.prototype.name="AssertionError";goog.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};goog.asserts.errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER;
  goog.asserts.doAssertFailure_=function(a,b,c,d){var e="Assertion failed";if(c)var e=e+(": "+c),f=d;else a&&(e+=": "+a,f=b);a=new goog.asserts.AssertionError(""+e,f||[]);goog.asserts.errorHandler_(a);};goog.asserts.setErrorHandler=function(a){goog.asserts.ENABLE_ASSERTS&&(goog.asserts.errorHandler_=a);};goog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&goog.asserts.doAssertFailure_("",null,b,Array.prototype.slice.call(arguments,2));return a};
  goog.asserts.fail=function(a,b){goog.asserts.ENABLE_ASSERTS&&goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1)));};goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isNumber(a)&&goog.asserts.doAssertFailure_("Expected number but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
  goog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isString(a)&&goog.asserts.doAssertFailure_("Expected string but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isFunction(a)&&goog.asserts.doAssertFailure_("Expected function but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
  goog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&goog.asserts.doAssertFailure_("Expected object but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isArray(a)&&goog.asserts.doAssertFailure_("Expected array but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
  goog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isBoolean(a)&&goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertElement=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT||goog.asserts.doAssertFailure_("Expected Element but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
  goog.asserts.assertInstanceof=function(a,b,c,d){!goog.asserts.ENABLE_ASSERTS||a instanceof b||goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.",[goog.asserts.getType_(b),goog.asserts.getType_(a)],c,Array.prototype.slice.call(arguments,3));return a};goog.asserts.assertObjectPrototypeIsIntact=function(){for(var a in Object.prototype)goog.asserts.fail(a+" should not be enumerable in Object.prototype.");};
  goog.asserts.getType_=function(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":typeof a};var jspb={Map:function(a,b){this.arr_=a;this.valueCtor_=b;this.map_={};this.arrClean=!0;0<this.arr_.length&&this.loadFromArray_();}};jspb.Map.prototype.loadFromArray_=function(){for(var a=0;a<this.arr_.length;a++){var b=this.arr_[a],c=b[0];this.map_[c.toString()]=new jspb.Map.Entry_(c,b[1]);}this.arrClean=!0;};
  jspb.Map.prototype.toArray=function(){if(this.arrClean){if(this.valueCtor_){var a=this.map_,b;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b)){var c=a[b].valueWrapper;c&&c.toArray();}}}else{this.arr_.length=0;a=this.stringKeys_();a.sort();for(b=0;b<a.length;b++){var d=this.map_[a[b]];(c=d.valueWrapper)&&c.toArray();this.arr_.push([d.key,d.value]);}this.arrClean=!0;}return this.arr_};
  jspb.Map.prototype.toObject=function(a,b){for(var c=this.toArray(),d=[],e=0;e<c.length;e++){var f=this.map_[c[e][0].toString()];this.wrapEntry_(f);var g=f.valueWrapper;g?(goog.asserts.assert(b),d.push([f.key,b(a,g)])):d.push([f.key,f.value]);}return d};jspb.Map.fromObject=function(a,b,c){b=new jspb.Map([],b);for(var d=0;d<a.length;d++){var e=a[d][0],f=c(a[d][1]);b.set(e,f);}return b};jspb.Map.ArrayIteratorIterable_=function(a){this.idx_=0;this.arr_=a;};
  jspb.Map.ArrayIteratorIterable_.prototype.next=function(){return this.idx_<this.arr_.length?{done:!1,value:this.arr_[this.idx_++]}:{done:!0,value:void 0}};$jscomp.initSymbol();"undefined"!=typeof Symbol&&($jscomp.initSymbol(),$jscomp.initSymbolIterator(),jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator]=function(){return this});jspb.Map.prototype.getLength=function(){return this.stringKeys_().length};jspb.Map.prototype.clear=function(){this.map_={};this.arrClean=!1;};
  jspb.Map.prototype.del=function(a){a=a.toString();var b=this.map_.hasOwnProperty(a);delete this.map_[a];this.arrClean=!1;return b};jspb.Map.prototype.getEntryList=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,d.value]);}return a};jspb.Map.prototype.entries=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,this.wrapEntry_(d)]);}return new jspb.Map.ArrayIteratorIterable_(a)};
  jspb.Map.prototype.keys=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.map_[b[c]].key);return new jspb.Map.ArrayIteratorIterable_(a)};jspb.Map.prototype.values=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.wrapEntry_(this.map_[b[c]]));return new jspb.Map.ArrayIteratorIterable_(a)};
  jspb.Map.prototype.forEach=function(a,b){var c=this.stringKeys_();c.sort();for(var d=0;d<c.length;d++){var e=this.map_[c[d]];a.call(b,this.wrapEntry_(e),e.key,this);}};jspb.Map.prototype.set=function(a,b){var c=new jspb.Map.Entry_(a);this.valueCtor_?(c.valueWrapper=b,c.value=b.toArray()):c.value=b;this.map_[a.toString()]=c;this.arrClean=!1;return this};jspb.Map.prototype.wrapEntry_=function(a){return this.valueCtor_?(a.valueWrapper||(a.valueWrapper=new this.valueCtor_(a.value)),a.valueWrapper):a.value};
  jspb.Map.prototype.get=function(a){if(a=this.map_[a.toString()])return this.wrapEntry_(a)};jspb.Map.prototype.has=function(a){return a.toString()in this.map_};jspb.Map.prototype.serializeBinary=function(a,b,c,d,e){var f=this.stringKeys_();f.sort();for(var g=0;g<f.length;g++){var h=this.map_[f[g]];b.beginSubMessage(a);c.call(b,1,h.key);this.valueCtor_?d.call(b,2,this.wrapEntry_(h),e):d.call(b,2,h.value);b.endSubMessage();}};
  jspb.Map.deserializeBinary=function(a,b,c,d,e,f){for(var g=void 0;b.nextField()&&!b.isEndGroup();){var h=b.getFieldNumber();1==h?f=c.call(b):2==h&&(a.valueCtor_?(goog.asserts.assert(e),g=new a.valueCtor_,d.call(b,g,e)):g=d.call(b));}goog.asserts.assert(void 0!=f);goog.asserts.assert(void 0!=g);a.set(f,g);};jspb.Map.prototype.stringKeys_=function(){var a=this.map_,b=[],c;for(c in a)Object.prototype.hasOwnProperty.call(a,c)&&b.push(c);return b};
  jspb.Map.Entry_=function(a,b){this.key=a;this.value=b;this.valueWrapper=void 0;};goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE;goog.array.ASSUME_NATIVE_FUNCTIONS=!1;goog.array.peek=function(a){return a[a.length-1]};goog.array.last=goog.array.peek;
  goog.array.indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(goog.isString(a))return goog.isString(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return -1};
  goog.array.lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==c?a.length-1:c)}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if(goog.isString(a))return goog.isString(b)&&1==b.length?a.lastIndexOf(b,c):-1;for(;0<=c;c--)if(c in a&&a[c]===b)return c;return -1};
  goog.array.forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(a,b,c){goog.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,c);}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a);};goog.array.forEachRight=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,d=d-1;0<=d;--d)d in e&&b.call(c,e[d],d,a);};
  goog.array.filter=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,g=goog.isString(a)?a.split(""):a,h=0;h<d;h++)if(h in g){var k=g[h];b.call(c,k,h,a)&&(e[f++]=k);}return e};
  goog.array.map=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=goog.isString(a)?a.split(""):a,g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e};
  goog.array.reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(a,b,c,d){goog.asserts.assert(null!=a.length);d&&(b=goog.bind(b,d));return Array.prototype.reduce.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEach(a,function(c,g){e=b.call(d,e,c,g,a);});return e};
  goog.array.reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(a,b,c,d){goog.asserts.assert(null!=a.length);goog.asserts.assert(null!=b);d&&(b=goog.bind(b,d));return Array.prototype.reduceRight.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEachRight(a,function(c,g){e=b.call(d,e,c,g,a);});return e};
  goog.array.some=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return !0;return !1};
  goog.array.every=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return !1;return !0};goog.array.count=function(a,b,c){var d=0;goog.array.forEach(a,function(a,f,g){b.call(c,a,f,g)&&++d;},c);return d};
  goog.array.find=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};goog.array.findIndex=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return -1};goog.array.findRight=function(a,b,c){b=goog.array.findIndexRight(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};
  goog.array.findIndexRight=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,d=d-1;0<=d;d--)if(d in e&&b.call(c,e[d],d,a))return d;return -1};goog.array.contains=function(a,b){return 0<=goog.array.indexOf(a,b)};goog.array.isEmpty=function(a){return 0==a.length};goog.array.clear=function(a){if(!goog.isArray(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0;};goog.array.insert=function(a,b){goog.array.contains(a,b)||a.push(b);};
  goog.array.insertAt=function(a,b,c){goog.array.splice(a,c,0,b);};goog.array.insertArrayAt=function(a,b,c){goog.partial(goog.array.splice,a,c,0).apply(null,b);};goog.array.insertBefore=function(a,b,c){var d;2==arguments.length||0>(d=goog.array.indexOf(a,c))?a.push(b):goog.array.insertAt(a,b,d);};goog.array.remove=function(a,b){var c=goog.array.indexOf(a,b),d;(d=0<=c)&&goog.array.removeAt(a,c);return d};
  goog.array.removeAt=function(a,b){goog.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length};goog.array.removeIf=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAllIf=function(a,b,c){var d=0;goog.array.forEachRight(a,function(e,f){b.call(c,e,f,a)&&goog.array.removeAt(a,f)&&d++;});return d};goog.array.concat=function(a){return Array.prototype.concat.apply(Array.prototype,arguments)};
  goog.array.join=function(a){return Array.prototype.concat.apply(Array.prototype,arguments)};goog.array.toArray=function(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return []};goog.array.clone=goog.array.toArray;goog.array.extend=function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(goog.isArrayLike(d)){var e=a.length||0,f=d.length||0;a.length=e+f;for(var g=0;g<f;g++)a[e+g]=d[g];}else a.push(d);}};
  goog.array.splice=function(a,b,c,d){goog.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,goog.array.slice(arguments,1))};goog.array.slice=function(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)};
  goog.array.removeDuplicates=function(a,b,c){b=b||a;var d=function(a){return goog.isObject(a)?"o"+goog.getUid(a):(typeof a).charAt(0)+a};c=c||d;for(var d={},e=0,f=0;f<a.length;){var g=a[f++],h=c(g);Object.prototype.hasOwnProperty.call(d,h)||(d[h]=!0,b[e++]=g);}b.length=e;};goog.array.binarySearch=function(a,b,c){return goog.array.binarySearch_(a,c||goog.array.defaultCompare,!1,b)};goog.array.binarySelect=function(a,b,c){return goog.array.binarySearch_(a,b,!0,void 0,c)};
  goog.array.binarySearch_=function(a,b,c,d,e){for(var f=0,g=a.length,h;f<g;){var k=f+g>>1,l;l=c?b.call(e,a[k],k,a):b(d,a[k]);0<l?f=k+1:(g=k,h=!l);}return h?f:~f};goog.array.sort=function(a,b){a.sort(b||goog.array.defaultCompare);};goog.array.stableSort=function(a,b){for(var c=0;c<a.length;c++)a[c]={index:c,value:a[c]};var d=b||goog.array.defaultCompare;goog.array.sort(a,function(a,b){return d(a.value,b.value)||a.index-b.index});for(c=0;c<a.length;c++)a[c]=a[c].value;};
  goog.array.sortByKey=function(a,b,c){var d=c||goog.array.defaultCompare;goog.array.sort(a,function(a,c){return d(b(a),b(c))});};goog.array.sortObjectsByKey=function(a,b,c){goog.array.sortByKey(a,function(a){return a[b]},c);};goog.array.isSorted=function(a,b,c){b=b||goog.array.defaultCompare;for(var d=1;d<a.length;d++){var e=b(a[d-1],a[d]);if(0<e||0==e&&c)return !1}return !0};
  goog.array.equals=function(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return !1;var d=a.length;c=c||goog.array.defaultCompareEquality;for(var e=0;e<d;e++)if(!c(a[e],b[e]))return !1;return !0};goog.array.compare3=function(a,b,c){c=c||goog.array.defaultCompare;for(var d=Math.min(a.length,b.length),e=0;e<d;e++){var f=c(a[e],b[e]);if(0!=f)return f}return goog.array.defaultCompare(a.length,b.length)};goog.array.defaultCompare=function(a,b){return a>b?1:a<b?-1:0};
  goog.array.inverseDefaultCompare=function(a,b){return -goog.array.defaultCompare(a,b)};goog.array.defaultCompareEquality=function(a,b){return a===b};goog.array.binaryInsert=function(a,b,c){c=goog.array.binarySearch(a,b,c);return 0>c?(goog.array.insertAt(a,b,-(c+1)),!0):!1};goog.array.binaryRemove=function(a,b,c){b=goog.array.binarySearch(a,b,c);return 0<=b?goog.array.removeAt(a,b):!1};
  goog.array.bucket=function(a,b,c){for(var d={},e=0;e<a.length;e++){var f=a[e],g=b.call(c,f,e,a);goog.isDef(g)&&(d[g]||(d[g]=[])).push(f);}return d};goog.array.toObject=function(a,b,c){var d={};goog.array.forEach(a,function(e,f){d[b.call(c,e,f,a)]=e;});return d};goog.array.range=function(a,b,c){var d=[],e=0,f=a;c=c||1;void 0!==b&&(e=a,f=b);if(0>c*(f-e))return [];if(0<c)for(a=e;a<f;a+=c)d.push(a);else for(a=e;a>f;a+=c)d.push(a);return d};
  goog.array.repeat=function(a,b){for(var c=[],d=0;d<b;d++)c[d]=a;return c};goog.array.flatten=function(a){for(var b=[],c=0;c<arguments.length;c++){var d=arguments[c];if(goog.isArray(d))for(var e=0;e<d.length;e+=8192)for(var f=goog.array.slice(d,e,e+8192),f=goog.array.flatten.apply(null,f),g=0;g<f.length;g++)b.push(f[g]);else b.push(d);}return b};
  goog.array.rotate=function(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a};goog.array.moveItem=function(a,b,c){goog.asserts.assert(0<=b&&b<a.length);goog.asserts.assert(0<=c&&c<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,c,0,b[0]);};
  goog.array.zip=function(a){if(!arguments.length)return [];for(var b=[],c=arguments[0].length,d=1;d<arguments.length;d++)arguments[d].length<c&&(c=arguments[d].length);for(d=0;d<c;d++){for(var e=[],f=0;f<arguments.length;f++)e.push(arguments[f][d]);b.push(e);}return b};goog.array.shuffle=function(a,b){for(var c=b||Math.random,d=a.length-1;0<d;d--){var e=Math.floor(c()*(d+1)),f=a[d];a[d]=a[e];a[e]=f;}};goog.array.copyByIndex=function(a,b){var c=[];goog.array.forEach(b,function(b){c.push(a[b]);});return c};goog.crypt={};goog.crypt.stringToByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){for(var e=a.charCodeAt(d);255<e;)b[c++]=e&255,e>>=8;b[c++]=e;}return b};goog.crypt.byteArrayToString=function(a){if(8192>=a.length)return String.fromCharCode.apply(null,a);for(var b="",c=0;c<a.length;c+=8192)var d=goog.array.slice(a,c,c+8192),b=b+String.fromCharCode.apply(null,d);return b};goog.crypt.byteArrayToHex=function(a){return goog.array.map(a,function(a){a=a.toString(16);return 1<a.length?a:"0"+a}).join("")};
  goog.crypt.hexToByteArray=function(a){goog.asserts.assert(0==a.length%2,"Key string length must be multiple of 2");for(var b=[],c=0;c<a.length;c+=2)b.push(parseInt(a.substring(c,c+2),16));return b};
  goog.crypt.stringToUtf8ByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(55296==(e&64512)&&d+1<a.length&&56320==(a.charCodeAt(d+1)&64512)?(e=65536+((e&1023)<<10)+(a.charCodeAt(++d)&1023),b[c++]=e>>18|240,b[c++]=e>>12&63|128):b[c++]=e>>12|224,b[c++]=e>>6&63|128),b[c++]=e&63|128);}return b};
  goog.crypt.utf8ByteArrayToString=function(a){for(var b=[],c=0,d=0;c<a.length;){var e=a[c++];if(128>e)b[d++]=String.fromCharCode(e);else if(191<e&&224>e){var f=a[c++];b[d++]=String.fromCharCode((e&31)<<6|f&63);}else if(239<e&&365>e){var f=a[c++],g=a[c++],h=a[c++],e=((e&7)<<18|(f&63)<<12|(g&63)<<6|h&63)-65536;b[d++]=String.fromCharCode(55296+(e>>10));b[d++]=String.fromCharCode(56320+(e&1023));}else f=a[c++],g=a[c++],b[d++]=String.fromCharCode((e&15)<<12|(f&63)<<6|g&63);}return b.join("")};
  goog.crypt.xorByteArray=function(a,b){goog.asserts.assert(a.length==b.length,"XOR array lengths must match");for(var c=[],d=0;d<a.length;d++)c.push(a[d]^b[d]);return c};goog.labs={};goog.labs.userAgent={};goog.labs.userAgent.util={};goog.labs.userAgent.util.getNativeUserAgentString_=function(){var a=goog.labs.userAgent.util.getNavigator_();return a&&(a=a.userAgent)?a:""};goog.labs.userAgent.util.getNavigator_=function(){return goog.global.navigator};goog.labs.userAgent.util.userAgent_=goog.labs.userAgent.util.getNativeUserAgentString_();goog.labs.userAgent.util.setUserAgent=function(a){goog.labs.userAgent.util.userAgent_=a||goog.labs.userAgent.util.getNativeUserAgentString_();};
  goog.labs.userAgent.util.getUserAgent=function(){return goog.labs.userAgent.util.userAgent_};goog.labs.userAgent.util.matchUserAgent=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.contains(b,a)};goog.labs.userAgent.util.matchUserAgentIgnoreCase=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.caseInsensitiveContains(b,a)};
  goog.labs.userAgent.util.extractVersionTuples=function(a){for(var b=RegExp("(\\w[\\w ]+)/([^\\s]+)\\s*(?:\\((.*?)\\))?","g"),c=[],d;d=b.exec(a);)c.push([d[1],d[2],d[3]||void 0]);return c};goog.labs.userAgent.platform={};goog.labs.userAgent.platform.isAndroid=function(){return goog.labs.userAgent.util.matchUserAgent("Android")};goog.labs.userAgent.platform.isIpod=function(){return goog.labs.userAgent.util.matchUserAgent("iPod")};goog.labs.userAgent.platform.isIphone=function(){return goog.labs.userAgent.util.matchUserAgent("iPhone")&&!goog.labs.userAgent.util.matchUserAgent("iPod")&&!goog.labs.userAgent.util.matchUserAgent("iPad")};goog.labs.userAgent.platform.isIpad=function(){return goog.labs.userAgent.util.matchUserAgent("iPad")};
  goog.labs.userAgent.platform.isIos=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpad()||goog.labs.userAgent.platform.isIpod()};goog.labs.userAgent.platform.isMacintosh=function(){return goog.labs.userAgent.util.matchUserAgent("Macintosh")};goog.labs.userAgent.platform.isLinux=function(){return goog.labs.userAgent.util.matchUserAgent("Linux")};goog.labs.userAgent.platform.isWindows=function(){return goog.labs.userAgent.util.matchUserAgent("Windows")};
  goog.labs.userAgent.platform.isChromeOS=function(){return goog.labs.userAgent.util.matchUserAgent("CrOS")};
  goog.labs.userAgent.platform.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent(),b="";goog.labs.userAgent.platform.isWindows()?(b=/Windows (?:NT|Phone) ([0-9.]+)/,b=(a=b.exec(a))?a[1]:"0.0"):goog.labs.userAgent.platform.isIos()?(b=/(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/,b=(a=b.exec(a))&&a[1].replace(/_/g,".")):goog.labs.userAgent.platform.isMacintosh()?(b=/Mac OS X ([0-9_.]+)/,b=(a=b.exec(a))?a[1].replace(/_/g,"."):"10"):goog.labs.userAgent.platform.isAndroid()?(b=/Android\s+([^\);]+)(\)|;)/,
  b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isChromeOS()&&(b=/(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/,b=(a=b.exec(a))&&a[1]);return b||""};goog.labs.userAgent.platform.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(),a)};goog.object={};goog.object.forEach=function(a,b,c){for(var d in a)b.call(c,a[d],d,a);};goog.object.filter=function(a,b,c){var d={},e;for(e in a)b.call(c,a[e],e,a)&&(d[e]=a[e]);return d};goog.object.map=function(a,b,c){var d={},e;for(e in a)d[e]=b.call(c,a[e],e,a);return d};goog.object.some=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return !0;return !1};goog.object.every=function(a,b,c){for(var d in a)if(!b.call(c,a[d],d,a))return !1;return !0};
  goog.object.getCount=function(a){var b=0,c;for(c in a)b++;return b};goog.object.getAnyKey=function(a){for(var b in a)return b};goog.object.getAnyValue=function(a){for(var b in a)return a[b]};goog.object.contains=function(a,b){return goog.object.containsValue(a,b)};goog.object.getValues=function(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b};goog.object.getKeys=function(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b};
  goog.object.getValueByKeys=function(a,b){for(var c=goog.isArrayLike(b),d=c?b:arguments,c=c?0:1;c<d.length&&(a=a[d[c]],goog.isDef(a));c++);return a};goog.object.containsKey=function(a,b){return null!==a&&b in a};goog.object.containsValue=function(a,b){for(var c in a)if(a[c]==b)return !0;return !1};goog.object.findKey=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d};goog.object.findValue=function(a,b,c){return (b=goog.object.findKey(a,b,c))&&a[b]};
  goog.object.isEmpty=function(a){for(var b in a)return !1;return !0};goog.object.clear=function(a){for(var b in a)delete a[b];};goog.object.remove=function(a,b){var c;(c=b in a)&&delete a[b];return c};goog.object.add=function(a,b,c){if(null!==a&&b in a)throw Error('The object already contains the key "'+b+'"');goog.object.set(a,b,c);};goog.object.get=function(a,b,c){return null!==a&&b in a?a[b]:c};goog.object.set=function(a,b,c){a[b]=c;};
  goog.object.setIfUndefined=function(a,b,c){return b in a?a[b]:a[b]=c};goog.object.setWithReturnValueIfNotSet=function(a,b,c){if(b in a)return a[b];c=c();return a[b]=c};goog.object.equals=function(a,b){for(var c in a)if(!(c in b)||a[c]!==b[c])return !1;for(c in b)if(!(c in a))return !1;return !0};goog.object.clone=function(a){var b={},c;for(c in a)b[c]=a[c];return b};
  goog.object.unsafeClone=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if(goog.isFunction(a.clone))return a.clone();var b="array"==b?[]:{},c;for(c in a)b[c]=goog.object.unsafeClone(a[c]);return b}return a};goog.object.transpose=function(a){var b={},c;for(c in a)b[a[c]]=c;return b};goog.object.PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
  goog.object.extend=function(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<goog.object.PROTOTYPE_FIELDS_.length;f++)c=goog.object.PROTOTYPE_FIELDS_[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}};
  goog.object.create=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.create.apply(null,arguments[0]);if(b%2)throw Error("Uneven number of arguments");for(var c={},d=0;d<b;d+=2)c[arguments[d]]=arguments[d+1];return c};goog.object.createSet=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.createSet.apply(null,arguments[0]);for(var c={},d=0;d<b;d++)c[arguments[d]]=!0;return c};
  goog.object.createImmutableView=function(a){var b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b};goog.object.isImmutableView=function(a){return !!Object.isFrozen&&Object.isFrozen(a)};goog.labs.userAgent.browser={};goog.labs.userAgent.browser.matchOpera_=function(){return goog.labs.userAgent.util.matchUserAgent("Opera")||goog.labs.userAgent.util.matchUserAgent("OPR")};goog.labs.userAgent.browser.matchIE_=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.browser.matchEdge_=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};goog.labs.userAgent.browser.matchFirefox_=function(){return goog.labs.userAgent.util.matchUserAgent("Firefox")};
  goog.labs.userAgent.browser.matchSafari_=function(){return goog.labs.userAgent.util.matchUserAgent("Safari")&&!(goog.labs.userAgent.browser.matchChrome_()||goog.labs.userAgent.browser.matchCoast_()||goog.labs.userAgent.browser.matchOpera_()||goog.labs.userAgent.browser.matchEdge_()||goog.labs.userAgent.browser.isSilk()||goog.labs.userAgent.util.matchUserAgent("Android"))};goog.labs.userAgent.browser.matchCoast_=function(){return goog.labs.userAgent.util.matchUserAgent("Coast")};
  goog.labs.userAgent.browser.matchIosWebview_=function(){return (goog.labs.userAgent.util.matchUserAgent("iPad")||goog.labs.userAgent.util.matchUserAgent("iPhone"))&&!goog.labs.userAgent.browser.matchSafari_()&&!goog.labs.userAgent.browser.matchChrome_()&&!goog.labs.userAgent.browser.matchCoast_()&&goog.labs.userAgent.util.matchUserAgent("AppleWebKit")};
  goog.labs.userAgent.browser.matchChrome_=function(){return (goog.labs.userAgent.util.matchUserAgent("Chrome")||goog.labs.userAgent.util.matchUserAgent("CriOS"))&&!goog.labs.userAgent.browser.matchOpera_()&&!goog.labs.userAgent.browser.matchEdge_()};goog.labs.userAgent.browser.matchAndroidBrowser_=function(){return goog.labs.userAgent.util.matchUserAgent("Android")&&!(goog.labs.userAgent.browser.isChrome()||goog.labs.userAgent.browser.isFirefox()||goog.labs.userAgent.browser.isOpera()||goog.labs.userAgent.browser.isSilk())};
  goog.labs.userAgent.browser.isOpera=goog.labs.userAgent.browser.matchOpera_;goog.labs.userAgent.browser.isIE=goog.labs.userAgent.browser.matchIE_;goog.labs.userAgent.browser.isEdge=goog.labs.userAgent.browser.matchEdge_;goog.labs.userAgent.browser.isFirefox=goog.labs.userAgent.browser.matchFirefox_;goog.labs.userAgent.browser.isSafari=goog.labs.userAgent.browser.matchSafari_;goog.labs.userAgent.browser.isCoast=goog.labs.userAgent.browser.matchCoast_;goog.labs.userAgent.browser.isIosWebview=goog.labs.userAgent.browser.matchIosWebview_;
  goog.labs.userAgent.browser.isChrome=goog.labs.userAgent.browser.matchChrome_;goog.labs.userAgent.browser.isAndroidBrowser=goog.labs.userAgent.browser.matchAndroidBrowser_;goog.labs.userAgent.browser.isSilk=function(){return goog.labs.userAgent.util.matchUserAgent("Silk")};
  goog.labs.userAgent.browser.getVersion=function(){function a(a){a=goog.array.find(a,d);return c[a]||""}var b=goog.labs.userAgent.util.getUserAgent();if(goog.labs.userAgent.browser.isIE())return goog.labs.userAgent.browser.getIEVersion_(b);var b=goog.labs.userAgent.util.extractVersionTuples(b),c={};goog.array.forEach(b,function(a){c[a[0]]=a[1];});var d=goog.partial(goog.object.containsKey,c);return goog.labs.userAgent.browser.isOpera()?a(["Version","Opera","OPR"]):goog.labs.userAgent.browser.isEdge()?
  a(["Edge"]):goog.labs.userAgent.browser.isChrome()?a(["Chrome","CriOS"]):(b=b[2])&&b[1]||""};goog.labs.userAgent.browser.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(),a)};
  goog.labs.userAgent.browser.getIEVersion_=function(a){var b=/rv: *([\d\.]*)/.exec(a);if(b&&b[1])return b[1];var b="",c=/MSIE +([\d\.]+)/.exec(a);if(c&&c[1])if(a=/Trident\/(\d.\d)/.exec(a),"7.0"==c[1])if(a&&a[1])switch(a[1]){case "4.0":b="8.0";break;case "5.0":b="9.0";break;case "6.0":b="10.0";break;case "7.0":b="11.0";}else b="7.0";else b=c[1];return b};goog.labs.userAgent.engine={};goog.labs.userAgent.engine.isPresto=function(){return goog.labs.userAgent.util.matchUserAgent("Presto")};goog.labs.userAgent.engine.isTrident=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.engine.isEdge=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};
  goog.labs.userAgent.engine.isWebKit=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit")&&!goog.labs.userAgent.engine.isEdge()};goog.labs.userAgent.engine.isGecko=function(){return goog.labs.userAgent.util.matchUserAgent("Gecko")&&!goog.labs.userAgent.engine.isWebKit()&&!goog.labs.userAgent.engine.isTrident()&&!goog.labs.userAgent.engine.isEdge()};
  goog.labs.userAgent.engine.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent();if(a){var a=goog.labs.userAgent.util.extractVersionTuples(a),b=goog.labs.userAgent.engine.getEngineTuple_(a);if(b)return "Gecko"==b[0]?goog.labs.userAgent.engine.getVersionForKey_(a,"Firefox"):b[1];var a=a[0],c;if(a&&(c=a[2])&&(c=/Trident\/([^\s;]+)/.exec(c)))return c[1]}return ""};
  goog.labs.userAgent.engine.getEngineTuple_=function(a){if(!goog.labs.userAgent.engine.isEdge())return a[1];for(var b=0;b<a.length;b++){var c=a[b];if("Edge"==c[0])return c}};goog.labs.userAgent.engine.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),a)};goog.labs.userAgent.engine.getVersionForKey_=function(a,b){var c=goog.array.find(a,function(a){return b==a[0]});return c&&c[1]||""};goog.userAgent={};goog.userAgent.ASSUME_IE=!1;goog.userAgent.ASSUME_EDGE=!1;goog.userAgent.ASSUME_GECKO=!1;goog.userAgent.ASSUME_WEBKIT=!1;goog.userAgent.ASSUME_MOBILE_WEBKIT=!1;goog.userAgent.ASSUME_OPERA=!1;goog.userAgent.ASSUME_ANY_VERSION=!1;goog.userAgent.BROWSER_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_GECKO||goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_OPERA;goog.userAgent.getUserAgentString=function(){return goog.labs.userAgent.util.getUserAgent()};
  goog.userAgent.getNavigator=function(){return goog.global.navigator||null};goog.userAgent.OPERA=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_OPERA:goog.labs.userAgent.browser.isOpera();goog.userAgent.IE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_IE:goog.labs.userAgent.browser.isIE();goog.userAgent.EDGE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_EDGE:goog.labs.userAgent.engine.isEdge();goog.userAgent.EDGE_OR_IE=goog.userAgent.EDGE||goog.userAgent.IE;
  goog.userAgent.GECKO=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_GECKO:goog.labs.userAgent.engine.isGecko();goog.userAgent.WEBKIT=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_MOBILE_WEBKIT:goog.labs.userAgent.engine.isWebKit();goog.userAgent.isMobile_=function(){return goog.userAgent.WEBKIT&&goog.labs.userAgent.util.matchUserAgent("Mobile")};goog.userAgent.MOBILE=goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.isMobile_();goog.userAgent.SAFARI=goog.userAgent.WEBKIT;
  goog.userAgent.determinePlatform_=function(){var a=goog.userAgent.getNavigator();return a&&a.platform||""};goog.userAgent.PLATFORM=goog.userAgent.determinePlatform_();goog.userAgent.ASSUME_MAC=!1;goog.userAgent.ASSUME_WINDOWS=!1;goog.userAgent.ASSUME_LINUX=!1;goog.userAgent.ASSUME_X11=!1;goog.userAgent.ASSUME_ANDROID=!1;goog.userAgent.ASSUME_IPHONE=!1;goog.userAgent.ASSUME_IPAD=!1;
  goog.userAgent.PLATFORM_KNOWN_=goog.userAgent.ASSUME_MAC||goog.userAgent.ASSUME_WINDOWS||goog.userAgent.ASSUME_LINUX||goog.userAgent.ASSUME_X11||goog.userAgent.ASSUME_ANDROID||goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD;goog.userAgent.MAC=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_MAC:goog.labs.userAgent.platform.isMacintosh();goog.userAgent.WINDOWS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_WINDOWS:goog.labs.userAgent.platform.isWindows();
  goog.userAgent.isLegacyLinux_=function(){return goog.labs.userAgent.platform.isLinux()||goog.labs.userAgent.platform.isChromeOS()};goog.userAgent.LINUX=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_LINUX:goog.userAgent.isLegacyLinux_();goog.userAgent.isX11_=function(){var a=goog.userAgent.getNavigator();return !!a&&goog.string.contains(a.appVersion||"","X11")};goog.userAgent.X11=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_X11:goog.userAgent.isX11_();
  goog.userAgent.ANDROID=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_ANDROID:goog.labs.userAgent.platform.isAndroid();goog.userAgent.IPHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE:goog.labs.userAgent.platform.isIphone();goog.userAgent.IPAD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();goog.userAgent.operaVersion_=function(){var a=goog.global.opera.version;try{return a()}catch(b){return a}};
  goog.userAgent.determineVersion_=function(){if(goog.userAgent.OPERA&&goog.global.opera)return goog.userAgent.operaVersion_();var a="",b=goog.userAgent.getVersionRegexResult_();b&&(a=b?b[1]:"");return goog.userAgent.IE&&(b=goog.userAgent.getDocumentMode_(),b>parseFloat(a))?String(b):a};
  goog.userAgent.getVersionRegexResult_=function(){var a=goog.userAgent.getUserAgentString();if(goog.userAgent.GECKO)return /rv\:([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.EDGE)return /Edge\/([\d\.]+)/.exec(a);if(goog.userAgent.IE)return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.WEBKIT)return /WebKit\/(\S+)/.exec(a)};goog.userAgent.getDocumentMode_=function(){var a=goog.global.document;return a?a.documentMode:void 0};goog.userAgent.VERSION=goog.userAgent.determineVersion_();
  goog.userAgent.compare=function(a,b){return goog.string.compareVersions(a,b)};goog.userAgent.isVersionOrHigherCache_={};goog.userAgent.isVersionOrHigher=function(a){return goog.userAgent.ASSUME_ANY_VERSION||goog.userAgent.isVersionOrHigherCache_[a]||(goog.userAgent.isVersionOrHigherCache_[a]=0<=goog.string.compareVersions(goog.userAgent.VERSION,a))};goog.userAgent.isVersion=goog.userAgent.isVersionOrHigher;
  goog.userAgent.isDocumentModeOrHigher=function(a){return Number(goog.userAgent.DOCUMENT_MODE)>=a};goog.userAgent.isDocumentMode=goog.userAgent.isDocumentModeOrHigher;goog.userAgent.DOCUMENT_MODE=function(){var a=goog.global.document,b=goog.userAgent.getDocumentMode_();return a&&goog.userAgent.IE?b||("CSS1Compat"==a.compatMode?parseInt(goog.userAgent.VERSION,10):5):void 0}();goog.userAgent.product={};goog.userAgent.product.ASSUME_FIREFOX=!1;goog.userAgent.product.ASSUME_IPHONE=!1;goog.userAgent.product.ASSUME_IPAD=!1;goog.userAgent.product.ASSUME_ANDROID=!1;goog.userAgent.product.ASSUME_CHROME=!1;goog.userAgent.product.ASSUME_SAFARI=!1;
  goog.userAgent.product.PRODUCT_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_OPERA||goog.userAgent.product.ASSUME_FIREFOX||goog.userAgent.product.ASSUME_IPHONE||goog.userAgent.product.ASSUME_IPAD||goog.userAgent.product.ASSUME_ANDROID||goog.userAgent.product.ASSUME_CHROME||goog.userAgent.product.ASSUME_SAFARI;goog.userAgent.product.OPERA=goog.userAgent.OPERA;goog.userAgent.product.IE=goog.userAgent.IE;goog.userAgent.product.EDGE=goog.userAgent.EDGE;
  goog.userAgent.product.FIREFOX=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_FIREFOX:goog.labs.userAgent.browser.isFirefox();goog.userAgent.product.isIphoneOrIpod_=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpod()};goog.userAgent.product.IPHONE=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPHONE:goog.userAgent.product.isIphoneOrIpod_();
  goog.userAgent.product.IPAD=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();goog.userAgent.product.ANDROID=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_ANDROID:goog.labs.userAgent.browser.isAndroidBrowser();goog.userAgent.product.CHROME=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_CHROME:goog.labs.userAgent.browser.isChrome();
  goog.userAgent.product.isSafariDesktop_=function(){return goog.labs.userAgent.browser.isSafari()&&!goog.labs.userAgent.platform.isIos()};goog.userAgent.product.SAFARI=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_SAFARI:goog.userAgent.product.isSafariDesktop_();goog.crypt.base64={};goog.crypt.base64.byteToCharMap_=null;goog.crypt.base64.charToByteMap_=null;goog.crypt.base64.byteToCharMapWebSafe_=null;goog.crypt.base64.ENCODED_VALS_BASE="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";goog.crypt.base64.ENCODED_VALS=goog.crypt.base64.ENCODED_VALS_BASE+"+/=";goog.crypt.base64.ENCODED_VALS_WEBSAFE=goog.crypt.base64.ENCODED_VALS_BASE+"-_.";
  goog.crypt.base64.ASSUME_NATIVE_SUPPORT_=goog.userAgent.GECKO||goog.userAgent.WEBKIT&&!goog.userAgent.product.SAFARI||goog.userAgent.OPERA;goog.crypt.base64.HAS_NATIVE_ENCODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||"function"==typeof goog.global.btoa;goog.crypt.base64.HAS_NATIVE_DECODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||!goog.userAgent.product.SAFARI&&!goog.userAgent.IE&&"function"==typeof goog.global.atob;
  goog.crypt.base64.encodeByteArray=function(a,b){goog.asserts.assert(goog.isArrayLike(a),"encodeByteArray takes an array as a parameter");goog.crypt.base64.init_();for(var c=b?goog.crypt.base64.byteToCharMapWebSafe_:goog.crypt.base64.byteToCharMap_,d=[],e=0;e<a.length;e+=3){var f=a[e],g=e+1<a.length,h=g?a[e+1]:0,k=e+2<a.length,l=k?a[e+2]:0,p=f>>2,f=(f&3)<<4|h>>4,h=(h&15)<<2|l>>6,l=l&63;k||(l=64,g||(h=64));d.push(c[p],c[f],c[h],c[l]);}return d.join("")};
  goog.crypt.base64.encodeString=function(a,b){return goog.crypt.base64.HAS_NATIVE_ENCODE_&&!b?goog.global.btoa(a):goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a),b)};goog.crypt.base64.decodeString=function(a,b){if(goog.crypt.base64.HAS_NATIVE_DECODE_&&!b)return goog.global.atob(a);var c="";goog.crypt.base64.decodeStringInternal_(a,function(a){c+=String.fromCharCode(a);});return c};
  goog.crypt.base64.decodeStringToByteArray=function(a,b){var c=[];goog.crypt.base64.decodeStringInternal_(a,function(a){c.push(a);});return c};goog.crypt.base64.decodeStringToUint8Array=function(a){goog.asserts.assert(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher("10"),"Browser does not support typed arrays");var b=new Uint8Array(Math.ceil(3*a.length/4)),c=0;goog.crypt.base64.decodeStringInternal_(a,function(a){b[c++]=a;});return b.subarray(0,c)};
  goog.crypt.base64.decodeStringInternal_=function(a,b){function c(b){for(;d<a.length;){var c=a.charAt(d++),e=goog.crypt.base64.charToByteMap_[c];if(null!=e)return e;if(!goog.string.isEmptyOrWhitespace(c))throw Error("Unknown base64 encoding at char: "+c);}return b}goog.crypt.base64.init_();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h));}};
  goog.crypt.base64.init_=function(){if(!goog.crypt.base64.byteToCharMap_){goog.crypt.base64.byteToCharMap_={};goog.crypt.base64.charToByteMap_={};goog.crypt.base64.byteToCharMapWebSafe_={};for(var a=0;a<goog.crypt.base64.ENCODED_VALS.length;a++)goog.crypt.base64.byteToCharMap_[a]=goog.crypt.base64.ENCODED_VALS.charAt(a),goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[a]]=a,goog.crypt.base64.byteToCharMapWebSafe_[a]=goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(a),a>=goog.crypt.base64.ENCODED_VALS_BASE.length&&
  (goog.crypt.base64.charToByteMap_[goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(a)]=a);}};jspb.ExtensionFieldInfo=function(a,b,c,d,e){this.fieldIndex=a;this.fieldName=b;this.ctor=c;this.toObjectFn=d;this.isRepeated=e;};jspb.ExtensionFieldBinaryInfo=function(a,b,c,d,e,f){this.fieldInfo=a;this.binaryReaderFn=b;this.binaryWriterFn=c;this.binaryMessageSerializeFn=d;this.binaryMessageDeserializeFn=e;this.isPacked=f;};jspb.ExtensionFieldInfo.prototype.isMessageType=function(){return !!this.ctor};jspb.Message=function(){};jspb.Message.GENERATE_TO_OBJECT=!0;jspb.Message.GENERATE_FROM_OBJECT=!goog.DISALLOW_TEST_ONLY_CODE;
  jspb.Message.GENERATE_TO_STRING=!0;jspb.Message.ASSUME_LOCAL_ARRAYS=!1;jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS=!0;jspb.Message.SUPPORTS_UINT8ARRAY_="function"==typeof Uint8Array;jspb.Message.prototype.getJsPbMessageId=function(){return this.messageId_};jspb.Message.getIndex_=function(a,b){return b+a.arrayIndexOffset_};jspb.Message.getFieldNumber_=function(a,b){return b-a.arrayIndexOffset_};
  jspb.Message.initialize=function(a,b,c,d,e,f){a.wrappers_=null;b||(b=c?[c]:[]);a.messageId_=c?String(c):void 0;a.arrayIndexOffset_=0===c?-1:0;a.array=b;jspb.Message.initPivotAndExtensionObject_(a,d);a.convertedFloatingPointFields_={};jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS||(a.repeatedFields=e);if(e)for(b=0;b<e.length;b++)c=e[b],c<a.pivot_?(c=jspb.Message.getIndex_(a,c),a.array[c]=a.array[c]||jspb.Message.EMPTY_LIST_SENTINEL_):(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[c]=
  a.extensionObject_[c]||jspb.Message.EMPTY_LIST_SENTINEL_);if(f&&f.length)for(b=0;b<f.length;b++)jspb.Message.computeOneofCase(a,f[b]);};jspb.Message.EMPTY_LIST_SENTINEL_=goog.DEBUG&&Object.freeze?Object.freeze([]):[];jspb.Message.isArray_=function(a){return jspb.Message.ASSUME_LOCAL_ARRAYS?a instanceof Array:goog.isArray(a)};
  jspb.Message.initPivotAndExtensionObject_=function(a,b){if(a.array.length){var c=a.array.length-1,d=a.array[c];if(d&&"object"==typeof d&&!jspb.Message.isArray_(d)&&!(jspb.Message.SUPPORTS_UINT8ARRAY_&&d instanceof Uint8Array)){a.pivot_=jspb.Message.getFieldNumber_(a,c);a.extensionObject_=d;return}}-1<b?(a.pivot_=b,a.extensionObject_=null):a.pivot_=Number.MAX_VALUE;};
  jspb.Message.maybeInitEmptyExtensionObject_=function(a){var b=jspb.Message.getIndex_(a,a.pivot_);a.array[b]||(a.extensionObject_=a.array[b]={});};jspb.Message.toObjectList=function(a,b,c){for(var d=[],e=0;e<a.length;e++)d[e]=b.call(a[e],c,a[e]);return d};
  jspb.Message.toObjectExtension=function(a,b,c,d,e){for(var f in c){var g=c[f],h=d.call(a,g);if(null!=h){for(var k in g.fieldName)if(g.fieldName.hasOwnProperty(k))break;b[k]=g.toObjectFn?g.isRepeated?jspb.Message.toObjectList(h,g.toObjectFn,e):g.toObjectFn(e,h):h;}}};
  jspb.Message.serializeBinaryExtensions=function(a,b,c,d){for(var e in c){var f=c[e],g=f.fieldInfo;if(!f.binaryWriterFn)throw Error("Message extension present that was generated without binary serialization support");var h=d.call(a,g);if(null!=h)if(g.isMessageType())if(f.binaryMessageSerializeFn)f.binaryWriterFn.call(b,g.fieldIndex,h,f.binaryMessageSerializeFn);else throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");
  else f.binaryWriterFn.call(b,g.fieldIndex,h);}};jspb.Message.readBinaryExtension=function(a,b,c,d,e){var f=c[b.getFieldNumber()];if(f){c=f.fieldInfo;if(!f.binaryReaderFn)throw Error("Deserializing extension whose generated code does not support binary format");var g;c.isMessageType()?(g=new c.ctor,f.binaryReaderFn.call(b,g,f.binaryMessageDeserializeFn)):g=f.binaryReaderFn.call(b);c.isRepeated&&!f.isPacked?(b=d.call(a,c))?b.push(g):e.call(a,c,[g]):e.call(a,c,g);}else b.skipField();};
  jspb.Message.getField=function(a,b){if(b<a.pivot_){var c=jspb.Message.getIndex_(a,b),d=a.array[c];return d===jspb.Message.EMPTY_LIST_SENTINEL_?a.array[c]=[]:d}if(a.extensionObject_)return d=a.extensionObject_[b],d===jspb.Message.EMPTY_LIST_SENTINEL_?a.extensionObject_[b]=[]:d};
  jspb.Message.getRepeatedField=function(a,b){if(b<a.pivot_){var c=jspb.Message.getIndex_(a,b),d=a.array[c];return d===jspb.Message.EMPTY_LIST_SENTINEL_?a.array[c]=[]:d}d=a.extensionObject_[b];return d===jspb.Message.EMPTY_LIST_SENTINEL_?a.extensionObject_[b]=[]:d};jspb.Message.getOptionalFloatingPointField=function(a,b){var c=jspb.Message.getField(a,b);return null==c?c:+c};
  jspb.Message.getRepeatedFloatingPointField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedFloatingPointFields_||(a.convertedFloatingPointFields_={});if(!a.convertedFloatingPointFields_[b]){for(var d=0;d<c.length;d++)c[d]=+c[d];a.convertedFloatingPointFields_[b]=!0;}return c};
  jspb.Message.bytesAsB64=function(a){if(null==a||goog.isString(a))return a;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return goog.crypt.base64.encodeByteArray(a);goog.asserts.fail("Cannot coerce to b64 string: "+goog.typeOf(a));return null};jspb.Message.bytesAsU8=function(a){if(null==a||a instanceof Uint8Array)return a;if(goog.isString(a))return goog.crypt.base64.decodeStringToUint8Array(a);goog.asserts.fail("Cannot coerce to Uint8Array: "+goog.typeOf(a));return null};
  jspb.Message.bytesListAsB64=function(a){jspb.Message.assertConsistentTypes_(a);return !a.length||goog.isString(a[0])?a:goog.array.map(a,jspb.Message.bytesAsB64)};jspb.Message.bytesListAsU8=function(a){jspb.Message.assertConsistentTypes_(a);return !a.length||a[0]instanceof Uint8Array?a:goog.array.map(a,jspb.Message.bytesAsU8)};
  jspb.Message.assertConsistentTypes_=function(a){if(goog.DEBUG&&a&&1<a.length){var b=goog.typeOf(a[0]);goog.array.forEach(a,function(a){goog.typeOf(a)!=b&&goog.asserts.fail("Inconsistent type in JSPB repeated field array. Got "+goog.typeOf(a)+" expected "+b);});}};jspb.Message.getFieldWithDefault=function(a,b,c){a=jspb.Message.getField(a,b);return null==a?c:a};jspb.Message.getFieldProto3=jspb.Message.getFieldWithDefault;
  jspb.Message.getMapField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(b in a.wrappers_)return a.wrappers_[b];if(!c)return c=jspb.Message.getField(a,b),c||(c=[],jspb.Message.setField(a,b,c)),a.wrappers_[b]=new jspb.Map(c,d)};jspb.Message.setField=function(a,b,c){b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=c:(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[b]=c);};jspb.Message.setProto3IntField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,0);};
  jspb.Message.setProto3StringIntField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,"0");};jspb.Message.setProto3FloatField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,0);};jspb.Message.setProto3BooleanField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,!1);};jspb.Message.setProto3StringField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,"");};jspb.Message.setProto3BytesField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,"");};
  jspb.Message.setProto3EnumField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,0);};jspb.Message.setFieldIgnoringDefault_=function(a,b,c,d){c!=d?jspb.Message.setField(a,b,c):a.array[jspb.Message.getIndex_(a,b)]=null;};jspb.Message.addToRepeatedField=function(a,b,c,d){a=jspb.Message.getRepeatedField(a,b);void 0!=d?a.splice(d,0,c):a.push(c);};
  jspb.Message.setOneofField=function(a,b,c,d){(c=jspb.Message.computeOneofCase(a,c))&&c!==b&&void 0!==d&&(a.wrappers_&&c in a.wrappers_&&(a.wrappers_[c]=void 0),jspb.Message.setField(a,c,void 0));jspb.Message.setField(a,b,d);};jspb.Message.computeOneofCase=function(a,b){for(var c,d,e=0;e<b.length;e++){var f=b[e],g=jspb.Message.getField(a,f);null!=g&&(c=f,d=g,jspb.Message.setField(a,f,void 0));}return c?(jspb.Message.setField(a,c,d),c):0};
  jspb.Message.getWrapperField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){var e=jspb.Message.getField(a,c);if(d||e)a.wrappers_[c]=new b(e);}return a.wrappers_[c]};jspb.Message.getRepeatedWrapperField=function(a,b,c){jspb.Message.wrapRepeatedField_(a,b,c);b=a.wrappers_[c];b==jspb.Message.EMPTY_LIST_SENTINEL_&&(b=a.wrappers_[c]=[]);return b};
  jspb.Message.wrapRepeatedField_=function(a,b,c){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){for(var d=jspb.Message.getRepeatedField(a,c),e=[],f=0;f<d.length;f++)e[f]=new b(d[f]);a.wrappers_[c]=e;}};jspb.Message.setWrapperField=function(a,b,c){a.wrappers_||(a.wrappers_={});var d=c?c.toArray():c;a.wrappers_[b]=c;jspb.Message.setField(a,b,d);};
  jspb.Message.setOneofWrapperField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});var e=d?d.toArray():d;a.wrappers_[b]=d;jspb.Message.setOneofField(a,b,c,e);};jspb.Message.setRepeatedWrapperField=function(a,b,c){a.wrappers_||(a.wrappers_={});c=c||[];for(var d=[],e=0;e<c.length;e++)d[e]=c[e].toArray();a.wrappers_[b]=c;jspb.Message.setField(a,b,d);};
  jspb.Message.addToRepeatedWrapperField=function(a,b,c,d,e){jspb.Message.wrapRepeatedField_(a,d,b);var f=a.wrappers_[b];f||(f=a.wrappers_[b]=[]);c=c?c:new d;a=jspb.Message.getRepeatedField(a,b);void 0!=e?(f.splice(e,0,c),a.splice(e,0,c.toArray())):(f.push(c),a.push(c.toArray()));return c};jspb.Message.toMap=function(a,b,c,d){for(var e={},f=0;f<a.length;f++)e[b.call(a[f])]=c?c.call(a[f],d,a[f]):a[f];return e};
  jspb.Message.prototype.syncMapFields_=function(){if(this.wrappers_)for(var a in this.wrappers_){var b=this.wrappers_[a];if(goog.isArray(b))for(var c=0;c<b.length;c++)b[c]&&b[c].toArray();else b&&b.toArray();}};jspb.Message.prototype.toArray=function(){this.syncMapFields_();return this.array};jspb.Message.GENERATE_TO_STRING&&(jspb.Message.prototype.toString=function(){this.syncMapFields_();return this.array.toString()});
  jspb.Message.prototype.getExtension=function(a){if(this.extensionObject_){this.wrappers_||(this.wrappers_={});var b=a.fieldIndex;if(a.isRepeated){if(a.isMessageType())return this.wrappers_[b]||(this.wrappers_[b]=goog.array.map(this.extensionObject_[b]||[],function(b){return new a.ctor(b)})),this.wrappers_[b]}else if(a.isMessageType())return !this.wrappers_[b]&&this.extensionObject_[b]&&(this.wrappers_[b]=new a.ctor(this.extensionObject_[b])),this.wrappers_[b];return this.extensionObject_[b]}};
  jspb.Message.prototype.setExtension=function(a,b){this.wrappers_||(this.wrappers_={});jspb.Message.maybeInitEmptyExtensionObject_(this);var c=a.fieldIndex;a.isRepeated?(b=b||[],a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=goog.array.map(b,function(a){return a.toArray()})):this.extensionObject_[c]=b):a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=b?b.toArray():b):this.extensionObject_[c]=b;return this};
  jspb.Message.difference=function(a,b){if(!(a instanceof b.constructor))throw Error("Messages have different types.");var c=a.toArray(),d=b.toArray(),e=[],f=0,g=c.length>d.length?c.length:d.length;a.getJsPbMessageId()&&(e[0]=a.getJsPbMessageId(),f=1);for(;f<g;f++)jspb.Message.compareFields(c[f],d[f])||(e[f]=d[f]);return new a.constructor(e)};jspb.Message.equals=function(a,b){return a==b||!(!a||!b)&&a instanceof b.constructor&&jspb.Message.compareFields(a.toArray(),b.toArray())};
  jspb.Message.compareExtensions=function(a,b){a=a||{};b=b||{};var c={},d;for(d in a)c[d]=0;for(d in b)c[d]=0;for(d in c)if(!jspb.Message.compareFields(a[d],b[d]))return !1;return !0};
  jspb.Message.compareFields=function(a,b){if(a==b)return !0;if(!goog.isObject(a)||!goog.isObject(b))return goog.isNumber(a)&&isNaN(a)||goog.isNumber(b)&&isNaN(b)?String(a)==String(b):!1;if(a.constructor!=b.constructor)return !1;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a.constructor===Uint8Array){if(a.length!=b.length)return !1;for(var c=0;c<a.length;c++)if(a[c]!=b[c])return !1;return !0}if(a.constructor===Array){for(var d=void 0,e=void 0,f=Math.max(a.length,b.length),c=0;c<f;c++){var g=a[c],h=b[c];g&&g.constructor==
  Object&&(goog.asserts.assert(void 0===d),goog.asserts.assert(c===a.length-1),d=g,g=void 0);h&&h.constructor==Object&&(goog.asserts.assert(void 0===e),goog.asserts.assert(c===b.length-1),e=h,h=void 0);if(!jspb.Message.compareFields(g,h))return !1}return d||e?(d=d||{},e=e||{},jspb.Message.compareExtensions(d,e)):!0}if(a.constructor===Object)return jspb.Message.compareExtensions(a,b);throw Error("Invalid type in JSPB array");};jspb.Message.prototype.cloneMessage=function(){return jspb.Message.cloneMessage(this)};
  jspb.Message.prototype.clone=function(){return jspb.Message.cloneMessage(this)};jspb.Message.clone=function(a){return jspb.Message.cloneMessage(a)};jspb.Message.cloneMessage=function(a){return new a.constructor(jspb.Message.clone_(a.toArray()))};
  jspb.Message.copyInto=function(a,b){goog.asserts.assertInstanceof(a,jspb.Message);goog.asserts.assertInstanceof(b,jspb.Message);goog.asserts.assert(a.constructor==b.constructor,"Copy source and target message should have the same type.");for(var c=jspb.Message.clone(a),d=b.toArray(),e=c.toArray(),f=d.length=0;f<e.length;f++)d[f]=e[f];b.wrappers_=c.wrappers_;b.extensionObject_=c.extensionObject_;};
  jspb.Message.clone_=function(a){var b;if(goog.isArray(a)){for(var c=Array(a.length),d=0;d<a.length;d++)b=a[d],null!=b&&(c[d]="object"==typeof b?jspb.Message.clone_(goog.asserts.assert(b)):b);return c}if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return new Uint8Array(a);c={};for(d in a)b=a[d],null!=b&&(c[d]="object"==typeof b?jspb.Message.clone_(goog.asserts.assert(b)):b);return c};jspb.Message.registerMessageType=function(a,b){jspb.Message.registry_[a]=b;b.messageId=a;};
  jspb.Message.registry_={};jspb.Message.messageSetExtensions={};jspb.Message.messageSetExtensionsBinary={};jspb.arith={};jspb.arith.UInt64=function(a,b){this.lo=a;this.hi=b;};jspb.arith.UInt64.prototype.cmp=function(a){return this.hi<a.hi||this.hi==a.hi&&this.lo<a.lo?-1:this.hi==a.hi&&this.lo==a.lo?0:1};jspb.arith.UInt64.prototype.rightShift=function(){return new jspb.arith.UInt64((this.lo>>>1|(this.hi&1)<<31)>>>0,this.hi>>>1>>>0)};jspb.arith.UInt64.prototype.leftShift=function(){return new jspb.arith.UInt64(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0)};
  jspb.arith.UInt64.prototype.msb=function(){return !!(this.hi&2147483648)};jspb.arith.UInt64.prototype.lsb=function(){return !!(this.lo&1)};jspb.arith.UInt64.prototype.zero=function(){return 0==this.lo&&0==this.hi};jspb.arith.UInt64.prototype.add=function(a){return new jspb.arith.UInt64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};
  jspb.arith.UInt64.prototype.sub=function(a){return new jspb.arith.UInt64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.UInt64.mul32x32=function(a,b){for(var c=a&65535,d=a>>>16,e=b&65535,f=b>>>16,g=c*e+65536*(c*f&65535)+65536*(d*e&65535),c=d*f+(c*f>>>16)+(d*e>>>16);4294967296<=g;)g-=4294967296,c+=1;return new jspb.arith.UInt64(g>>>0,c>>>0)};
  jspb.arith.UInt64.prototype.mul=function(a){var b=jspb.arith.UInt64.mul32x32(this.lo,a);a=jspb.arith.UInt64.mul32x32(this.hi,a);a.hi=a.lo;a.lo=0;return b.add(a)};
  jspb.arith.UInt64.prototype.div=function(a){if(0==a)return [];var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(this.lo,this.hi);a=new jspb.arith.UInt64(a,0);for(var d=new jspb.arith.UInt64(1,0);!a.msb();)a=a.leftShift(),d=d.leftShift();for(;!d.zero();)0>=a.cmp(c)&&(b=b.add(d),c=c.sub(a)),a=a.rightShift(),d=d.rightShift();return [b,c]};jspb.arith.UInt64.prototype.toString=function(){for(var a="",b=this;!b.zero();)var b=b.div(10),c=b[0],a=b[1].lo+a,b=c;""==a&&(a="0");return a};
  jspb.arith.UInt64.fromString=function(a){for(var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(0,0),d=0;d<a.length;d++){if("0">a[d]||"9"<a[d])return null;var e=parseInt(a[d],10);c.lo=e;b=b.mul(10).add(c);}return b};jspb.arith.UInt64.prototype.clone=function(){return new jspb.arith.UInt64(this.lo,this.hi)};jspb.arith.Int64=function(a,b){this.lo=a;this.hi=b;};
  jspb.arith.Int64.prototype.add=function(a){return new jspb.arith.Int64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.sub=function(a){return new jspb.arith.Int64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.clone=function(){return new jspb.arith.Int64(this.lo,this.hi)};
  jspb.arith.Int64.prototype.toString=function(){var a=0!=(this.hi&2147483648),b=new jspb.arith.UInt64(this.lo,this.hi);a&&(b=(new jspb.arith.UInt64(0,0)).sub(b));return (a?"-":"")+b.toString()};jspb.arith.Int64.fromString=function(a){var b=0<a.length&&"-"==a[0];b&&(a=a.substring(1));a=jspb.arith.UInt64.fromString(a);if(null===a)return null;b&&(a=(new jspb.arith.UInt64(0,0)).sub(a));return new jspb.arith.Int64(a.lo,a.hi)};jspb.BinaryConstants={};jspb.ConstBinaryMessage=function(){};jspb.BinaryMessage=function(){};jspb.BinaryConstants.FieldType={INVALID:-1,DOUBLE:1,FLOAT:2,INT64:3,UINT64:4,INT32:5,FIXED64:6,FIXED32:7,BOOL:8,STRING:9,GROUP:10,MESSAGE:11,BYTES:12,UINT32:13,ENUM:14,SFIXED32:15,SFIXED64:16,SINT32:17,SINT64:18,FHASH64:30,VHASH64:31};jspb.BinaryConstants.WireType={INVALID:-1,VARINT:0,FIXED64:1,DELIMITED:2,START_GROUP:3,END_GROUP:4,FIXED32:5};
  jspb.BinaryConstants.FieldTypeToWireType=function(a){var b=jspb.BinaryConstants.FieldType,c=jspb.BinaryConstants.WireType;switch(a){case b.INT32:case b.INT64:case b.UINT32:case b.UINT64:case b.SINT32:case b.SINT64:case b.BOOL:case b.ENUM:case b.VHASH64:return c.VARINT;case b.DOUBLE:case b.FIXED64:case b.SFIXED64:case b.FHASH64:return c.FIXED64;case b.STRING:case b.MESSAGE:case b.BYTES:return c.DELIMITED;case b.FLOAT:case b.FIXED32:case b.SFIXED32:return c.FIXED32;default:return c.INVALID}};
  jspb.BinaryConstants.INVALID_FIELD_NUMBER=-1;jspb.BinaryConstants.FLOAT32_EPS=1.401298464324817E-45;jspb.BinaryConstants.FLOAT32_MIN=1.1754943508222875E-38;jspb.BinaryConstants.FLOAT32_MAX=3.4028234663852886E38;jspb.BinaryConstants.FLOAT64_EPS=4.9E-324;jspb.BinaryConstants.FLOAT64_MIN=2.2250738585072014E-308;jspb.BinaryConstants.FLOAT64_MAX=1.7976931348623157E308;jspb.BinaryConstants.TWO_TO_20=1048576;jspb.BinaryConstants.TWO_TO_23=8388608;jspb.BinaryConstants.TWO_TO_31=2147483648;
  jspb.BinaryConstants.TWO_TO_32=4294967296;jspb.BinaryConstants.TWO_TO_52=4503599627370496;jspb.BinaryConstants.TWO_TO_63=0x7fffffffffffffff;jspb.BinaryConstants.TWO_TO_64=1.8446744073709552E19;jspb.BinaryConstants.ZERO_HASH="\x00\x00\x00\x00\x00\x00\x00\x00";jspb.utils={};jspb.utils.split64Low=0;jspb.utils.split64High=0;jspb.utils.splitUint64=function(a){var b=a>>>0;a=Math.floor((a-b)/jspb.BinaryConstants.TWO_TO_32)>>>0;jspb.utils.split64Low=b;jspb.utils.split64High=a;};jspb.utils.splitInt64=function(a){var b=0>a;a=Math.abs(a);var c=a>>>0;a=Math.floor((a-c)/jspb.BinaryConstants.TWO_TO_32);a>>>=0;b&&(a=~a>>>0,c=(~c>>>0)+1,4294967295<c&&(c=0,a++,4294967295<a&&(a=0)));jspb.utils.split64Low=c;jspb.utils.split64High=a;};
  jspb.utils.splitZigzag64=function(a){var b=0>a;a=2*Math.abs(a);jspb.utils.splitUint64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;b&&(0==a?0==c?c=a=4294967295:(c--,a=4294967295):a--);jspb.utils.split64Low=a;jspb.utils.split64High=c;};
  jspb.utils.splitFloat32=function(a){var b=0>a?1:0;a=b?-a:a;var c;0===a?0<1/a?(jspb.utils.split64High=0,jspb.utils.split64Low=0):(jspb.utils.split64High=0,jspb.utils.split64Low=2147483648):isNaN(a)?(jspb.utils.split64High=0,jspb.utils.split64Low=2147483647):a>jspb.BinaryConstants.FLOAT32_MAX?(jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|2139095040)>>>0):a<jspb.BinaryConstants.FLOAT32_MIN?(a=Math.round(a/Math.pow(2,-149)),jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|a)>>>0):(c=Math.floor(Math.log(a)/
  Math.LN2),a*=Math.pow(2,-c),a=Math.round(a*jspb.BinaryConstants.TWO_TO_23)&8388607,jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|c+127<<23|a)>>>0);};
  jspb.utils.splitFloat64=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)jspb.utils.split64High=0<1/a?0:2147483648,jspb.utils.split64Low=0;else if(isNaN(a))jspb.utils.split64High=2147483647,jspb.utils.split64Low=4294967295;else if(a>jspb.BinaryConstants.FLOAT64_MAX)jspb.utils.split64High=(b<<31|2146435072)>>>0,jspb.utils.split64Low=0;else if(a<jspb.BinaryConstants.FLOAT64_MIN){var c=a/Math.pow(2,-1074);a=c/jspb.BinaryConstants.TWO_TO_32;jspb.utils.split64High=(b<<31|a)>>>0;jspb.utils.split64Low=c>>>0;}else{var d=
  Math.floor(Math.log(a)/Math.LN2);1024==d&&(d=1023);c=a*Math.pow(2,-d);a=c*jspb.BinaryConstants.TWO_TO_20&1048575;c=c*jspb.BinaryConstants.TWO_TO_52>>>0;jspb.utils.split64High=(b<<31|d+1023<<20|a)>>>0;jspb.utils.split64Low=c;}};
  jspb.utils.splitHash64=function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=a.charCodeAt(4),g=a.charCodeAt(5),h=a.charCodeAt(6);a=a.charCodeAt(7);jspb.utils.split64Low=b+(c<<8)+(d<<16)+(e<<24)>>>0;jspb.utils.split64High=f+(g<<8)+(h<<16)+(a<<24)>>>0;};jspb.utils.joinUint64=function(a,b){return b*jspb.BinaryConstants.TWO_TO_32+a};
  jspb.utils.joinInt64=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b>>>0,0==a&&(b=b+1>>>0));var d=jspb.utils.joinUint64(a,b);return c?-d:d};jspb.utils.joinZigzag64=function(a,b){var c=a&1;a=(a>>>1|b<<31)>>>0;b>>>=1;c&&(a=a+1>>>0,0==a&&(b=b+1>>>0));var d=jspb.utils.joinUint64(a,b);return c?-d:d};jspb.utils.joinFloat32=function(a,b){var c=2*(a>>31)+1,d=a>>>23&255,e=a&8388607;return 255==d?e?NaN:Infinity*c:0==d?c*Math.pow(2,-149)*e:c*Math.pow(2,d-150)*(e+Math.pow(2,23))};
  jspb.utils.joinFloat64=function(a,b){var c=2*(b>>31)+1,d=b>>>20&2047,e=jspb.BinaryConstants.TWO_TO_32*(b&1048575)+a;return 2047==d?e?NaN:Infinity*c:0==d?c*Math.pow(2,-1074)*e:c*Math.pow(2,d-1075)*(e+jspb.BinaryConstants.TWO_TO_52)};jspb.utils.joinHash64=function(a,b){return String.fromCharCode(a>>>0&255,a>>>8&255,a>>>16&255,a>>>24&255,b>>>0&255,b>>>8&255,b>>>16&255,b>>>24&255)};jspb.utils.DIGITS="0123456789abcdef".split("");
  jspb.utils.joinUnsignedDecimalString=function(a,b){function c(a){for(var b=1E7,c=0;7>c;c++){var b=b/10,d=a/b%10>>>0;if(0!=d||h)h=!0,k+=g[d];}}if(2097151>=b)return ""+(jspb.BinaryConstants.TWO_TO_32*b+a);var d=(a>>>24|b<<8)>>>0&16777215,e=b>>16&65535,f=(a&16777215)+6777216*d+6710656*e,d=d+8147497*e,e=2*e;1E7<=f&&(d+=Math.floor(f/1E7),f%=1E7);1E7<=d&&(e+=Math.floor(d/1E7),d%=1E7);var g=jspb.utils.DIGITS,h=!1,k="";(e||h)&&c(e);(d||h)&&c(d);(f||h)&&c(f);return k};
  jspb.utils.joinSignedDecimalString=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b+(0==a?1:0)>>>0);var d=jspb.utils.joinUnsignedDecimalString(a,b);return c?"-"+d:d};jspb.utils.hash64ToDecimalString=function(a,b){jspb.utils.splitHash64(a);var c=jspb.utils.split64Low,d=jspb.utils.split64High;return b?jspb.utils.joinSignedDecimalString(c,d):jspb.utils.joinUnsignedDecimalString(c,d)};
  jspb.utils.hash64ArrayToDecimalStrings=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]=jspb.utils.hash64ToDecimalString(a[d],b);return c};
  jspb.utils.decimalStringToHash64=function(a){function b(a,b){for(var c=0;8>c&&(1!==a||0<b);c++){var d=a*e[c]+b;e[c]=d&255;b=d>>>8;}}function c(){for(var a=0;8>a;a++)e[a]=~e[a]&255;}goog.asserts.assert(0<a.length);var d=!1;"-"===a[0]&&(d=!0,a=a.slice(1));for(var e=[0,0,0,0,0,0,0,0],f=0;f<a.length;f++)b(10,jspb.utils.DIGITS.indexOf(a[f]));d&&(c(),b(1,1));return goog.crypt.byteArrayToString(e)};jspb.utils.splitDecimalString=function(a){jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));};
  jspb.utils.hash64ToHexString=function(a){var b=Array(18);b[0]="0";b[1]="x";for(var c=0;8>c;c++){var d=a.charCodeAt(7-c);b[2*c+2]=jspb.utils.DIGITS[d>>4];b[2*c+3]=jspb.utils.DIGITS[d&15];}return b.join("")};jspb.utils.hexStringToHash64=function(a){a=a.toLowerCase();goog.asserts.assert(18==a.length);goog.asserts.assert("0"==a[0]);goog.asserts.assert("x"==a[1]);for(var b="",c=0;8>c;c++)var d=jspb.utils.DIGITS.indexOf(a[2*c+2]),e=jspb.utils.DIGITS.indexOf(a[2*c+3]),b=String.fromCharCode(16*d+e)+b;return b};
  jspb.utils.hash64ToNumber=function(a,b){jspb.utils.splitHash64(a);var c=jspb.utils.split64Low,d=jspb.utils.split64High;return b?jspb.utils.joinInt64(c,d):jspb.utils.joinUint64(c,d)};jspb.utils.numberToHash64=function(a){jspb.utils.splitInt64(a);return jspb.utils.joinHash64(jspb.utils.split64Low,jspb.utils.split64High)};jspb.utils.countVarints=function(a,b,c){for(var d=0,e=b;e<c;e++)d+=a[e]>>7;return c-b-d};
  jspb.utils.countVarintFields=function(a,b,c,d){var e=0;d=8*d+jspb.BinaryConstants.WireType.VARINT;if(128>d)for(;b<c&&a[b++]==d;)for(e++;;){var f=a[b++];if(0==(f&128))break}else for(;b<c;){for(f=d;128<f;){if(a[b]!=(f&127|128))return e;b++;f>>=7;}if(a[b++]!=f)break;for(e++;f=a[b++],0!=(f&128););}return e};jspb.utils.countFixedFields_=function(a,b,c,d,e){var f=0;if(128>d)for(;b<c&&a[b++]==d;)f++,b+=e;else for(;b<c;){for(var g=d;128<g;){if(a[b++]!=(g&127|128))return f;g>>=7;}if(a[b++]!=g)break;f++;b+=e;}return f};
  jspb.utils.countFixed32Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED32,4)};jspb.utils.countFixed64Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED64,8)};
  jspb.utils.countDelimitedFields=function(a,b,c,d){var e=0;for(d=8*d+jspb.BinaryConstants.WireType.DELIMITED;b<c;){for(var f=d;128<f;){if(a[b++]!=(f&127|128))return e;f>>=7;}if(a[b++]!=f)break;e++;for(var g=0,h=1;f=a[b++],g+=(f&127)*h,h*=128,0!=(f&128););b+=g;}return e};jspb.utils.debugBytesToTextFormat=function(a){var b='"';if(a){a=jspb.utils.byteSourceToUint8Array(a);for(var c=0;c<a.length;c++)b+="\\x",16>a[c]&&(b+="0"),b+=a[c].toString(16);}return b+'"'};
  jspb.utils.debugScalarToTextFormat=function(a){return goog.isString(a)?goog.string.quote(a):a.toString()};jspb.utils.stringToByteArray=function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++){var d=a.charCodeAt(c);if(255<d)throw Error("Conversion error: string contains codepoint outside of byte range");b[c]=d;}return b};
  jspb.utils.byteSourceToUint8Array=function(a){if(a.constructor===Uint8Array)return a;if(a.constructor===ArrayBuffer||a.constructor===Buffer||a.constructor===Array)return new Uint8Array(a);if(a.constructor===String)return goog.crypt.base64.decodeStringToUint8Array(a);goog.asserts.fail("Type not convertible to Uint8Array.");return new Uint8Array(0)};jspb.BinaryEncoder=function(){this.buffer_=[];};jspb.BinaryEncoder.prototype.length=function(){return this.buffer_.length};jspb.BinaryEncoder.prototype.end=function(){var a=this.buffer_;this.buffer_=[];return a};
  jspb.BinaryEncoder.prototype.writeSplitVarint64=function(a,b){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(b==Math.floor(b));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);for(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);0<b||127<a;)this.buffer_.push(a&127|128),a=(a>>>7|b<<25)>>>0,b>>>=7;this.buffer_.push(a);};
  jspb.BinaryEncoder.prototype.writeSplitFixed64=function(a,b){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(b==Math.floor(b));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);this.writeUint32(a);this.writeUint32(b);};
  jspb.BinaryEncoder.prototype.writeUnsignedVarint32=function(a){goog.asserts.assert(a==Math.floor(a));for(goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);127<a;)this.buffer_.push(a&127|128),a>>>=7;this.buffer_.push(a);};
  jspb.BinaryEncoder.prototype.writeSignedVarint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);if(0<=a)this.writeUnsignedVarint32(a);else{for(var b=0;9>b;b++)this.buffer_.push(a&127|128),a>>=7;this.buffer_.push(1);}};
  jspb.BinaryEncoder.prototype.writeUnsignedVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High);};
  jspb.BinaryEncoder.prototype.writeSignedVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High);};
  jspb.BinaryEncoder.prototype.writeZigzagVarint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeUnsignedVarint32((a<<1^a>>31)>>>0);};jspb.BinaryEncoder.prototype.writeZigzagVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitZigzag64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High);};
  jspb.BinaryEncoder.prototype.writeZigzagVarint64String=function(a){this.writeZigzagVarint64(parseInt(a,10));};jspb.BinaryEncoder.prototype.writeUint8=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&256>a);this.buffer_.push(a>>>0&255);};jspb.BinaryEncoder.prototype.writeUint16=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&65536>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);};
  jspb.BinaryEncoder.prototype.writeUint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255);};jspb.BinaryEncoder.prototype.writeUint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitUint64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High);};
  jspb.BinaryEncoder.prototype.writeInt8=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(-128<=a&&128>a);this.buffer_.push(a>>>0&255);};jspb.BinaryEncoder.prototype.writeInt16=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(-32768<=a&&32768>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);};
  jspb.BinaryEncoder.prototype.writeInt32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255);};
  jspb.BinaryEncoder.prototype.writeInt64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High);};
  jspb.BinaryEncoder.prototype.writeInt64String=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(+a>=-jspb.BinaryConstants.TWO_TO_63&&+a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High);};jspb.BinaryEncoder.prototype.writeFloat=function(a){goog.asserts.assert(a>=-jspb.BinaryConstants.FLOAT32_MAX&&a<=jspb.BinaryConstants.FLOAT32_MAX);jspb.utils.splitFloat32(a);this.writeUint32(jspb.utils.split64Low);};
  jspb.BinaryEncoder.prototype.writeDouble=function(a){goog.asserts.assert(a>=-jspb.BinaryConstants.FLOAT64_MAX&&a<=jspb.BinaryConstants.FLOAT64_MAX);jspb.utils.splitFloat64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High);};jspb.BinaryEncoder.prototype.writeBool=function(a){goog.asserts.assert(goog.isBoolean(a)||goog.isNumber(a));this.buffer_.push(a?1:0);};
  jspb.BinaryEncoder.prototype.writeEnum=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeSignedVarint32(a);};jspb.BinaryEncoder.prototype.writeBytes=function(a){this.buffer_.push.apply(this.buffer_,a);};jspb.BinaryEncoder.prototype.writeVarintHash64=function(a){jspb.utils.splitHash64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High);};
  jspb.BinaryEncoder.prototype.writeFixedHash64=function(a){jspb.utils.splitHash64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High);};
  jspb.BinaryEncoder.prototype.writeString=function(a){for(var b=this.buffer_.length,c=0;c<a.length;c++){var d=a.charCodeAt(c);if(128>d)this.buffer_.push(d);else if(2048>d)this.buffer_.push(d>>6|192),this.buffer_.push(d&63|128);else if(65536>d)if(55296<=d&&56319>=d&&c+1<a.length){var e=a.charCodeAt(c+1);56320<=e&&57343>=e&&(d=1024*(d-55296)+e-56320+65536,this.buffer_.push(d>>18|240),this.buffer_.push(d>>12&63|128),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128),c++);}else this.buffer_.push(d>>
  12|224),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128);}return this.buffer_.length-b};jspb.BinaryWriter=function(){this.blocks_=[];this.totalLength_=0;this.encoder_=new jspb.BinaryEncoder;this.bookmarks_=[];};jspb.BinaryWriter.prototype.appendUint8Array_=function(a){var b=this.encoder_.end();this.blocks_.push(b);this.blocks_.push(a);this.totalLength_+=b.length+a.length;};
  jspb.BinaryWriter.prototype.beginDelimited_=function(a){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);a=this.encoder_.end();this.blocks_.push(a);this.totalLength_+=a.length;a.push(this.totalLength_);return a};jspb.BinaryWriter.prototype.endDelimited_=function(a){var b=a.pop(),b=this.totalLength_+this.encoder_.length()-b;for(goog.asserts.assert(0<=b);127<b;)a.push(b&127|128),b>>>=7,this.totalLength_++;a.push(b);this.totalLength_++;};
  jspb.BinaryWriter.prototype.writeSerializedMessage=function(a,b,c){this.appendUint8Array_(a.subarray(b,c));};jspb.BinaryWriter.prototype.maybeWriteSerializedMessage=function(a,b,c){null!=a&&null!=b&&null!=c&&this.writeSerializedMessage(a,b,c);};jspb.BinaryWriter.prototype.reset=function(){this.blocks_=[];this.encoder_.end();this.totalLength_=0;this.bookmarks_=[];};
  jspb.BinaryWriter.prototype.getResultBuffer=function(){goog.asserts.assert(0==this.bookmarks_.length);for(var a=new Uint8Array(this.totalLength_+this.encoder_.length()),b=this.blocks_,c=b.length,d=0,e=0;e<c;e++){var f=b[e];a.set(f,d);d+=f.length;}b=this.encoder_.end();a.set(b,d);d+=b.length;goog.asserts.assert(d==a.length);this.blocks_=[a];return a};jspb.BinaryWriter.prototype.getResultBase64String=function(a){return goog.crypt.base64.encodeByteArray(this.getResultBuffer(),a)};
  jspb.BinaryWriter.prototype.beginSubMessage=function(a){this.bookmarks_.push(this.beginDelimited_(a));};jspb.BinaryWriter.prototype.endSubMessage=function(){goog.asserts.assert(0<=this.bookmarks_.length);this.endDelimited_(this.bookmarks_.pop());};jspb.BinaryWriter.prototype.writeFieldHeader_=function(a,b){goog.asserts.assert(1<=a&&a==Math.floor(a));this.encoder_.writeUnsignedVarint32(8*a+b);};
  jspb.BinaryWriter.prototype.writeAny=function(a,b,c){var d=jspb.BinaryConstants.FieldType;switch(a){case d.DOUBLE:this.writeDouble(b,c);break;case d.FLOAT:this.writeFloat(b,c);break;case d.INT64:this.writeInt64(b,c);break;case d.UINT64:this.writeUint64(b,c);break;case d.INT32:this.writeInt32(b,c);break;case d.FIXED64:this.writeFixed64(b,c);break;case d.FIXED32:this.writeFixed32(b,c);break;case d.BOOL:this.writeBool(b,c);break;case d.STRING:this.writeString(b,c);break;case d.GROUP:goog.asserts.fail("Group field type not supported in writeAny()");
  break;case d.MESSAGE:goog.asserts.fail("Message field type not supported in writeAny()");break;case d.BYTES:this.writeBytes(b,c);break;case d.UINT32:this.writeUint32(b,c);break;case d.ENUM:this.writeEnum(b,c);break;case d.SFIXED32:this.writeSfixed32(b,c);break;case d.SFIXED64:this.writeSfixed64(b,c);break;case d.SINT32:this.writeSint32(b,c);break;case d.SINT64:this.writeSint64(b,c);break;case d.FHASH64:this.writeFixedHash64(b,c);break;case d.VHASH64:this.writeVarintHash64(b,c);break;default:goog.asserts.fail("Invalid field type in writeAny()");}};
  jspb.BinaryWriter.prototype.writeUnsignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint32(b));};jspb.BinaryWriter.prototype.writeSignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b));};jspb.BinaryWriter.prototype.writeUnsignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint64(b));};
  jspb.BinaryWriter.prototype.writeSignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint64(b));};jspb.BinaryWriter.prototype.writeZigzagVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint32(b));};jspb.BinaryWriter.prototype.writeZigzagVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64(b));};
  jspb.BinaryWriter.prototype.writeZigzagVarint64String_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64String(b));};jspb.BinaryWriter.prototype.writeInt32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b));};
  jspb.BinaryWriter.prototype.writeInt32String=function(a,b){if(null!=b){var c=parseInt(b,10);goog.asserts.assert(c>=-jspb.BinaryConstants.TWO_TO_31&&c<jspb.BinaryConstants.TWO_TO_31);this.writeSignedVarint32_(a,c);}};jspb.BinaryWriter.prototype.writeInt64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeSignedVarint64_(a,b));};
  jspb.BinaryWriter.prototype.writeInt64String=function(a,b){if(null!=b){var c=jspb.arith.Int64.fromString(b);this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);this.encoder_.writeSplitVarint64(c.lo,c.hi);}};jspb.BinaryWriter.prototype.writeUint32=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b));};
  jspb.BinaryWriter.prototype.writeUint32String=function(a,b){if(null!=b){var c=parseInt(b,10);goog.asserts.assert(0<=c&&c<jspb.BinaryConstants.TWO_TO_32);this.writeUnsignedVarint32_(a,c);}};jspb.BinaryWriter.prototype.writeUint64=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeUnsignedVarint64_(a,b));};
  jspb.BinaryWriter.prototype.writeUint64String=function(a,b){if(null!=b){var c=jspb.arith.UInt64.fromString(b);this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);this.encoder_.writeSplitVarint64(c.lo,c.hi);}};jspb.BinaryWriter.prototype.writeSint32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeZigzagVarint32_(a,b));};
  jspb.BinaryWriter.prototype.writeSint64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64_(a,b));};jspb.BinaryWriter.prototype.writeSint64String=function(a,b){null!=b&&(goog.asserts.assert(+b>=-jspb.BinaryConstants.TWO_TO_63&&+b<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64String_(a,b));};
  jspb.BinaryWriter.prototype.writeFixed32=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeUint32(b));};jspb.BinaryWriter.prototype.writeFixed64=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeUint64(b));};
  jspb.BinaryWriter.prototype.writeFixed64String=function(a,b){if(null!=b){var c=jspb.arith.UInt64.fromString(b);this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64);this.encoder_.writeSplitFixed64(c.lo,c.hi);}};jspb.BinaryWriter.prototype.writeSfixed32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeInt32(b));};
  jspb.BinaryWriter.prototype.writeSfixed64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeInt64(b));};jspb.BinaryWriter.prototype.writeSfixed64String=function(a,b){if(null!=b){var c=jspb.arith.Int64.fromString(b);this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64);this.encoder_.writeSplitFixed64(c.lo,c.hi);}};
  jspb.BinaryWriter.prototype.writeFloat=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeFloat(b));};jspb.BinaryWriter.prototype.writeDouble=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeDouble(b));};jspb.BinaryWriter.prototype.writeBool=function(a,b){null!=b&&(goog.asserts.assert(goog.isBoolean(b)||goog.isNumber(b)),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeBool(b));};
  jspb.BinaryWriter.prototype.writeEnum=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b));};jspb.BinaryWriter.prototype.writeString=function(a,b){if(null!=b){var c=this.beginDelimited_(a);this.encoder_.writeString(b);this.endDelimited_(c);}};
  jspb.BinaryWriter.prototype.writeBytes=function(a,b){if(null!=b){var c=jspb.utils.byteSourceToUint8Array(b);this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(c.length);this.appendUint8Array_(c);}};jspb.BinaryWriter.prototype.writeMessage=function(a,b,c){null!=b&&(a=this.beginDelimited_(a),c(b,this),this.endDelimited_(a));};
  jspb.BinaryWriter.prototype.writeGroup=function(a,b,c){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b,this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP));};jspb.BinaryWriter.prototype.writeFixedHash64=function(a,b){null!=b&&(goog.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeFixedHash64(b));};
  jspb.BinaryWriter.prototype.writeVarintHash64=function(a,b){null!=b&&(goog.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeVarintHash64(b));};jspb.BinaryWriter.prototype.writeRepeatedInt32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint32_(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedInt32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt32String(a,b[c]);};
  jspb.BinaryWriter.prototype.writeRepeatedInt64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint64_(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedInt64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt64String(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedUint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint32_(a,b[c]);};
  jspb.BinaryWriter.prototype.writeRepeatedUint32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint32String(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedUint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint64_(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedUint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint64String(a,b[c]);};
  jspb.BinaryWriter.prototype.writeRepeatedSint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint32_(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedSint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64_(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedSint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64String_(a,b[c]);};
  jspb.BinaryWriter.prototype.writeRepeatedFixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed32(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedFixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedFixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64String(a,b[c]);};
  jspb.BinaryWriter.prototype.writeRepeatedSfixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed32(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedSfixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedSfixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64String(a,b[c]);};
  jspb.BinaryWriter.prototype.writeRepeatedFloat=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFloat(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedDouble=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeDouble(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedBool=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBool(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedEnum=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeEnum(a,b[c]);};
  jspb.BinaryWriter.prototype.writeRepeatedString=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeString(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedBytes=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBytes(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedMessage=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++){var e=this.beginDelimited_(a);c(b[d],this);this.endDelimited_(e);}};
  jspb.BinaryWriter.prototype.writeRepeatedGroup=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++)this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b[d],this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP);};jspb.BinaryWriter.prototype.writeRepeatedFixedHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixedHash64(a,b[c]);};
  jspb.BinaryWriter.prototype.writeRepeatedVarintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeVarintHash64(a,b[c]);};jspb.BinaryWriter.prototype.writePackedInt32=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++)this.encoder_.writeSignedVarint32(b[d]);this.endDelimited_(c);}};
  jspb.BinaryWriter.prototype.writePackedInt32String=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++)this.encoder_.writeSignedVarint32(parseInt(b[d],10));this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedInt64=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++)this.encoder_.writeSignedVarint64(b[d]);this.endDelimited_(c);}};
  jspb.BinaryWriter.prototype.writePackedInt64String=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){var e=jspb.arith.Int64.fromString(b[d]);this.encoder_.writeSplitVarint64(e.lo,e.hi);}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedUint32=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++)this.encoder_.writeUnsignedVarint32(b[d]);this.endDelimited_(c);}};
  jspb.BinaryWriter.prototype.writePackedUint32String=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++)this.encoder_.writeUnsignedVarint32(parseInt(b[d],10));this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedUint64=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++)this.encoder_.writeUnsignedVarint64(b[d]);this.endDelimited_(c);}};
  jspb.BinaryWriter.prototype.writePackedUint64String=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){var e=jspb.arith.UInt64.fromString(b[d]);this.encoder_.writeSplitVarint64(e.lo,e.hi);}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedSint32=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++)this.encoder_.writeZigzagVarint32(b[d]);this.endDelimited_(c);}};
  jspb.BinaryWriter.prototype.writePackedSint64=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++)this.encoder_.writeZigzagVarint64(b[d]);this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedSint64String=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++)this.encoder_.writeZigzagVarint64(parseInt(b[d],10));this.endDelimited_(c);}};
  jspb.BinaryWriter.prototype.writePackedFixed32=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(4*b.length);for(var c=0;c<b.length;c++)this.encoder_.writeUint32(b[c]);}};jspb.BinaryWriter.prototype.writePackedFixed64=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(8*b.length);for(var c=0;c<b.length;c++)this.encoder_.writeUint64(b[c]);}};
  jspb.BinaryWriter.prototype.writePackedFixed64String=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(8*b.length);for(var c=0;c<b.length;c++){var d=jspb.arith.UInt64.fromString(b[c]);this.encoder_.writeSplitFixed64(d.lo,d.hi);}}};
  jspb.BinaryWriter.prototype.writePackedSfixed32=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(4*b.length);for(var c=0;c<b.length;c++)this.encoder_.writeInt32(b[c]);}};jspb.BinaryWriter.prototype.writePackedSfixed64=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(8*b.length);for(var c=0;c<b.length;c++)this.encoder_.writeInt64(b[c]);}};
  jspb.BinaryWriter.prototype.writePackedSfixed64String=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(8*b.length);for(var c=0;c<b.length;c++)this.encoder_.writeInt64String(b[c]);}};jspb.BinaryWriter.prototype.writePackedFloat=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(4*b.length);for(var c=0;c<b.length;c++)this.encoder_.writeFloat(b[c]);}};
  jspb.BinaryWriter.prototype.writePackedDouble=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(8*b.length);for(var c=0;c<b.length;c++)this.encoder_.writeDouble(b[c]);}};jspb.BinaryWriter.prototype.writePackedBool=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(b.length);for(var c=0;c<b.length;c++)this.encoder_.writeBool(b[c]);}};
  jspb.BinaryWriter.prototype.writePackedEnum=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++)this.encoder_.writeEnum(b[d]);this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedFixedHash64=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(8*b.length);for(var c=0;c<b.length;c++)this.encoder_.writeFixedHash64(b[c]);}};
  jspb.BinaryWriter.prototype.writePackedVarintHash64=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++)this.encoder_.writeVarintHash64(b[d]);this.endDelimited_(c);}};jspb.BinaryIterator=function(a,b,c){this.elements_=this.nextMethod_=this.decoder_=null;this.cursor_=0;this.nextValue_=null;this.atEnd_=!0;this.init_(a,b,c);};jspb.BinaryIterator.prototype.init_=function(a,b,c){a&&b&&(this.decoder_=a,this.nextMethod_=b);this.elements_=c||null;this.cursor_=0;this.nextValue_=null;this.atEnd_=!this.decoder_&&!this.elements_;this.next();};jspb.BinaryIterator.instanceCache_=[];
  jspb.BinaryIterator.alloc=function(a,b,c){if(jspb.BinaryIterator.instanceCache_.length){var d=jspb.BinaryIterator.instanceCache_.pop();d.init_(a,b,c);return d}return new jspb.BinaryIterator(a,b,c)};jspb.BinaryIterator.prototype.free=function(){this.clear();100>jspb.BinaryIterator.instanceCache_.length&&jspb.BinaryIterator.instanceCache_.push(this);};
  jspb.BinaryIterator.prototype.clear=function(){this.decoder_&&this.decoder_.free();this.elements_=this.nextMethod_=this.decoder_=null;this.cursor_=0;this.nextValue_=null;this.atEnd_=!0;};jspb.BinaryIterator.prototype.get=function(){return this.nextValue_};jspb.BinaryIterator.prototype.atEnd=function(){return this.atEnd_};
  jspb.BinaryIterator.prototype.next=function(){var a=this.nextValue_;this.decoder_?this.decoder_.atEnd()?(this.nextValue_=null,this.atEnd_=!0):this.nextValue_=this.nextMethod_.call(this.decoder_):this.elements_&&(this.cursor_==this.elements_.length?(this.nextValue_=null,this.atEnd_=!0):this.nextValue_=this.elements_[this.cursor_++]);return a};jspb.BinaryDecoder=function(a,b,c){this.bytes_=null;this.tempHigh_=this.tempLow_=this.cursor_=this.end_=this.start_=0;this.error_=!1;a&&this.setBlock(a,b,c);};
  jspb.BinaryDecoder.instanceCache_=[];jspb.BinaryDecoder.alloc=function(a,b,c){if(jspb.BinaryDecoder.instanceCache_.length){var d=jspb.BinaryDecoder.instanceCache_.pop();a&&d.setBlock(a,b,c);return d}return new jspb.BinaryDecoder(a,b,c)};jspb.BinaryDecoder.prototype.free=function(){this.clear();100>jspb.BinaryDecoder.instanceCache_.length&&jspb.BinaryDecoder.instanceCache_.push(this);};jspb.BinaryDecoder.prototype.clone=function(){return jspb.BinaryDecoder.alloc(this.bytes_,this.start_,this.end_-this.start_)};
  jspb.BinaryDecoder.prototype.clear=function(){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1;};jspb.BinaryDecoder.prototype.getBuffer=function(){return this.bytes_};jspb.BinaryDecoder.prototype.setBlock=function(a,b,c){this.bytes_=jspb.utils.byteSourceToUint8Array(a);this.start_=goog.isDef(b)?b:0;this.end_=goog.isDef(c)?this.start_+c:this.bytes_.length;this.cursor_=this.start_;};jspb.BinaryDecoder.prototype.getEnd=function(){return this.end_};
  jspb.BinaryDecoder.prototype.setEnd=function(a){this.end_=a;};jspb.BinaryDecoder.prototype.reset=function(){this.cursor_=this.start_;};jspb.BinaryDecoder.prototype.getCursor=function(){return this.cursor_};jspb.BinaryDecoder.prototype.setCursor=function(a){this.cursor_=a;};jspb.BinaryDecoder.prototype.advance=function(a){this.cursor_+=a;goog.asserts.assert(this.cursor_<=this.end_);};jspb.BinaryDecoder.prototype.atEnd=function(){return this.cursor_==this.end_};
  jspb.BinaryDecoder.prototype.pastEnd=function(){return this.cursor_>this.end_};jspb.BinaryDecoder.prototype.getError=function(){return this.error_||0>this.cursor_||this.cursor_>this.end_};
  jspb.BinaryDecoder.prototype.readSplitVarint64_=function(){for(var a,b=0,c,d=0;4>d;d++)if(a=this.bytes_[this.cursor_++],b|=(a&127)<<7*d,128>a){this.tempLow_=b>>>0;this.tempHigh_=0;return}a=this.bytes_[this.cursor_++];b|=(a&127)<<28;c=0|(a&127)>>4;if(128>a)this.tempLow_=b>>>0,this.tempHigh_=c>>>0;else{for(d=0;5>d;d++)if(a=this.bytes_[this.cursor_++],c|=(a&127)<<7*d+3,128>a){this.tempLow_=b>>>0;this.tempHigh_=c>>>0;return}goog.asserts.fail("Failed to read varint, encoding is invalid.");this.error_=
  !0;}};jspb.BinaryDecoder.prototype.skipVarint=function(){for(;this.bytes_[this.cursor_]&128;)this.cursor_++;this.cursor_++;};jspb.BinaryDecoder.prototype.unskipVarint=function(a){for(;128<a;)this.cursor_--,a>>>=7;this.cursor_--;};
  jspb.BinaryDecoder.prototype.readUnsignedVarint32=function(){var a,b=this.bytes_;a=b[this.cursor_+0];var c=a&127;if(128>a)return this.cursor_+=1,goog.asserts.assert(this.cursor_<=this.end_),c;a=b[this.cursor_+1];c|=(a&127)<<7;if(128>a)return this.cursor_+=2,goog.asserts.assert(this.cursor_<=this.end_),c;a=b[this.cursor_+2];c|=(a&127)<<14;if(128>a)return this.cursor_+=3,goog.asserts.assert(this.cursor_<=this.end_),c;a=b[this.cursor_+3];c|=(a&127)<<21;if(128>a)return this.cursor_+=4,goog.asserts.assert(this.cursor_<=
  this.end_),c;a=b[this.cursor_+4];c|=(a&15)<<28;if(128>a)return this.cursor_+=5,goog.asserts.assert(this.cursor_<=this.end_),c>>>0;this.cursor_+=5;128<=b[this.cursor_++]&&128<=b[this.cursor_++]&&128<=b[this.cursor_++]&&128<=b[this.cursor_++]&&128<=b[this.cursor_++]&&goog.asserts.assert(!1);goog.asserts.assert(this.cursor_<=this.end_);return c};jspb.BinaryDecoder.prototype.readSignedVarint32=jspb.BinaryDecoder.prototype.readUnsignedVarint32;jspb.BinaryDecoder.prototype.readUnsignedVarint32String=function(){return this.readUnsignedVarint32().toString()};
  jspb.BinaryDecoder.prototype.readSignedVarint32String=function(){return this.readSignedVarint32().toString()};jspb.BinaryDecoder.prototype.readZigzagVarint32=function(){var a=this.readUnsignedVarint32();return a>>>1^-(a&1)};jspb.BinaryDecoder.prototype.readUnsignedVarint64=function(){this.readSplitVarint64_();return jspb.utils.joinUint64(this.tempLow_,this.tempHigh_)};
  jspb.BinaryDecoder.prototype.readUnsignedVarint64String=function(){this.readSplitVarint64_();return jspb.utils.joinUnsignedDecimalString(this.tempLow_,this.tempHigh_)};jspb.BinaryDecoder.prototype.readSignedVarint64=function(){this.readSplitVarint64_();return jspb.utils.joinInt64(this.tempLow_,this.tempHigh_)};jspb.BinaryDecoder.prototype.readSignedVarint64String=function(){this.readSplitVarint64_();return jspb.utils.joinSignedDecimalString(this.tempLow_,this.tempHigh_)};
  jspb.BinaryDecoder.prototype.readZigzagVarint64=function(){this.readSplitVarint64_();return jspb.utils.joinZigzag64(this.tempLow_,this.tempHigh_)};jspb.BinaryDecoder.prototype.readZigzagVarint64String=function(){return this.readZigzagVarint64().toString()};jspb.BinaryDecoder.prototype.readUint8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;goog.asserts.assert(this.cursor_<=this.end_);return a};
  jspb.BinaryDecoder.prototype.readUint16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;goog.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8};jspb.BinaryDecoder.prototype.readUint32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;goog.asserts.assert(this.cursor_<=this.end_);return (a<<0|b<<8|c<<16|d<<24)>>>0};
  jspb.BinaryDecoder.prototype.readUint64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUint64(a,b)};jspb.BinaryDecoder.prototype.readUint64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUnsignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readInt8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;goog.asserts.assert(this.cursor_<=this.end_);return a<<24>>24};
  jspb.BinaryDecoder.prototype.readInt16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;goog.asserts.assert(this.cursor_<=this.end_);return (a<<0|b<<8)<<16>>16};jspb.BinaryDecoder.prototype.readInt32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;goog.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8|c<<16|d<<24};
  jspb.BinaryDecoder.prototype.readInt64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinInt64(a,b)};jspb.BinaryDecoder.prototype.readInt64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinSignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readFloat=function(){var a=this.readUint32();return jspb.utils.joinFloat32(a,0)};
  jspb.BinaryDecoder.prototype.readDouble=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinFloat64(a,b)};jspb.BinaryDecoder.prototype.readBool=function(){return !!this.bytes_[this.cursor_++]};jspb.BinaryDecoder.prototype.readEnum=function(){return this.readSignedVarint32()};
  jspb.BinaryDecoder.prototype.readString=function(a){var b=this.bytes_,c=this.cursor_;a=c+a;for(var d=[],e="";c<a;){var f=b[c++];if(128>f)d.push(f);else if(192>f)continue;else if(224>f){var g=b[c++];d.push((f&31)<<6|g&63);}else if(240>f){var g=b[c++],h=b[c++];d.push((f&15)<<12|(g&63)<<6|h&63);}else if(248>f){var g=b[c++],h=b[c++],k=b[c++],f=(f&7)<<18|(g&63)<<12|(h&63)<<6|k&63,f=f-65536;d.push((f>>10&1023)+55296,(f&1023)+56320);}8192<=d.length&&(e+=String.fromCharCode.apply(null,d),d.length=0);}e+=goog.crypt.byteArrayToString(d);
  this.cursor_=c;return e};jspb.BinaryDecoder.prototype.readStringWithLength=function(){var a=this.readUnsignedVarint32();return this.readString(a)};jspb.BinaryDecoder.prototype.readBytes=function(a){if(0>a||this.cursor_+a>this.bytes_.length)return this.error_=!0,goog.asserts.fail("Invalid byte length!"),new Uint8Array(0);var b=this.bytes_.subarray(this.cursor_,this.cursor_+a);this.cursor_+=a;goog.asserts.assert(this.cursor_<=this.end_);return b};
  jspb.BinaryDecoder.prototype.readVarintHash64=function(){this.readSplitVarint64_();return jspb.utils.joinHash64(this.tempLow_,this.tempHigh_)};jspb.BinaryDecoder.prototype.readFixedHash64=function(){var a=this.bytes_,b=this.cursor_,c=a[b+0],d=a[b+1],e=a[b+2],f=a[b+3],g=a[b+4],h=a[b+5],k=a[b+6],a=a[b+7];this.cursor_+=8;return String.fromCharCode(c,d,e,f,g,h,k,a)};jspb.BinaryReader=function(a,b,c){this.decoder_=jspb.BinaryDecoder.alloc(a,b,c);this.fieldCursor_=this.decoder_.getCursor();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null;};jspb.BinaryReader.instanceCache_=[];
  jspb.BinaryReader.alloc=function(a,b,c){if(jspb.BinaryReader.instanceCache_.length){var d=jspb.BinaryReader.instanceCache_.pop();a&&d.decoder_.setBlock(a,b,c);return d}return new jspb.BinaryReader(a,b,c)};jspb.BinaryReader.prototype.alloc=jspb.BinaryReader.alloc;
  jspb.BinaryReader.prototype.free=function(){this.decoder_.clear();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null;100>jspb.BinaryReader.instanceCache_.length&&jspb.BinaryReader.instanceCache_.push(this);};jspb.BinaryReader.prototype.getFieldCursor=function(){return this.fieldCursor_};jspb.BinaryReader.prototype.getCursor=function(){return this.decoder_.getCursor()};
  jspb.BinaryReader.prototype.getBuffer=function(){return this.decoder_.getBuffer()};jspb.BinaryReader.prototype.getFieldNumber=function(){return this.nextField_};jspb.BinaryReader.prototype.getWireType=function(){return this.nextWireType_};jspb.BinaryReader.prototype.isEndGroup=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP};jspb.BinaryReader.prototype.getError=function(){return this.error_||this.decoder_.getError()};
  jspb.BinaryReader.prototype.setBlock=function(a,b,c){this.decoder_.setBlock(a,b,c);this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;};jspb.BinaryReader.prototype.reset=function(){this.decoder_.reset();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;};jspb.BinaryReader.prototype.advance=function(a){this.decoder_.advance(a);};
  jspb.BinaryReader.prototype.nextField=function(){if(this.decoder_.atEnd())return !1;if(this.getError())return goog.asserts.fail("Decoder hit an error"),!1;this.fieldCursor_=this.decoder_.getCursor();var a=this.decoder_.readUnsignedVarint32(),b=a>>>3,a=a&7;if(a!=jspb.BinaryConstants.WireType.VARINT&&a!=jspb.BinaryConstants.WireType.FIXED32&&a!=jspb.BinaryConstants.WireType.FIXED64&&a!=jspb.BinaryConstants.WireType.DELIMITED&&a!=jspb.BinaryConstants.WireType.START_GROUP&&a!=jspb.BinaryConstants.WireType.END_GROUP)return goog.asserts.fail("Invalid wire type"),
  this.error_=!0,!1;this.nextField_=b;this.nextWireType_=a;return !0};jspb.BinaryReader.prototype.unskipHeader=function(){this.decoder_.unskipVarint(this.nextField_<<3|this.nextWireType_);};jspb.BinaryReader.prototype.skipMatchingFields=function(){var a=this.nextField_;for(this.unskipHeader();this.nextField()&&this.getFieldNumber()==a;)this.skipField();this.decoder_.atEnd()||this.unskipHeader();};
  jspb.BinaryReader.prototype.skipVarintField=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.VARINT?(goog.asserts.fail("Invalid wire type for skipVarintField"),this.skipField()):this.decoder_.skipVarint();};jspb.BinaryReader.prototype.skipDelimitedField=function(){if(this.nextWireType_!=jspb.BinaryConstants.WireType.DELIMITED)goog.asserts.fail("Invalid wire type for skipDelimitedField"),this.skipField();else{var a=this.decoder_.readUnsignedVarint32();this.decoder_.advance(a);}};
  jspb.BinaryReader.prototype.skipFixed32Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED32?(goog.asserts.fail("Invalid wire type for skipFixed32Field"),this.skipField()):this.decoder_.advance(4);};jspb.BinaryReader.prototype.skipFixed64Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED64?(goog.asserts.fail("Invalid wire type for skipFixed64Field"),this.skipField()):this.decoder_.advance(8);};
  jspb.BinaryReader.prototype.skipGroup=function(){var a=[this.nextField_];do{if(!this.nextField()){goog.asserts.fail("Unmatched start-group tag: stream EOF");this.error_=!0;break}if(this.nextWireType_==jspb.BinaryConstants.WireType.START_GROUP)a.push(this.nextField_);else if(this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP&&this.nextField_!=a.pop()){goog.asserts.fail("Unmatched end-group tag");this.error_=!0;break}}while(0<a.length)};
  jspb.BinaryReader.prototype.skipField=function(){switch(this.nextWireType_){case jspb.BinaryConstants.WireType.VARINT:this.skipVarintField();break;case jspb.BinaryConstants.WireType.FIXED64:this.skipFixed64Field();break;case jspb.BinaryConstants.WireType.DELIMITED:this.skipDelimitedField();break;case jspb.BinaryConstants.WireType.FIXED32:this.skipFixed32Field();break;case jspb.BinaryConstants.WireType.START_GROUP:this.skipGroup();break;default:goog.asserts.fail("Invalid wire encoding for field.");}};
  jspb.BinaryReader.prototype.registerReadCallback=function(a,b){goog.isNull(this.readCallbacks_)&&(this.readCallbacks_={});goog.asserts.assert(!this.readCallbacks_[a]);this.readCallbacks_[a]=b;};jspb.BinaryReader.prototype.runReadCallback=function(a){goog.asserts.assert(!goog.isNull(this.readCallbacks_));a=this.readCallbacks_[a];goog.asserts.assert(a);return a(this)};
  jspb.BinaryReader.prototype.readAny=function(a){this.nextWireType_=jspb.BinaryConstants.FieldTypeToWireType(a);var b=jspb.BinaryConstants.FieldType;switch(a){case b.DOUBLE:return this.readDouble();case b.FLOAT:return this.readFloat();case b.INT64:return this.readInt64();case b.UINT64:return this.readUint64();case b.INT32:return this.readInt32();case b.FIXED64:return this.readFixed64();case b.FIXED32:return this.readFixed32();case b.BOOL:return this.readBool();case b.STRING:return this.readString();
  case b.GROUP:goog.asserts.fail("Group field type not supported in readAny()");case b.MESSAGE:goog.asserts.fail("Message field type not supported in readAny()");case b.BYTES:return this.readBytes();case b.UINT32:return this.readUint32();case b.ENUM:return this.readEnum();case b.SFIXED32:return this.readSfixed32();case b.SFIXED64:return this.readSfixed64();case b.SINT32:return this.readSint32();case b.SINT64:return this.readSint64();case b.FHASH64:return this.readFixedHash64();case b.VHASH64:return this.readVarintHash64();
  default:goog.asserts.fail("Invalid field type in readAny()");}return 0};jspb.BinaryReader.prototype.readMessage=function(a,b){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var c=this.decoder_.getEnd(),d=this.decoder_.readUnsignedVarint32(),d=this.decoder_.getCursor()+d;this.decoder_.setEnd(d);b(a,this);this.decoder_.setCursor(d);this.decoder_.setEnd(c);};
  jspb.BinaryReader.prototype.readGroup=function(a,b,c){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.START_GROUP);goog.asserts.assert(this.nextField_==a);c(b,this);this.error_||this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP||(goog.asserts.fail("Group submessage did not end with an END_GROUP tag"),this.error_=!0);};
  jspb.BinaryReader.prototype.getFieldDecoder=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32(),b=this.decoder_.getCursor(),c=b+a,a=jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(),b,a);this.decoder_.setCursor(c);return a};jspb.BinaryReader.prototype.readInt32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32()};
  jspb.BinaryReader.prototype.readInt32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32String()};jspb.BinaryReader.prototype.readInt64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};jspb.BinaryReader.prototype.readInt64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64String()};
  jspb.BinaryReader.prototype.readUint32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32()};jspb.BinaryReader.prototype.readUint32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32String()};jspb.BinaryReader.prototype.readUint64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64()};
  jspb.BinaryReader.prototype.readUint64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64String()};jspb.BinaryReader.prototype.readSint32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint32()};jspb.BinaryReader.prototype.readSint64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64()};
  jspb.BinaryReader.prototype.readSint64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64String()};jspb.BinaryReader.prototype.readFixed32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readUint32()};jspb.BinaryReader.prototype.readFixed64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64()};
  jspb.BinaryReader.prototype.readFixed64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64String()};jspb.BinaryReader.prototype.readSfixed32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32()};jspb.BinaryReader.prototype.readSfixed32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32().toString()};
  jspb.BinaryReader.prototype.readSfixed64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64()};jspb.BinaryReader.prototype.readSfixed64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64String()};jspb.BinaryReader.prototype.readFloat=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readFloat()};
  jspb.BinaryReader.prototype.readDouble=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readDouble()};jspb.BinaryReader.prototype.readBool=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return !!this.decoder_.readUnsignedVarint32()};jspb.BinaryReader.prototype.readEnum=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};
  jspb.BinaryReader.prototype.readString=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readString(a)};jspb.BinaryReader.prototype.readBytes=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readBytes(a)};
  jspb.BinaryReader.prototype.readVarintHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readVarintHash64()};jspb.BinaryReader.prototype.readFixedHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readFixedHash64()};
  jspb.BinaryReader.prototype.readPackedField_=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);for(var b=this.decoder_.readUnsignedVarint32(),b=this.decoder_.getCursor()+b,c=[];this.decoder_.getCursor()<b;)c.push(a.call(this.decoder_));return c};jspb.BinaryReader.prototype.readPackedInt32=function(){return this.readPackedField_(this.decoder_.readSignedVarint32)};jspb.BinaryReader.prototype.readPackedInt32String=function(){return this.readPackedField_(this.decoder_.readSignedVarint32String)};
  jspb.BinaryReader.prototype.readPackedInt64=function(){return this.readPackedField_(this.decoder_.readSignedVarint64)};jspb.BinaryReader.prototype.readPackedInt64String=function(){return this.readPackedField_(this.decoder_.readSignedVarint64String)};jspb.BinaryReader.prototype.readPackedUint32=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32)};jspb.BinaryReader.prototype.readPackedUint32String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32String)};
  jspb.BinaryReader.prototype.readPackedUint64=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64)};jspb.BinaryReader.prototype.readPackedUint64String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64String)};jspb.BinaryReader.prototype.readPackedSint32=function(){return this.readPackedField_(this.decoder_.readZigzagVarint32)};jspb.BinaryReader.prototype.readPackedSint64=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64)};
  jspb.BinaryReader.prototype.readPackedSint64String=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64String)};jspb.BinaryReader.prototype.readPackedFixed32=function(){return this.readPackedField_(this.decoder_.readUint32)};jspb.BinaryReader.prototype.readPackedFixed64=function(){return this.readPackedField_(this.decoder_.readUint64)};jspb.BinaryReader.prototype.readPackedFixed64String=function(){return this.readPackedField_(this.decoder_.readUint64String)};
  jspb.BinaryReader.prototype.readPackedSfixed32=function(){return this.readPackedField_(this.decoder_.readInt32)};jspb.BinaryReader.prototype.readPackedSfixed64=function(){return this.readPackedField_(this.decoder_.readInt64)};jspb.BinaryReader.prototype.readPackedSfixed64String=function(){return this.readPackedField_(this.decoder_.readInt64String)};jspb.BinaryReader.prototype.readPackedFloat=function(){return this.readPackedField_(this.decoder_.readFloat)};
  jspb.BinaryReader.prototype.readPackedDouble=function(){return this.readPackedField_(this.decoder_.readDouble)};jspb.BinaryReader.prototype.readPackedBool=function(){return this.readPackedField_(this.decoder_.readBool)};jspb.BinaryReader.prototype.readPackedEnum=function(){return this.readPackedField_(this.decoder_.readEnum)};jspb.BinaryReader.prototype.readPackedVarintHash64=function(){return this.readPackedField_(this.decoder_.readVarintHash64)};
  jspb.BinaryReader.prototype.readPackedFixedHash64=function(){return this.readPackedField_(this.decoder_.readFixedHash64)};jspb.Export={};var Map$1=jspb.Map;var Message=jspb.Message;var BinaryReader=jspb.BinaryReader;var BinaryWriter=jspb.BinaryWriter;var ExtensionFieldInfo=jspb.ExtensionFieldInfo;var ExtensionFieldBinaryInfo=jspb.ExtensionFieldBinaryInfo;var exportSymbol=goog.exportSymbol;var inherits=goog.inherits;var object={extend:goog.object.extend};var typeOf=goog.typeOf;

  var googleProtobuf = {
  	Map: Map$1,
  	Message: Message,
  	BinaryReader: BinaryReader,
  	BinaryWriter: BinaryWriter,
  	ExtensionFieldInfo: ExtensionFieldInfo,
  	ExtensionFieldBinaryInfo: ExtensionFieldBinaryInfo,
  	exportSymbol: exportSymbol,
  	inherits: inherits,
  	object: object,
  	typeOf: typeOf
  };

  var inherits_browser = createCommonjsModule(function (module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  });

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  function read (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString = {}.toString;

  var isArray = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer$1.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
    ? global.TYPED_ARRAY_SUPPORT
    : true;

  /*
   * Export kMaxLength after typed array support is determined.
   */
  var _kMaxLength = kMaxLength();

  function kMaxLength () {
    return Buffer$1.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer$1.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer$1(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer$1 (arg, encodingOrOffset, length) {
    if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
      return new Buffer$1(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer$1.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer$1._augment = function (arr) {
    arr.__proto__ = Buffer$1.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer$1.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    Buffer$1.prototype.__proto__ = Uint8Array.prototype;
    Buffer$1.__proto__ = Uint8Array;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer$1.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer$1.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer$1.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer$1.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer$1.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }

  function SlowBuffer (length) {
    if (+length != length) { // eslint-disable-line eqeqeq
      length = 0;
    }
    return Buffer$1.alloc(+length)
  }
  Buffer$1.isBuffer = isBuffer;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer$1.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer$1.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer$1.concat = function concat (list, length) {
    if (!isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer$1.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer$1.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer$1.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer$1.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer$1.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this
  };

  Buffer$1.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this
  };

  Buffer$1.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this
  };

  Buffer$1.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer$1.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer$1.compare(this, b) === 0
  };

  Buffer$1.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer$1.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer$1.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer$1.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read$$1 (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read$$1(arr, i) === read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read$$1(arr, i + j) !== read$$1(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer$1.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer$1.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer$1.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer$1.prototype.write = function write$$1 (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer$1.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer$1.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer$1.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer$1(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer$1.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer$1.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer$1.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer$1.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer$1.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer$1.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer$1.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer$1.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer$1.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer$1.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer$1.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer$1.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer$1.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer$1.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer$1.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4)
  };

  Buffer$1.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4)
  };

  Buffer$1.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8)
  };

  Buffer$1.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer$1.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer$1.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer$1.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer$1.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer$1.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer$1.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer$1.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer$1.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer$1.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer$1.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer$1.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer$1.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer$1.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer$1.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer$1.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes(new Buffer$1(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  var bufferEs6 = /*#__PURE__*/Object.freeze({
    INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
    kMaxLength: _kMaxLength,
    Buffer: Buffer$1,
    SlowBuffer: SlowBuffer,
    isBuffer: isBuffer
  });

  var safeBuffer = createCommonjsModule(function (module, exports) {
  /* eslint-disable node/no-deprecated-api */

  var Buffer = bufferEs6.Buffer;

  // alternative to using Object.keys for old browsers
  function copyProps (src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = bufferEs6;
  } else {
    // Copy properties from require('buffer')
    copyProps(bufferEs6, exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer (arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length)
  }

  // Copy static methods from Buffer
  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number')
    }
    return Buffer(arg, encodingOrOffset, length)
  };

  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf
  };

  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return Buffer(size)
  };

  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return bufferEs6.SlowBuffer(size)
  };
  });
  var safeBuffer_1 = safeBuffer.Buffer;

  var domain;

  // This constructor is used to store event handlers. Instantiating this is
  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
  // object (tested with v8 v4.9).
  function EventHandlers() {}
  EventHandlers.prototype = Object.create(null);

  function EventEmitter() {
    EventEmitter.init.call(this);
  }

  // nodejs oddity
  // require('events') === require('events').EventEmitter
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.usingDomains = false;

  EventEmitter.prototype.domain = undefined;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter.defaultMaxListeners = 10;

  EventEmitter.init = function() {
    this.domain = null;
    if (EventEmitter.usingDomains) {
      // if there is an active domain, then attach to it.
      if (domain.active && !(this instanceof domain.Domain)) ;
    }

    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n))
      throw new TypeError('"n" argument must be a positive number');
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  };

  // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.
  function emitNone(handler, isFn, self) {
    if (isFn)
      handler.call(self);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self);
    }
  }
  function emitOne(handler, isFn, self, arg1) {
    if (isFn)
      handler.call(self, arg1);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1);
    }
  }
  function emitTwo(handler, isFn, self, arg1, arg2) {
    if (isFn)
      handler.call(self, arg1, arg2);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2);
    }
  }
  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn)
      handler.call(self, arg1, arg2, arg3);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2, arg3);
    }
  }

  function emitMany(handler, isFn, self, args) {
    if (isFn)
      handler.apply(self, args);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].apply(self, args);
    }
  }

  EventEmitter.prototype.emit = function emit(type) {
    var er, handler, len, args, i, events, domain;
    var doError = (type === 'error');

    events = this._events;
    if (events)
      doError = (doError && events.error == null);
    else if (!doError)
      return false;

    domain = this.domain;

    // If there is no 'error' event listener then throw.
    if (doError) {
      er = arguments[1];
      if (domain) {
        if (!er)
          er = new Error('Uncaught, unspecified "error" event');
        er.domainEmitter = this;
        er.domain = domain;
        er.domainThrown = false;
        domain.emit('error', er);
      } else if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
      return false;
    }

    handler = events[type];

    if (!handler)
      return false;

    var isFn = typeof handler === 'function';
    len = arguments.length;
    switch (len) {
      // fast cases
      case 1:
        emitNone(handler, isFn, this);
        break;
      case 2:
        emitOne(handler, isFn, this, arguments[1]);
        break;
      case 3:
        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
        break;
      case 4:
        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
      // slower
      default:
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        emitMany(handler, isFn, this, args);
    }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');

    events = target._events;
    if (!events) {
      events = target._events = new EventHandlers();
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] :
                                            [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      }

      // Check for listener leak
      if (!existing.warned) {
        m = $getMaxListeners(target);
        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + type + ' listeners added. ' +
                              'Use emitter.setMaxListeners() to increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          emitWarning(w);
        }
      }
    }

    return target;
  }
  function emitWarning(e) {
    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
  }
  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function _onceWrap(target, type, listener) {
    var fired = false;
    function g() {
      target.removeListener(type, g);
      if (!fired) {
        fired = true;
        listener.apply(target, arguments);
      }
    }
    g.listener = listener;
    return g;
  }

  EventEmitter.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');

        events = this._events;
        if (!events)
          return this;

        list = events[type];
        if (!list)
          return this;

        if (list === listener || (list.listener && list.listener === listener)) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length; i-- > 0;) {
            if (list[i] === listener ||
                (list[i].listener && list[i].listener === listener)) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (list.length === 1) {
            list[0] = undefined;
            if (--this._eventsCount === 0) {
              this._events = new EventHandlers();
              return this;
            } else {
              delete events[type];
            }
          } else {
            spliceOne(list, position);
          }

          if (events.removeListener)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };

  EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events;

        events = this._events;
        if (!events)
          return this;

        // not listening for removeListener, no need to emit
        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = new EventHandlers();
            this._eventsCount = 0;
          } else if (events[type]) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          for (var i = 0, key; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = new EventHandlers();
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          do {
            this.removeListener(type, listeners[listeners.length - 1]);
          } while (listeners[0]);
        }

        return this;
      };

  EventEmitter.prototype.listeners = function listeners(type) {
    var evlistener;
    var ret;
    var events = this._events;

    if (!events)
      ret = [];
    else {
      evlistener = events[type];
      if (!evlistener)
        ret = [];
      else if (typeof evlistener === 'function')
        ret = [evlistener.listener || evlistener];
      else
        ret = unwrapListeners(evlistener);
    }

    return ret;
  };

  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };

  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  };

  // About 1.5x faster than the two-arg version of Array#splice().
  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
      list[i] = list[k];
    list.pop();
  }

  function arrayClone(arr, i) {
    var copy = new Array(i);
    while (i--)
      copy[i] = arr[i];
    return copy;
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  var events = /*#__PURE__*/Object.freeze({
    default: EventEmitter,
    EventEmitter: EventEmitter
  });

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform = 'browser';
  var browser = true;
  var env = {};
  var argv = [];
  var version = ''; // empty string to avoid regexp issues
  var versions = {};
  var release = {};
  var config = {};

  function noop() {}

  var on = noop;
  var addListener = noop;
  var once = noop;
  var off = noop;
  var removeListener = noop;
  var removeAllListeners = noop;
  var emit = noop;

  function binding(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance = global.performance || {};
  var performanceNow =
    performance.now        ||
    performance.mozNow     ||
    performance.msNow      ||
    performance.oNow       ||
    performance.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var process$1 = {
    nextTick: nextTick,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
  };

  var inherits$1;
  if (typeof Object.create === 'function'){
    inherits$1 = function inherits(ctor, superCtor) {
      // implementation from standard node.js 'util' module
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    inherits$1 = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  var inherits$2 = inherits$1;

  // Copyright Joyent, Inc. and other Node contributors.
  var formatRegExp = /%[sdj%]/g;
  function format(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  }

  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  function deprecate(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global.process)) {
      return function() {
        return deprecate(fn, msg).apply(this, arguments);
      };
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  }

  var debugs = {};
  var debugEnviron;
  function debuglog(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = process$1.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = 0;
        debugs[set] = function() {
          var msg = format.apply(null, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  }

  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      _extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }

  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray$1(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray$1(ar) {
    return Array.isArray(ar);
  }

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNullOrUndefined(arg) {
    return arg == null;
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }

  function isUndefined(arg) {
    return arg === void 0;
  }

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }

  function isBuffer$1(maybeBuf) {
    return Buffer.isBuffer(maybeBuf);
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }


  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }


  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }


  // log is just a thin wrapper to console.log that prepends a timestamp
  function log() {
    console.log('%s - %s', timestamp(), format.apply(null, arguments));
  }

  function _extend(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  }
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var util = {
    inherits: inherits$2,
    _extend: _extend,
    log: log,
    isBuffer: isBuffer$1,
    isPrimitive: isPrimitive,
    isFunction: isFunction,
    isError: isError,
    isDate: isDate,
    isObject: isObject,
    isRegExp: isRegExp,
    isUndefined: isUndefined,
    isSymbol: isSymbol,
    isString: isString,
    isNumber: isNumber,
    isNullOrUndefined: isNullOrUndefined,
    isNull: isNull,
    isBoolean: isBoolean,
    isArray: isArray$1,
    inspect: inspect,
    deprecate: deprecate,
    format: format,
    debuglog: debuglog
  };

  var util$1 = /*#__PURE__*/Object.freeze({
    format: format,
    deprecate: deprecate,
    debuglog: debuglog,
    inspect: inspect,
    isArray: isArray$1,
    isBoolean: isBoolean,
    isNull: isNull,
    isNullOrUndefined: isNullOrUndefined,
    isNumber: isNumber,
    isString: isString,
    isSymbol: isSymbol,
    isUndefined: isUndefined,
    isRegExp: isRegExp,
    isObject: isObject,
    isDate: isDate,
    isError: isError,
    isFunction: isFunction,
    isPrimitive: isPrimitive,
    isBuffer: isBuffer$1,
    log: log,
    inherits: inherits$2,
    _extend: _extend,
    default: util
  });

  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function (v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function (v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function () {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function () {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function (s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function (n) {
    if (this.length === 0) return Buffer$1.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer$1.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      p.data.copy(ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  /*<replacement>*/

  var Buffer$2 = safeBuffer.Buffer;
  /*</replacement>*/

  var isEncoding = Buffer$2.isEncoding || function (encoding) {
    encoding = '' + encoding;
    switch (encoding && encoding.toLowerCase()) {
      case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
        return true;
      default:
        return false;
    }
  };

  function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while (true) {
      switch (enc) {
        case 'utf8':
        case 'utf-8':
          return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return 'utf16le';
        case 'latin1':
        case 'binary':
          return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
          return enc;
        default:
          if (retried) return; // undefined
          enc = ('' + enc).toLowerCase();
          retried = true;
      }
    }
  }
  // Do not cache `Buffer.isEncoding` when checking encoding names as some
  // modules monkey-patch it to support additional encodings
  function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== 'string' && (Buffer$2.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
  }

  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters.
  var StringDecoder_1 = StringDecoder;
  function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch (this.encoding) {
      case 'utf16le':
        this.text = utf16Text;
        this.end = utf16End;
        nb = 4;
        break;
      case 'utf8':
        this.fillLast = utf8FillLast;
        nb = 4;
        break;
      case 'base64':
        this.text = base64Text;
        this.end = base64End;
        nb = 3;
        break;
      default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer$2.allocUnsafe(nb);
  }

  StringDecoder.prototype.write = function (buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
      r = this.fillLast(buf);
      if (r === undefined) return '';
      i = this.lastNeed;
      this.lastNeed = 0;
    } else {
      i = 0;
    }
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
  };

  StringDecoder.prototype.end = utf8End;

  // Returns only complete characters in a Buffer
  StringDecoder.prototype.text = utf8Text;

  // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
  StringDecoder.prototype.fillLast = function (buf) {
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
  };

  // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
  // continuation byte. If an invalid byte is detected, -2 is returned.
  function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
  }

  // Checks at most 3 bytes at the end of a Buffer in order to detect an
  // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
  // needed to complete the UTF-8 character (if applicable) are returned.
  function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 1;
      return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 2;
      return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) {
        if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
      }
      return nb;
    }
    return 0;
  }

  // Validates as many continuation bytes for a multi-byte UTF-8 character as
  // needed or are available. If we see a non-continuation byte where we expect
  // one, we "replace" the validated continuation bytes we've seen so far with
  // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
  // behavior. The continuation byte check is included three times in the case
  // where all of the continuation bytes for a character exist in the same buffer.
  // It is also done this way as a slight performance increase instead of using a
  // loop.
  function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
      self.lastNeed = 0;
      return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
      if ((buf[1] & 0xC0) !== 0x80) {
        self.lastNeed = 1;
        return '\ufffd';
      }
      if (self.lastNeed > 2 && buf.length > 2) {
        if ((buf[2] & 0xC0) !== 0x80) {
          self.lastNeed = 2;
          return '\ufffd';
        }
      }
    }
  }

  // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
  function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, p, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
  }

  // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
  // partial character, the character's bytes are buffered until the required
  // number of bytes are available.
  function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
  }

  // For UTF-8, a replacement character is added when ending on a partial
  // character.
  function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
  }

  // UTF-16LE typically needs two bytes per character, but even if we have an even
  // number of bytes available, we need to check if we end on a leading/high
  // surrogate. In that case, we need to wait for the next two bytes in order to
  // decode the last character properly.
  function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
      var r = buf.toString('utf16le', i);
      if (r) {
        var c = r.charCodeAt(r.length - 1);
        if (c >= 0xD800 && c <= 0xDBFF) {
          this.lastNeed = 2;
          this.lastTotal = 4;
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
          return r.slice(0, -1);
        }
      }
      return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
  }

  // For UTF-16LE we do not explicitly append special replacement characters if we
  // end on a partial character, we simply let v8 handle that.
  function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
      var end = this.lastTotal - this.lastNeed;
      return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
  }

  function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) {
      this.lastChar[0] = buf[buf.length - 1];
    } else {
      this.lastChar[0] = buf[buf.length - 2];
      this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
  }

  function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
  }

  // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
  function simpleWrite(buf) {
    return buf.toString(this.encoding);
  }

  function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
  }

  var string_decoder = {
  	StringDecoder: StringDecoder_1
  };

  Readable.ReadableState = ReadableState;

  var debug = debuglog('stream');
  inherits$2(Readable, EventEmitter);

  function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') {
      return emitter.prependListener(event, fn);
    } else {
      // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
  }
  function listenerCount$1 (emitter, type) {
    return emitter.listeners(type).length;
  }
  function ReadableState(options, stream) {

    options = options || {};

    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // when piping, we only care about 'readable' events that happen
    // after read()ing all the bytes and not getting any pushback.
    this.ranOut = false;

    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;

    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;

    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      this.decoder = new StringDecoder_1(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {

    if (!(this instanceof Readable)) return new Readable(options);

    this._readableState = new ReadableState(options, this);

    // legacy
    this.readable = true;

    if (options && typeof options.read === 'function') this._read = options.read;

    EventEmitter.call(this);
  }

  // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.
  Readable.prototype.push = function (chunk, encoding) {
    var state = this._readableState;

    if (!state.objectMode && typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
    }

    return readableAddChunk(this, state, chunk, encoding, false);
  };

  // Unshift should *always* be something directly out of read()
  Readable.prototype.unshift = function (chunk) {
    var state = this._readableState;
    return readableAddChunk(this, state, chunk, '', true);
  };

  Readable.prototype.isPaused = function () {
    return this._readableState.flowing === false;
  };

  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error('stream.push() after EOF');
        stream.emit('error', e);
      } else if (state.endEmitted && addToFront) {
        var _e = new Error('stream.unshift() after end event');
        stream.emit('error', _e);
      } else {
        var skipAdd;
        if (state.decoder && !addToFront && !encoding) {
          chunk = state.decoder.write(chunk);
          skipAdd = !state.objectMode && chunk.length === 0;
        }

        if (!addToFront) state.reading = false;

        // Don't add to the buffer if we've decoded to an empty string chunk and
        // we're not in object mode
        if (!skipAdd) {
          // if we want the data now, just emit it.
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

            if (state.needReadable) emitReadable(stream);
          }
        }

        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }

    return needMoreData(state);
  }

  // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.
  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  }

  // backwards compatibility.
  Readable.prototype.setEncoding = function (enc) {
    this._readableState.decoder = new StringDecoder_1(enc);
    this._readableState.encoding = enc;
    return this;
  };

  // Don't raise the hwm > 8MB
  var MAX_HWM = 0x800000;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2 to prevent increasing hwm excessively in
      // tiny amounts
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }

  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
      // Only flow one buffer at a time
      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }

  // you can override either this method, or the async _read(n) below.
  Readable.prototype.read = function (n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;

    if (n !== 0) state.emittedReadable = false;

    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
      return null;
    }

    n = howMuchToRead(n, state);

    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
      if (state.length === 0) endReadable(this);
      return null;
    }

    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.

    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);

    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    }

    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    } else if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true;
      // if the length is currently zero, then we *need* a readable event.
      if (state.length === 0) state.needReadable = true;
      // call internal read method
      this._read(state.highWaterMark);
      state.sync = false;
      // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.
      if (!state.reading) n = howMuchToRead(nOrig, state);
    }

    var ret;
    if (n > 0) ret = fromList(n, state);else ret = null;

    if (ret === null) {
      state.needReadable = true;
      n = 0;
    } else {
      state.length -= n;
    }

    if (state.length === 0) {
      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (!state.ended) state.needReadable = true;

      // If we tried to read() past the EOF, then emit end on the next tick.
      if (nOrig !== n && state.ended) endReadable(this);
    }

    if (ret !== null) this.emit('data', ret);

    return ret;
  };

  function chunkInvalid(state, chunk) {
    var er = null;
    if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    return er;
  }

  function onEofChunk(stream, state) {
    if (state.ended) return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;

    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
  }

  // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
    }
  }

  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  }

  // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      nextTick(maybeReadMore_, stream, state);
    }
  }

  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length)
        // didn't get any data, stop spinning.
        break;else len = state.length;
    }
    state.readingMore = false;
  }

  // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.
  Readable.prototype._read = function (n) {
    this.emit('error', new Error('not implemented'));
  };

  Readable.prototype.pipe = function (dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

    var doEnd = (!pipeOpts || pipeOpts.end !== false);

    var endFn = doEnd ? onend : cleanup;
    if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

    dest.on('unpipe', onunpipe);
    function onunpipe(readable) {
      debug('onunpipe');
      if (readable === src) {
        cleanup();
      }
    }

    function onend() {
      debug('onend');
      dest.end();
    }

    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);

    var cleanedUp = false;
    function cleanup() {
      debug('cleanup');
      // cleanup event handlers once the pipe is broken
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', cleanup);
      src.removeListener('data', ondata);

      cleanedUp = true;

      // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }

    // If the user pushes more data while we're writing to dest then we'll end up
    // in ondata again. However, we only want to increase awaitDrain once because
    // dest will only emit one 'drain' event for the multiple writes.
    // => Introduce a guard on increasing awaitDrain.
    var increasedAwaitDrain = false;
    src.on('data', ondata);
    function ondata(chunk) {
      debug('ondata');
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);
      if (false === ret && !increasedAwaitDrain) {
        // If the user unpiped during `dest.write()`, it is possible
        // to get stuck in a permanently paused state if that write
        // also returned false.
        // => Check whether `dest` is still a piping destination.
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug('false write response, pause', src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
          increasedAwaitDrain = true;
        }
        src.pause();
      }
    }

    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
    }

    // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror);

    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
    dest.once('finish', onfinish);

    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    }

    // tell the dest that it's being piped to
    dest.emit('pipe', src);

    // start the flow if it hasn't been started already.
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function () {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain) state.awaitDrain--;
      if (state.awaitDrain === 0 && src.listeners('data').length) {
        state.flowing = true;
        flow(src);
      }
    };
  }

  Readable.prototype.unpipe = function (dest) {
    var state = this._readableState;

    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;

    // just one destination.  most common case.
    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes) return this;

      if (!dest) dest = state.pipes;

      // got a match.
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest) dest.emit('unpipe', this);
      return this;
    }

    // slow case. multiple pipe destinations.

    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var _i = 0; _i < len; _i++) {
        dests[_i].emit('unpipe', this);
      }return this;
    }

    // try to find the right one.
    var i = indexOf(state.pipes, dest);
    if (i === -1) return this;

    state.pipes.splice(i, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];

    dest.emit('unpipe', this);

    return this;
  };

  // set up data events if they are asked for
  // Ensure readable listeners eventually get something
  Readable.prototype.on = function (ev, fn) {
    var res = EventEmitter.prototype.on.call(this, ev, fn);

    if (ev === 'data') {
      // Start flowing on next tick if stream isn't explicitly paused
      if (this._readableState.flowing !== false) this.resume();
    } else if (ev === 'readable') {
      var state = this._readableState;
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.emittedReadable = false;
        if (!state.reading) {
          nextTick(nReadingNextTick, this);
        } else if (state.length) {
          emitReadable(this, state);
        }
      }
    }

    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;

  function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
  }

  // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.
  Readable.prototype.resume = function () {
    var state = this._readableState;
    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      resume(this, state);
    }
    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      nextTick(resume_, stream, state);
    }
  }

  function resume_(stream, state) {
    if (!state.reading) {
      debug('resume read 0');
      stream.read(0);
    }

    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
  }

  Readable.prototype.pause = function () {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while (state.flowing && stream.read() !== null) {}
  }

  // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.
  Readable.prototype.wrap = function (stream) {
    var state = this._readableState;
    var paused = false;

    var self = this;
    stream.on('end', function () {
      debug('wrapped end');
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) self.push(chunk);
      }

      self.push(null);
    });

    stream.on('data', function (chunk) {
      debug('wrapped data');
      if (state.decoder) chunk = state.decoder.write(chunk);

      // don't skip over falsy values in objectMode
      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

      var ret = self.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });

    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for (var i in stream) {
      if (this[i] === undefined && typeof stream[i] === 'function') {
        this[i] = function (method) {
          return function () {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    }

    // proxy certain important events.
    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
    forEach(events, function (ev) {
      stream.on(ev, self.emit.bind(self, ev));
    });

    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    self._read = function (n) {
      debug('wrapped _read', n);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return self;
  };

  // exposed for testing purposes only.
  Readable._fromList = fromList;

  // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;

    var ret;
    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
      // read it all, truncate the list
      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      // read part of list
      ret = fromListPartial(n, state.buffer, state.decoder);
    }

    return ret;
  }

  // Extracts only enough buffered data to satisfy the amount requested.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromListPartial(n, list, hasStrings) {
    var ret;
    if (n < list.head.data.length) {
      // slice is the same for buffers and strings
      ret = list.head.data.slice(0, n);
      list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
      // first chunk is a perfect match
      ret = list.shift();
    } else {
      // result spans more than one buffer
      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }
    return ret;
  }

  // Copies a specified amount of characters from the list of buffered data
  // chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;
    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;
      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = str.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  // Copies a specified amount of bytes from the list of buffered data chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBuffer(n, list) {
    var ret = Buffer.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;
    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;
      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = buf.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState;

    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

    if (!state.endEmitted) {
      state.ended = true;
      nextTick(endReadableNT, state, stream);
    }
  }

  function endReadableNT(state, stream) {
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');
    }
  }

  function forEach(xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }
    return -1;
  }

  // A bit simpler than readable streams.
  Writable.WritableState = WritableState;
  inherits$2(Writable, EventEmitter);

  function nop() {}

  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
  }

  function WritableState(options, stream) {
    Object.defineProperty(this, 'buffer', {
      get: deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
    options = options || {};

    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;

    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;

    // a flag to see when we're in the middle of a write.
    this.writing = false;

    // when true all writes will be buffered until .uncork() call
    this.corked = 0;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;

    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function (er) {
      onwrite(stream, er);
    };

    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;

    // the amount that is being written when _write is called.
    this.writelen = 0;

    this.bufferedRequest = null;
    this.lastBufferedRequest = null;

    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;

    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;

    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;

    // count buffered requests
    this.bufferedRequestCount = 0;

    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
  }

  WritableState.prototype.getBuffer = function writableStateGetBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  function Writable(options) {

    // Writable ctor is applied to Duplexes, though they're not
    // instanceof Writable, they're instanceof Readable.
    if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

    this._writableState = new WritableState(options, this);

    // legacy.
    this.writable = true;

    if (options) {
      if (typeof options.write === 'function') this._write = options.write;

      if (typeof options.writev === 'function') this._writev = options.writev;
    }

    EventEmitter.call(this);
  }

  // Otherwise people can pipe Writable streams, which is just wrong.
  Writable.prototype.pipe = function () {
    this.emit('error', new Error('Cannot pipe, not readable'));
  };

  function writeAfterEnd(stream, cb) {
    var er = new Error('write after end');
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit('error', er);
    nextTick(cb, er);
  }

  // If we get something that is not a buffer, string, null, or undefined,
  // and we're not in objectMode, then that's an error.
  // Otherwise stream chunks are all considered to be of length=1, and the
  // watermarks determine how many objects to keep in the buffer, rather than
  // how many bytes or characters.
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false;
    // Always throw error if a null is written
    // if we are not in object mode then throw
    // if it is not a buffer, string, or undefined.
    if (chunk === null) {
      er = new TypeError('May not write null values to stream');
    } else if (!Buffer$1.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    if (er) {
      stream.emit('error', er);
      nextTick(cb, er);
      valid = false;
    }
    return valid;
  }

  Writable.prototype.write = function (chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;

    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

    if (typeof cb !== 'function') cb = nop;

    if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, chunk, encoding, cb);
    }

    return ret;
  };

  Writable.prototype.cork = function () {
    var state = this._writableState;

    state.corked++;
  };

  Writable.prototype.uncork = function () {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;

      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
  };

  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = Buffer$1.from(chunk, encoding);
    }
    return chunk;
  }

  // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.
  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);

    if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';
    var len = state.objectMode ? 1 : chunk.length;

    state.length += len;

    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;

    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }

    return ret;
  }

  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) nextTick(cb, er);else cb(er);

    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;

    onwriteStateUpdate(state);

    if (er) onwriteError(stream, state, sync, er, cb);else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(state);

      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }

      if (sync) {
        /*<replacement>*/
          nextTick(afterWrite, stream, state, finished, cb);
        /*</replacement>*/
      } else {
          afterWrite(stream, state, finished, cb);
        }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }

  // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  }

  // if there's something in the buffer waiting, then process it
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;

    if (stream._writev && entry && entry.next) {
      // Fast case, write everything using _writev()
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;

      var count = 0;
      while (entry) {
        buffer[count] = entry;
        entry = entry.next;
        count += 1;
      }

      doWrite(stream, state, true, state.length, buffer, '', holder.finish);

      // doWrite is almost always async, defer these to save a bit of time
      // as the hot path ends with doWrite
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
    } else {
      // Slow case, write chunks one-by-one
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;

        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.
        if (state.writing) {
          break;
        }
      }

      if (entry === null) state.lastBufferedRequest = null;
    }

    state.bufferedRequestCount = 0;
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }

  Writable.prototype._write = function (chunk, encoding, cb) {
    cb(new Error('not implemented'));
  };

  Writable.prototype._writev = null;

  Writable.prototype.end = function (chunk, encoding, cb) {
    var state = this._writableState;

    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

    // .end() fully uncorks
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }

    // ignore unnecessary end() calls.
    if (!state.ending && !state.finished) endWritable(this, state, cb);
  };

  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }

  function prefinish(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
      if (state.pendingcb === 0) {
        prefinish(stream, state);
        state.finished = true;
        stream.emit('finish');
      } else {
        prefinish(stream, state);
      }
    }
    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished) nextTick(cb);else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
  }

  // It seems a linked list but it is not
  // there will be only 2 of these for each stream
  function CorkedRequest(state) {
    var _this = this;

    this.next = null;
    this.entry = null;

    this.finish = function (err) {
      var entry = _this.entry;
      _this.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = _this;
      } else {
        state.corkedRequestsFree = _this;
      }
    };
  }

  inherits$2(Duplex, Readable);

  var keys = Object.keys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
  function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);

    Readable.call(this, options);
    Writable.call(this, options);

    if (options && options.readable === false) this.readable = false;

    if (options && options.writable === false) this.writable = false;

    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

    this.once('end', onend);
  }

  // the no-half-open enforcer
  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended) return;

    // no more data can be written.
    // But allow more writes to happen in this tick.
    nextTick(onEndNT, this);
  }

  function onEndNT(self) {
    self.end();
  }

  // a transform stream is a readable/writable stream where you do
  inherits$2(Transform, Duplex);

  function TransformState(stream) {
    this.afterTransform = function (er, data) {
      return afterTransform(stream, er, data);
    };

    this.needTransform = false;
    this.transforming = false;
    this.writecb = null;
    this.writechunk = null;
    this.writeencoding = null;
  }

  function afterTransform(stream, er, data) {
    var ts = stream._transformState;
    ts.transforming = false;

    var cb = ts.writecb;

    if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

    ts.writechunk = null;
    ts.writecb = null;

    if (data !== null && data !== undefined) stream.push(data);

    cb(er);

    var rs = stream._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      stream._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);

    Duplex.call(this, options);

    this._transformState = new TransformState(this);

    // when the writable side finishes, then flush out anything remaining.
    var stream = this;

    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;

    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;

    if (options) {
      if (typeof options.transform === 'function') this._transform = options.transform;

      if (typeof options.flush === 'function') this._flush = options.flush;
    }

    this.once('prefinish', function () {
      if (typeof this._flush === 'function') this._flush(function (er) {
        done(stream, er);
      });else done(stream);
    });
  }

  Transform.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };

  // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.
  Transform.prototype._transform = function (chunk, encoding, cb) {
    throw new Error('Not implemented');
  };

  Transform.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  };

  // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.
  Transform.prototype._read = function (n) {
    var ts = this._transformState;

    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };

  function done(stream, er) {
    if (er) return stream.emit('error', er);

    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    var ws = stream._writableState;
    var ts = stream._transformState;

    if (ws.length) throw new Error('Calling transform done when ws.length != 0');

    if (ts.transforming) throw new Error('Calling transform done when still transforming');

    return stream.push(null);
  }

  inherits$2(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);

    Transform.call(this, options);
  }

  PassThrough.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };

  inherits$2(Stream, EventEmitter);
  Stream.Readable = Readable;
  Stream.Writable = Writable;
  Stream.Duplex = Duplex;
  Stream.Transform = Transform;
  Stream.PassThrough = PassThrough;

  // Backwards-compat with node 0.4.x
  Stream.Stream = Stream;

  // old-style streams.  Note that the pipe method (the only relevant
  // part of this class) is overridden in the Readable class.

  function Stream() {
    EventEmitter.call(this);
  }

  Stream.prototype.pipe = function(dest, options) {
    var source = this;

    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }

    source.on('data', ondata);

    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }

    dest.on('drain', ondrain);

    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }

    var didOnEnd = false;
    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;

      dest.end();
    }


    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;

      if (typeof dest.destroy === 'function') dest.destroy();
    }

    // don't leave dangling pipes when there are errors.
    function onerror(er) {
      cleanup();
      if (EventEmitter.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }

    source.on('error', onerror);
    dest.on('error', onerror);

    // remove all the event listeners that were added.
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);

      source.removeListener('end', onend);
      source.removeListener('close', onclose);

      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);

      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);

      dest.removeListener('close', cleanup);
    }

    source.on('end', cleanup);
    source.on('close', cleanup);

    dest.on('close', cleanup);

    dest.emit('pipe', source);

    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
  };

  var stream = /*#__PURE__*/Object.freeze({
    default: Stream,
    Readable: Readable,
    Writable: Writable,
    Duplex: Duplex,
    Transform: Transform,
    PassThrough: PassThrough,
    Stream: Stream
  });

  var require$$1 = ( stream && Stream ) || stream;

  var Buffer$3 = safeBuffer.Buffer;
  var Transform$1 = require$$1.Transform;


  function throwIfNotStringOrBuffer (val, prefix) {
    if (!Buffer$3.isBuffer(val) && typeof val !== 'string') {
      throw new TypeError(prefix + ' must be a string or a buffer')
    }
  }

  function HashBase (blockSize) {
    Transform$1.call(this);

    this._block = Buffer$3.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [0, 0, 0, 0];

    this._finalized = false;
  }

  inherits_browser(HashBase, Transform$1);

  HashBase.prototype._transform = function (chunk, encoding, callback) {
    var error = null;
    try {
      this.update(chunk, encoding);
    } catch (err) {
      error = err;
    }

    callback(error);
  };

  HashBase.prototype._flush = function (callback) {
    var error = null;
    try {
      this.push(this.digest());
    } catch (err) {
      error = err;
    }

    callback(error);
  };

  HashBase.prototype.update = function (data, encoding) {
    throwIfNotStringOrBuffer(data, 'Data');
    if (this._finalized) throw new Error('Digest already called')
    if (!Buffer$3.isBuffer(data)) data = Buffer$3.from(data, encoding);

    // consume data
    var block = this._block;
    var offset = 0;
    while (this._blockOffset + data.length - offset >= this._blockSize) {
      for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];
      this._update();
      this._blockOffset = 0;
    }
    while (offset < data.length) block[this._blockOffset++] = data[offset++];

    // update length
    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
      this._length[j] += carry;
      carry = (this._length[j] / 0x0100000000) | 0;
      if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }

    return this
  };

  HashBase.prototype._update = function () {
    throw new Error('_update is not implemented')
  };

  HashBase.prototype.digest = function (encoding) {
    if (this._finalized) throw new Error('Digest already called')
    this._finalized = true;

    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);

    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for (var i = 0; i < 4; ++i) this._length[i] = 0;

    return digest
  };

  HashBase.prototype._digest = function () {
    throw new Error('_digest is not implemented')
  };

  var hashBase = HashBase;

  var ARRAY16 = new Array(16);

  function MD5 () {
    hashBase.call(this, 64);

    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
  }

  inherits_browser(MD5, hashBase);

  MD5.prototype._update = function () {
    var M = ARRAY16;
    for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);

    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;

    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);

    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);

    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);

    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);

    this._a = (this._a + a) | 0;
    this._b = (this._b + b) | 0;
    this._c = (this._c + c) | 0;
    this._d = (this._d + d) | 0;
  };

  MD5.prototype._digest = function () {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }

    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();

    // produce result
    var buffer = new Buffer(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer
  };

  function rotl (x, n) {
    return (x << n) | (x >>> (32 - n))
  }

  function fnF (a, b, c, d, m, k, s) {
    return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
  }

  function fnG (a, b, c, d, m, k, s) {
    return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
  }

  function fnH (a, b, c, d, m, k, s) {
    return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
  }

  function fnI (a, b, c, d, m, k, s) {
    return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
  }

  var md5_js = MD5;

  var Buffer$4 = bufferEs6.Buffer;



  var ARRAY16$1 = new Array(16);

  var zl = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ];

  var zr = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ];

  var sl = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ];

  var sr = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ];

  var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
  var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

  function RIPEMD160 () {
    hashBase.call(this, 64);

    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
  }

  inherits_browser(RIPEMD160, hashBase);

  RIPEMD160.prototype._update = function () {
    var words = ARRAY16$1;
    for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);

    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;

    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;

    // computation
    for (var i = 0; i < 80; i += 1) {
      var tl;
      var tr;
      if (i < 16) {
        tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
        tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
      } else if (i < 32) {
        tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
        tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
      } else if (i < 48) {
        tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
        tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
      } else if (i < 64) {
        tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
        tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
      } else { // if (i<80) {
        tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
        tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
      }

      al = el;
      el = dl;
      dl = rotl$1(cl, 10);
      cl = bl;
      bl = tl;

      ar = er;
      er = dr;
      dr = rotl$1(cr, 10);
      cr = br;
      br = tr;
    }

    // update state
    var t = (this._b + cl + dr) | 0;
    this._b = (this._c + dl + er) | 0;
    this._c = (this._d + el + ar) | 0;
    this._d = (this._e + al + br) | 0;
    this._e = (this._a + bl + cr) | 0;
    this._a = t;
  };

  RIPEMD160.prototype._digest = function () {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }

    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();

    // produce result
    var buffer = Buffer$4.alloc ? Buffer$4.alloc(20) : new Buffer$4(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer
  };

  function rotl$1 (x, n) {
    return (x << n) | (x >>> (32 - n))
  }

  function fn1 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
  }

  function fn2 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
  }

  function fn3 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
  }

  function fn4 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
  }

  function fn5 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
  }

  var ripemd160 = RIPEMD160;

  var Buffer$5 = safeBuffer.Buffer;

  // prototype class for hash functions
  function Hash (blockSize, finalSize) {
    this._block = Buffer$5.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
  }

  Hash.prototype.update = function (data, enc) {
    if (typeof data === 'string') {
      enc = enc || 'utf8';
      data = Buffer$5.from(data, enc);
    }

    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;

    for (var offset = 0; offset < length;) {
      var assigned = accum % blockSize;
      var remainder = Math.min(length - offset, blockSize - assigned);

      for (var i = 0; i < remainder; i++) {
        block[assigned + i] = data[offset + i];
      }

      accum += remainder;
      offset += remainder;

      if ((accum % blockSize) === 0) {
        this._update(block);
      }
    }

    this._len += length;
    return this
  };

  Hash.prototype.digest = function (enc) {
    var rem = this._len % this._blockSize;

    this._block[rem] = 0x80;

    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);

    if (rem >= this._finalSize) {
      this._update(this._block);
      this._block.fill(0);
    }

    var bits = this._len * 8;

    // uint32
    if (bits <= 0xffffffff) {
      this._block.writeUInt32BE(bits, this._blockSize - 4);

    // uint64
    } else {
      var lowBits = (bits & 0xffffffff) >>> 0;
      var highBits = (bits - lowBits) / 0x100000000;

      this._block.writeUInt32BE(highBits, this._blockSize - 8);
      this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }

    this._update(this._block);
    var hash = this._hash();

    return enc ? hash.toString(enc) : hash
  };

  Hash.prototype._update = function () {
    throw new Error('_update must be implemented by subclass')
  };

  var hash = Hash;

  /*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
   * in FIPS PUB 180-1
   * This source code is derived from sha1.js of the same repository.
   * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
   * operation was added.
   */



  var Buffer$6 = safeBuffer.Buffer;

  var K = [
    0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
  ];

  var W = new Array(80);

  function Sha () {
    this.init();
    this._w = W;

    hash.call(this, 64, 56);
  }

  inherits_browser(Sha, hash);

  Sha.prototype.init = function () {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;

    return this
  };

  function rotl5 (num) {
    return (num << 5) | (num >>> 27)
  }

  function rotl30 (num) {
    return (num << 30) | (num >>> 2)
  }

  function ft (s, b, c, d) {
    if (s === 0) return (b & c) | ((~b) & d)
    if (s === 2) return (b & c) | (b & d) | (c & d)
    return b ^ c ^ d
  }

  Sha.prototype._update = function (M) {
    var W = this._w;

    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;

    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
    for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];

    for (var j = 0; j < 80; ++j) {
      var s = ~~(j / 20);
      var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0;

      e = d;
      d = c;
      c = rotl30(b);
      b = a;
      a = t;
    }

    this._a = (a + this._a) | 0;
    this._b = (b + this._b) | 0;
    this._c = (c + this._c) | 0;
    this._d = (d + this._d) | 0;
    this._e = (e + this._e) | 0;
  };

  Sha.prototype._hash = function () {
    var H = Buffer$6.allocUnsafe(20);

    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);

    return H
  };

  var sha = Sha;

  /*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
   * in FIPS PUB 180-1
   * Version 2.1a Copyright Paul Johnston 2000 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for details.
   */



  var Buffer$7 = safeBuffer.Buffer;

  var K$1 = [
    0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
  ];

  var W$1 = new Array(80);

  function Sha1 () {
    this.init();
    this._w = W$1;

    hash.call(this, 64, 56);
  }

  inherits_browser(Sha1, hash);

  Sha1.prototype.init = function () {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;

    return this
  };

  function rotl1 (num) {
    return (num << 1) | (num >>> 31)
  }

  function rotl5$1 (num) {
    return (num << 5) | (num >>> 27)
  }

  function rotl30$1 (num) {
    return (num << 30) | (num >>> 2)
  }

  function ft$1 (s, b, c, d) {
    if (s === 0) return (b & c) | ((~b) & d)
    if (s === 2) return (b & c) | (b & d) | (c & d)
    return b ^ c ^ d
  }

  Sha1.prototype._update = function (M) {
    var W = this._w;

    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;

    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
    for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);

    for (var j = 0; j < 80; ++j) {
      var s = ~~(j / 20);
      var t = (rotl5$1(a) + ft$1(s, b, c, d) + e + W[j] + K$1[s]) | 0;

      e = d;
      d = c;
      c = rotl30$1(b);
      b = a;
      a = t;
    }

    this._a = (a + this._a) | 0;
    this._b = (b + this._b) | 0;
    this._c = (c + this._c) | 0;
    this._d = (d + this._d) | 0;
    this._e = (e + this._e) | 0;
  };

  Sha1.prototype._hash = function () {
    var H = Buffer$7.allocUnsafe(20);

    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);

    return H
  };

  var sha1 = Sha1;

  /**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */



  var Buffer$8 = safeBuffer.Buffer;

  var K$2 = [
    0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
    0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
    0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
    0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
    0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
    0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
    0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
    0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
    0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
    0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
    0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
    0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
    0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
    0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
    0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
    0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
  ];

  var W$2 = new Array(64);

  function Sha256 () {
    this.init();

    this._w = W$2; // new Array(64)

    hash.call(this, 64, 56);
  }

  inherits_browser(Sha256, hash);

  Sha256.prototype.init = function () {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;

    return this
  };

  function ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }

  function maj (x, y, z) {
    return (x & y) | (z & (x | y))
  }

  function sigma0 (x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
  }

  function sigma1 (x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
  }

  function gamma0 (x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
  }

  function gamma1 (x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
  }

  Sha256.prototype._update = function (M) {
    var W = this._w;

    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;

    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
    for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0;

    for (var j = 0; j < 64; ++j) {
      var T1 = (h + sigma1(e) + ch(e, f, g) + K$2[j] + W[j]) | 0;
      var T2 = (sigma0(a) + maj(a, b, c)) | 0;

      h = g;
      g = f;
      f = e;
      e = (d + T1) | 0;
      d = c;
      c = b;
      b = a;
      a = (T1 + T2) | 0;
    }

    this._a = (a + this._a) | 0;
    this._b = (b + this._b) | 0;
    this._c = (c + this._c) | 0;
    this._d = (d + this._d) | 0;
    this._e = (e + this._e) | 0;
    this._f = (f + this._f) | 0;
    this._g = (g + this._g) | 0;
    this._h = (h + this._h) | 0;
  };

  Sha256.prototype._hash = function () {
    var H = Buffer$8.allocUnsafe(32);

    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);

    return H
  };

  var sha256 = Sha256;

  /**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */




  var Buffer$9 = safeBuffer.Buffer;

  var W$3 = new Array(64);

  function Sha224 () {
    this.init();

    this._w = W$3; // new Array(64)

    hash.call(this, 64, 56);
  }

  inherits_browser(Sha224, sha256);

  Sha224.prototype.init = function () {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;

    return this
  };

  Sha224.prototype._hash = function () {
    var H = Buffer$9.allocUnsafe(28);

    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);

    return H
  };

  var sha224 = Sha224;

  var Buffer$a = safeBuffer.Buffer;

  var K$3 = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];

  var W$4 = new Array(160);

  function Sha512 () {
    this.init();
    this._w = W$4;

    hash.call(this, 128, 112);
  }

  inherits_browser(Sha512, hash);

  Sha512.prototype.init = function () {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;

    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;

    return this
  };

  function Ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }

  function maj$1 (x, y, z) {
    return (x & y) | (z & (x | y))
  }

  function sigma0$1 (x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
  }

  function sigma1$1 (x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
  }

  function Gamma0 (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
  }

  function Gamma0l (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
  }

  function Gamma1 (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
  }

  function Gamma1l (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
  }

  function getCarry (a, b) {
    return (a >>> 0) < (b >>> 0) ? 1 : 0
  }

  Sha512.prototype._update = function (M) {
    var W = this._w;

    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;

    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;

    for (var i = 0; i < 32; i += 2) {
      W[i] = M.readInt32BE(i * 4);
      W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for (; i < 160; i += 2) {
      var xh = W[i - 15 * 2];
      var xl = W[i - 15 * 2 + 1];
      var gamma0 = Gamma0(xh, xl);
      var gamma0l = Gamma0l(xl, xh);

      xh = W[i - 2 * 2];
      xl = W[i - 2 * 2 + 1];
      var gamma1 = Gamma1(xh, xl);
      var gamma1l = Gamma1l(xl, xh);

      // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
      var Wi7h = W[i - 7 * 2];
      var Wi7l = W[i - 7 * 2 + 1];

      var Wi16h = W[i - 16 * 2];
      var Wi16l = W[i - 16 * 2 + 1];

      var Wil = (gamma0l + Wi7l) | 0;
      var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0;
      Wil = (Wil + gamma1l) | 0;
      Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0;
      Wil = (Wil + Wi16l) | 0;
      Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0;

      W[i] = Wih;
      W[i + 1] = Wil;
    }

    for (var j = 0; j < 160; j += 2) {
      Wih = W[j];
      Wil = W[j + 1];

      var majh = maj$1(ah, bh, ch);
      var majl = maj$1(al, bl, cl);

      var sigma0h = sigma0$1(ah, al);
      var sigma0l = sigma0$1(al, ah);
      var sigma1h = sigma1$1(eh, el);
      var sigma1l = sigma1$1(el, eh);

      // t1 = h + sigma1 + ch + K[j] + W[j]
      var Kih = K$3[j];
      var Kil = K$3[j + 1];

      var chh = Ch(eh, fh, gh);
      var chl = Ch(el, fl, gl);

      var t1l = (hl + sigma1l) | 0;
      var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0;
      t1l = (t1l + chl) | 0;
      t1h = (t1h + chh + getCarry(t1l, chl)) | 0;
      t1l = (t1l + Kil) | 0;
      t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0;
      t1l = (t1l + Wil) | 0;
      t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0;

      // t2 = sigma0 + maj
      var t2l = (sigma0l + majl) | 0;
      var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0;

      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      el = (dl + t1l) | 0;
      eh = (dh + t1h + getCarry(el, dl)) | 0;
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      al = (t1l + t2l) | 0;
      ah = (t1h + t2h + getCarry(al, t1l)) | 0;
    }

    this._al = (this._al + al) | 0;
    this._bl = (this._bl + bl) | 0;
    this._cl = (this._cl + cl) | 0;
    this._dl = (this._dl + dl) | 0;
    this._el = (this._el + el) | 0;
    this._fl = (this._fl + fl) | 0;
    this._gl = (this._gl + gl) | 0;
    this._hl = (this._hl + hl) | 0;

    this._ah = (this._ah + ah + getCarry(this._al, al)) | 0;
    this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0;
    this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0;
    this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0;
    this._eh = (this._eh + eh + getCarry(this._el, el)) | 0;
    this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0;
    this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0;
    this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0;
  };

  Sha512.prototype._hash = function () {
    var H = Buffer$a.allocUnsafe(64);

    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset);
      H.writeInt32BE(l, offset + 4);
    }

    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);

    return H
  };

  var sha512 = Sha512;

  var Buffer$b = safeBuffer.Buffer;

  var W$5 = new Array(160);

  function Sha384 () {
    this.init();
    this._w = W$5;

    hash.call(this, 128, 112);
  }

  inherits_browser(Sha384, sha512);

  Sha384.prototype.init = function () {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;

    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;

    return this
  };

  Sha384.prototype._hash = function () {
    var H = Buffer$b.allocUnsafe(48);

    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset);
      H.writeInt32BE(l, offset + 4);
    }

    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);

    return H
  };

  var sha384 = Sha384;

  var sha_js = createCommonjsModule(function (module) {
  var exports = module.exports = function SHA (algorithm) {
    algorithm = algorithm.toLowerCase();

    var Algorithm = exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

    return new Algorithm()
  };

  exports.sha = sha;
  exports.sha1 = sha1;
  exports.sha224 = sha224;
  exports.sha256 = sha256;
  exports.sha384 = sha384;
  exports.sha512 = sha512;
  });

  var Buffer$c = safeBuffer.Buffer;
  var Transform$2 = require$$1.Transform;
  var StringDecoder$1 = string_decoder.StringDecoder;


  function CipherBase (hashMode) {
    Transform$2.call(this);
    this.hashMode = typeof hashMode === 'string';
    if (this.hashMode) {
      this[hashMode] = this._finalOrDigest;
    } else {
      this.final = this._finalOrDigest;
    }
    if (this._final) {
      this.__final = this._final;
      this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
  }
  inherits_browser(CipherBase, Transform$2);

  CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
    if (typeof data === 'string') {
      data = Buffer$c.from(data, inputEnc);
    }

    var outData = this._update(data);
    if (this.hashMode) return this

    if (outputEnc) {
      outData = this._toString(outData, outputEnc);
    }

    return outData
  };

  CipherBase.prototype.setAutoPadding = function () {};
  CipherBase.prototype.getAuthTag = function () {
    throw new Error('trying to get auth tag in unsupported state')
  };

  CipherBase.prototype.setAuthTag = function () {
    throw new Error('trying to set auth tag in unsupported state')
  };

  CipherBase.prototype.setAAD = function () {
    throw new Error('trying to set aad in unsupported state')
  };

  CipherBase.prototype._transform = function (data, _, next) {
    var err;
    try {
      if (this.hashMode) {
        this._update(data);
      } else {
        this.push(this._update(data));
      }
    } catch (e) {
      err = e;
    } finally {
      next(err);
    }
  };
  CipherBase.prototype._flush = function (done) {
    var err;
    try {
      this.push(this.__final());
    } catch (e) {
      err = e;
    }

    done(err);
  };
  CipherBase.prototype._finalOrDigest = function (outputEnc) {
    var outData = this.__final() || Buffer$c.alloc(0);
    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true);
    }
    return outData
  };

  CipherBase.prototype._toString = function (value, enc, fin) {
    if (!this._decoder) {
      this._decoder = new StringDecoder$1(enc);
      this._encoding = enc;
    }

    if (this._encoding !== enc) throw new Error('can\'t switch encodings')

    var out = this._decoder.write(value);
    if (fin) {
      out += this._decoder.end();
    }

    return out
  };

  var cipherBase = CipherBase;

  function Hash$1 (hash) {
    cipherBase.call(this, 'digest');

    this._hash = hash;
  }

  inherits_browser(Hash$1, cipherBase);

  Hash$1.prototype._update = function (data) {
    this._hash.update(data);
  };

  Hash$1.prototype._final = function () {
    return this._hash.digest()
  };

  var browser$1 = function createHash (alg) {
    alg = alg.toLowerCase();
    if (alg === 'md5') return new md5_js()
    if (alg === 'rmd160' || alg === 'ripemd160') return new ripemd160()

    return new Hash$1(sha_js(alg))
  };

  // base-x encoding
  // Forked from https://github.com/cryptocoinjs/bs58
  // Originally written by Mike Hearn for BitcoinJ
  // Copyright (c) 2011 Google Inc
  // Ported to JavaScript by Stefan Thomas
  // Merged Buffer refactorings from base58-native by Stephen Pair
  // Copyright (c) 2013 BitPay Inc

  var Buffer$d = safeBuffer.Buffer;

  var baseX = function base (ALPHABET) {
    var ALPHABET_MAP = {};
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);

    // pre-compute lookup table
    for (var z = 0; z < ALPHABET.length; z++) {
      var x = ALPHABET.charAt(z);

      if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')
      ALPHABET_MAP[x] = z;
    }

    function encode (source) {
      if (source.length === 0) return ''

      var digits = [0];
      for (var i = 0; i < source.length; ++i) {
        for (var j = 0, carry = source[i]; j < digits.length; ++j) {
          carry += digits[j] << 8;
          digits[j] = carry % BASE;
          carry = (carry / BASE) | 0;
        }

        while (carry > 0) {
          digits.push(carry % BASE);
          carry = (carry / BASE) | 0;
        }
      }

      var string = '';

      // deal with leading zeros
      for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += LEADER;
      // convert digits to a string
      for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]];

      return string
    }

    function decodeUnsafe (string) {
      if (typeof string !== 'string') throw new TypeError('Expected String')
      if (string.length === 0) return Buffer$d.allocUnsafe(0)

      var bytes = [0];
      for (var i = 0; i < string.length; i++) {
        var value = ALPHABET_MAP[string[i]];
        if (value === undefined) return

        for (var j = 0, carry = value; j < bytes.length; ++j) {
          carry += bytes[j] * BASE;
          bytes[j] = carry & 0xff;
          carry >>= 8;
        }

        while (carry > 0) {
          bytes.push(carry & 0xff);
          carry >>= 8;
        }
      }

      // deal with leading zeros
      for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {
        bytes.push(0);
      }

      return Buffer$d.from(bytes.reverse())
    }

    function decode (string) {
      var buffer = decodeUnsafe(string);
      if (buffer) return buffer

      throw new Error('Non-base' + BASE + ' character')
    }

    return {
      encode: encode,
      decodeUnsafe: decodeUnsafe,
      decode: decode
    }
  };

  var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

  var bs58 = baseX(ALPHABET);

  var Buffer$e = safeBuffer.Buffer;

  var base = function (checksumFn) {
    // Encode a buffer as a base58-check encoded string
    function encode (payload) {
      var checksum = checksumFn(payload);

      return bs58.encode(Buffer$e.concat([
        payload,
        checksum
      ], payload.length + 4))
    }

    function decodeRaw (buffer) {
      var payload = buffer.slice(0, -4);
      var checksum = buffer.slice(-4);
      var newChecksum = checksumFn(payload);

      if (checksum[0] ^ newChecksum[0] |
          checksum[1] ^ newChecksum[1] |
          checksum[2] ^ newChecksum[2] |
          checksum[3] ^ newChecksum[3]) return

      return payload
    }

    // Decode a base58-check encoded string to a buffer, no result if checksum is wrong
    function decodeUnsafe (string) {
      var buffer = bs58.decodeUnsafe(string);
      if (!buffer) return

      return decodeRaw(buffer)
    }

    function decode (string) {
      var buffer = bs58.decode(string);
      var payload = decodeRaw(buffer, checksumFn);
      if (!payload) throw new Error('Invalid checksum')
      return payload
    }

    return {
      encode: encode,
      decode: decode,
      decodeUnsafe: decodeUnsafe
    }
  };

  // SHA256(SHA256(buffer))
  function sha256x2 (buffer) {
    var tmp = browser$1('sha256').update(buffer).digest();
    return browser$1('sha256').update(tmp).digest()
  }

  var bs58check = base(sha256x2);

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // resolves . and .. elements in a path array with directory names there
  // must be no slashes, empty elements, or device names (c:\) in the array
  // (so also no leading and trailing slashes - it does not distinguish
  // relative and absolute paths)
  function normalizeArray(parts, allowAboveRoot) {
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === '.') {
        parts.splice(i, 1);
      } else if (last === '..') {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }

    // if the path is allowed to go above the root, restore leading ..s
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift('..');
      }
    }

    return parts;
  }

  // Split a filename into [root, dir, basename, ext], unix version
  // 'root' is just a slash, or nothing.
  var splitPathRe =
      /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  var splitPath = function(filename) {
    return splitPathRe.exec(filename).slice(1);
  };

  // path.resolve([from ...], to)
  // posix version
  function resolve() {
    var resolvedPath = '',
        resolvedAbsolute = false;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = (i >= 0) ? arguments[i] : '/';

      // Skip empty and invalid entries
      if (typeof path !== 'string') {
        throw new TypeError('Arguments to path.resolve must be strings');
      } else if (!path) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charAt(0) === '/';
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
      return !!p;
    }), !resolvedAbsolute).join('/');

    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
  }
  // path.normalize(path)
  // posix version
  function normalize(path) {
    var isPathAbsolute = isAbsolute(path),
        trailingSlash = substr(path, -1) === '/';

    // Normalize the path
    path = normalizeArray(filter(path.split('/'), function(p) {
      return !!p;
    }), !isPathAbsolute).join('/');

    if (!path && !isPathAbsolute) {
      path = '.';
    }
    if (path && trailingSlash) {
      path += '/';
    }

    return (isPathAbsolute ? '/' : '') + path;
  }
  // posix version
  function isAbsolute(path) {
    return path.charAt(0) === '/';
  }

  // posix version
  function join() {
    var paths = Array.prototype.slice.call(arguments, 0);
    return normalize(filter(paths, function(p, index) {
      if (typeof p !== 'string') {
        throw new TypeError('Arguments to path.join must be strings');
      }
      return p;
    }).join('/'));
  }


  // path.relative(from, to)
  // posix version
  function relative(from, to) {
    from = resolve(from).substr(1);
    to = resolve(to).substr(1);

    function trim(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== '') break;
      }

      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== '') break;
      }

      if (start > end) return [];
      return arr.slice(start, end - start + 1);
    }

    var fromParts = trim(from.split('/'));
    var toParts = trim(to.split('/'));

    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }

    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push('..');
    }

    outputParts = outputParts.concat(toParts.slice(samePartsLength));

    return outputParts.join('/');
  }

  var sep = '/';
  var delimiter = ':';

  function dirname(path) {
    var result = splitPath(path),
        root = result[0],
        dir = result[1];

    if (!root && !dir) {
      // No dirname whatsoever
      return '.';
    }

    if (dir) {
      // It has a dirname, strip trailing slash
      dir = dir.substr(0, dir.length - 1);
    }

    return root + dir;
  }

  function basename(path, ext) {
    var f = splitPath(path)[2];
    // TODO: make this comparison case-insensitive on windows?
    if (ext && f.substr(-1 * ext.length) === ext) {
      f = f.substr(0, f.length - ext.length);
    }
    return f;
  }


  function extname(path) {
    return splitPath(path)[3];
  }
  var path = {
    extname: extname,
    basename: basename,
    dirname: dirname,
    sep: sep,
    delimiter: delimiter,
    relative: relative,
    join: join,
    isAbsolute: isAbsolute,
    normalize: normalize,
    resolve: resolve
  };
  function filter (xs, f) {
      if (xs.filter) return xs.filter(f);
      var res = [];
      for (var i = 0; i < xs.length; i++) {
          if (f(xs[i], i, xs)) res.push(xs[i]);
      }
      return res;
  }

  // String.prototype.substr - negative index don't work in IE8
  var substr = 'ab'.substr(-1) === 'b' ?
      function (str, start, len) { return str.substr(start, len) } :
      function (str, start, len) {
          if (start < 0) start = str.length + start;
          return str.substr(start, len);
      }
  ;

  var path$1 = /*#__PURE__*/Object.freeze({
    resolve: resolve,
    normalize: normalize,
    isAbsolute: isAbsolute,
    join: join,
    relative: relative,
    sep: sep,
    delimiter: delimiter,
    dirname: dirname,
    basename: basename,
    extname: extname,
    default: path
  });

  var empty = {};

  var empty$1 = /*#__PURE__*/Object.freeze({
    default: empty
  });

  var lodash = createCommonjsModule(function (module, exports) {
  (function() {

    /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    var undefined;

    /** Used as the semantic version number. */
    var VERSION = '4.17.10';

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /** Error message constants. */
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function';

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /** Used as the internal argument placeholder. */
    var PLACEHOLDER = '__lodash_placeholder__';

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;

    /** Used as default options for `_.truncate`. */
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';

    /** Used to detect hot functions by number of calls within a span of milliseconds. */
    var HOT_COUNT = 800,
        HOT_SPAN = 16;

    /** Used to indicate the type of lazy iteratees. */
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /** Used to associate wrap methods with their bit flags. */
    var wrapFlags = [
      ['ary', WRAP_ARY_FLAG],
      ['bind', WRAP_BIND_FLAG],
      ['bindKey', WRAP_BIND_KEY_FLAG],
      ['curry', WRAP_CURRY_FLAG],
      ['curryRight', WRAP_CURRY_RIGHT_FLAG],
      ['flip', WRAP_FLIP_FLAG],
      ['partial', WRAP_PARTIAL_FLAG],
      ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
      ['rearg', WRAP_REARG_FLAG]
    ];

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to match empty string literals in compiled template source. */
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

    /** Used to match HTML entities and HTML characters. */
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    /** Used to match template delimiters. */
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);

    /** Used to match leading and trailing whitespace. */
    var reTrim = /^\s+|\s+$/g,
        reTrimStart = /^\s+/,
        reTrimEnd = /\s+$/;

    /** Used to match wrap detail comments. */
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;

    /** Used to match words composed of alphanumeric characters. */
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Used to match
     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
     */
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to ensure capturing order of template delimiters. */
    var reNoMatch = /($^)/;

    /** Used to match unescaped characters in compiled string literals. */
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

    /** Used to compose unicode character classes. */
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = '\\ufe0e\\ufe0f',
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    /** Used to compose unicode capture groups. */
    var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = '\\u200d';

    /** Used to compose unicode regexes. */
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    /** Used to match apostrophes. */
    var reApos = RegExp(rsApos, 'g');

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo, 'g');

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    /** Used to match complex or compound words. */
    var reUnicodeWord = RegExp([
      rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
      rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
      rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
      rsUpper + '+' + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join('|'), 'g');

    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

    /** Used to detect strings that need a more robust regexp to match words. */
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

    /** Used to assign default `context` object properties. */
    var contextProps = [
      'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
      'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
      'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
      'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
      '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
    ];

    /** Used to make template sourceURLs easier to identify. */
    var templateCounter = -1;

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    typedArrayTags[setTag] = typedArrayTags[stringTag] =
    typedArrayTags[weakMapTag] = false;

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] =
    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    cloneableTags[boolTag] = cloneableTags[dateTag] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag] =
    cloneableTags[numberTag] = cloneableTags[objectTag] =
    cloneableTags[regexpTag] = cloneableTags[setTag] =
    cloneableTags[stringTag] = cloneableTags[symbolTag] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;

    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
      // Latin-1 Supplement block.
      '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C',  '\xe7': 'c',
      '\xd0': 'D',  '\xf0': 'd',
      '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N',  '\xf1': 'n',
      '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss',
      // Latin Extended-A block.
      '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
      '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
      '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
      '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
      '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
      '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
      '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
      '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
      '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
      '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
      '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
      '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
      '\u0134': 'J',  '\u0135': 'j',
      '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
      '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
      '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
      '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
      '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
      '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
      '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
      '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
      '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
      '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
      '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
      '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
      '\u0163': 't',  '\u0165': 't', '\u0167': 't',
      '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
      '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
      '\u0174': 'W',  '\u0175': 'w',
      '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
      '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
      '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
      '\u0132': 'IJ', '\u0133': 'ij',
      '\u0152': 'Oe', '\u0153': 'oe',
      '\u0149': "'n", '\u017f': 's'
    };

    /** Used to map characters to HTML entities. */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to map HTML entities to characters. */
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };

    /** Used to escape characters for inclusion in compiled string literals. */
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };

    /** Built-in method references without a dependency on `root`. */
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    /* Node.js helper references. */
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    /*--------------------------------------------------------------------------*/

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    /**
     * A specialized version of `baseAggregator` for arrays.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the last element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    var asciiSize = baseProperty('length');

    /**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function asciiToArray(string) {
      return string.split('');
    }

    /**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    /**
     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
     * without support for iteratee shorthands, which iterates over `collection`
     * using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      return value === value
        ? strictIndexOf(array, value, fromIndex)
        : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    /**
     * This function is like `baseIndexOf` except that it accepts a comparator.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */
    function baseIsNaN(value) {
      return value !== value;
    }

    /**
     * The base implementation of `_.mean` and `_.meanBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the mean.
     */
    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? (baseSum(array, iteratee) / length) : NAN;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initAccum
          ? (initAccum = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined) {
          result = result === undefined ? current : (result + current);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */
    function baseToPairs(object, props) {
      return arrayMap(props, function(key) {
        return [key, object[key]];
      });
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }

    /**
     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the first unmatched string symbol.
     */
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the last unmatched string symbol.
     */
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Gets the number of `placeholder` occurrences in `array`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} placeholder The placeholder to search for.
     * @returns {number} Returns the placeholder count.
     */
    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }

    /**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    var deburrLetter = basePropertyOf(deburredLetters);

    /**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    /**
     * Used by `_.template` to escape characters for inclusion in compiled string literals.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    /**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    /**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    /**
     * Converts `iterator` to an array.
     *
     * @private
     * @param {Object} iterator The iterator to convert.
     * @returns {Array} Returns the converted array.
     */
    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }
      return result;
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */
    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      return key == '__proto__'
        ? undefined
        : object[key];
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    /**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */
    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }

    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * A specialized version of `_.lastIndexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return index;
    }

    /**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */
    function stringSize(string) {
      return hasUnicode(string)
        ? unicodeSize(string)
        : asciiSize(string);
    }

    /**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function stringToArray(string) {
      return hasUnicode(string)
        ? unicodeToArray(string)
        : asciiToArray(string);
    }

    /**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    /**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }

    /**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    /**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Create a new pristine `lodash` function using the `context` object.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Util
     * @param {Object} [context=root] The context object.
     * @returns {Function} Returns a new `lodash` function.
     * @example
     *
     * _.mixin({ 'foo': _.constant('foo') });
     *
     * var lodash = _.runInContext();
     * lodash.mixin({ 'bar': lodash.constant('bar') });
     *
     * _.isFunction(_.foo);
     * // => true
     * _.isFunction(_.bar);
     * // => false
     *
     * lodash.isFunction(lodash.foo);
     * // => false
     * lodash.isFunction(lodash.bar);
     * // => true
     *
     * // Create a suped-up `defer` in Node.js.
     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
     */
    var runInContext = (function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

      /** Built-in constructor references. */
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;

      /** Used for built-in method references. */
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;

      /** Used to detect overreaching core-js shims. */
      var coreJsData = context['__core-js_shared__'];

      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /** Used to generate unique IDs. */
      var idCounter = 0;

      /** Used to detect methods masquerading as native. */
      var maskSrcKey = (function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? ('Symbol(src)_1.' + uid) : '';
      }());

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var nativeObjectToString = objectProto.toString;

      /** Used to infer the `Object` constructor. */
      var objectCtorString = funcToString.call(Object);

      /** Used to restore the original `_` reference in `_.noConflict`. */
      var oldDash = root._;

      /** Used to detect if a method is native. */
      var reIsNative = RegExp('^' +
        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
      );

      /** Built-in value references. */
      var Buffer = moduleExports ? context.Buffer : undefined,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
          symIterator = Symbol ? Symbol.iterator : undefined,
          symToStringTag = Symbol ? Symbol.toStringTag : undefined;

      var defineProperty = (function() {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }());

      /** Mocked built-ins. */
      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;

      /* Built-in method references that are verified to be native. */
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');

      /** Used to store function metadata. */
      var metaMap = WeakMap && new WeakMap;

      /** Used to lookup unminified function names. */
      var realNames = {};

      /** Used to detect maps, sets, and weakmaps. */
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);

      /** Used to convert symbols to primitives and strings. */
      var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` object which wraps `value` to enable implicit method
       * chain sequences. Methods that operate on and return arrays, collections,
       * and functions can be chained together. Methods that retrieve a single value
       * or may return a primitive value will automatically end the chain sequence
       * and return the unwrapped value. Otherwise, the value must be unwrapped
       * with `_#value`.
       *
       * Explicit chain sequences, which must be unwrapped with `_#value`, may be
       * enabled using `_.chain`.
       *
       * The execution of chained methods is lazy, that is, it's deferred until
       * `_#value` is implicitly or explicitly called.
       *
       * Lazy evaluation allows several methods to support shortcut fusion.
       * Shortcut fusion is an optimization to merge iteratee calls; this avoids
       * the creation of intermediate arrays and can greatly reduce the number of
       * iteratee executions. Sections of a chain sequence qualify for shortcut
       * fusion if the section is applied to an array and iteratees accept only
       * one argument. The heuristic for whether a section qualifies for shortcut
       * fusion is subject to change.
       *
       * Chaining is supported in custom builds as long as the `_#value` method is
       * directly or indirectly included in the build.
       *
       * In addition to lodash methods, wrappers have `Array` and `String` methods.
       *
       * The wrapper `Array` methods are:
       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
       *
       * The wrapper `String` methods are:
       * `replace` and `split`
       *
       * The wrapper methods that support shortcut fusion are:
       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
       *
       * The chainable wrapper methods are:
       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
       * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
       * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
       * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
       * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
       * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
       * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
       * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
       * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
       * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
       * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
       * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
       * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
       * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
       * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
       * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
       * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
       * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
       * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
       * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
       * `zipObject`, `zipObjectDeep`, and `zipWith`
       *
       * The wrapper methods that are **not** chainable by default are:
       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
       * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
       * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
       * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
       * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
       * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
       * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
       * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
       * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
       * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
       * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
       * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
       * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
       * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
       * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
       * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
       * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
       * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
       * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
       * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
       * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
       * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
       * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
       * `upperFirst`, `value`, and `words`
       *
       * @name _
       * @constructor
       * @category Seq
       * @param {*} value The value to wrap in a `lodash` instance.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2, 3]);
       *
       * // Returns an unwrapped value.
       * wrapped.reduce(_.add);
       * // => 6
       *
       * // Returns a wrapped value.
       * var squares = wrapped.map(square);
       *
       * _.isArray(squares);
       * // => false
       *
       * _.isArray(squares.value());
       * // => true
       */
      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }

      /**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} proto The object to inherit from.
       * @returns {Object} Returns the new object.
       */
      var baseCreate = (function() {
        function object() {}
        return function(proto) {
          if (!isObject(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object;
          object.prototype = undefined;
          return result;
        };
      }());

      /**
       * The function whose prototype chain sequence wrappers inherit from.
       *
       * @private
       */
      function baseLodash() {
        // No operation performed.
      }

      /**
       * The base constructor for creating `lodash` wrapper objects.
       *
       * @private
       * @param {*} value The value to wrap.
       * @param {boolean} [chainAll] Enable explicit method chain sequences.
       */
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined;
      }

      /**
       * By default, the template delimiters used by lodash are like those in
       * embedded Ruby (ERB) as well as ES2015 template strings. Change the
       * following template settings to use alternative delimiters.
       *
       * @static
       * @memberOf _
       * @type {Object}
       */
      lodash.templateSettings = {

        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'escape': reEscape,

        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'evaluate': reEvaluate,

        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'interpolate': reInterpolate,

        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        'variable': '',

        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        'imports': {

          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          '_': lodash
        }
      };

      // Ensure wrappers are instances of `baseLodash`.
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;

      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
       *
       * @private
       * @constructor
       * @param {*} value The value to wrap.
       */
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      /**
       * Creates a clone of the lazy wrapper object.
       *
       * @private
       * @name clone
       * @memberOf LazyWrapper
       * @returns {Object} Returns the cloned `LazyWrapper` object.
       */
      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      /**
       * Reverses the direction of lazy iteration.
       *
       * @private
       * @name reverse
       * @memberOf LazyWrapper
       * @returns {Object} Returns the new reversed `LazyWrapper` object.
       */
      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }
        return result;
      }

      /**
       * Extracts the unwrapped value from its lazy wrapper.
       *
       * @private
       * @name value
       * @memberOf LazyWrapper
       * @returns {*} Returns the unwrapped value.
       */
      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : (start - 1),
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
          return baseWrapperValue(array, this.__actions__);
        }
        var result = [];

        outer:
        while (length-- && resIndex < takeCount) {
          index += dir;

          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }
          result[resIndex++] = value;
        }
        return result;
      }

      // Ensure `LazyWrapper` is an instance of `baseLodash`.
      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      /**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined;
      }

      /**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
      }

      /**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
        return this;
      }

      // Add methods to `Hash`.
      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }

      /**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        return index < 0 ? undefined : data[index][1];
      }

      /**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      /**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */
      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }

      // Add methods to `ListCache`.
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash,
          'map': new (Map || ListCache),
          'string': new Hash
        };
      }

      /**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      /**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      /**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      /**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */
      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;

        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      // Add methods to `MapCache`.
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      /*------------------------------------------------------------------------*/

      /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */
      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;

        this.__data__ = new MapCache;
        while (++index < length) {
          this.add(values[index]);
        }
      }

      /**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }

      /**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */
      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      // Add methods to `SetCache`.
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      /**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */
      function stackClear() {
        this.__data__ = new ListCache;
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);

        this.size = data.size;
        return result;
      }

      /**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function stackGet(key) {
        return this.__data__.get(key);
      }

      /**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function stackHas(key) {
        return this.__data__.has(key);
      }

      /**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }

      // Add methods to `Stack`.
      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) &&
              !(skipIndexes && (
                 // Safari 9 has enumerable `arguments.length` in strict mode.
                 key == 'length' ||
                 // Node.js 0.10 has enumerable non-index properties on buffers.
                 (isBuff && (key == 'offset' || key == 'parent')) ||
                 // PhantomJS 2 has enumerable non-index properties on typed arrays.
                 (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                 // Skip index properties.
                 isIndex(key, length)
              ))) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * A specialized version of `_.sample` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @returns {*} Returns the random element.
       */
      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined;
      }

      /**
       * A specialized version of `_.sampleSize` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }

      /**
       * A specialized version of `_.shuffle` for arrays.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }

      /**
       * This function is like `assignValue` except that it doesn't assign
       * `undefined` values.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignMergeValue(object, key, value) {
        if ((value !== undefined && !eq(object[key], value)) ||
            (value === undefined && !(key in object))) {
          baseAssignValue(object, key, value);
        }
      }

      /**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
            (value === undefined && !(key in object))) {
          baseAssignValue(object, key, value);
        }
      }

      /**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }

      /**
       * Aggregates elements of `collection` on `accumulator` with keys transformed
       * by `iteratee` and values set by `setter`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function(value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.assign` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      /**
       * The base implementation of `_.assignIn` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }

      /**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      /**
       * The base implementation of `_.at` without support for individual paths.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {string[]} paths The property paths to pick.
       * @returns {Array} Returns the picked elements.
       */
      function baseAt(object, paths) {
        var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;

        while (++index < length) {
          result[index] = skip ? undefined : get(object, paths[index]);
        }
        return result;
      }

      /**
       * The base implementation of `_.clamp` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       */
      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined) {
            number = number <= upper ? number : upper;
          }
          if (lower !== undefined) {
            number = number >= lower ? number : lower;
          }
        }
        return number;
      }

      /**
       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
       * traversed objects.
       *
       * @private
       * @param {*} value The value to clone.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Deep clone
       *  2 - Flatten inherited properties
       *  4 - Clone symbols
       * @param {Function} [customizer] The function to customize cloning.
       * @param {string} [key] The key of `value`.
       * @param {Object} [object] The parent object of `value`.
       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
       * @returns {*} Returns the cloned value.
       */
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== undefined) {
          return result;
        }
        if (!isObject(value)) {
          return value;
        }
        var isArr = isArray(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
            result = (isFlat || isFunc) ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat
                ? copySymbolsIn(value, baseAssignIn(result, value))
                : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag(value, tag, isDeep);
          }
        }
        // Check for circular references and return its corresponding clone.
        stack || (stack = new Stack);
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);

        if (isSet(value)) {
          value.forEach(function(subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });

          return result;
        }

        if (isMap(value)) {
          value.forEach(function(subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });

          return result;
        }

        var keysFunc = isFull
          ? (isFlat ? getAllKeysIn : getAllKeys)
          : (isFlat ? keysIn : keys);

        var props = isArr ? undefined : keysFunc(value);
        arrayEach(props || value, function(subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }
          // Recursively populate clone (susceptible to call stack limits).
          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      /**
       * The base implementation of `_.conforms` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       */
      function baseConforms(source) {
        var props = keys(source);
        return function(object) {
          return baseConformsTo(object, source, props);
        };
      }

      /**
       * The base implementation of `_.conformsTo` which accepts `props` to check.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       */
      function baseConformsTo(object, source, props) {
        var length = props.length;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];

          if ((value === undefined && !(key in object)) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }

      /**
       * The base implementation of `_.delay` and `_.defer` which accepts `args`
       * to provide to `func`.
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {Array} args The arguments to provide to `func`.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return setTimeout(function() { func.apply(undefined, args); }, wait);
      }

      /**
       * The base implementation of methods like `_.difference` without support
       * for excluding multiple arrays or iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Array} values The values to exclude.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       */
      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }
        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }
        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        }
        else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }
        outer:
        while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);

          value = (comparator || value !== 0) ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          }
          else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.forEach` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEach = createBaseEach(baseForOwn);

      /**
       * The base implementation of `_.forEachRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      /**
       * The base implementation of `_.every` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`
       */
      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function(value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      /**
       * The base implementation of methods like `_.max` and `_.min` which accepts a
       * `comparator` to determine the extremum value.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The iteratee invoked per iteration.
       * @param {Function} comparator The comparator used to compare values.
       * @returns {*} Returns the extremum value.
       */
      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined
                ? (current === current && !isSymbol(current))
                : comparator(current, computed)
              )) {
            var computed = current,
                result = value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.fill` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       */
      function baseFill(array, value, start, end) {
        var length = array.length;

        start = toInteger(start);
        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = (end === undefined || end > length) ? length : toInteger(end);
        if (end < 0) {
          end += length;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array[start++] = value;
        }
        return array;
      }

      /**
       * The base implementation of `_.filter` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function(value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      /**
       * The base implementation of `_.flatten` with support for restricting flattening.
       *
       * @private
       * @param {Array} array The array to flatten.
       * @param {number} depth The maximum recursion depth.
       * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
       * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
       * @param {Array} [result=[]] The initial result value.
       * @returns {Array} Returns the new flattened array.
       */
      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;

        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              // Recursively flatten arrays (susceptible to call stack limits).
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `baseForOwn` which iterates over `object`
       * properties returned by `keysFunc` and invokes `iteratee` for each property.
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseFor = createBaseFor();

      /**
       * This function is like `baseFor` except that it iterates over properties
       * in the opposite order.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseForRight = createBaseFor(true);

      /**
       * The base implementation of `_.forOwn` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.functions` which creates an array of
       * `object` function property names filtered from `props`.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Array} props The property names to filter.
       * @returns {Array} Returns the function names.
       */
      function baseFunctions(object, props) {
        return arrayFilter(props, function(key) {
          return isFunction(object[key]);
        });
      }

      /**
       * The base implementation of `_.get` without support for default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @returns {*} Returns the resolved value.
       */
      function baseGet(object, path) {
        path = castPath(path, object);

        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }
        return (index && index == length) ? object : undefined;
      }

      /**
       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @param {Function} symbolsFunc The function to get the symbols of `object`.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      /**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }
        return (symToStringTag && symToStringTag in Object(value))
          ? getRawTag(value)
          : objectToString(value);
      }

      /**
       * The base implementation of `_.gt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       */
      function baseGt(value, other) {
        return value > other;
      }

      /**
       * The base implementation of `_.has` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }

      /**
       * The base implementation of `_.hasIn` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      /**
       * The base implementation of `_.inRange` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to check.
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       */
      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      /**
       * The base implementation of methods like `_.intersection`, without support
       * for iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of shared values.
       */
      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }
          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
            ? new SetCache(othIndex && array)
            : undefined;
        }
        array = arrays[0];

        var index = -1,
            seen = caches[0];

        outer:
        while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          value = (comparator || value !== 0) ? value : 0;
          if (!(seen
                ? cacheHas(seen, computed)
                : includes(result, computed, comparator)
              )) {
            othIndex = othLength;
            while (--othIndex) {
              var cache = caches[othIndex];
              if (!(cache
                    ? cacheHas(cache, computed)
                    : includes(arrays[othIndex], computed, comparator))
                  ) {
                continue outer;
              }
            }
            if (seen) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.invert` and `_.invertBy` which inverts
       * `object` with values transformed by `iteratee` and set by `setter`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform values.
       * @param {Object} accumulator The initial inverted object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function(value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.invoke` without support for individual
       * method arguments.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {Array} args The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       */
      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined : apply(func, object, args);
      }

      /**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      /**
       * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       */
      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }

      /**
       * The base implementation of `_.isDate` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       */
      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }

      /**
       * The base implementation of `_.isEqual` which supports partial comparisons
       * and tracks traversed objects.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Unordered comparison
       *  2 - Partial comparison
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      /**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);

        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;

        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack);
          return (objIsArr || isTypedArray(object))
            ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
            : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;

            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack);
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      /**
       * The base implementation of `_.isMap` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       */
      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      /**
       * The base implementation of `_.isMatch` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Array} matchData The property names, values, and compare flags to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       */
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if ((noCustomizer && data[2])
                ? data[1] !== object[data[0]]
                : !(data[0] in object)
              ) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack;
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === undefined
                  ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                  : result
                )) {
              return false;
            }
          }
        }
        return true;
      }

      /**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      /**
       * The base implementation of `_.isRegExp` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       */
      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }

      /**
       * The base implementation of `_.isSet` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       */
      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      /**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */
      function baseIsTypedArray(value) {
        return isObjectLike(value) &&
          isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }

      /**
       * The base implementation of `_.iteratee`.
       *
       * @private
       * @param {*} [value=_.identity] The value to convert to an iteratee.
       * @returns {Function} Returns the iteratee.
       */
      function baseIteratee(value) {
        // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
        // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
        if (typeof value == 'function') {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == 'object') {
          return isArray(value)
            ? baseMatchesProperty(value[0], value[1])
            : baseMatches(value);
        }
        return property(value);
      }

      /**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.lt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       */
      function baseLt(value, other) {
        return value < other;
      }

      /**
       * The base implementation of `_.map` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function(value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      /**
       * The base implementation of `_.matches` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      /**
       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
       *
       * @private
       * @param {string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
          var objValue = get(object, path);
          return (objValue === undefined && objValue === srcValue)
            ? hasIn(object, path)
            : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }

      /**
       * The base implementation of `_.merge` without support for multiple sources.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          if (isObject(srcValue)) {
            stack || (stack = new Stack);
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          }
          else {
            var newValue = customizer
              ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
              : undefined;

            if (newValue === undefined) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }

      /**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer
          ? customizer(objValue, srcValue, (key + ''), object, source, stack)
          : undefined;

        var isCommon = newValue === undefined;

        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);

          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            }
            else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            }
            else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            }
            else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            }
            else {
              newValue = [];
            }
          }
          else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            }
            else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
              newValue = initCloneObject(srcValue);
            }
          }
          else {
            isCommon = false;
          }
        }
        if (isCommon) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }

      /**
       * The base implementation of `_.nth` which doesn't coerce arguments.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {number} n The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       */
      function baseNth(array, n) {
        var length = array.length;
        if (!length) {
          return;
        }
        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined;
      }

      /**
       * The base implementation of `_.orderBy` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
       * @param {string[]} orders The sort orders of `iteratees`.
       * @returns {Array} Returns the new sorted array.
       */
      function baseOrderBy(collection, iteratees, orders) {
        var index = -1;
        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

        var result = baseMap(collection, function(value, key, collection) {
          var criteria = arrayMap(iteratees, function(iteratee) {
            return iteratee(value);
          });
          return { 'criteria': criteria, 'index': ++index, 'value': value };
        });

        return baseSortBy(result, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      /**
       * The base implementation of `_.pick` without support for individual
       * property identifiers.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @returns {Object} Returns the new object.
       */
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path) {
          return hasIn(object, path);
        });
      }

      /**
       * The base implementation of  `_.pickBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @param {Function} predicate The function invoked per property.
       * @returns {Object} Returns the new object.
       */
      function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
          var path = paths[index],
              value = baseGet(object, path);

          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }
        return result;
      }

      /**
       * A specialized version of `baseProperty` which supports deep paths.
       *
       * @private
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet(object, path);
        };
      }

      /**
       * The base implementation of `_.pullAllBy` without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       */
      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }
        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }
        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }

      /**
       * The base implementation of `_.pullAt` without support for individual
       * indexes or capturing the removed elements.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {number[]} indexes The indexes of elements to remove.
       * @returns {Array} Returns `array`.
       */
      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];
          if (length == lastIndex || index !== previous) {
            var previous = index;
            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }
        return array;
      }

      /**
       * The base implementation of `_.random` without support for returning
       * floating-point numbers.
       *
       * @private
       * @param {number} lower The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the random number.
       */
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      /**
       * The base implementation of `_.range` and `_.rangeRight` which doesn't
       * coerce arguments.
       *
       * @private
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @param {number} step The value to increment or decrement by.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the range of numbers.
       */
      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }
        return result;
      }

      /**
       * The base implementation of `_.repeat` which doesn't coerce arguments.
       *
       * @private
       * @param {string} string The string to repeat.
       * @param {number} n The number of times to repeat the string.
       * @returns {string} Returns the repeated string.
       */
      function baseRepeat(string, n) {
        var result = '';
        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }
        // Leverage the exponentiation by squaring algorithm for a faster repeat.
        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
        do {
          if (n % 2) {
            result += string;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      /**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      /**
       * The base implementation of `_.sample`.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       */
      function baseSample(collection) {
        return arraySample(values(collection));
      }

      /**
       * The base implementation of `_.sampleSize` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }

      /**
       * The base implementation of `_.set`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }
        path = castPath(path, object);

        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;

          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = isObject(objValue)
                ? objValue
                : (isIndex(path[index + 1]) ? [] : {});
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }

      /**
       * The base implementation of `setData` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var baseSetData = !metaMap ? identity : function(func, data) {
        metaMap.set(func, data);
        return func;
      };

      /**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var baseSetToString = !defineProperty ? identity : function(func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      /**
       * The base implementation of `_.shuffle`.
       *
       * @private
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }

      /**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : ((end - start) >>> 0);
        start >>>= 0;

        var result = Array(length);
        while (++index < length) {
          result[index] = array[index + start];
        }
        return result;
      }

      /**
       * The base implementation of `_.some` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function baseSome(collection, predicate) {
        var result;

        baseEach(collection, function(value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      /**
       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
       * performs a binary search of `array` to determine the index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array == null ? low : array.length;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = (low + high) >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) &&
                (retHighest ? (computed <= value) : (computed < value))) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      /**
       * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
       * which invokes `iteratee` for `value` and each element of `array` to compute
       * their sort ranking. The iteratee is invoked with one argument; (value).
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} iteratee The iteratee invoked per element.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        value = iteratee(value);

        var low = 0,
            high = array == null ? 0 : array.length,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? (computed <= value) : (computed < value);
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      /**
       * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.toNumber` which doesn't ensure correct
       * conversions of binary, hexadecimal, or octal string values.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       */
      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        return +value;
      }

      /**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */
      function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
          return value;
        }
        if (isArray(value)) {
          // Recursively convert values (susceptible to call stack limits).
          return arrayMap(value, baseToString) + '';
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
      }

      /**
       * The base implementation of `_.uniqBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        }
        else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);
          if (set) {
            return setToArray(set);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache;
        }
        else {
          seen = iteratee ? [] : result;
        }
        outer:
        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          value = (comparator || value !== 0) ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          }
          else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.unset`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The property path to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       */
      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }

      /**
       * The base implementation of `_.update`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to update.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      /**
       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
       * without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {Function} predicate The function invoked per iteration.
       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) &&
          predicate(array[index], index, array)) {}

        return isDrop
          ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
          : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
      }

      /**
       * The base implementation of `wrapperValue` which returns the result of
       * performing a sequence of actions on the unwrapped `value`, where each
       * successive action is supplied the return value of the previous.
       *
       * @private
       * @param {*} value The unwrapped value.
       * @param {Array} actions Actions to perform to resolve the unwrapped value.
       * @returns {*} Returns the resolved value.
       */
      function baseWrapperValue(value, actions) {
        var result = value;
        if (result instanceof LazyWrapper) {
          result = result.value();
        }
        return arrayReduce(actions, function(result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      /**
       * The base implementation of methods like `_.xor`, without support for
       * iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of values.
       */
      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;
        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }
        var index = -1,
            result = Array(length);

        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;

          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }
        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }

      /**
       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
       *
       * @private
       * @param {Array} props The property identifiers.
       * @param {Array} values The property values.
       * @param {Function} assignFunc The function to assign values.
       * @returns {Object} Returns the new object.
       */
      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined;
          assignFunc(result, props[index], value);
        }
        return result;
      }

      /**
       * Casts `value` to an empty array if it's not an array like object.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Array|Object} Returns the cast array-like object.
       */
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      /**
       * Casts `value` to `identity` if it's not a function.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Function} Returns cast function.
       */
      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      /**
       * Casts `value` to a path array if it's not one.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {Object} [object] The object to query keys on.
       * @returns {Array} Returns the cast property path array.
       */
      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }

      /**
       * A `baseRest` alias which can be replaced with `identity` by module
       * replacement plugins.
       *
       * @private
       * @type {Function}
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      var castRest = baseRest;

      /**
       * Casts `array` to a slice if it's needed.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {number} start The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the cast slice.
       */
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return (!start && end >= length) ? array : baseSlice(array, start, end);
      }

      /**
       * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
       *
       * @private
       * @param {number|Object} id The timer id or timeout object of the timer to clear.
       */
      var clearTimeout = ctxClearTimeout || function(id) {
        return root.clearTimeout(id);
      };

      /**
       * Creates a clone of  `buffer`.
       *
       * @private
       * @param {Buffer} buffer The buffer to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Buffer} Returns the cloned buffer.
       */
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

        buffer.copy(result);
        return result;
      }

      /**
       * Creates a clone of `arrayBuffer`.
       *
       * @private
       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      /**
       * Creates a clone of `dataView`.
       *
       * @private
       * @param {Object} dataView The data view to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned data view.
       */
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      /**
       * Creates a clone of `regexp`.
       *
       * @private
       * @param {Object} regexp The regexp to clone.
       * @returns {Object} Returns the cloned regexp.
       */
      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      /**
       * Creates a clone of the `symbol` object.
       *
       * @private
       * @param {Object} symbol The symbol object to clone.
       * @returns {Object} Returns the cloned symbol object.
       */
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      /**
       * Creates a clone of `typedArray`.
       *
       * @private
       * @param {Object} typedArray The typed array to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned typed array.
       */
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      /**
       * Compares values to sort them in ascending order.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {number} Returns the sort order indicator for `value`.
       */
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);

          var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
              (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
              (valIsNull && othIsDefined && othIsReflexive) ||
              (!valIsDefined && othIsReflexive) ||
              !valIsReflexive) {
            return 1;
          }
          if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
              (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
              (othIsNull && valIsDefined && valIsReflexive) ||
              (!othIsDefined && valIsReflexive) ||
              !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }

      /**
       * Used by `_.orderBy` to compare multiple properties of a value to another
       * and stable sort them.
       *
       * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
       * specify an order of "desc" for descending or "asc" for ascending sort order
       * of corresponding values.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {boolean[]|string[]} orders The order to sort by for each property.
       * @returns {number} Returns the sort order indicator for `object`.
       */
      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);
          if (result) {
            if (index >= ordersLength) {
              return result;
            }
            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }
        // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
        // that causes it, under certain circumstances, to provide the same value for
        // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
        // for more details.
        //
        // This also ensures a stable sort in V8 and other engines.
        // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
        return object.index - other.index;
      }

      /**
       * Creates an array that is the composition of partially applied arguments,
       * placeholders, and provided arguments into a single array of arguments.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to prepend to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }
        return result;
      }

      /**
       * This function is like `composeArgs` except that the arguments composition
       * is tailored for `_.partialRight`.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to append to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result;
      }

      /**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */
      function copyArray(source, array) {
        var index = -1,
            length = source.length;

        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }

      /**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];

          var newValue = customizer
            ? customizer(object[key], source[key], key, object, source)
            : undefined;

          if (newValue === undefined) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }

      /**
       * Copies own symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      /**
       * Copies own and inherited symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }

      /**
       * Creates a function like `_.groupBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} [initializer] The accumulator object initializer.
       * @returns {Function} Returns the new aggregator function.
       */
      function createAggregator(setter, initializer) {
        return function(collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};

          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }

      /**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;

          customizer = (assigner.length > 3 && typeof customizer == 'function')
            ? (length--, customizer)
            : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }

      /**
       * Creates a `baseEach` or `baseEachRight` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while ((fromRight ? index-- : ++index < length)) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }

      /**
       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }

      /**
       * Creates a function that wraps `func` to invoke it with the optional `this`
       * binding of `thisArg`.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }

      /**
       * Creates a function like `_.lowerFirst`.
       *
       * @private
       * @param {string} methodName The name of the `String` case method to use.
       * @returns {Function} Returns the new case function.
       */
      function createCaseFirst(methodName) {
        return function(string) {
          string = toString(string);

          var strSymbols = hasUnicode(string)
            ? stringToArray(string)
            : undefined;

          var chr = strSymbols
            ? strSymbols[0]
            : string.charAt(0);

          var trailing = strSymbols
            ? castSlice(strSymbols, 1).join('')
            : string.slice(1);

          return chr[methodName]() + trailing;
        };
      }

      /**
       * Creates a function like `_.camelCase`.
       *
       * @private
       * @param {Function} callback The function to combine each word.
       * @returns {Function} Returns the new compounder function.
       */
      function createCompounder(callback) {
        return function(string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      /**
       * Creates a function that produces an instance of `Ctor` regardless of
       * whether it was invoked as part of a `new` expression or by `call` or `apply`.
       *
       * @private
       * @param {Function} Ctor The constructor to wrap.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCtor(Ctor) {
        return function() {
          // Use a `switch` statement to work with class constructors. See
          // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
          // for more details.
          var args = arguments;
          switch (args.length) {
            case 0: return new Ctor;
            case 1: return new Ctor(args[0]);
            case 2: return new Ctor(args[0], args[1]);
            case 3: return new Ctor(args[0], args[1], args[2]);
            case 4: return new Ctor(args[0], args[1], args[2], args[3]);
            case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);

          // Mimic the constructor's `return` behavior.
          // See https://es5.github.io/#x13.2.2 for more details.
          return isObject(result) ? result : thisBinding;
        };
      }

      /**
       * Creates a function that wraps `func` to enable currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {number} arity The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

          while (index--) {
            args[index] = arguments[index];
          }
          var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
            ? []
            : replaceHolders(args, placeholder);

          length -= holders.length;
          if (length < arity) {
            return createRecurry(
              func, bitmask, createHybrid, wrapper.placeholder, undefined,
              args, holders, undefined, undefined, arity - length);
          }
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return apply(fn, this, args);
        }
        return wrapper;
      }

      /**
       * Creates a `_.find` or `_.findLast` function.
       *
       * @private
       * @param {Function} findIndexFunc The function to find the collection index.
       * @returns {Function} Returns the new find function.
       */
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object(collection);
          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);
            predicate = function(key) { return iteratee(iterable[key], key, iterable); };
          }
          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
        };
      }

      /**
       * Creates a `_.flow` or `_.flowRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new flow function.
       */
      function createFlow(fromRight) {
        return flatRest(function(funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }
          while (index--) {
            var func = funcs[index];
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index = wrapper ? index : length;
          while (++index < length) {
            func = funcs[index];

            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;

            if (data && isLaziable(data[0]) &&
                  data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                  !data[4].length && data[9] == 1
                ) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = (func.length == 1 && isLaziable(func))
                ? wrapper[funcName]()
                : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }
            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }
            return result;
          };
        });
      }

      /**
       * Creates a function that wraps `func` to invoke it with optional `this`
       * binding of `thisArg`, partial application, and currying.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [partialsRight] The arguments to append to those provided
       *  to the new function.
       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length;

          while (index--) {
            args[index] = arguments[index];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length -= holdersCount;
          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(
              func, bitmask, createHybrid, wrapper.placeholder, thisArg,
              args, newHolders, argPos, ary, arity - length
            );
          }
          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;

          length = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }
          if (isAry && ary < length) {
            args.length = ary;
          }
          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }

      /**
       * Creates a function like `_.invertBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} toIteratee The function to resolve iteratees.
       * @returns {Function} Returns the new inverter function.
       */
      function createInverter(setter, toIteratee) {
        return function(object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      /**
       * Creates a function that performs a mathematical operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @param {number} [defaultValue] The value used for `undefined` arguments.
       * @returns {Function} Returns the new mathematical operation function.
       */
      function createMathOperation(operator, defaultValue) {
        return function(value, other) {
          var result;
          if (value === undefined && other === undefined) {
            return defaultValue;
          }
          if (value !== undefined) {
            result = value;
          }
          if (other !== undefined) {
            if (result === undefined) {
              return other;
            }
            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result = operator(value, other);
          }
          return result;
        };
      }

      /**
       * Creates a function like `_.over`.
       *
       * @private
       * @param {Function} arrayFunc The function to iterate over iteratees.
       * @returns {Function} Returns the new over function.
       */
      function createOver(arrayFunc) {
        return flatRest(function(iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      /**
       * Creates the padding for `string` based on `length`. The `chars` string
       * is truncated if the number of characters exceeds `length`.
       *
       * @private
       * @param {number} length The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padding for `string`.
       */
      function createPadding(length, chars) {
        chars = chars === undefined ? ' ' : baseToString(chars);

        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }
        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars)
          ? castSlice(stringToArray(result), 0, length).join('')
          : result.slice(0, length);
      }

      /**
       * Creates a function that wraps `func` to invoke it with the `this` binding
       * of `thisArg` and `partials` prepended to the arguments it receives.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} partials The arguments to prepend to those provided to
       *  the new function.
       * @returns {Function} Returns the new wrapped function.
       */
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }

      /**
       * Creates a `_.range` or `_.rangeRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new range function.
       */
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined;
          }
          // Ensure the sign of `-0` is preserved.
          start = toFinite(start);
          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }

      /**
       * Creates a function that performs a relational operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @returns {Function} Returns the new relational operation function.
       */
      function createRelationalOperation(operator) {
        return function(value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }

      /**
       * Creates a function that wraps `func` to continue currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {Function} wrapFunc The function to create the `func` wrapper.
       * @param {*} placeholder The placeholder value.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;

        bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [
          func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
          newHoldersRight, argPos, ary, arity
        ];

        var result = wrapFunc.apply(undefined, newData);
        if (isLaziable(func)) {
          setData(result, newData);
        }
        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }

      /**
       * Creates a function like `_.round`.
       *
       * @private
       * @param {string} methodName The name of the `Math` method to use when rounding.
       * @returns {Function} Returns the new round function.
       */
      function createRound(methodName) {
        var func = Math[methodName];
        return function(number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
          if (precision) {
            // Shift with exponential notation to avoid floating-point issues.
            // See [MDN](https://mdn.io/round#Examples) for more details.
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));

            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }
          return func(number);
        };
      }

      /**
       * Creates a set object of `values`.
       *
       * @private
       * @param {Array} values The values to add to the set.
       * @returns {Object} Returns the new set.
       */
      var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
        return new Set(values);
      };

      /**
       * Creates a `_.toPairs` or `_.toPairsIn` function.
       *
       * @private
       * @param {Function} keysFunc The function to get the keys of a given object.
       * @returns {Function} Returns the new pairs function.
       */
      function createToPairs(keysFunc) {
        return function(object) {
          var tag = getTag(object);
          if (tag == mapTag) {
            return mapToArray(object);
          }
          if (tag == setTag) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }

      /**
       * Creates a function that either curries or invokes `func` with optional
       * `this` binding and partially applied arguments.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags.
       *    1 - `_.bind`
       *    2 - `_.bindKey`
       *    4 - `_.curry` or `_.curryRight` of a bound function
       *    8 - `_.curry`
       *   16 - `_.curryRight`
       *   32 - `_.partial`
       *   64 - `_.partialRight`
       *  128 - `_.rearg`
       *  256 - `_.ary`
       *  512 - `_.flip`
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to be partially applied.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined;
        }
        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;

          partials = holders = undefined;
        }
        var data = isBindKey ? undefined : getData(func);

        var newData = [
          func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
          argPos, ary, arity
        ];

        if (data) {
          mergeData(newData, data);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined
          ? (isBindKey ? 0 : func.length)
          : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined, newData);
        }
        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }

      /**
       * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
       * of source objects to the destination object for all destination properties
       * that resolve to `undefined`.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to assign.
       * @param {Object} object The parent object of `objValue`.
       * @returns {*} Returns the value to assign.
       */
      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined ||
            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
          return srcValue;
        }
        return objValue;
      }

      /**
       * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
       * objects into destination objects that are passed thru.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to merge.
       * @param {Object} object The parent object of `objValue`.
       * @param {Object} source The parent object of `srcValue`.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       * @returns {*} Returns the value to assign.
       */
      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }
        return objValue;
      }

      /**
       * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
       * objects.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {string} key The key of the property to inspect.
       * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
       */
      function customOmitClone(value) {
        return isPlainObject(value) ? undefined : value;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `array` and `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(array);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var index = -1,
            result = true,
            seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

        stack.set(array, other);
        stack.set(other, array);

        // Ignore non-index properties.
        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, arrValue, index, other, array, stack)
              : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== undefined) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          // Recursively compare arrays (susceptible to call stack limits).
          if (seen) {
            if (!arraySome(other, function(othValue, othIndex) {
                  if (!cacheHas(seen, othIndex) &&
                      (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
              result = false;
              break;
            }
          } else if (!(
                arrValue === othValue ||
                  equalFunc(arrValue, othValue, bitmask, customizer, stack)
              )) {
            result = false;
            break;
          }
        }
        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if ((object.byteLength != other.byteLength) ||
                (object.byteOffset != other.byteOffset)) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if ((object.byteLength != other.byteLength) ||
                !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }
            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == (other + '');

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;

            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);

        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, objValue, key, other, object, stack)
              : customizer(objValue, othValue, key, object, other, stack);
          }
          // Recursively compare objects (susceptible to call stack limits).
          if (!(compared === undefined
                ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                : compared
              )) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == 'constructor');
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          // Non `Object` object instances with different constructors are not equal.
          if (objCtor != othCtor &&
              ('constructor' in object && 'constructor' in other) &&
              !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      /**
       * A specialized version of `baseRest` which flattens the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + '');
      }

      /**
       * Creates an array of own enumerable property names and symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      /**
       * Creates an array of own and inherited enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      /**
       * Gets metadata for `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {*} Returns the metadata for `func`.
       */
      var getData = !metaMap ? noop : function(func) {
        return metaMap.get(func);
      };

      /**
       * Gets the name of `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {string} Returns the function name.
       */
      function getFuncName(func) {
        var result = (func.name + ''),
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;
          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result;
      }

      /**
       * Gets the argument placeholder value for `func`.
       *
       * @private
       * @param {Function} func The function to inspect.
       * @returns {*} Returns the placeholder value.
       */
      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      /**
       * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
       * this function returns the custom method, otherwise it returns `baseIteratee`.
       * If arguments are provided, the chosen function is invoked with them and
       * its result is returned.
       *
       * @private
       * @param {*} [value] The value to convert to an iteratee.
       * @param {number} [arity] The arity of the created iteratee.
       * @returns {Function} Returns the chosen function or its result.
       */
      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      /**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key)
          ? data[typeof key == 'string' ? 'string' : 'hash']
          : data.map;
      }

      /**
       * Gets the property names, values, and compare flags of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the match data of `object`.
       */
      function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];

          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }

      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }

      /**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
        } catch (e) {}

        var result = nativeObjectToString.call(value);
        {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }

      /**
       * Creates an array of the own enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };

      /**
       * Creates an array of the own and inherited enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result = [];
        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }
        return result;
      };

      /**
       * Gets the `toStringTag` of `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      var getTag = baseGetTag;

      // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
      if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
          (Map && getTag(new Map) != mapTag) ||
          (Promise && getTag(Promise.resolve()) != promiseTag) ||
          (Set && getTag(new Set) != setTag) ||
          (WeakMap && getTag(new WeakMap) != weakMapTag)) {
        getTag = function(value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString: return dataViewTag;
              case mapCtorString: return mapTag;
              case promiseCtorString: return promiseTag;
              case setCtorString: return setTag;
              case weakMapCtorString: return weakMapTag;
            }
          }
          return result;
        };
      }

      /**
       * Gets the view, applying any `transforms` to the `start` and `end` positions.
       *
       * @private
       * @param {number} start The start of the view.
       * @param {number} end The end of the view.
       * @param {Array} transforms The transformations to apply to the view.
       * @returns {Object} Returns an object containing the `start` and `end`
       *  positions of the view.
       */
      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':      start += size; break;
            case 'dropRight': end -= size; break;
            case 'take':      end = nativeMin(end, start + size); break;
            case 'takeRight': start = nativeMax(start, end - size); break;
          }
        }
        return { 'start': start, 'end': end };
      }

      /**
       * Extracts wrapper details from the `source` body comment.
       *
       * @private
       * @param {string} source The source to inspect.
       * @returns {Array} Returns the wrapper details.
       */
      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }

      /**
       * Checks if `path` exists on `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @param {Function} hasFunc The function to check properties.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       */
      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);

        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = toKey(path[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) &&
          (isArray(object) || isArguments(object));
      }

      /**
       * Initializes an array clone.
       *
       * @private
       * @param {Array} array The array to clone.
       * @returns {Array} Returns the initialized clone.
       */
      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        // Add properties assigned by `RegExp#exec`.
        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }

      /**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneObject(object) {
        return (typeof object.constructor == 'function' && !isPrototype(object))
          ? baseCreate(getPrototype(object))
          : {};
      }

      /**
       * Initializes an object clone based on its `toStringTag`.
       *
       * **Note:** This function only supports cloning values with tags of
       * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {string} tag The `toStringTag` of the object to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag: case float64Tag:
          case int8Tag: case int16Tag: case int32Tag:
          case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return new Ctor;

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return new Ctor;

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      /**
       * Inserts wrapper `details` in a comment at the top of the `source` body.
       *
       * @private
       * @param {string} source The source to modify.
       * @returns {Array} details The details to insert.
       * @returns {string} Returns the modified source.
       */
      function insertWrapDetails(source, details) {
        var length = details.length;
        if (!length) {
          return source;
        }
        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }

      /**
       * Checks if `value` is a flattenable `arguments` object or array.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
       */
      function isFlattenable(value) {
        return isArray(value) || isArguments(value) ||
          !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      /**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;

        return !!length &&
          (type == 'number' ||
            (type != 'symbol' && reIsUint.test(value))) &&
              (value > -1 && value % 1 == 0 && value < length);
      }

      /**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == 'number'
              ? (isArrayLike(object) && isIndex(index, object.length))
              : (type == 'string' && index in object)
            ) {
          return eq(object[index], value);
        }
        return false;
      }

      /**
       * Checks if `value` is a property name and not a property path.
       *
       * @private
       * @param {*} value The value to check.
       * @param {Object} [object] The object to query keys on.
       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
       */
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == 'number' || type == 'symbol' || type == 'boolean' ||
            value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
          (object != null && value in Object(object));
      }

      /**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */
      function isKeyable(value) {
        var type = typeof value;
        return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
          ? (value !== '__proto__')
          : (value === null);
      }

      /**
       * Checks if `func` has a lazy counterpart.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
       *  else `false`.
       */
      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data = getData(other);
        return !!data && func === data[0];
      }

      /**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */
      function isMasked(func) {
        return !!maskSrcKey && (maskSrcKey in func);
      }

      /**
       * Checks if `func` is capable of being masked.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
       */
      var isMaskable = coreJsData ? isFunction : stubFalse;

      /**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */
      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

        return value === proto;
      }

      /**
       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` if suitable for strict
       *  equality comparisons, else `false`.
       */
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      /**
       * A specialized version of `matchesProperty` for source values suitable
       * for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue &&
            (srcValue !== undefined || (key in Object(object)));
        };
      }

      /**
       * A specialized version of `_.memoize` which clears the memoized function's
       * cache when it exceeds `MAX_MEMOIZE_SIZE`.
       *
       * @private
       * @param {Function} func The function to have its output memoized.
       * @returns {Function} Returns the new memoized function.
       */
      function memoizeCapped(func) {
        var result = memoize(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });

        var cache = result.cache;
        return result;
      }

      /**
       * Merges the function metadata of `source` into `data`.
       *
       * Merging metadata reduces the number of wrappers used to invoke a function.
       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
       * may be applied regardless of execution order. Methods like `_.ary` and
       * `_.rearg` modify function arguments, making the order in which they are
       * executed important, preventing the merging of metadata. However, we make
       * an exception for a safe combined case where curried functions have `_.ary`
       * and or `_.rearg` applied.
       *
       * @private
       * @param {Array} data The destination metadata.
       * @param {Array} source The source metadata.
       * @returns {Array} Returns `data`.
       */
      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

        var isCombo =
          ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
          ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
          ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

        // Exit early if metadata can't be merged.
        if (!(isCommon || isCombo)) {
          return data;
        }
        // Use source `thisArg` if available.
        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          // Set when currying a bound function.
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        // Compose partial arguments.
        var value = source[3];
        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }
        // Compose partial right arguments.
        value = source[5];
        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }
        // Use source `argPos` if available.
        value = source[7];
        if (value) {
          data[7] = value;
        }
        // Use source `ary` if it's smaller.
        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }
        // Use source `arity` if one is not provided.
        if (data[9] == null) {
          data[9] = source[9];
        }
        // Use source `func` and merge bitmasks.
        data[0] = source[0];
        data[1] = newBitmask;

        return data;
      }

      /**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      /**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */
      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
        return function() {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      /**
       * Gets the parent value at `path` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} path The path to get the parent value of.
       * @returns {*} Returns the parent value.
       */
      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      /**
       * Reorder `array` according to the specified indexes where the element at
       * the first index is assigned as the first element, the element at
       * the second index is assigned as the second element, and so on.
       *
       * @private
       * @param {Array} array The array to reorder.
       * @param {Array} indexes The arranged array indexes.
       * @returns {Array} Returns `array`.
       */
      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
        }
        return array;
      }

      /**
       * Sets metadata for `func`.
       *
       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
       * period of time, it will trip its breaker and transition to an identity
       * function to avoid garbage collection pauses in V8. See
       * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
       * for more details.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var setData = shortOut(baseSetData);

      /**
       * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      var setTimeout = ctxSetTimeout || function(func, wait) {
        return root.setTimeout(func, wait);
      };

      /**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var setToString = shortOut(baseSetToString);

      /**
       * Sets the `toString` method of `wrapper` to mimic the source of `reference`
       * with wrapper details in a comment at the top of the source body.
       *
       * @private
       * @param {Function} wrapper The function to modify.
       * @param {Function} reference The reference function.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Function} Returns `wrapper`.
       */
      function setWrapToString(wrapper, reference, bitmask) {
        var source = (reference + '');
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }

      /**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */
      function shortOut(func) {
        var count = 0,
            lastCalled = 0;

        return function() {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);

          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined, arguments);
        };
      }

      /**
       * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @param {number} [size=array.length] The size of `array`.
       * @returns {Array} Returns `array`.
       */
      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;

        size = size === undefined ? length : size;
        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];

          array[rand] = array[index];
          array[index] = value;
        }
        array.length = size;
        return array;
      }

      /**
       * Converts `string` to a property path array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the property path array.
       */
      var stringToPath = memoizeCapped(function(string) {
        var result = [];
        if (string.charCodeAt(0) === 46 /* . */) {
          result.push('');
        }
        string.replace(rePropName, function(match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
        });
        return result;
      });

      /**
       * Converts `value` to a string key if it's not a string or symbol.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {string|symbol} Returns the key.
       */
      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
      }

      /**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}
          try {
            return (func + '');
          } catch (e) {}
        }
        return '';
      }

      /**
       * Updates wrapper `details` based on `bitmask` flags.
       *
       * @private
       * @returns {Array} details The details to modify.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Array} Returns `details`.
       */
      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function(pair) {
          var value = '_.' + pair[0];
          if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }

      /**
       * Creates a clone of `wrapper`.
       *
       * @private
       * @param {Object} wrapper The wrapper to clone.
       * @returns {Object} Returns the cloned wrapper.
       */
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__  = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of elements split into groups the length of `size`.
       * If `array` can't be split evenly, the final chunk will be the remaining
       * elements.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to process.
       * @param {number} [size=1] The length of each chunk
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the new array of chunks.
       * @example
       *
       * _.chunk(['a', 'b', 'c', 'd'], 2);
       * // => [['a', 'b'], ['c', 'd']]
       *
       * _.chunk(['a', 'b', 'c', 'd'], 3);
       * // => [['a', 'b', 'c'], ['d']]
       */
      function chunk(array, size, guard) {
        if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }
        var length = array == null ? 0 : array.length;
        if (!length || size < 1) {
          return [];
        }
        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, (index += size));
        }
        return result;
      }

      /**
       * Creates an array with all falsey values removed. The values `false`, `null`,
       * `0`, `""`, `undefined`, and `NaN` are falsey.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to compact.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.compact([0, 1, false, 2, '', 3]);
       * // => [1, 2, 3]
       */
      function compact(array) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (value) {
            result[resIndex++] = value;
          }
        }
        return result;
      }

      /**
       * Creates a new array concatenating `array` with any additional arrays
       * and/or values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to concatenate.
       * @param {...*} [values] The values to concatenate.
       * @returns {Array} Returns the new concatenated array.
       * @example
       *
       * var array = [1];
       * var other = _.concat(array, 2, [3], [[4]]);
       *
       * console.log(other);
       * // => [1, 2, 3, [4]]
       *
       * console.log(array);
       * // => [1]
       */
      function concat() {
        var length = arguments.length;
        if (!length) {
          return [];
        }
        var args = Array(length - 1),
            array = arguments[0],
            index = length;

        while (index--) {
          args[index - 1] = arguments[index];
        }
        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }

      /**
       * Creates an array of `array` values not included in the other given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * **Note:** Unlike `_.pullAll`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.without, _.xor
       * @example
       *
       * _.difference([2, 1], [2, 3]);
       * // => [1]
       */
      var difference = baseRest(function(array, values) {
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
          : [];
      });

      /**
       * This method is like `_.difference` except that it accepts `iteratee` which
       * is invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var differenceBy = baseRest(function(array, values) {
        var iteratee = last(values);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
          : [];
      });

      /**
       * This method is like `_.difference` except that it accepts `comparator`
       * which is invoked to compare elements of `array` to `values`. The order and
       * references of result values are determined by the first array. The comparator
       * is invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       *
       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }]
       */
      var differenceWith = baseRest(function(array, values) {
        var comparator = last(values);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
          : [];
      });

      /**
       * Creates a slice of `array` with `n` elements dropped from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.drop([1, 2, 3]);
       * // => [2, 3]
       *
       * _.drop([1, 2, 3], 2);
       * // => [3]
       *
       * _.drop([1, 2, 3], 5);
       * // => []
       *
       * _.drop([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined) ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      /**
       * Creates a slice of `array` with `n` elements dropped from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.dropRight([1, 2, 3]);
       * // => [1, 2]
       *
       * _.dropRight([1, 2, 3], 2);
       * // => [1]
       *
       * _.dropRight([1, 2, 3], 5);
       * // => []
       *
       * _.dropRight([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined) ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the end.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.dropRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropRightWhile(users, ['active', false]);
       * // => objects for ['barney']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropRightWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropRightWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), true, true)
          : [];
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the beginning.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.dropWhile(users, function(o) { return !o.active; });
       * // => objects for ['pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropWhile(users, ['active', false]);
       * // => objects for ['pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), true)
          : [];
      }

      /**
       * Fills elements of `array` with `value` from `start` up to, but not
       * including, `end`.
       *
       * **Note:** This method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Array
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.fill(array, 'a');
       * console.log(array);
       * // => ['a', 'a', 'a']
       *
       * _.fill(Array(3), 2);
       * // => [2, 2, 2]
       *
       * _.fill([4, 6, 8, 10], '*', 1, 3);
       * // => [4, '*', '*', 10]
       */
      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array, value, start, end);
      }

      /**
       * This method is like `_.find` except that it returns the index of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.findIndex(users, function(o) { return o.user == 'barney'; });
       * // => 0
       *
       * // The `_.matches` iteratee shorthand.
       * _.findIndex(users, { 'user': 'fred', 'active': false });
       * // => 1
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findIndex(users, ['active', false]);
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.findIndex(users, 'active');
       * // => 2
       */
      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }

      /**
       * This method is like `_.findIndex` except that it iterates over elements
       * of `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
       * // => 2
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastIndex(users, { 'user': 'barney', 'active': true });
       * // => 0
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastIndex(users, ['active', false]);
       * // => 2
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastIndex(users, 'active');
       * // => 0
       */
      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length - 1;
        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = fromIndex < 0
            ? nativeMax(length + index, 0)
            : nativeMin(index, length - 1);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }

      /**
       * Flattens `array` a single level deep.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flatten([1, [2, [3, [4]], 5]]);
       * // => [1, 2, [3, [4]], 5]
       */
      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }

      /**
       * Recursively flattens `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flattenDeep([1, [2, [3, [4]], 5]]);
       * // => [1, 2, 3, 4, 5]
       */
      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      /**
       * Recursively flatten `array` up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * var array = [1, [2, [3, [4]], 5]];
       *
       * _.flattenDepth(array, 1);
       * // => [1, 2, [3, [4]], 5]
       *
       * _.flattenDepth(array, 2);
       * // => [1, 2, 3, [4], 5]
       */
      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      /**
       * The inverse of `_.toPairs`; this method returns an object composed
       * from key-value `pairs`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} pairs The key-value pairs.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.fromPairs([['a', 1], ['b', 2]]);
       * // => { 'a': 1, 'b': 2 }
       */
      function fromPairs(pairs) {
        var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }
        return result;
      }

      /**
       * Gets the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias first
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the first element of `array`.
       * @example
       *
       * _.head([1, 2, 3]);
       * // => 1
       *
       * _.head([]);
       * // => undefined
       */
      function head(array) {
        return (array && array.length) ? array[0] : undefined;
      }

      /**
       * Gets the index at which the first occurrence of `value` is found in `array`
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. If `fromIndex` is negative, it's used as the
       * offset from the end of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.indexOf([1, 2, 1, 2], 2);
       * // => 1
       *
       * // Search from the `fromIndex`.
       * _.indexOf([1, 2, 1, 2], 2, 2);
       * // => 3
       */
      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseIndexOf(array, value, index);
      }

      /**
       * Gets all but the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.initial([1, 2, 3]);
       * // => [1, 2]
       */
      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }

      /**
       * Creates an array of unique values that are included in all given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersection([2, 1], [2, 3]);
       * // => [2]
       */
      var intersection = baseRest(function(arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped)
          : [];
      });

      /**
       * This method is like `_.intersection` except that it accepts `iteratee`
       * which is invoked for each element of each `arrays` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [2.1]
       *
       * // The `_.property` iteratee shorthand.
       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }]
       */
      var intersectionBy = baseRest(function(arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined;
        } else {
          mapped.pop();
        }
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped, getIteratee(iteratee, 2))
          : [];
      });

      /**
       * This method is like `_.intersection` except that it accepts `comparator`
       * which is invoked to compare elements of `arrays`. The order and references
       * of result values are determined by the first array. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.intersectionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }]
       */
      var intersectionWith = baseRest(function(arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        comparator = typeof comparator == 'function' ? comparator : undefined;
        if (comparator) {
          mapped.pop();
        }
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped, undefined, comparator)
          : [];
      });

      /**
       * Converts all elements in `array` into a string separated by `separator`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to convert.
       * @param {string} [separator=','] The element separator.
       * @returns {string} Returns the joined string.
       * @example
       *
       * _.join(['a', 'b', 'c'], '~');
       * // => 'a~b~c'
       */
      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }

      /**
       * Gets the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the last element of `array`.
       * @example
       *
       * _.last([1, 2, 3]);
       * // => 3
       */
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined;
      }

      /**
       * This method is like `_.indexOf` except that it iterates over elements of
       * `array` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.lastIndexOf([1, 2, 1, 2], 2);
       * // => 3
       *
       * // Search from the `fromIndex`.
       * _.lastIndexOf([1, 2, 1, 2], 2, 2);
       * // => 1
       */
      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length;
        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return value === value
          ? strictLastIndexOf(array, value, index)
          : baseFindIndex(array, baseIsNaN, index, true);
      }

      /**
       * Gets the element at index `n` of `array`. If `n` is negative, the nth
       * element from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.11.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=0] The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       *
       * _.nth(array, 1);
       * // => 'b'
       *
       * _.nth(array, -2);
       * // => 'c';
       */
      function nth(array, n) {
        return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
      }

      /**
       * Removes all given values from `array` using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
       * to remove elements from an array by predicate.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...*} [values] The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pull(array, 'a', 'c');
       * console.log(array);
       * // => ['b', 'b']
       */
      var pull = baseRest(pullAll);

      /**
       * This method is like `_.pull` except that it accepts an array of values to remove.
       *
       * **Note:** Unlike `_.difference`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pullAll(array, ['a', 'c']);
       * console.log(array);
       * // => ['b', 'b']
       */
      function pullAll(array, values) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values)
          : array;
      }

      /**
       * This method is like `_.pullAll` except that it accepts `iteratee` which is
       * invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The iteratee is invoked with one argument: (value).
       *
       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
       *
       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
       * console.log(array);
       * // => [{ 'x': 2 }]
       */
      function pullAllBy(array, values, iteratee) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values, getIteratee(iteratee, 2))
          : array;
      }

      /**
       * This method is like `_.pullAll` except that it accepts `comparator` which
       * is invoked to compare elements of `array` to `values`. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
       *
       * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
       * console.log(array);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
       */
      function pullAllWith(array, values, comparator) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values, undefined, comparator)
          : array;
      }

      /**
       * Removes elements from `array` corresponding to `indexes` and returns an
       * array of removed elements.
       *
       * **Note:** Unlike `_.at`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...(number|number[])} [indexes] The indexes of elements to remove.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       * var pulled = _.pullAt(array, [1, 3]);
       *
       * console.log(array);
       * // => ['a', 'c']
       *
       * console.log(pulled);
       * // => ['b', 'd']
       */
      var pullAt = flatRest(function(array, indexes) {
        var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);

        basePullAt(array, arrayMap(indexes, function(index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));

        return result;
      });

      /**
       * Removes all elements from `array` that `predicate` returns truthy for
       * and returns an array of the removed elements. The predicate is invoked
       * with three arguments: (value, index, array).
       *
       * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
       * to pull elements from an array by value.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = [1, 2, 3, 4];
       * var evens = _.remove(array, function(n) {
       *   return n % 2 == 0;
       * });
       *
       * console.log(array);
       * // => [1, 3]
       *
       * console.log(evens);
       * // => [2, 4]
       */
      function remove(array, predicate) {
        var result = [];
        if (!(array && array.length)) {
          return result;
        }
        var index = -1,
            indexes = [],
            length = array.length;

        predicate = getIteratee(predicate, 3);
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }
        basePullAt(array, indexes);
        return result;
      }

      /**
       * Reverses `array` so that the first element becomes the last, the second
       * element becomes the second to last, and so on.
       *
       * **Note:** This method mutates `array` and is based on
       * [`Array#reverse`](https://mdn.io/Array/reverse).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.reverse(array);
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }

      /**
       * Creates a slice of `array` from `start` up to, but not including, `end`.
       *
       * **Note:** This method is used instead of
       * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
       * returned.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        }
        else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined ? length : toInteger(end);
        }
        return baseSlice(array, start, end);
      }

      /**
       * Uses a binary search to determine the lowest index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedIndex([30, 50], 40);
       * // => 1
       */
      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      /**
       * This method is like `_.sortedIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
       * // => 0
       */
      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }

      /**
       * This method is like `_.indexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
       * // => 1
       */
      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value);
          if (index < length && eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * This method is like `_.sortedIndex` except that it returns the highest
       * index at which `value` should be inserted into `array` in order to
       * maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
       * // => 4
       */
      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      /**
       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 1
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
       * // => 1
       */
      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }

      /**
       * This method is like `_.lastIndexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
       * // => 3
       */
      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;
          if (eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * This method is like `_.uniq` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniq([1, 1, 2]);
       * // => [1, 2]
       */
      function sortedUniq(array) {
        return (array && array.length)
          ? baseSortedUniq(array)
          : [];
      }

      /**
       * This method is like `_.uniqBy` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
       * // => [1.1, 2.3]
       */
      function sortedUniqBy(array, iteratee) {
        return (array && array.length)
          ? baseSortedUniq(array, getIteratee(iteratee, 2))
          : [];
      }

      /**
       * Gets all but the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.tail([1, 2, 3]);
       * // => [2, 3]
       */
      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }

      /**
       * Creates a slice of `array` with `n` elements taken from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.take([1, 2, 3]);
       * // => [1]
       *
       * _.take([1, 2, 3], 2);
       * // => [1, 2]
       *
       * _.take([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.take([1, 2, 3], 0);
       * // => []
       */
      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }
        n = (guard || n === undefined) ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` with `n` elements taken from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.takeRight([1, 2, 3]);
       * // => [3]
       *
       * _.takeRight([1, 2, 3], 2);
       * // => [2, 3]
       *
       * _.takeRight([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.takeRight([1, 2, 3], 0);
       * // => []
       */
      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined) ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      /**
       * Creates a slice of `array` with elements taken from the end. Elements are
       * taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.takeRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeRightWhile(users, ['active', false]);
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeRightWhile(users, 'active');
       * // => []
       */
      function takeRightWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), false, true)
          : [];
      }

      /**
       * Creates a slice of `array` with elements taken from the beginning. Elements
       * are taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.takeWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeWhile(users, ['active', false]);
       * // => objects for ['barney', 'fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeWhile(users, 'active');
       * // => []
       */
      function takeWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3))
          : [];
      }

      /**
       * Creates an array of unique values, in order, from all given arrays using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.union([2], [1, 2]);
       * // => [2, 1]
       */
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });

      /**
       * This method is like `_.union` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which uniqueness is computed. Result values are chosen from the first
       * array in which the value occurs. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.unionBy([2.1], [1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      var unionBy = baseRest(function(arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });

      /**
       * This method is like `_.union` except that it accepts `comparator` which
       * is invoked to compare elements of `arrays`. Result values are chosen from
       * the first array in which the value occurs. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.unionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var unionWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
      });

      /**
       * Creates a duplicate-free version of an array, using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons, in which only the first occurrence of each element
       * is kept. The order of result values is determined by the order they occur
       * in the array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniq([2, 1, 2]);
       * // => [2, 1]
       */
      function uniq(array) {
        return (array && array.length) ? baseUniq(array) : [];
      }

      /**
       * This method is like `_.uniq` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * uniqueness is computed. The order of result values is determined by the
       * order they occur in the array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      function uniqBy(array, iteratee) {
        return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }

      /**
       * This method is like `_.uniq` except that it accepts `comparator` which
       * is invoked to compare elements of `array`. The order of result values is
       * determined by the order they occur in the array.The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.uniqWith(objects, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
       */
      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
      }

      /**
       * This method is like `_.zip` except that it accepts an array of grouped
       * elements and creates an array regrouping the elements to their pre-zip
       * configuration.
       *
       * @static
       * @memberOf _
       * @since 1.2.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       *
       * _.unzip(zipped);
       * // => [['a', 'b'], [1, 2], [true, false]]
       */
      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }
        var length = 0;
        array = arrayFilter(array, function(group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function(index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      /**
       * This method is like `_.unzip` except that it accepts `iteratee` to specify
       * how regrouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  regrouped values.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
       * // => [[1, 10, 100], [2, 20, 200]]
       *
       * _.unzipWith(zipped, _.add);
       * // => [3, 30, 300]
       */
      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }
        var result = unzip(array);
        if (iteratee == null) {
          return result;
        }
        return arrayMap(result, function(group) {
          return apply(iteratee, undefined, group);
        });
      }

      /**
       * Creates an array excluding all given values using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.pull`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...*} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.xor
       * @example
       *
       * _.without([2, 1, 2, 3], 1, 2);
       * // => [3]
       */
      var without = baseRest(function(array, values) {
        return isArrayLikeObject(array)
          ? baseDifference(array, values)
          : [];
      });

      /**
       * Creates an array of unique values that is the
       * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
       * of the given arrays. The order of result values is determined by the order
       * they occur in the arrays.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.without
       * @example
       *
       * _.xor([2, 1], [2, 3]);
       * // => [1, 3]
       */
      var xor = baseRest(function(arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });

      /**
       * This method is like `_.xor` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which by which they're compared. The order of result values is determined
       * by the order they occur in the arrays. The iteratee is invoked with one
       * argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2, 3.4]
       *
       * // The `_.property` iteratee shorthand.
       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var xorBy = baseRest(function(arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });

      /**
       * This method is like `_.xor` except that it accepts `comparator` which is
       * invoked to compare elements of `arrays`. The order of result values is
       * determined by the order they occur in the arrays. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.xorWith(objects, others, _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var xorWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
      });

      /**
       * Creates an array of grouped elements, the first of which contains the
       * first elements of the given arrays, the second of which contains the
       * second elements of the given arrays, and so on.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       */
      var zip = baseRest(unzip);

      /**
       * This method is like `_.fromPairs` except that it accepts two arrays,
       * one of property identifiers and one of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 0.4.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObject(['a', 'b'], [1, 2]);
       * // => { 'a': 1, 'b': 2 }
       */
      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      /**
       * This method is like `_.zipObject` except that it supports property paths.
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
       */
      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      /**
       * This method is like `_.zip` except that it accepts `iteratee` to specify
       * how grouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  grouped values.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
       *   return a + b + c;
       * });
       * // => [111, 222]
       */
      var zipWith = baseRest(function(arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined;

        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
        return unzipWith(arrays, iteratee);
      });

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` wrapper instance that wraps `value` with explicit method
       * chain sequences enabled. The result of such sequences must be unwrapped
       * with `_#value`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Seq
       * @param {*} value The value to wrap.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36 },
       *   { 'user': 'fred',    'age': 40 },
       *   { 'user': 'pebbles', 'age': 1 }
       * ];
       *
       * var youngest = _
       *   .chain(users)
       *   .sortBy('age')
       *   .map(function(o) {
       *     return o.user + ' is ' + o.age;
       *   })
       *   .head()
       *   .value();
       * // => 'pebbles is 1'
       */
      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      /**
       * This method invokes `interceptor` and returns `value`. The interceptor
       * is invoked with one argument; (value). The purpose of this method is to
       * "tap into" a method chain sequence in order to modify intermediate results.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns `value`.
       * @example
       *
       * _([1, 2, 3])
       *  .tap(function(array) {
       *    // Mutate input array.
       *    array.pop();
       *  })
       *  .reverse()
       *  .value();
       * // => [2, 1]
       */
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      /**
       * This method is like `_.tap` except that it returns the result of `interceptor`.
       * The purpose of this method is to "pass thru" values replacing intermediate
       * results in a method chain sequence.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns the result of `interceptor`.
       * @example
       *
       * _('  abc  ')
       *  .chain()
       *  .trim()
       *  .thru(function(value) {
       *    return [value];
       *  })
       *  .value();
       * // => ['abc']
       */
      function thru(value, interceptor) {
        return interceptor(value);
      }

      /**
       * This method is the wrapper version of `_.at`.
       *
       * @name at
       * @memberOf _
       * @since 1.0.0
       * @category Seq
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _(object).at(['a[0].b.c', 'a[1]']).value();
       * // => [3, 4]
       */
      var wrapperAt = flatRest(function(paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function(object) { return baseAt(object, paths); };

        if (length > 1 || this.__actions__.length ||
            !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length ? 1 : 0));
        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined
        });
        return new LodashWrapper(value, this.__chain__).thru(function(array) {
          if (length && !array.length) {
            array.push(undefined);
          }
          return array;
        });
      });

      /**
       * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
       *
       * @name chain
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * // A sequence without explicit chaining.
       * _(users).head();
       * // => { 'user': 'barney', 'age': 36 }
       *
       * // A sequence with explicit chaining.
       * _(users)
       *   .chain()
       *   .head()
       *   .pick('user')
       *   .value();
       * // => { 'user': 'barney' }
       */
      function wrapperChain() {
        return chain(this);
      }

      /**
       * Executes the chain sequence and returns the wrapped result.
       *
       * @name commit
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2];
       * var wrapped = _(array).push(3);
       *
       * console.log(array);
       * // => [1, 2]
       *
       * wrapped = wrapped.commit();
       * console.log(array);
       * // => [1, 2, 3]
       *
       * wrapped.last();
       * // => 3
       *
       * console.log(array);
       * // => [1, 2, 3]
       */
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      /**
       * Gets the next value on a wrapped object following the
       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
       *
       * @name next
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the next iterator value.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 1 }
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 2 }
       *
       * wrapped.next();
       * // => { 'done': true, 'value': undefined }
       */
      function wrapperNext() {
        if (this.__values__ === undefined) {
          this.__values__ = toArray(this.value());
        }
        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined : this.__values__[this.__index__++];

        return { 'done': done, 'value': value };
      }

      /**
       * Enables the wrapper to be iterable.
       *
       * @name Symbol.iterator
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the wrapper object.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped[Symbol.iterator]() === wrapped;
       * // => true
       *
       * Array.from(wrapped);
       * // => [1, 2]
       */
      function wrapperToIterator() {
        return this;
      }

      /**
       * Creates a clone of the chain sequence planting `value` as the wrapped value.
       *
       * @name plant
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @param {*} value The value to plant.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2]).map(square);
       * var other = wrapped.plant([3, 4]);
       *
       * other.value();
       * // => [9, 16]
       *
       * wrapped.value();
       * // => [1, 4]
       */
      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined;
          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }
          var previous = clone;
          parent = parent.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result;
      }

      /**
       * This method is the wrapper version of `_.reverse`.
       *
       * **Note:** This method mutates the wrapped array.
       *
       * @name reverse
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _(array).reverse().value()
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }

      /**
       * Executes the chain sequence to resolve the unwrapped value.
       *
       * @name value
       * @memberOf _
       * @since 0.1.0
       * @alias toJSON, valueOf
       * @category Seq
       * @returns {*} Returns the resolved unwrapped value.
       * @example
       *
       * _([1, 2, 3]).value();
       * // => [1, 2, 3]
       */
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the number of times the key was returned by `iteratee`. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.countBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': 1, '6': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.countBy(['one', 'two', 'three'], 'length');
       * // => { '3': 2, '5': 1 }
       */
      var countBy = createAggregator(function(result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });

      /**
       * Checks if `predicate` returns truthy for **all** elements of `collection`.
       * Iteration is stopped once `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * **Note:** This method returns `true` for
       * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
       * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
       * elements of empty collections.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       * @example
       *
       * _.every([true, 1, null, 'yes'], Boolean);
       * // => false
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.every(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.every(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.every(users, 'active');
       * // => false
       */
      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Iterates over elements of `collection`, returning an array of all elements
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * **Note:** Unlike `_.remove`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.reject
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * _.filter(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, { 'age': 36, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.filter(users, 'active');
       * // => objects for ['barney']
       */
      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Iterates over elements of `collection`, returning the first element
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': true },
       *   { 'user': 'fred',    'age': 40, 'active': false },
       *   { 'user': 'pebbles', 'age': 1,  'active': true }
       * ];
       *
       * _.find(users, function(o) { return o.age < 40; });
       * // => object for 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.find(users, { 'age': 1, 'active': true });
       * // => object for 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.find(users, ['active', false]);
       * // => object for 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.find(users, 'active');
       * // => object for 'barney'
       */
      var find = createFind(findIndex);

      /**
       * This method is like `_.find` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=collection.length-1] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * _.findLast([1, 2, 3, 4], function(n) {
       *   return n % 2 == 1;
       * });
       * // => 3
       */
      var findLast = createFind(findLastIndex);

      /**
       * Creates a flattened array of values by running each element in `collection`
       * thru `iteratee` and flattening the mapped results. The iteratee is invoked
       * with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [n, n];
       * }
       *
       * _.flatMap([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDeep([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDepth([1, 2], duplicate, 2);
       * // => [[1, 1], [2, 2]]
       */
      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      /**
       * Iterates over elements of `collection` and invokes `iteratee` for each element.
       * The iteratee is invoked with three arguments: (value, index|key, collection).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * **Note:** As with other "Collections" methods, objects with a "length"
       * property are iterated like arrays. To avoid this behavior use `_.forIn`
       * or `_.forOwn` for object iteration.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias each
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEachRight
       * @example
       *
       * _.forEach([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `1` then `2`.
       *
       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.forEach` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @alias eachRight
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEach
       * @example
       *
       * _.forEachRight([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `2` then `1`.
       */
      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The order of grouped values
       * is determined by the order they occur in `collection`. The corresponding
       * value of each key is an array of elements responsible for generating the
       * key. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.groupBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': [4.2], '6': [6.1, 6.3] }
       *
       * // The `_.property` iteratee shorthand.
       * _.groupBy(['one', 'two', 'three'], 'length');
       * // => { '3': ['one', 'two'], '5': ['three'] }
       */
      var groupBy = createAggregator(function(result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });

      /**
       * Checks if `value` is in `collection`. If `collection` is a string, it's
       * checked for a substring of `value`, otherwise
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * is used for equality comparisons. If `fromIndex` is negative, it's used as
       * the offset from the end of `collection`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {boolean} Returns `true` if `value` is found, else `false`.
       * @example
       *
       * _.includes([1, 2, 3], 1);
       * // => true
       *
       * _.includes([1, 2, 3], 1, 2);
       * // => false
       *
       * _.includes({ 'a': 1, 'b': 2 }, 1);
       * // => true
       *
       * _.includes('abcd', 'bc');
       * // => true
       */
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

        var length = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }
        return isString(collection)
          ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
          : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
      }

      /**
       * Invokes the method at `path` of each element in `collection`, returning
       * an array of the results of each invoked method. Any additional arguments
       * are provided to each invoked method. If `path` is a function, it's invoked
       * for, and `this` bound to, each element in `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array|Function|string} path The path of the method to invoke or
       *  the function invoked per iteration.
       * @param {...*} [args] The arguments to invoke each method with.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
       * // => [[1, 5, 7], [1, 2, 3]]
       *
       * _.invokeMap([123, 456], String.prototype.split, '');
       * // => [['1', '2', '3'], ['4', '5', '6']]
       */
      var invokeMap = baseRest(function(collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function(value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the last element responsible for generating the key. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * var array = [
       *   { 'dir': 'left', 'code': 97 },
       *   { 'dir': 'right', 'code': 100 }
       * ];
       *
       * _.keyBy(array, function(o) {
       *   return String.fromCharCode(o.code);
       * });
       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
       *
       * _.keyBy(array, 'dir');
       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
       */
      var keyBy = createAggregator(function(result, value, key) {
        baseAssignValue(result, key, value);
      });

      /**
       * Creates an array of values by running each element in `collection` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
       *
       * The guarded methods are:
       * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
       * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
       * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
       * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * _.map([4, 8], square);
       * // => [16, 64]
       *
       * _.map({ 'a': 4, 'b': 8 }, square);
       * // => [16, 64] (iteration order is not guaranteed)
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, 'user');
       * // => ['barney', 'fred']
       */
      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.sortBy` except that it allows specifying the sort
       * orders of the iteratees to sort by. If `orders` is unspecified, all values
       * are sorted in ascending order. Otherwise, specify an order of "desc" for
       * descending or "asc" for ascending sort order of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @param {string[]} [orders] The sort orders of `iteratees`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 34 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 36 }
       * ];
       *
       * // Sort by `user` in ascending order and by `age` in descending order.
       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       */
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined : orders;
        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }

      /**
       * Creates an array of elements split into two groups, the first of which
       * contains elements `predicate` returns truthy for, the second of which
       * contains elements `predicate` returns falsey for. The predicate is
       * invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of grouped elements.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': false },
       *   { 'user': 'fred',    'age': 40, 'active': true },
       *   { 'user': 'pebbles', 'age': 1,  'active': false }
       * ];
       *
       * _.partition(users, function(o) { return o.active; });
       * // => objects for [['fred'], ['barney', 'pebbles']]
       *
       * // The `_.matches` iteratee shorthand.
       * _.partition(users, { 'age': 1, 'active': false });
       * // => objects for [['pebbles'], ['barney', 'fred']]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.partition(users, ['active', false]);
       * // => objects for [['barney', 'pebbles'], ['fred']]
       *
       * // The `_.property` iteratee shorthand.
       * _.partition(users, 'active');
       * // => objects for [['fred'], ['barney', 'pebbles']]
       */
      var partition = createAggregator(function(result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function() { return [[], []]; });

      /**
       * Reduces `collection` to a value which is the accumulated result of running
       * each element in `collection` thru `iteratee`, where each successive
       * invocation is supplied the return value of the previous. If `accumulator`
       * is not given, the first element of `collection` is used as the initial
       * value. The iteratee is invoked with four arguments:
       * (accumulator, value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.reduce`, `_.reduceRight`, and `_.transform`.
       *
       * The guarded methods are:
       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
       * and `sortBy`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduceRight
       * @example
       *
       * _.reduce([1, 2], function(sum, n) {
       *   return sum + n;
       * }, 0);
       * // => 3
       *
       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       *   return result;
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
       */
      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;

        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      /**
       * This method is like `_.reduce` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduce
       * @example
       *
       * var array = [[0, 1], [2, 3], [4, 5]];
       *
       * _.reduceRight(array, function(flattened, other) {
       *   return flattened.concat(other);
       * }, []);
       * // => [4, 5, 2, 3, 0, 1]
       */
      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;

        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      /**
       * The opposite of `_.filter`; this method returns the elements of `collection`
       * that `predicate` does **not** return truthy for.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.filter
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': true }
       * ];
       *
       * _.reject(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.reject(users, { 'age': 40, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.reject(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.reject(users, 'active');
       * // => objects for ['barney']
       */
      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }

      /**
       * Gets a random element from `collection`.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       * @example
       *
       * _.sample([1, 2, 3, 4]);
       * // => 2
       */
      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }

      /**
       * Gets `n` random elements at unique keys from `collection` up to the
       * size of `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @param {number} [n=1] The number of elements to sample.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the random elements.
       * @example
       *
       * _.sampleSize([1, 2, 3], 2);
       * // => [3, 1]
       *
       * _.sampleSize([1, 2, 3], 4);
       * // => [2, 3, 1]
       */
      function sampleSize(collection, n, guard) {
        if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }

      /**
       * Creates an array of shuffled values, using a version of the
       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       * @example
       *
       * _.shuffle([1, 2, 3, 4]);
       * // => [4, 1, 3, 2]
       */
      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }

      /**
       * Gets the size of `collection` by returning its length for array-like
       * values or the number of own enumerable string keyed properties for objects.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @returns {number} Returns the collection size.
       * @example
       *
       * _.size([1, 2, 3]);
       * // => 3
       *
       * _.size({ 'a': 1, 'b': 2 });
       * // => 2
       *
       * _.size('pebbles');
       * // => 7
       */
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
        return baseKeys(collection).length;
      }

      /**
       * Checks if `predicate` returns truthy for **any** element of `collection`.
       * Iteration is stopped once `predicate` returns truthy. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       * @example
       *
       * _.some([null, 0, 'yes', false], Boolean);
       * // => true
       *
       * var users = [
       *   { 'user': 'barney', 'active': true },
       *   { 'user': 'fred',   'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.some(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.some(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.some(users, 'active');
       * // => true
       */
      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Creates an array of elements, sorted in ascending order by the results of
       * running each element in a collection thru each iteratee. This method
       * performs a stable sort, that is, it preserves the original sort order of
       * equal elements. The iteratees are invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 34 }
       * ];
       *
       * _.sortBy(users, [function(o) { return o.user; }]);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       *
       * _.sortBy(users, ['user', 'age']);
       * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
       */
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });

      /*------------------------------------------------------------------------*/

      /**
       * Gets the timestamp of the number of milliseconds that have elapsed since
       * the Unix epoch (1 January 1970 00:00:00 UTC).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Date
       * @returns {number} Returns the timestamp.
       * @example
       *
       * _.defer(function(stamp) {
       *   console.log(_.now() - stamp);
       * }, _.now());
       * // => Logs the number of milliseconds it took for the deferred invocation.
       */
      var now = ctxNow || function() {
        return root.Date.now();
      };

      /*------------------------------------------------------------------------*/

      /**
       * The opposite of `_.before`; this method creates a function that invokes
       * `func` once it's called `n` or more times.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {number} n The number of calls before `func` is invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var saves = ['profile', 'settings'];
       *
       * var done = _.after(saves.length, function() {
       *   console.log('done saving!');
       * });
       *
       * _.forEach(saves, function(type) {
       *   asyncSave({ 'type': type, 'complete': done });
       * });
       * // => Logs 'done saving!' after the two async saves have completed.
       */
      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      /**
       * Creates a function that invokes `func`, with up to `n` arguments,
       * ignoring any additional arguments.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @param {number} [n=func.length] The arity cap.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.ary(parseInt, 1));
       * // => [6, 8, 10]
       */
      function ary(func, n, guard) {
        n = guard ? undefined : n;
        n = (func && n == null) ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
      }

      /**
       * Creates a function that invokes `func`, with the `this` binding and arguments
       * of the created function, while it's called less than `n` times. Subsequent
       * calls to the created function return the result of the last `func` invocation.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {number} n The number of calls at which `func` is no longer invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * jQuery(element).on('click', _.before(5, addContactToList));
       * // => Allows adding up to 4 contacts to the list.
       */
      function before(n, func) {
        var result;
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined;
          }
          return result;
        };
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of `thisArg`
       * and `partials` prepended to the arguments it receives.
       *
       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for partially applied arguments.
       *
       * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
       * property of bound functions.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to bind.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * function greet(greeting, punctuation) {
       *   return greeting + ' ' + this.user + punctuation;
       * }
       *
       * var object = { 'user': 'fred' };
       *
       * var bound = _.bind(greet, object, 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bind(greet, object, _, '!');
       * bound('hi');
       * // => 'hi fred!'
       */
      var bind = baseRest(function(func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });

      /**
       * Creates a function that invokes the method at `object[key]` with `partials`
       * prepended to the arguments it receives.
       *
       * This method differs from `_.bind` by allowing bound functions to reference
       * methods that may be redefined or don't yet exist. See
       * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
       * for more details.
       *
       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Function
       * @param {Object} object The object to invoke the method on.
       * @param {string} key The key of the method.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * var object = {
       *   'user': 'fred',
       *   'greet': function(greeting, punctuation) {
       *     return greeting + ' ' + this.user + punctuation;
       *   }
       * };
       *
       * var bound = _.bindKey(object, 'greet', 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * object.greet = function(greeting, punctuation) {
       *   return greeting + 'ya ' + this.user + punctuation;
       * };
       *
       * bound('!');
       * // => 'hiya fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bindKey(object, 'greet', _, '!');
       * bound('hi');
       * // => 'hiya fred!'
       */
      var bindKey = baseRest(function(object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object, partials, holders);
      });

      /**
       * Creates a function that accepts arguments of `func` and either invokes
       * `func` returning its result, if at least `arity` number of arguments have
       * been provided, or returns a function that accepts the remaining `func`
       * arguments, and so on. The arity of `func` may be specified if `func.length`
       * is not sufficient.
       *
       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curry(abc);
       *
       * curried(1)(2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(1)(_, 3)(2);
       * // => [1, 2, 3]
       */
      function curry(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      /**
       * This method is like `_.curry` except that arguments are applied to `func`
       * in the manner of `_.partialRight` instead of `_.partial`.
       *
       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curryRight(abc);
       *
       * curried(3)(2)(1);
       * // => [1, 2, 3]
       *
       * curried(2, 3)(1);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(3)(1, _)(2);
       * // => [1, 2, 3]
       */
      function curryRight(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      /**
       * Creates a debounced function that delays invoking `func` until after `wait`
       * milliseconds have elapsed since the last time the debounced function was
       * invoked. The debounced function comes with a `cancel` method to cancel
       * delayed `func` invocations and a `flush` method to immediately invoke them.
       * Provide `options` to indicate whether `func` should be invoked on the
       * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
       * with the last arguments provided to the debounced function. Subsequent
       * calls to the debounced function return the result of the last `func`
       * invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the debounced function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.debounce` and `_.throttle`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to debounce.
       * @param {number} [wait=0] The number of milliseconds to delay.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=false]
       *  Specify invoking on the leading edge of the timeout.
       * @param {number} [options.maxWait]
       *  The maximum time `func` is allowed to be delayed before it's invoked.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new debounced function.
       * @example
       *
       * // Avoid costly calculations while the window size is in flux.
       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
       *
       * // Invoke `sendMail` when clicked, debouncing subsequent calls.
       * jQuery(element).on('click', _.debounce(sendMail, 300, {
       *   'leading': true,
       *   'trailing': false
       * }));
       *
       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
       * var source = new EventSource('/stream');
       * jQuery(source).on('message', debounced);
       *
       * // Cancel the trailing debounced invocation.
       * jQuery(window).on('popstate', debounced.cancel);
       */
      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;

          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          // Reset any `maxWait` timer.
          lastInvokeTime = time;
          // Start the timer for the trailing edge.
          timerId = setTimeout(timerExpired, wait);
          // Invoke the leading edge.
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;

          return maxing
            ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
            : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;

          // Either this is the first call, activity has stopped and we're at the
          // trailing edge, the system time has gone backwards and we're treating
          // it as the trailing edge, or we've hit the `maxWait` limit.
          return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
            (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
        }

        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          // Restart the timer.
          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined;

          // Only invoke if we have `lastArgs` which means `func` has been
          // debounced at least once.
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined;
          return result;
        }

        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }

        function flush() {
          return timerId === undefined ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);

          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              // Handle invocations in a tight loop.
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      /**
       * Defers invoking the `func` until the current call stack has cleared. Any
       * additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to defer.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.defer(function(text) {
       *   console.log(text);
       * }, 'deferred');
       * // => Logs 'deferred' after one millisecond.
       */
      var defer = baseRest(function(func, args) {
        return baseDelay(func, 1, args);
      });

      /**
       * Invokes `func` after `wait` milliseconds. Any additional arguments are
       * provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.delay(function(text) {
       *   console.log(text);
       * }, 1000, 'later');
       * // => Logs 'later' after one second.
       */
      var delay = baseRest(function(func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      /**
       * Creates a function that invokes `func` with arguments reversed.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to flip arguments for.
       * @returns {Function} Returns the new flipped function.
       * @example
       *
       * var flipped = _.flip(function() {
       *   return _.toArray(arguments);
       * });
       *
       * flipped('a', 'b', 'c', 'd');
       * // => ['d', 'c', 'b', 'a']
       */
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }

      /**
       * Creates a function that memoizes the result of `func`. If `resolver` is
       * provided, it determines the cache key for storing the result based on the
       * arguments provided to the memoized function. By default, the first argument
       * provided to the memoized function is used as the map cache key. The `func`
       * is invoked with the `this` binding of the memoized function.
       *
       * **Note:** The cache is exposed as the `cache` property on the memoized
       * function. Its creation may be customized by replacing the `_.memoize.Cache`
       * constructor with one whose instances implement the
       * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
       * method interface of `clear`, `delete`, `get`, `has`, and `set`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to have its output memoized.
       * @param {Function} [resolver] The function to resolve the cache key.
       * @returns {Function} Returns the new memoized function.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       * var other = { 'c': 3, 'd': 4 };
       *
       * var values = _.memoize(_.values);
       * values(object);
       * // => [1, 2]
       *
       * values(other);
       * // => [3, 4]
       *
       * object.a = 2;
       * values(object);
       * // => [1, 2]
       *
       * // Modify the result cache.
       * values.cache.set(object, ['a', 'b']);
       * values(object);
       * // => ['a', 'b']
       *
       * // Replace `_.memoize.Cache`.
       * _.memoize.Cache = WeakMap;
       */
      function memoize(func, resolver) {
        if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache);
        return memoized;
      }

      // Expose `MapCache`.
      memoize.Cache = MapCache;

      /**
       * Creates a function that negates the result of the predicate `func`. The
       * `func` predicate is invoked with the `this` binding and arguments of the
       * created function.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} predicate The predicate to negate.
       * @returns {Function} Returns the new negated function.
       * @example
       *
       * function isEven(n) {
       *   return n % 2 == 0;
       * }
       *
       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
       * // => [1, 3, 5]
       */
      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0: return !predicate.call(this);
            case 1: return !predicate.call(this, args[0]);
            case 2: return !predicate.call(this, args[0], args[1]);
            case 3: return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }

      /**
       * Creates a function that is restricted to invoking `func` once. Repeat calls
       * to the function return the value of the first invocation. The `func` is
       * invoked with the `this` binding and arguments of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var initialize = _.once(createApplication);
       * initialize();
       * initialize();
       * // => `createApplication` is invoked once
       */
      function once(func) {
        return before(2, func);
      }

      /**
       * Creates a function that invokes `func` with its arguments transformed.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Function
       * @param {Function} func The function to wrap.
       * @param {...(Function|Function[])} [transforms=[_.identity]]
       *  The argument transforms.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function doubled(n) {
       *   return n * 2;
       * }
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var func = _.overArgs(function(x, y) {
       *   return [x, y];
       * }, [square, doubled]);
       *
       * func(9, 3);
       * // => [81, 6]
       *
       * func(10, 5);
       * // => [100, 10]
       */
      var overArgs = castRest(function(func, transforms) {
        transforms = (transforms.length == 1 && isArray(transforms[0]))
          ? arrayMap(transforms[0], baseUnary(getIteratee()))
          : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

        var funcsLength = transforms.length;
        return baseRest(function(args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }
          return apply(func, this, args);
        });
      });

      /**
       * Creates a function that invokes `func` with `partials` prepended to the
       * arguments it receives. This method is like `_.bind` except it does **not**
       * alter the `this` binding.
       *
       * The `_.partial.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 0.2.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var sayHelloTo = _.partial(greet, 'hello');
       * sayHelloTo('fred');
       * // => 'hello fred'
       *
       * // Partially applied with placeholders.
       * var greetFred = _.partial(greet, _, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       */
      var partial = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
      });

      /**
       * This method is like `_.partial` except that partially applied arguments
       * are appended to the arguments it receives.
       *
       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var greetFred = _.partialRight(greet, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       *
       * // Partially applied with placeholders.
       * var sayHelloTo = _.partialRight(greet, 'hello', _);
       * sayHelloTo('fred');
       * // => 'hello fred'
       */
      var partialRight = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
      });

      /**
       * Creates a function that invokes `func` with arguments arranged according
       * to the specified `indexes` where the argument value at the first index is
       * provided as the first argument, the argument value at the second index is
       * provided as the second argument, and so on.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to rearrange arguments for.
       * @param {...(number|number[])} indexes The arranged argument indexes.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var rearged = _.rearg(function(a, b, c) {
       *   return [a, b, c];
       * }, [2, 0, 1]);
       *
       * rearged('b', 'c', 'a')
       * // => ['a', 'b', 'c']
       */
      var rearg = flatRest(function(func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
      });

      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * created function and arguments from `start` and beyond provided as
       * an array.
       *
       * **Note:** This method is based on the
       * [rest parameter](https://mdn.io/rest_parameters).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.rest(function(what, names) {
       *   return what + ' ' + _.initial(names).join(', ') +
       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
       * });
       *
       * say('hello', 'fred', 'barney', 'pebbles');
       * // => 'hello fred, barney, & pebbles'
       */
      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start === undefined ? start : toInteger(start);
        return baseRest(func, start);
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * create function and an array of arguments much like
       * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
       *
       * **Note:** This method is based on the
       * [spread operator](https://mdn.io/spread_operator).
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Function
       * @param {Function} func The function to spread arguments over.
       * @param {number} [start=0] The start position of the spread.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.spread(function(who, what) {
       *   return who + ' says ' + what;
       * });
       *
       * say(['fred', 'hello']);
       * // => 'fred says hello'
       *
       * var numbers = Promise.all([
       *   Promise.resolve(40),
       *   Promise.resolve(36)
       * ]);
       *
       * numbers.then(_.spread(function(x, y) {
       *   return x + y;
       * }));
       * // => a Promise of 76
       */
      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function(args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }
          return apply(func, this, otherArgs);
        });
      }

      /**
       * Creates a throttled function that only invokes `func` at most once per
       * every `wait` milliseconds. The throttled function comes with a `cancel`
       * method to cancel delayed `func` invocations and a `flush` method to
       * immediately invoke them. Provide `options` to indicate whether `func`
       * should be invoked on the leading and/or trailing edge of the `wait`
       * timeout. The `func` is invoked with the last arguments provided to the
       * throttled function. Subsequent calls to the throttled function return the
       * result of the last `func` invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the throttled function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.throttle` and `_.debounce`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to throttle.
       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=true]
       *  Specify invoking on the leading edge of the timeout.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new throttled function.
       * @example
       *
       * // Avoid excessively updating the position while scrolling.
       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
       *
       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
       * jQuery(element).on('click', throttled);
       *
       * // Cancel the trailing throttled invocation.
       * jQuery(window).on('popstate', throttled.cancel);
       */
      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      /**
       * Creates a function that accepts up to one argument, ignoring any
       * additional arguments.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.unary(parseInt));
       * // => [6, 8, 10]
       */
      function unary(func) {
        return ary(func, 1);
      }

      /**
       * Creates a function that provides `value` to `wrapper` as its first
       * argument. Any additional arguments provided to the function are appended
       * to those provided to the `wrapper`. The wrapper is invoked with the `this`
       * binding of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {*} value The value to wrap.
       * @param {Function} [wrapper=identity] The wrapper function.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var p = _.wrap(_.escape, function(func, text) {
       *   return '<p>' + func(text) + '</p>';
       * });
       *
       * p('fred, barney, & pebbles');
       * // => '<p>fred, barney, &amp; pebbles</p>'
       */
      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Casts `value` as an array if it's not one.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Lang
       * @param {*} value The value to inspect.
       * @returns {Array} Returns the cast array.
       * @example
       *
       * _.castArray(1);
       * // => [1]
       *
       * _.castArray({ 'a': 1 });
       * // => [{ 'a': 1 }]
       *
       * _.castArray('abc');
       * // => ['abc']
       *
       * _.castArray(null);
       * // => [null]
       *
       * _.castArray(undefined);
       * // => [undefined]
       *
       * _.castArray();
       * // => []
       *
       * var array = [1, 2, 3];
       * console.log(_.castArray(array) === array);
       * // => true
       */
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      /**
       * Creates a shallow clone of `value`.
       *
       * **Note:** This method is loosely based on the
       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
       * and supports cloning arrays, array buffers, booleans, date objects, maps,
       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
       * arrays. The own enumerable properties of `arguments` objects are cloned
       * as plain objects. An empty object is returned for uncloneable values such
       * as error objects, functions, DOM nodes, and WeakMaps.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to clone.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeep
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var shallow = _.clone(objects);
       * console.log(shallow[0] === objects[0]);
       * // => true
       */
      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }

      /**
       * This method is like `_.clone` except that it accepts `customizer` which
       * is invoked to produce the cloned value. If `customizer` returns `undefined`,
       * cloning is handled by the method instead. The `customizer` is invoked with
       * up to four arguments; (value [, index|key, object, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeepWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(false);
       *   }
       * }
       *
       * var el = _.cloneWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 0
       */
      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }

      /**
       * This method is like `_.clone` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @returns {*} Returns the deep cloned value.
       * @see _.clone
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var deep = _.cloneDeep(objects);
       * console.log(deep[0] === objects[0]);
       * // => false
       */
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }

      /**
       * This method is like `_.cloneWith` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the deep cloned value.
       * @see _.cloneWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(true);
       *   }
       * }
       *
       * var el = _.cloneDeepWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 20
       */
      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }

      /**
       * Checks if `object` conforms to `source` by invoking the predicate
       * properties of `source` with the corresponding property values of `object`.
       *
       * **Note:** This method is equivalent to `_.conforms` when `source` is
       * partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
       * // => true
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
       * // => false
       */
      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }

      /**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */
      function eq(value, other) {
        return value === other || (value !== value && other !== other);
      }

      /**
       * Checks if `value` is greater than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       * @see _.lt
       * @example
       *
       * _.gt(3, 1);
       * // => true
       *
       * _.gt(3, 3);
       * // => false
       *
       * _.gt(1, 3);
       * // => false
       */
      var gt = createRelationalOperation(baseGt);

      /**
       * Checks if `value` is greater than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than or equal to
       *  `other`, else `false`.
       * @see _.lte
       * @example
       *
       * _.gte(3, 1);
       * // => true
       *
       * _.gte(3, 3);
       * // => true
       *
       * _.gte(1, 3);
       * // => false
       */
      var gte = createRelationalOperation(function(value, other) {
        return value >= other;
      });

      /**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */
      var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
          !propertyIsEnumerable.call(value, 'callee');
      };

      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */
      var isArray = Array.isArray;

      /**
       * Checks if `value` is classified as an `ArrayBuffer` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       * @example
       *
       * _.isArrayBuffer(new ArrayBuffer(2));
       * // => true
       *
       * _.isArrayBuffer(new Array(2));
       * // => false
       */
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

      /**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      /**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      /**
       * Checks if `value` is classified as a boolean primitive or object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
       * @example
       *
       * _.isBoolean(false);
       * // => true
       *
       * _.isBoolean(null);
       * // => false
       */
      function isBoolean(value) {
        return value === true || value === false ||
          (isObjectLike(value) && baseGetTag(value) == boolTag);
      }

      /**
       * Checks if `value` is a buffer.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
       * @example
       *
       * _.isBuffer(new Buffer(2));
       * // => true
       *
       * _.isBuffer(new Uint8Array(2));
       * // => false
       */
      var isBuffer = nativeIsBuffer || stubFalse;

      /**
       * Checks if `value` is classified as a `Date` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       * @example
       *
       * _.isDate(new Date);
       * // => true
       *
       * _.isDate('Mon April 23 2012');
       * // => false
       */
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

      /**
       * Checks if `value` is likely a DOM element.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
       * @example
       *
       * _.isElement(document.body);
       * // => true
       *
       * _.isElement('<body>');
       * // => false
       */
      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }

      /**
       * Checks if `value` is an empty object, collection, map, or set.
       *
       * Objects are considered empty if they have no own enumerable string keyed
       * properties.
       *
       * Array-like values such as `arguments` objects, arrays, buffers, strings, or
       * jQuery-like collections are considered empty if they have a `length` of `0`.
       * Similarly, maps and sets are considered empty if they have a `size` of `0`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
       * @example
       *
       * _.isEmpty(null);
       * // => true
       *
       * _.isEmpty(true);
       * // => true
       *
       * _.isEmpty(1);
       * // => true
       *
       * _.isEmpty([1, 2, 3]);
       * // => false
       *
       * _.isEmpty({ 'a': 1 });
       * // => false
       */
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) &&
            (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
              isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }
        return true;
      }

      /**
       * Performs a deep comparison between two values to determine if they are
       * equivalent.
       *
       * **Note:** This method supports comparing arrays, array buffers, booleans,
       * date objects, error objects, maps, numbers, `Object` objects, regexes,
       * sets, strings, symbols, and typed arrays. `Object` objects are compared
       * by their own, not inherited, enumerable properties. Functions and DOM
       * nodes are compared by strict equality, i.e. `===`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.isEqual(object, other);
       * // => true
       *
       * object === other;
       * // => false
       */
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      /**
       * This method is like `_.isEqual` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with up to
       * six arguments: (objValue, othValue [, index|key, object, other, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, othValue) {
       *   if (isGreeting(objValue) && isGreeting(othValue)) {
       *     return true;
       *   }
       * }
       *
       * var array = ['hello', 'goodbye'];
       * var other = ['hi', 'goodbye'];
       *
       * _.isEqualWith(array, other, customizer);
       * // => true
       */
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        var result = customizer ? customizer(value, other) : undefined;
        return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
      }

      /**
       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
       * `SyntaxError`, `TypeError`, or `URIError` object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
       * @example
       *
       * _.isError(new Error);
       * // => true
       *
       * _.isError(Error);
       * // => false
       */
      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag ||
          (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
      }

      /**
       * Checks if `value` is a finite primitive number.
       *
       * **Note:** This method is based on
       * [`Number.isFinite`](https://mdn.io/Number/isFinite).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
       * @example
       *
       * _.isFinite(3);
       * // => true
       *
       * _.isFinite(Number.MIN_VALUE);
       * // => true
       *
       * _.isFinite(Infinity);
       * // => false
       *
       * _.isFinite('3');
       * // => false
       */
      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      /**
       * Checks if `value` is an integer.
       *
       * **Note:** This method is based on
       * [`Number.isInteger`](https://mdn.io/Number/isInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
       * @example
       *
       * _.isInteger(3);
       * // => true
       *
       * _.isInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isInteger(Infinity);
       * // => false
       *
       * _.isInteger('3');
       * // => false
       */
      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */
      function isLength(value) {
        return typeof value == 'number' &&
          value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }

      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }

      /**
       * Checks if `value` is classified as a `Map` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       * @example
       *
       * _.isMap(new Map);
       * // => true
       *
       * _.isMap(new WeakMap);
       * // => false
       */
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

      /**
       * Performs a partial deep comparison between `object` and `source` to
       * determine if `object` contains equivalent property values.
       *
       * **Note:** This method is equivalent to `_.matches` when `source` is
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.isMatch(object, { 'b': 2 });
       * // => true
       *
       * _.isMatch(object, { 'b': 1 });
       * // => false
       */
      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      /**
       * This method is like `_.isMatch` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with five
       * arguments: (objValue, srcValue, index|key, object, source).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, srcValue) {
       *   if (isGreeting(objValue) && isGreeting(srcValue)) {
       *     return true;
       *   }
       * }
       *
       * var object = { 'greeting': 'hello' };
       * var source = { 'greeting': 'hi' };
       *
       * _.isMatchWith(object, source, customizer);
       * // => true
       */
      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      /**
       * Checks if `value` is `NaN`.
       *
       * **Note:** This method is based on
       * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
       * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
       * `undefined` and other non-number values.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       * @example
       *
       * _.isNaN(NaN);
       * // => true
       *
       * _.isNaN(new Number(NaN));
       * // => true
       *
       * isNaN(undefined);
       * // => true
       *
       * _.isNaN(undefined);
       * // => false
       */
      function isNaN(value) {
        // An `NaN` primitive is the only value that is not equal to itself.
        // Perform the `toStringTag` check first to avoid errors with some
        // ActiveX objects in IE.
        return isNumber(value) && value != +value;
      }

      /**
       * Checks if `value` is a pristine native function.
       *
       * **Note:** This method can't reliably detect native functions in the presence
       * of the core-js package because core-js circumvents this kind of detection.
       * Despite multiple requests, the core-js maintainer has made it clear: any
       * attempt to fix the detection will be obstructed. As a result, we're left
       * with little choice but to throw an error. Unfortunately, this also affects
       * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
       * which rely on core-js.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       * @example
       *
       * _.isNative(Array.prototype.push);
       * // => true
       *
       * _.isNative(_);
       * // => false
       */
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }
        return baseIsNative(value);
      }

      /**
       * Checks if `value` is `null`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
       * @example
       *
       * _.isNull(null);
       * // => true
       *
       * _.isNull(void 0);
       * // => false
       */
      function isNull(value) {
        return value === null;
      }

      /**
       * Checks if `value` is `null` or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
       * @example
       *
       * _.isNil(null);
       * // => true
       *
       * _.isNil(void 0);
       * // => true
       *
       * _.isNil(NaN);
       * // => false
       */
      function isNil(value) {
        return value == null;
      }

      /**
       * Checks if `value` is classified as a `Number` primitive or object.
       *
       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
       * classified as numbers, use the `_.isFinite` method.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a number, else `false`.
       * @example
       *
       * _.isNumber(3);
       * // => true
       *
       * _.isNumber(Number.MIN_VALUE);
       * // => true
       *
       * _.isNumber(Infinity);
       * // => true
       *
       * _.isNumber('3');
       * // => false
       */
      function isNumber(value) {
        return typeof value == 'number' ||
          (isObjectLike(value) && baseGetTag(value) == numberTag);
      }

      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor &&
          funcToString.call(Ctor) == objectCtorString;
      }

      /**
       * Checks if `value` is classified as a `RegExp` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       * @example
       *
       * _.isRegExp(/abc/);
       * // => true
       *
       * _.isRegExp('/abc/');
       * // => false
       */
      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

      /**
       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
       * double precision number which isn't the result of a rounded unsafe integer.
       *
       * **Note:** This method is based on
       * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
       * @example
       *
       * _.isSafeInteger(3);
       * // => true
       *
       * _.isSafeInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isSafeInteger(Infinity);
       * // => false
       *
       * _.isSafeInteger('3');
       * // => false
       */
      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }

      /**
       * Checks if `value` is classified as a `Set` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       * @example
       *
       * _.isSet(new Set);
       * // => true
       *
       * _.isSet(new WeakSet);
       * // => false
       */
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

      /**
       * Checks if `value` is classified as a `String` primitive or object.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
       * @example
       *
       * _.isString('abc');
       * // => true
       *
       * _.isString(1);
       * // => false
       */
      function isString(value) {
        return typeof value == 'string' ||
          (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
      }

      /**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */
      function isSymbol(value) {
        return typeof value == 'symbol' ||
          (isObjectLike(value) && baseGetTag(value) == symbolTag);
      }

      /**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      /**
       * Checks if `value` is `undefined`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
       * @example
       *
       * _.isUndefined(void 0);
       * // => true
       *
       * _.isUndefined(null);
       * // => false
       */
      function isUndefined(value) {
        return value === undefined;
      }

      /**
       * Checks if `value` is classified as a `WeakMap` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
       * @example
       *
       * _.isWeakMap(new WeakMap);
       * // => true
       *
       * _.isWeakMap(new Map);
       * // => false
       */
      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      /**
       * Checks if `value` is classified as a `WeakSet` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
       * @example
       *
       * _.isWeakSet(new WeakSet);
       * // => true
       *
       * _.isWeakSet(new Set);
       * // => false
       */
      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }

      /**
       * Checks if `value` is less than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       * @see _.gt
       * @example
       *
       * _.lt(1, 3);
       * // => true
       *
       * _.lt(3, 3);
       * // => false
       *
       * _.lt(3, 1);
       * // => false
       */
      var lt = createRelationalOperation(baseLt);

      /**
       * Checks if `value` is less than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than or equal to
       *  `other`, else `false`.
       * @see _.gte
       * @example
       *
       * _.lte(1, 3);
       * // => true
       *
       * _.lte(3, 3);
       * // => true
       *
       * _.lte(3, 1);
       * // => false
       */
      var lte = createRelationalOperation(function(value, other) {
        return value <= other;
      });

      /**
       * Converts `value` to an array.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Array} Returns the converted array.
       * @example
       *
       * _.toArray({ 'a': 1, 'b': 2 });
       * // => [1, 2]
       *
       * _.toArray('abc');
       * // => ['a', 'b', 'c']
       *
       * _.toArray(1);
       * // => []
       *
       * _.toArray(null);
       * // => []
       */
      function toArray(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

        return func(value);
      }

      /**
       * Converts `value` to a finite number.
       *
       * @static
       * @memberOf _
       * @since 4.12.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted number.
       * @example
       *
       * _.toFinite(3.2);
       * // => 3.2
       *
       * _.toFinite(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toFinite(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toFinite('3.2');
       * // => 3.2
       */
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = (value < 0 ? -1 : 1);
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }

      /**
       * Converts `value` to an integer.
       *
       * **Note:** This method is loosely based on
       * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toInteger(3.2);
       * // => 3
       *
       * _.toInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toInteger(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toInteger('3.2');
       * // => 3
       */
      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;

        return result === result ? (remainder ? result - remainder : result) : 0;
      }

      /**
       * Converts `value` to an integer suitable for use as the length of an
       * array-like object.
       *
       * **Note:** This method is based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toLength(3.2);
       * // => 3
       *
       * _.toLength(Number.MIN_VALUE);
       * // => 0
       *
       * _.toLength(Infinity);
       * // => 4294967295
       *
       * _.toLength('3.2');
       * // => 3
       */
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      /**
       * Converts `value` to a number.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       * @example
       *
       * _.toNumber(3.2);
       * // => 3.2
       *
       * _.toNumber(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toNumber(Infinity);
       * // => Infinity
       *
       * _.toNumber('3.2');
       * // => 3.2
       */
      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? (other + '') : other;
        }
        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return (isBinary || reIsOctal.test(value))
          ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
          : (reIsBadHex.test(value) ? NAN : +value);
      }

      /**
       * Converts `value` to a plain object flattening inherited enumerable string
       * keyed properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      /**
       * Converts `value` to a safe integer. A safe integer can be compared and
       * represented correctly.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toSafeInteger(3.2);
       * // => 3
       *
       * _.toSafeInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toSafeInteger(Infinity);
       * // => 9007199254740991
       *
       * _.toSafeInteger('3.2');
       * // => 3
       */
      function toSafeInteger(value) {
        return value
          ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
          : (value === 0 ? value : 0);
      }

      /**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */
      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Assigns own enumerable string keyed properties of source objects to the
       * destination object. Source objects are applied from left to right.
       * Subsequent sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object` and is loosely based on
       * [`Object.assign`](https://mdn.io/Object/assign).
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assignIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assign({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'c': 3 }
       */
      var assign = createAssigner(function(object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });

      /**
       * This method is like `_.assign` except that it iterates over own and
       * inherited source properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extend
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assign
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assignIn({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
       */
      var assignIn = createAssigner(function(object, source) {
        copyObject(source, keysIn(source), object);
      });

      /**
       * This method is like `_.assignIn` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extendWith
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignInWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });

      /**
       * This method is like `_.assign` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignInWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });

      /**
       * Creates an array of values corresponding to `paths` of `object`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Array} Returns the picked values.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _.at(object, ['a[0].b.c', 'a[1]']);
       * // => [3, 4]
       */
      var at = flatRest(baseAt);

      /**
       * Creates an object that inherits from the `prototype` object. If a
       * `properties` object is given, its own enumerable string keyed properties
       * are assigned to the created object.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Object
       * @param {Object} prototype The object to inherit from.
       * @param {Object} [properties] The properties to assign to the object.
       * @returns {Object} Returns the new object.
       * @example
       *
       * function Shape() {
       *   this.x = 0;
       *   this.y = 0;
       * }
       *
       * function Circle() {
       *   Shape.call(this);
       * }
       *
       * Circle.prototype = _.create(Shape.prototype, {
       *   'constructor': Circle
       * });
       *
       * var circle = new Circle;
       * circle instanceof Circle;
       * // => true
       *
       * circle instanceof Shape;
       * // => true
       */
      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }

      /**
       * Assigns own and inherited enumerable string keyed properties of source
       * objects to the destination object for all destination properties that
       * resolve to `undefined`. Source objects are applied from left to right.
       * Once a property is set, additional values of the same property are ignored.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaultsDeep
       * @example
       *
       * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var defaults = baseRest(function(object, sources) {
        object = Object(object);

        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }

        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;

          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];

            if (value === undefined ||
                (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
              object[key] = source[key];
            }
          }
        }

        return object;
      });

      /**
       * This method is like `_.defaults` except that it recursively assigns
       * default properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaults
       * @example
       *
       * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
       * // => { 'a': { 'b': 2, 'c': 3 } }
       */
      var defaultsDeep = baseRest(function(args) {
        args.push(undefined, customDefaultsMerge);
        return apply(mergeWith, undefined, args);
      });

      /**
       * This method is like `_.find` except that it returns the key of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findKey(users, function(o) { return o.age < 40; });
       * // => 'barney' (iteration order is not guaranteed)
       *
       * // The `_.matches` iteratee shorthand.
       * _.findKey(users, { 'age': 1, 'active': true });
       * // => 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findKey(users, 'active');
       * // => 'barney'
       */
      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }

      /**
       * This method is like `_.findKey` except that it iterates over elements of
       * a collection in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findLastKey(users, function(o) { return o.age < 40; });
       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastKey(users, { 'age': 36, 'active': true });
       * // => 'barney'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastKey(users, 'active');
       * // => 'pebbles'
       */
      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }

      /**
       * Iterates over own and inherited enumerable string keyed properties of an
       * object and invokes `iteratee` for each property. The iteratee is invoked
       * with three arguments: (value, key, object). Iteratee functions may exit
       * iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forInRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forIn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
       */
      function forIn(object, iteratee) {
        return object == null
          ? object
          : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }

      /**
       * This method is like `_.forIn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forInRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
       */
      function forInRight(object, iteratee) {
        return object == null
          ? object
          : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }

      /**
       * Iterates over own enumerable string keyed properties of an object and
       * invokes `iteratee` for each property. The iteratee is invoked with three
       * arguments: (value, key, object). Iteratee functions may exit iteration
       * early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwnRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.forOwn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwnRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
       */
      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }

      /**
       * Creates an array of function property names from own enumerable properties
       * of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functionsIn
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functions(new Foo);
       * // => ['a', 'b']
       */
      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      /**
       * Creates an array of function property names from own and inherited
       * enumerable properties of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functions
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functionsIn(new Foo);
       * // => ['a', 'b', 'c']
       */
      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      /**
       * Gets the value at `path` of `object`. If the resolved value is
       * `undefined`, the `defaultValue` is returned in its place.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */
      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }

      /**
       * Checks if `path` is a direct property of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = { 'a': { 'b': 2 } };
       * var other = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.has(object, 'a');
       * // => true
       *
       * _.has(object, 'a.b');
       * // => true
       *
       * _.has(object, ['a', 'b']);
       * // => true
       *
       * _.has(other, 'a');
       * // => false
       */
      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      /**
       * Checks if `path` is a direct or inherited property of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.hasIn(object, 'a');
       * // => true
       *
       * _.hasIn(object, 'a.b');
       * // => true
       *
       * _.hasIn(object, ['a', 'b']);
       * // => true
       *
       * _.hasIn(object, 'b');
       * // => false
       */
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      /**
       * Creates an object composed of the inverted keys and values of `object`.
       * If `object` contains duplicate values, subsequent values overwrite
       * property assignments of previous values.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Object
       * @param {Object} object The object to invert.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invert(object);
       * // => { '1': 'c', '2': 'b' }
       */
      var invert = createInverter(function(result, value, key) {
        if (value != null &&
            typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        result[value] = key;
      }, constant(identity));

      /**
       * This method is like `_.invert` except that the inverted object is generated
       * from the results of running each element of `object` thru `iteratee`. The
       * corresponding inverted value of each inverted key is an array of keys
       * responsible for generating the inverted value. The iteratee is invoked
       * with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Object
       * @param {Object} object The object to invert.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invertBy(object);
       * // => { '1': ['a', 'c'], '2': ['b'] }
       *
       * _.invertBy(object, function(value) {
       *   return 'group' + value;
       * });
       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
       */
      var invertBy = createInverter(function(result, value, key) {
        if (value != null &&
            typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);

      /**
       * Invokes the method at `path` of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
       *
       * _.invoke(object, 'a[0].b.c.slice', 1, 3);
       * // => [2, 3]
       */
      var invoke = baseRest(baseInvoke);

      /**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      /**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      /**
       * The opposite of `_.mapValues`; this method creates an object with the
       * same values as `object` and keys generated by running each own enumerable
       * string keyed property of `object` thru `iteratee`. The iteratee is invoked
       * with three arguments: (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapValues
       * @example
       *
       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
       *   return key + value;
       * });
       * // => { 'a1': 1, 'b2': 2 }
       */
      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);

        baseForOwn(object, function(value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }

      /**
       * Creates an object with the same keys as `object` and values generated
       * by running each own enumerable string keyed property of `object` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapKeys
       * @example
       *
       * var users = {
       *   'fred':    { 'user': 'fred',    'age': 40 },
       *   'pebbles': { 'user': 'pebbles', 'age': 1 }
       * };
       *
       * _.mapValues(users, function(o) { return o.age; });
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       *
       * // The `_.property` iteratee shorthand.
       * _.mapValues(users, 'age');
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       */
      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);

        baseForOwn(object, function(value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }

      /**
       * This method is like `_.assign` except that it recursively merges own and
       * inherited enumerable string keyed properties of source objects into the
       * destination object. Source properties that resolve to `undefined` are
       * skipped if a destination value exists. Array and plain object properties
       * are merged recursively. Other objects and value types are overridden by
       * assignment. Source objects are applied from left to right. Subsequent
       * sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {
       *   'a': [{ 'b': 2 }, { 'd': 4 }]
       * };
       *
       * var other = {
       *   'a': [{ 'c': 3 }, { 'e': 5 }]
       * };
       *
       * _.merge(object, other);
       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
       */
      var merge = createAssigner(function(object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });

      /**
       * This method is like `_.merge` except that it accepts `customizer` which
       * is invoked to produce the merged values of the destination and source
       * properties. If `customizer` returns `undefined`, merging is handled by the
       * method instead. The `customizer` is invoked with six arguments:
       * (objValue, srcValue, key, object, source, stack).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} customizer The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   if (_.isArray(objValue)) {
       *     return objValue.concat(srcValue);
       *   }
       * }
       *
       * var object = { 'a': [1], 'b': [2] };
       * var other = { 'a': [3], 'b': [4] };
       *
       * _.mergeWith(object, other, customizer);
       * // => { 'a': [1, 3], 'b': [2, 4] }
       */
      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });

      /**
       * The opposite of `_.pick`; this method creates an object composed of the
       * own and inherited enumerable property paths of `object` that are not omitted.
       *
       * **Note:** This method is considerably slower than `_.pick`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to omit.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omit(object, ['a', 'c']);
       * // => { 'b': '2' }
       */
      var omit = flatRest(function(object, paths) {
        var result = {};
        if (object == null) {
          return result;
        }
        var isDeep = false;
        paths = arrayMap(paths, function(path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);
        if (isDeep) {
          result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }
        var length = paths.length;
        while (length--) {
          baseUnset(result, paths[length]);
        }
        return result;
      });

      /**
       * The opposite of `_.pickBy`; this method creates an object composed of
       * the own and inherited enumerable string keyed properties of `object` that
       * `predicate` doesn't return truthy for. The predicate is invoked with two
       * arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omitBy(object, _.isNumber);
       * // => { 'b': '2' }
       */
      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }

      /**
       * Creates an object composed of the picked `object` properties.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pick(object, ['a', 'c']);
       * // => { 'a': 1, 'c': 3 }
       */
      var pick = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });

      /**
       * Creates an object composed of the `object` properties `predicate` returns
       * truthy for. The predicate is invoked with two arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pickBy(object, _.isNumber);
       * // => { 'a': 1, 'c': 3 }
       */
      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }
        var props = arrayMap(getAllKeysIn(object), function(prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function(value, path) {
          return predicate(value, path[0]);
        });
      }

      /**
       * This method is like `_.get` except that if the resolved value is a
       * function it's invoked with the `this` binding of its parent object and
       * its result is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to resolve.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
       *
       * _.result(object, 'a[0].b.c1');
       * // => 3
       *
       * _.result(object, 'a[0].b.c2');
       * // => 4
       *
       * _.result(object, 'a[0].b.c3', 'default');
       * // => 'default'
       *
       * _.result(object, 'a[0].b.c3', _.constant('default'));
       * // => 'default'
       */
      function result(object, path, defaultValue) {
        path = castPath(path, object);

        var index = -1,
            length = path.length;

        // Ensure the loop is entered when path is empty.
        if (!length) {
          length = 1;
          object = undefined;
        }
        while (++index < length) {
          var value = object == null ? undefined : object[toKey(path[index])];
          if (value === undefined) {
            index = length;
            value = defaultValue;
          }
          object = isFunction(value) ? value.call(object) : value;
        }
        return object;
      }

      /**
       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
       * it's created. Arrays are created for missing index properties while objects
       * are created for all other missing properties. Use `_.setWith` to customize
       * `path` creation.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.set(object, 'a[0].b.c', 4);
       * console.log(object.a[0].b.c);
       * // => 4
       *
       * _.set(object, ['x', '0', 'y', 'z'], 5);
       * console.log(object.x[0].y.z);
       * // => 5
       */
      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      /**
       * This method is like `_.set` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.setWith(object, '[0][1]', 'a', Object);
       * // => { '0': { '1': 'a' } }
       */
      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      /**
       * Creates an array of own enumerable string keyed-value pairs for `object`
       * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
       * entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entries
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairs(new Foo);
       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
       */
      var toPairs = createToPairs(keys);

      /**
       * Creates an array of own and inherited enumerable string keyed-value pairs
       * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
       * or set, its entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entriesIn
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairsIn(new Foo);
       * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
       */
      var toPairsIn = createToPairs(keysIn);

      /**
       * An alternative to `_.reduce`; this method transforms `object` to a new
       * `accumulator` object which is the result of running each of its own
       * enumerable string keyed properties thru `iteratee`, with each invocation
       * potentially mutating the `accumulator` object. If `accumulator` is not
       * provided, a new object with the same `[[Prototype]]` will be used. The
       * iteratee is invoked with four arguments: (accumulator, value, key, object).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The custom accumulator value.
       * @returns {*} Returns the accumulated value.
       * @example
       *
       * _.transform([2, 3, 4], function(result, n) {
       *   result.push(n *= n);
       *   return n % 2 == 0;
       * }, []);
       * // => [4, 9]
       *
       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] }
       */
      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);

        iteratee = getIteratee(iteratee, 4);
        if (accumulator == null) {
          var Ctor = object && object.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor : [];
          }
          else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          }
          else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      /**
       * Removes the property at `path` of `object`.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 7 } }] };
       * _.unset(object, 'a[0].b.c');
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       *
       * _.unset(object, ['a', '0', 'b', 'c']);
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       */
      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      /**
       * This method is like `_.set` except that accepts `updater` to produce the
       * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
       * is invoked with one argument: (value).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.update(object, 'a[0].b.c', function(n) { return n * n; });
       * console.log(object.a[0].b.c);
       * // => 9
       *
       * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
       * console.log(object.x[0].y.z);
       * // => 0
       */
      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      /**
       * This method is like `_.update` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.updateWith(object, '[0][1]', _.constant('a'), Object);
       * // => { '0': { '1': 'a' } }
       */
      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      /**
       * Creates an array of the own enumerable string keyed property values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.values(new Foo);
       * // => [1, 2] (iteration order is not guaranteed)
       *
       * _.values('hi');
       * // => ['h', 'i']
       */
      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }

      /**
       * Creates an array of the own and inherited enumerable string keyed property
       * values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.valuesIn(new Foo);
       * // => [1, 2, 3] (iteration order is not guaranteed)
       */
      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      /*------------------------------------------------------------------------*/

      /**
       * Clamps `number` within the inclusive `lower` and `upper` bounds.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Number
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       * @example
       *
       * _.clamp(-10, -5, 5);
       * // => -5
       *
       * _.clamp(10, -5, 5);
       * // => 5
       */
      function clamp(number, lower, upper) {
        if (upper === undefined) {
          upper = lower;
          lower = undefined;
        }
        if (upper !== undefined) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number), lower, upper);
      }

      /**
       * Checks if `n` is between `start` and up to, but not including, `end`. If
       * `end` is not specified, it's set to `start` with `start` then set to `0`.
       * If `start` is greater than `end` the params are swapped to support
       * negative ranges.
       *
       * @static
       * @memberOf _
       * @since 3.3.0
       * @category Number
       * @param {number} number The number to check.
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       * @see _.range, _.rangeRight
       * @example
       *
       * _.inRange(3, 2, 4);
       * // => true
       *
       * _.inRange(4, 8);
       * // => true
       *
       * _.inRange(4, 2);
       * // => false
       *
       * _.inRange(2, 2);
       * // => false
       *
       * _.inRange(1.2, 2);
       * // => true
       *
       * _.inRange(5.2, 4);
       * // => false
       *
       * _.inRange(-3, -2, -6);
       * // => true
       */
      function inRange(number, start, end) {
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      /**
       * Produces a random number between the inclusive `lower` and `upper` bounds.
       * If only one argument is provided a number between `0` and the given number
       * is returned. If `floating` is `true`, or either `lower` or `upper` are
       * floats, a floating-point number is returned instead of an integer.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Number
       * @param {number} [lower=0] The lower bound.
       * @param {number} [upper=1] The upper bound.
       * @param {boolean} [floating] Specify returning a floating-point number.
       * @returns {number} Returns the random number.
       * @example
       *
       * _.random(0, 5);
       * // => an integer between 0 and 5
       *
       * _.random(5);
       * // => also an integer between 0 and 5
       *
       * _.random(5, true);
       * // => a floating-point number between 0 and 5
       *
       * _.random(1.2, 5.2);
       * // => a floating-point number between 1.2 and 5.2
       */
      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined;
        }
        if (floating === undefined) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined;
          }
          else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined;
          }
        }
        if (lower === undefined && upper === undefined) {
          lower = 0;
          upper = 1;
        }
        else {
          lower = toFinite(lower);
          if (upper === undefined) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
        }
        return baseRandom(lower, upper);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the camel cased string.
       * @example
       *
       * _.camelCase('Foo Bar');
       * // => 'fooBar'
       *
       * _.camelCase('--foo-bar--');
       * // => 'fooBar'
       *
       * _.camelCase('__FOO_BAR__');
       * // => 'fooBar'
       */
      var camelCase = createCompounder(function(result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      /**
       * Converts the first character of `string` to upper case and the remaining
       * to lower case.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to capitalize.
       * @returns {string} Returns the capitalized string.
       * @example
       *
       * _.capitalize('FRED');
       * // => 'Fred'
       */
      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      /**
       * Deburrs `string` by converting
       * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
       * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
       * letters to basic Latin letters and removing
       * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to deburr.
       * @returns {string} Returns the deburred string.
       * @example
       *
       * _.deburr('déjà vu');
       * // => 'deja vu'
       */
      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }

      /**
       * Checks if `string` ends with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=string.length] The position to search up to.
       * @returns {boolean} Returns `true` if `string` ends with `target`,
       *  else `false`.
       * @example
       *
       * _.endsWith('abc', 'c');
       * // => true
       *
       * _.endsWith('abc', 'b');
       * // => false
       *
       * _.endsWith('abc', 'b', 2);
       * // => true
       */
      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);

        var length = string.length;
        position = position === undefined
          ? length
          : baseClamp(toInteger(position), 0, length);

        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }

      /**
       * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
       * corresponding HTML entities.
       *
       * **Note:** No other characters are escaped. To escape additional
       * characters use a third-party library like [_he_](https://mths.be/he).
       *
       * Though the ">" character is escaped for symmetry, characters like
       * ">" and "/" don't need escaping in HTML and have no special meaning
       * unless they're part of a tag or unquoted attribute value. See
       * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
       * (under "semi-related fun fact") for more details.
       *
       * When working with HTML you should always
       * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
       * XSS vectors.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escape('fred, barney, & pebbles');
       * // => 'fred, barney, &amp; pebbles'
       */
      function escape(string) {
        string = toString(string);
        return (string && reHasUnescapedHtml.test(string))
          ? string.replace(reUnescapedHtml, escapeHtmlChar)
          : string;
      }

      /**
       * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
       * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escapeRegExp('[lodash](https://lodash.com/)');
       * // => '\[lodash\]\(https://lodash\.com/\)'
       */
      function escapeRegExp(string) {
        string = toString(string);
        return (string && reHasRegExpChar.test(string))
          ? string.replace(reRegExpChar, '\\$&')
          : string;
      }

      /**
       * Converts `string` to
       * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the kebab cased string.
       * @example
       *
       * _.kebabCase('Foo Bar');
       * // => 'foo-bar'
       *
       * _.kebabCase('fooBar');
       * // => 'foo-bar'
       *
       * _.kebabCase('__FOO_BAR__');
       * // => 'foo-bar'
       */
      var kebabCase = createCompounder(function(result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });

      /**
       * Converts `string`, as space separated words, to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.lowerCase('--Foo-Bar--');
       * // => 'foo bar'
       *
       * _.lowerCase('fooBar');
       * // => 'foo bar'
       *
       * _.lowerCase('__FOO_BAR__');
       * // => 'foo bar'
       */
      var lowerCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });

      /**
       * Converts the first character of `string` to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.lowerFirst('Fred');
       * // => 'fred'
       *
       * _.lowerFirst('FRED');
       * // => 'fRED'
       */
      var lowerFirst = createCaseFirst('toLowerCase');

      /**
       * Pads `string` on the left and right sides if it's shorter than `length`.
       * Padding characters are truncated if they can't be evenly divided by `length`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.pad('abc', 8);
       * // => '  abc   '
       *
       * _.pad('abc', 8, '_-');
       * // => '_-abc_-_'
       *
       * _.pad('abc', 3);
       * // => 'abc'
       */
      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        if (!length || strLength >= length) {
          return string;
        }
        var mid = (length - strLength) / 2;
        return (
          createPadding(nativeFloor(mid), chars) +
          string +
          createPadding(nativeCeil(mid), chars)
        );
      }

      /**
       * Pads `string` on the right side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padEnd('abc', 6);
       * // => 'abc   '
       *
       * _.padEnd('abc', 6, '_-');
       * // => 'abc_-_'
       *
       * _.padEnd('abc', 3);
       * // => 'abc'
       */
      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        return (length && strLength < length)
          ? (string + createPadding(length - strLength, chars))
          : string;
      }

      /**
       * Pads `string` on the left side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padStart('abc', 6);
       * // => '   abc'
       *
       * _.padStart('abc', 6, '_-');
       * // => '_-_abc'
       *
       * _.padStart('abc', 3);
       * // => 'abc'
       */
      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        return (length && strLength < length)
          ? (createPadding(length - strLength, chars) + string)
          : string;
      }

      /**
       * Converts `string` to an integer of the specified radix. If `radix` is
       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
       * hexadecimal, in which case a `radix` of `16` is used.
       *
       * **Note:** This method aligns with the
       * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category String
       * @param {string} string The string to convert.
       * @param {number} [radix=10] The radix to interpret `value` by.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.parseInt('08');
       * // => 8
       *
       * _.map(['6', '08', '10'], _.parseInt);
       * // => [6, 8, 10]
       */
      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }

      /**
       * Repeats the given string `n` times.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to repeat.
       * @param {number} [n=1] The number of times to repeat the string.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the repeated string.
       * @example
       *
       * _.repeat('*', 3);
       * // => '***'
       *
       * _.repeat('abc', 2);
       * // => 'abcabc'
       *
       * _.repeat('abc', 0);
       * // => ''
       */
      function repeat(string, n, guard) {
        if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString(string), n);
      }

      /**
       * Replaces matches for `pattern` in `string` with `replacement`.
       *
       * **Note:** This method is based on
       * [`String#replace`](https://mdn.io/String/replace).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to modify.
       * @param {RegExp|string} pattern The pattern to replace.
       * @param {Function|string} replacement The match replacement.
       * @returns {string} Returns the modified string.
       * @example
       *
       * _.replace('Hi Fred', 'Fred', 'Barney');
       * // => 'Hi Barney'
       */
      function replace() {
        var args = arguments,
            string = toString(args[0]);

        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }

      /**
       * Converts `string` to
       * [snake case](https://en.wikipedia.org/wiki/Snake_case).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the snake cased string.
       * @example
       *
       * _.snakeCase('Foo Bar');
       * // => 'foo_bar'
       *
       * _.snakeCase('fooBar');
       * // => 'foo_bar'
       *
       * _.snakeCase('--FOO-BAR--');
       * // => 'foo_bar'
       */
      var snakeCase = createCompounder(function(result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      /**
       * Splits `string` by `separator`.
       *
       * **Note:** This method is based on
       * [`String#split`](https://mdn.io/String/split).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to split.
       * @param {RegExp|string} separator The separator pattern to split by.
       * @param {number} [limit] The length to truncate results to.
       * @returns {Array} Returns the string segments.
       * @example
       *
       * _.split('a-b-c', '-', 2);
       * // => ['a', 'b']
       */
      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined;
        }
        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string = toString(string);
        if (string && (
              typeof separator == 'string' ||
              (separator != null && !isRegExp(separator))
            )) {
          separator = baseToString(separator);
          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }
        return string.split(separator, limit);
      }

      /**
       * Converts `string` to
       * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
       *
       * @static
       * @memberOf _
       * @since 3.1.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the start cased string.
       * @example
       *
       * _.startCase('--foo-bar--');
       * // => 'Foo Bar'
       *
       * _.startCase('fooBar');
       * // => 'Foo Bar'
       *
       * _.startCase('__FOO_BAR__');
       * // => 'FOO BAR'
       */
      var startCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      /**
       * Checks if `string` starts with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=0] The position to search from.
       * @returns {boolean} Returns `true` if `string` starts with `target`,
       *  else `false`.
       * @example
       *
       * _.startsWith('abc', 'a');
       * // => true
       *
       * _.startsWith('abc', 'b');
       * // => false
       *
       * _.startsWith('abc', 'b', 1);
       * // => true
       */
      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null
          ? 0
          : baseClamp(toInteger(position), 0, string.length);

        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }

      /**
       * Creates a compiled template function that can interpolate data properties
       * in "interpolate" delimiters, HTML-escape interpolated data properties in
       * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
       * properties may be accessed as free variables in the template. If a setting
       * object is given, it takes precedence over `_.templateSettings` values.
       *
       * **Note:** In the development build `_.template` utilizes
       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
       * for easier debugging.
       *
       * For more information on precompiling templates see
       * [lodash's custom builds documentation](https://lodash.com/custom-builds).
       *
       * For more information on Chrome extension sandboxes see
       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The template string.
       * @param {Object} [options={}] The options object.
       * @param {RegExp} [options.escape=_.templateSettings.escape]
       *  The HTML "escape" delimiter.
       * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
       *  The "evaluate" delimiter.
       * @param {Object} [options.imports=_.templateSettings.imports]
       *  An object to import into the template as free variables.
       * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
       *  The "interpolate" delimiter.
       * @param {string} [options.sourceURL='lodash.templateSources[n]']
       *  The sourceURL of the compiled template.
       * @param {string} [options.variable='obj']
       *  The data object variable name.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the compiled template function.
       * @example
       *
       * // Use the "interpolate" delimiter to create a compiled template.
       * var compiled = _.template('hello <%= user %>!');
       * compiled({ 'user': 'fred' });
       * // => 'hello fred!'
       *
       * // Use the HTML "escape" delimiter to escape data property values.
       * var compiled = _.template('<b><%- value %></b>');
       * compiled({ 'value': '<script>' });
       * // => '<b>&lt;script&gt;</b>'
       *
       * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the internal `print` function in "evaluate" delimiters.
       * var compiled = _.template('<% print("hello " + user); %>!');
       * compiled({ 'user': 'barney' });
       * // => 'hello barney!'
       *
       * // Use the ES template literal delimiter as an "interpolate" delimiter.
       * // Disable support by replacing the "interpolate" delimiter.
       * var compiled = _.template('hello ${ user }!');
       * compiled({ 'user': 'pebbles' });
       * // => 'hello pebbles!'
       *
       * // Use backslashes to treat delimiters as plain text.
       * var compiled = _.template('<%= "\\<%- value %\\>" %>');
       * compiled({ 'value': 'ignored' });
       * // => '<%- value %>'
       *
       * // Use the `imports` option to import `jQuery` as `jq`.
       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the `sourceURL` option to specify a custom sourceURL for the template.
       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
       * compiled(data);
       * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
       *
       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
       * compiled.source;
       * // => function(data) {
       * //   var __t, __p = '';
       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
       * //   return __p;
       * // }
       *
       * // Use custom template delimiters.
       * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
       * var compiled = _.template('hello {{ user }}!');
       * compiled({ 'user': 'mustache' });
       * // => 'hello mustache!'
       *
       * // Use the `source` property to inline compiled templates for meaningful
       * // line numbers in error messages and stack traces.
       * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
       *   var JST = {\
       *     "main": ' + _.template(mainText).source + '\
       *   };\
       * ');
       */
      function template(string, options, guard) {
        // Based on John Resig's `tmpl` implementation
        // (http://ejohn.org/blog/javascript-micro-templating/)
        // and Laura Doktorova's doT.js (https://github.com/olado/doT).
        var settings = lodash.templateSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined;
        }
        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);

        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);

        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";

        // Compile the regexp to match each delimiter.
        var reDelimiters = RegExp(
          (options.escape || reNoMatch).source + '|' +
          interpolate.source + '|' +
          (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
          (options.evaluate || reNoMatch).source + '|$'
        , 'g');

        // Use a sourceURL for easier debugging.
        var sourceURL = '//# sourceURL=' +
          ('sourceURL' in options
            ? options.sourceURL
            : ('lodash.templateSources[' + (++templateCounter) + ']')
          ) + '\n';

        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);

          // Escape characters that can't be included in string literals.
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          // Replace delimiters with snippets.
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index = offset + match.length;

          // The JS engine embedded in Adobe products needs `match` returned in
          // order to produce the correct `offset` value.
          return match;
        });

        source += "';\n";

        // If `variable` is not specified wrap a with-statement around the generated
        // code to add the data object to the top of the scope chain.
        var variable = options.variable;
        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }
        // Cleanup code by stripping empty strings.
        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
          .replace(reEmptyStringMiddle, '$1')
          .replace(reEmptyStringTrailing, '$1;');

        // Frame code as the function body.
        source = 'function(' + (variable || 'obj') + ') {\n' +
          (variable
            ? ''
            : 'obj || (obj = {});\n'
          ) +
          "var __t, __p = ''" +
          (isEscaping
             ? ', __e = _.escape'
             : ''
          ) +
          (isEvaluating
            ? ', __j = Array.prototype.join;\n' +
              "function print() { __p += __j.call(arguments, '') }\n"
            : ';\n'
          ) +
          source +
          'return __p\n}';

        var result = attempt(function() {
          return Function(importsKeys, sourceURL + 'return ' + source)
            .apply(undefined, importsValues);
        });

        // Provide the compiled function's source by its `toString` method or
        // the `source` property as a convenience for inlining compiled templates.
        result.source = source;
        if (isError(result)) {
          throw result;
        }
        return result;
      }

      /**
       * Converts `string`, as a whole, to lower case just like
       * [String#toLowerCase](https://mdn.io/toLowerCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.toLower('--Foo-Bar--');
       * // => '--foo-bar--'
       *
       * _.toLower('fooBar');
       * // => 'foobar'
       *
       * _.toLower('__FOO_BAR__');
       * // => '__foo_bar__'
       */
      function toLower(value) {
        return toString(value).toLowerCase();
      }

      /**
       * Converts `string`, as a whole, to upper case just like
       * [String#toUpperCase](https://mdn.io/toUpperCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.toUpper('--foo-bar--');
       * // => '--FOO-BAR--'
       *
       * _.toUpper('fooBar');
       * // => 'FOOBAR'
       *
       * _.toUpper('__foo_bar__');
       * // => '__FOO_BAR__'
       */
      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      /**
       * Removes leading and trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trim('  abc  ');
       * // => 'abc'
       *
       * _.trim('-_-abc-_-', '_-');
       * // => 'abc'
       *
       * _.map(['  foo  ', '  bar  '], _.trim);
       * // => ['foo', 'bar']
       */
      function trim(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined)) {
          return string.replace(reTrim, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;

        return castSlice(strSymbols, start, end).join('');
      }

      /**
       * Removes trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimEnd('  abc  ');
       * // => '  abc'
       *
       * _.trimEnd('-_-abc-_-', '_-');
       * // => '-_-abc'
       */
      function trimEnd(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimEnd, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

        return castSlice(strSymbols, 0, end).join('');
      }

      /**
       * Removes leading whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimStart('  abc  ');
       * // => 'abc  '
       *
       * _.trimStart('-_-abc-_-', '_-');
       * // => 'abc-_-'
       */
      function trimStart(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimStart, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));

        return castSlice(strSymbols, start).join('');
      }

      /**
       * Truncates `string` if it's longer than the given maximum string length.
       * The last characters of the truncated string are replaced with the omission
       * string which defaults to "...".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to truncate.
       * @param {Object} [options={}] The options object.
       * @param {number} [options.length=30] The maximum string length.
       * @param {string} [options.omission='...'] The string to indicate text is omitted.
       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
       * @returns {string} Returns the truncated string.
       * @example
       *
       * _.truncate('hi-diddly-ho there, neighborino');
       * // => 'hi-diddly-ho there, neighbo...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': ' '
       * });
       * // => 'hi-diddly-ho there,...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': /,? +/
       * });
       * // => 'hi-diddly-ho there...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'omission': ' [...]'
       * });
       * // => 'hi-diddly-ho there, neig [...]'
       */
      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }
        string = toString(string);

        var strLength = string.length;
        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }
        if (length >= strLength) {
          return string;
        }
        var end = length - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result = strSymbols
          ? castSlice(strSymbols, 0, end).join('')
          : string.slice(0, end);

        if (separator === undefined) {
          return result + omission;
        }
        if (strSymbols) {
          end += (result.length - end);
        }
        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }
            separator.lastIndex = 0;
            while ((match = separator.exec(substring))) {
              var newEnd = match.index;
            }
            result = result.slice(0, newEnd === undefined ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);
          if (index > -1) {
            result = result.slice(0, index);
          }
        }
        return result + omission;
      }

      /**
       * The inverse of `_.escape`; this method converts the HTML entities
       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
       * their corresponding characters.
       *
       * **Note:** No other HTML entities are unescaped. To unescape additional
       * HTML entities use a third-party library like [_he_](https://mths.be/he).
       *
       * @static
       * @memberOf _
       * @since 0.6.0
       * @category String
       * @param {string} [string=''] The string to unescape.
       * @returns {string} Returns the unescaped string.
       * @example
       *
       * _.unescape('fred, barney, &amp; pebbles');
       * // => 'fred, barney, & pebbles'
       */
      function unescape(string) {
        string = toString(string);
        return (string && reHasEscapedHtml.test(string))
          ? string.replace(reEscapedHtml, unescapeHtmlChar)
          : string;
      }

      /**
       * Converts `string`, as space separated words, to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.upperCase('--foo-bar');
       * // => 'FOO BAR'
       *
       * _.upperCase('fooBar');
       * // => 'FOO BAR'
       *
       * _.upperCase('__foo_bar__');
       * // => 'FOO BAR'
       */
      var upperCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });

      /**
       * Converts the first character of `string` to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.upperFirst('fred');
       * // => 'Fred'
       *
       * _.upperFirst('FRED');
       * // => 'FRED'
       */
      var upperFirst = createCaseFirst('toUpperCase');

      /**
       * Splits `string` into an array of its words.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {RegExp|string} [pattern] The pattern to match words.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the words of `string`.
       * @example
       *
       * _.words('fred, barney, & pebbles');
       * // => ['fred', 'barney', 'pebbles']
       *
       * _.words('fred, barney, & pebbles', /[^, ]+/g);
       * // => ['fred', 'barney', '&', 'pebbles']
       */
      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined : pattern;

        if (pattern === undefined) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }

      /*------------------------------------------------------------------------*/

      /**
       * Attempts to invoke `func`, returning either the result or the caught error
       * object. Any additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Function} func The function to attempt.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {*} Returns the `func` result or error object.
       * @example
       *
       * // Avoid throwing errors for invalid selectors.
       * var elements = _.attempt(function(selector) {
       *   return document.querySelectorAll(selector);
       * }, '>_>');
       *
       * if (_.isError(elements)) {
       *   elements = [];
       * }
       */
      var attempt = baseRest(function(func, args) {
        try {
          return apply(func, undefined, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });

      /**
       * Binds methods of an object to the object itself, overwriting the existing
       * method.
       *
       * **Note:** This method doesn't set the "length" property of bound functions.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Object} object The object to bind and assign the bound methods to.
       * @param {...(string|string[])} methodNames The object method names to bind.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var view = {
       *   'label': 'docs',
       *   'click': function() {
       *     console.log('clicked ' + this.label);
       *   }
       * };
       *
       * _.bindAll(view, ['click']);
       * jQuery(element).on('click', view.click);
       * // => Logs 'clicked docs' when clicked.
       */
      var bindAll = flatRest(function(object, methodNames) {
        arrayEach(methodNames, function(key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });

      /**
       * Creates a function that iterates over `pairs` and invokes the corresponding
       * function of the first predicate to return truthy. The predicate-function
       * pairs are invoked with the `this` binding and arguments of the created
       * function.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Array} pairs The predicate-function pairs.
       * @returns {Function} Returns the new composite function.
       * @example
       *
       * var func = _.cond([
       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
       *   [_.stubTrue,                      _.constant('no match')]
       * ]);
       *
       * func({ 'a': 1, 'b': 2 });
       * // => 'matches A'
       *
       * func({ 'a': 0, 'b': 1 });
       * // => 'matches B'
       *
       * func({ 'a': '1', 'b': '2' });
       * // => 'no match'
       */
      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();

        pairs = !length ? [] : arrayMap(pairs, function(pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return [toIteratee(pair[0]), pair[1]];
        });

        return baseRest(function(args) {
          var index = -1;
          while (++index < length) {
            var pair = pairs[index];
            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      /**
       * Creates a function that invokes the predicate properties of `source` with
       * the corresponding property values of a given object, returning `true` if
       * all predicates return truthy, else `false`.
       *
       * **Note:** The created function is equivalent to `_.conformsTo` with
       * `source` partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 2, 'b': 1 },
       *   { 'a': 1, 'b': 2 }
       * ];
       *
       * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
       * // => [{ 'a': 1, 'b': 2 }]
       */
      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */
      function constant(value) {
        return function() {
          return value;
        };
      }

      /**
       * Checks `value` to determine whether a default value should be returned in
       * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
       * or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Util
       * @param {*} value The value to check.
       * @param {*} defaultValue The default value.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * _.defaultTo(1, 10);
       * // => 1
       *
       * _.defaultTo(undefined, 10);
       * // => 10
       */
      function defaultTo(value, defaultValue) {
        return (value == null || value !== value) ? defaultValue : value;
      }

      /**
       * Creates a function that returns the result of invoking the given functions
       * with the `this` binding of the created function, where each successive
       * invocation is supplied the return value of the previous.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flowRight
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flow([_.add, square]);
       * addSquare(1, 2);
       * // => 9
       */
      var flow = createFlow();

      /**
       * This method is like `_.flow` except that it creates a function that
       * invokes the given functions from right to left.
       *
       * @static
       * @since 3.0.0
       * @memberOf _
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flow
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flowRight([square, _.add]);
       * addSquare(1, 2);
       * // => 9
       */
      var flowRight = createFlow(true);

      /**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */
      function identity(value) {
        return value;
      }

      /**
       * Creates a function that invokes `func` with the arguments of the created
       * function. If `func` is a property name, the created function returns the
       * property value for a given element. If `func` is an array or object, the
       * created function returns `true` for elements that contain the equivalent
       * source properties, otherwise it returns `false`.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Util
       * @param {*} [func=_.identity] The value to convert to a callback.
       * @returns {Function} Returns the callback.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
       * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, _.iteratee(['user', 'fred']));
       * // => [{ 'user': 'fred', 'age': 40 }]
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, _.iteratee('user'));
       * // => ['barney', 'fred']
       *
       * // Create custom iteratee shorthands.
       * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
       *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
       *     return func.test(string);
       *   };
       * });
       *
       * _.filter(['abc', 'def'], /ef/);
       * // => ['def']
       */
      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that performs a partial deep comparison between a given
       * object and `source`, returning `true` if the given object has equivalent
       * property values, else `false`.
       *
       * **Note:** The created function is equivalent to `_.isMatch` with `source`
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
       * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
       */
      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that performs a partial deep comparison between the
       * value at `path` of a given object to `srcValue`, returning `true` if the
       * object value is equivalent, else `false`.
       *
       * **Note:** Partial comparisons will match empty array and empty object
       * `srcValue` values against any array or object value, respectively. See
       * `_.isEqual` for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.find(objects, _.matchesProperty('a', 4));
       * // => { 'a': 4, 'b': 5, 'c': 6 }
       */
      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that invokes the method at `path` of a given object.
       * Any additional arguments are provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': _.constant(2) } },
       *   { 'a': { 'b': _.constant(1) } }
       * ];
       *
       * _.map(objects, _.method('a.b'));
       * // => [2, 1]
       *
       * _.map(objects, _.method(['a', 'b']));
       * // => [2, 1]
       */
      var method = baseRest(function(path, args) {
        return function(object) {
          return baseInvoke(object, path, args);
        };
      });

      /**
       * The opposite of `_.method`; this method creates a function that invokes
       * the method at a given path of `object`. Any additional arguments are
       * provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Object} object The object to query.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var array = _.times(3, _.constant),
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
       * // => [2, 0]
       */
      var methodOf = baseRest(function(object, args) {
        return function(path) {
          return baseInvoke(object, path, args);
        };
      });

      /**
       * Adds all own enumerable string keyed function properties of a source
       * object to the destination object. If `object` is a function, then methods
       * are added to its prototype as well.
       *
       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
       * avoid conflicts caused by modifying the original.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Function|Object} [object=lodash] The destination object.
       * @param {Object} source The object of functions to add.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
       * @returns {Function|Object} Returns `object`.
       * @example
       *
       * function vowels(string) {
       *   return _.filter(string, function(v) {
       *     return /[aeiou]/i.test(v);
       *   });
       * }
       *
       * _.mixin({ 'vowels': vowels });
       * _.vowels('fred');
       * // => ['e']
       *
       * _('fred').vowels().value();
       * // => ['e']
       *
       * _.mixin({ 'vowels': vowels }, { 'chain': false });
       * _('fred').vowels();
       * // => ['e']
       */
      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null &&
            !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }
        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);

        arrayEach(methodNames, function(methodName) {
          var func = source[methodName];
          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });

        return object;
      }

      /**
       * Reverts the `_` variable to its previous value and returns a reference to
       * the `lodash` function.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @returns {Function} Returns the `lodash` function.
       * @example
       *
       * var lodash = _.noConflict();
       */
      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }
        return this;
      }

      /**
       * This method returns `undefined`.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Util
       * @example
       *
       * _.times(2, _.noop);
       * // => [undefined, undefined]
       */
      function noop() {
        // No operation performed.
      }

      /**
       * Creates a function that gets the argument at index `n`. If `n` is negative,
       * the nth argument from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [n=0] The index of the argument to return.
       * @returns {Function} Returns the new pass-thru function.
       * @example
       *
       * var func = _.nthArg(1);
       * func('a', 'b', 'c', 'd');
       * // => 'b'
       *
       * var func = _.nthArg(-2);
       * func('a', 'b', 'c', 'd');
       * // => 'c'
       */
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function(args) {
          return baseNth(args, n);
        });
      }

      /**
       * Creates a function that invokes `iteratees` with the arguments it receives
       * and returns their results.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to invoke.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.over([Math.max, Math.min]);
       *
       * func(1, 2, 3, 4);
       * // => [4, 1]
       */
      var over = createOver(arrayMap);

      /**
       * Creates a function that checks if **all** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overEvery([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => false
       *
       * func(NaN);
       * // => false
       */
      var overEvery = createOver(arrayEvery);

      /**
       * Creates a function that checks if **any** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overSome([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => true
       *
       * func(NaN);
       * // => false
       */
      var overSome = createOver(arraySome);

      /**
       * Creates a function that returns the value at `path` of a given object.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': 2 } },
       *   { 'a': { 'b': 1 } }
       * ];
       *
       * _.map(objects, _.property('a.b'));
       * // => [2, 1]
       *
       * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
       * // => [1, 2]
       */
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      /**
       * The opposite of `_.property`; this method creates a function that returns
       * the value at a given path of `object`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var array = [0, 1, 2],
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
       * // => [2, 0]
       */
      function propertyOf(object) {
        return function(path) {
          return object == null ? undefined : baseGet(object, path);
        };
      }

      /**
       * Creates an array of numbers (positive and/or negative) progressing from
       * `start` up to, but not including, `end`. A step of `-1` is used if a negative
       * `start` is specified without an `end` or `step`. If `end` is not specified,
       * it's set to `start` with `start` then set to `0`.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.rangeRight
       * @example
       *
       * _.range(4);
       * // => [0, 1, 2, 3]
       *
       * _.range(-4);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 5);
       * // => [1, 2, 3, 4]
       *
       * _.range(0, 20, 5);
       * // => [0, 5, 10, 15]
       *
       * _.range(0, -4, -1);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.range(0);
       * // => []
       */
      var range = createRange();

      /**
       * This method is like `_.range` except that it populates values in
       * descending order.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.range
       * @example
       *
       * _.rangeRight(4);
       * // => [3, 2, 1, 0]
       *
       * _.rangeRight(-4);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 5);
       * // => [4, 3, 2, 1]
       *
       * _.rangeRight(0, 20, 5);
       * // => [15, 10, 5, 0]
       *
       * _.rangeRight(0, -4, -1);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.rangeRight(0);
       * // => []
       */
      var rangeRight = createRange(true);

      /**
       * This method returns a new empty array.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Array} Returns the new empty array.
       * @example
       *
       * var arrays = _.times(2, _.stubArray);
       *
       * console.log(arrays);
       * // => [[], []]
       *
       * console.log(arrays[0] === arrays[1]);
       * // => false
       */
      function stubArray() {
        return [];
      }

      /**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */
      function stubFalse() {
        return false;
      }

      /**
       * This method returns a new empty object.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Object} Returns the new empty object.
       * @example
       *
       * var objects = _.times(2, _.stubObject);
       *
       * console.log(objects);
       * // => [{}, {}]
       *
       * console.log(objects[0] === objects[1]);
       * // => false
       */
      function stubObject() {
        return {};
      }

      /**
       * This method returns an empty string.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {string} Returns the empty string.
       * @example
       *
       * _.times(2, _.stubString);
       * // => ['', '']
       */
      function stubString() {
        return '';
      }

      /**
       * This method returns `true`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `true`.
       * @example
       *
       * _.times(2, _.stubTrue);
       * // => [true, true]
       */
      function stubTrue() {
        return true;
      }

      /**
       * Invokes the iteratee `n` times, returning an array of the results of
       * each invocation. The iteratee is invoked with one argument; (index).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.times(3, String);
       * // => ['0', '1', '2']
       *
       *  _.times(4, _.constant(0));
       * // => [0, 0, 0, 0]
       */
      function times(n, iteratee) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }
        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);

        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;

        var result = baseTimes(length, iteratee);
        while (++index < n) {
          iteratee(index);
        }
        return result;
      }

      /**
       * Converts `value` to a property path array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {*} value The value to convert.
       * @returns {Array} Returns the new property path array.
       * @example
       *
       * _.toPath('a.b.c');
       * // => ['a', 'b', 'c']
       *
       * _.toPath('a[0].b.c');
       * // => ['a', '0', 'b', 'c']
       */
      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }
        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }

      /**
       * Generates a unique ID. If `prefix` is given, the ID is appended to it.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {string} [prefix=''] The value to prefix the ID with.
       * @returns {string} Returns the unique ID.
       * @example
       *
       * _.uniqueId('contact_');
       * // => 'contact_104'
       *
       * _.uniqueId();
       * // => '105'
       */
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Adds two numbers.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {number} augend The first number in an addition.
       * @param {number} addend The second number in an addition.
       * @returns {number} Returns the total.
       * @example
       *
       * _.add(6, 4);
       * // => 10
       */
      var add = createMathOperation(function(augend, addend) {
        return augend + addend;
      }, 0);

      /**
       * Computes `number` rounded up to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round up.
       * @param {number} [precision=0] The precision to round up to.
       * @returns {number} Returns the rounded up number.
       * @example
       *
       * _.ceil(4.006);
       * // => 5
       *
       * _.ceil(6.004, 2);
       * // => 6.01
       *
       * _.ceil(6040, -2);
       * // => 6100
       */
      var ceil = createRound('ceil');

      /**
       * Divide two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} dividend The first number in a division.
       * @param {number} divisor The second number in a division.
       * @returns {number} Returns the quotient.
       * @example
       *
       * _.divide(6, 4);
       * // => 1.5
       */
      var divide = createMathOperation(function(dividend, divisor) {
        return dividend / divisor;
      }, 1);

      /**
       * Computes `number` rounded down to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round down.
       * @param {number} [precision=0] The precision to round down to.
       * @returns {number} Returns the rounded down number.
       * @example
       *
       * _.floor(4.006);
       * // => 4
       *
       * _.floor(0.046, 2);
       * // => 0.04
       *
       * _.floor(4060, -2);
       * // => 4000
       */
      var floor = createRound('floor');

      /**
       * Computes the maximum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * _.max([4, 2, 8, 6]);
       * // => 8
       *
       * _.max([]);
       * // => undefined
       */
      function max(array) {
        return (array && array.length)
          ? baseExtremum(array, identity, baseGt)
          : undefined;
      }

      /**
       * This method is like `_.max` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.maxBy(objects, function(o) { return o.n; });
       * // => { 'n': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.maxBy(objects, 'n');
       * // => { 'n': 2 }
       */
      function maxBy(array, iteratee) {
        return (array && array.length)
          ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
          : undefined;
      }

      /**
       * Computes the mean of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the mean.
       * @example
       *
       * _.mean([4, 2, 8, 6]);
       * // => 5
       */
      function mean(array) {
        return baseMean(array, identity);
      }

      /**
       * This method is like `_.mean` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be averaged.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the mean.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.meanBy(objects, function(o) { return o.n; });
       * // => 5
       *
       * // The `_.property` iteratee shorthand.
       * _.meanBy(objects, 'n');
       * // => 5
       */
      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }

      /**
       * Computes the minimum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * _.min([4, 2, 8, 6]);
       * // => 2
       *
       * _.min([]);
       * // => undefined
       */
      function min(array) {
        return (array && array.length)
          ? baseExtremum(array, identity, baseLt)
          : undefined;
      }

      /**
       * This method is like `_.min` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.minBy(objects, function(o) { return o.n; });
       * // => { 'n': 1 }
       *
       * // The `_.property` iteratee shorthand.
       * _.minBy(objects, 'n');
       * // => { 'n': 1 }
       */
      function minBy(array, iteratee) {
        return (array && array.length)
          ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
          : undefined;
      }

      /**
       * Multiply two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} multiplier The first number in a multiplication.
       * @param {number} multiplicand The second number in a multiplication.
       * @returns {number} Returns the product.
       * @example
       *
       * _.multiply(6, 4);
       * // => 24
       */
      var multiply = createMathOperation(function(multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);

      /**
       * Computes `number` rounded to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round.
       * @param {number} [precision=0] The precision to round to.
       * @returns {number} Returns the rounded number.
       * @example
       *
       * _.round(4.006);
       * // => 4
       *
       * _.round(4.006, 2);
       * // => 4.01
       *
       * _.round(4060, -2);
       * // => 4100
       */
      var round = createRound('round');

      /**
       * Subtract two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {number} minuend The first number in a subtraction.
       * @param {number} subtrahend The second number in a subtraction.
       * @returns {number} Returns the difference.
       * @example
       *
       * _.subtract(6, 4);
       * // => 2
       */
      var subtract = createMathOperation(function(minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);

      /**
       * Computes the sum of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the sum.
       * @example
       *
       * _.sum([4, 2, 8, 6]);
       * // => 20
       */
      function sum(array) {
        return (array && array.length)
          ? baseSum(array, identity)
          : 0;
      }

      /**
       * This method is like `_.sum` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be summed.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the sum.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.sumBy(objects, function(o) { return o.n; });
       * // => 20
       *
       * // The `_.property` iteratee shorthand.
       * _.sumBy(objects, 'n');
       * // => 20
       */
      function sumBy(array, iteratee) {
        return (array && array.length)
          ? baseSum(array, getIteratee(iteratee, 2))
          : 0;
      }

      /*------------------------------------------------------------------------*/

      // Add methods that return wrapped values in chain sequences.
      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;

      // Add aliases.
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;

      // Add methods to `lodash.prototype`.
      mixin(lodash, lodash);

      /*------------------------------------------------------------------------*/

      // Add methods that return unwrapped values in chain sequences.
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;

      // Add aliases.
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;

      mixin(lodash, (function() {
        var source = {};
        baseForOwn(lodash, function(func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }()), { 'chain': false });

      /*------------------------------------------------------------------------*/

      /**
       * The semantic version number.
       *
       * @static
       * @memberOf _
       * @type {string}
       */
      lodash.VERSION = VERSION;

      // Assign default placeholders.
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
        lodash[methodName].placeholder = lodash;
      });

      // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
      arrayEach(['drop', 'take'], function(methodName, index) {
        LazyWrapper.prototype[methodName] = function(n) {
          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

          var result = (this.__filtered__ && !index)
            ? new LazyWrapper(this)
            : this.clone();

          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }
          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function(n) {
          return this.reverse()[methodName](n).reverse();
        };
      });

      // Add `LazyWrapper` methods that accept an `iteratee` value.
      arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function(iteratee) {
          var result = this.clone();
          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });
          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });

      // Add `LazyWrapper` methods for `_.head` and `_.last`.
      arrayEach(['head', 'last'], function(methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });

      // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
      arrayEach(['initial', 'tail'], function(methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function() {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function(predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function(predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }
        return this.map(function(value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function(predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };

      LazyWrapper.prototype.slice = function(start, end) {
        start = toInteger(start);

        var result = this;
        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }
        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }
        if (end !== undefined) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }
        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function(predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function() {
        return this.take(MAX_ARRAY_LENGTH);
      };

      // Add `LazyWrapper` methods to `lodash.prototype`.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }
        lodash.prototype[methodName] = function() {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function(value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return (isTaker && chainAll) ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            // Avoid lazy use if the iteratee has a "length" value other than `1`.
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);
            result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
            return new LodashWrapper(result, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result = this.thru(interceptor);
          return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
        };
      });

      // Add `Array` methods to `lodash.prototype`.
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }
          return this[chainName](function(value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });

      // Map minified method names to their real names.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash[methodName];
        if (lodashFunc) {
          var key = (lodashFunc.name + ''),
              names = realNames[key] || (realNames[key] = []);

          names.push({ 'name': methodName, 'func': lodashFunc });
        }
      });

      realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined
      }];

      // Add methods to `LazyWrapper`.
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;

      // Add chain sequence methods to the `lodash` wrapper.
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

      // Add lazy aliases.
      lodash.prototype.first = lodash.prototype.head;

      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }
      return lodash;
    });

    /*--------------------------------------------------------------------------*/

    // Export lodash.
    var _ = runInContext();

    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (freeModule) {
      // Export for Node.js.
      (freeModule.exports = _)._ = _;
      // Export for CommonJS support.
      freeExports._ = _;
    }
    else {
      // Export to the global object.
      root._ = _;
    }
  }.call(commonjsGlobal));
  });

  var long_1 = createCommonjsModule(function (module) {
  /*
   Copyright 2013 Daniel Wirtz <dcode@dcode.io>
   Copyright 2009 The Closure Library Authors. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS-IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   */

  /**
   * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
   * Released under the Apache License, Version 2.0
   * see: https://github.com/dcodeIO/long.js for details
   */
  (function(global, factory) {

      /* AMD */ if (typeof commonjsRequire === 'function' && 'object' === "object" && module && module["exports"])
          module["exports"] = factory();
      /* Global */ else
          (global["dcodeIO"] = global["dcodeIO"] || {})["Long"] = factory();

  })(commonjsGlobal, function() {

      /**
       * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
       *  See the from* functions below for more convenient ways of constructing Longs.
       * @exports Long
       * @class A Long class for representing a 64 bit two's-complement integer value.
       * @param {number} low The low (signed) 32 bits of the long
       * @param {number} high The high (signed) 32 bits of the long
       * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
       * @constructor
       */
      function Long(low, high, unsigned) {

          /**
           * The low 32 bits as a signed value.
           * @type {number}
           */
          this.low = low | 0;

          /**
           * The high 32 bits as a signed value.
           * @type {number}
           */
          this.high = high | 0;

          /**
           * Whether unsigned or not.
           * @type {boolean}
           */
          this.unsigned = !!unsigned;
      }

      // The internal representation of a long is the two given signed, 32-bit values.
      // We use 32-bit pieces because these are the size of integers on which
      // Javascript performs bit-operations.  For operations like addition and
      // multiplication, we split each number into 16 bit pieces, which can easily be
      // multiplied within Javascript's floating-point representation without overflow
      // or change in sign.
      //
      // In the algorithms below, we frequently reduce the negative case to the
      // positive case by negating the input(s) and then post-processing the result.
      // Note that we must ALWAYS check specially whether those values are MIN_VALUE
      // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
      // a positive number, it overflows back into a negative).  Not handling this
      // case would often result in infinite recursion.
      //
      // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
      // methods on which they depend.

      /**
       * An indicator used to reliably determine if an object is a Long or not.
       * @type {boolean}
       * @const
       * @private
       */
      Long.prototype.__isLong__;

      Object.defineProperty(Long.prototype, "__isLong__", {
          value: true,
          enumerable: false,
          configurable: false
      });

      /**
       * @function
       * @param {*} obj Object
       * @returns {boolean}
       * @inner
       */
      function isLong(obj) {
          return (obj && obj["__isLong__"]) === true;
      }

      /**
       * Tests if the specified object is a Long.
       * @function
       * @param {*} obj Object
       * @returns {boolean}
       */
      Long.isLong = isLong;

      /**
       * A cache of the Long representations of small integer values.
       * @type {!Object}
       * @inner
       */
      var INT_CACHE = {};

      /**
       * A cache of the Long representations of small unsigned integer values.
       * @type {!Object}
       * @inner
       */
      var UINT_CACHE = {};

      /**
       * @param {number} value
       * @param {boolean=} unsigned
       * @returns {!Long}
       * @inner
       */
      function fromInt(value, unsigned) {
          var obj, cachedObj, cache;
          if (unsigned) {
              value >>>= 0;
              if (cache = (0 <= value && value < 256)) {
                  cachedObj = UINT_CACHE[value];
                  if (cachedObj)
                      return cachedObj;
              }
              obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
              if (cache)
                  UINT_CACHE[value] = obj;
              return obj;
          } else {
              value |= 0;
              if (cache = (-128 <= value && value < 128)) {
                  cachedObj = INT_CACHE[value];
                  if (cachedObj)
                      return cachedObj;
              }
              obj = fromBits(value, value < 0 ? -1 : 0, false);
              if (cache)
                  INT_CACHE[value] = obj;
              return obj;
          }
      }

      /**
       * Returns a Long representing the given 32 bit integer value.
       * @function
       * @param {number} value The 32 bit integer in question
       * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
       * @returns {!Long} The corresponding Long value
       */
      Long.fromInt = fromInt;

      /**
       * @param {number} value
       * @param {boolean=} unsigned
       * @returns {!Long}
       * @inner
       */
      function fromNumber(value, unsigned) {
          if (isNaN(value) || !isFinite(value))
              return unsigned ? UZERO : ZERO;
          if (unsigned) {
              if (value < 0)
                  return UZERO;
              if (value >= TWO_PWR_64_DBL)
                  return MAX_UNSIGNED_VALUE;
          } else {
              if (value <= -TWO_PWR_63_DBL)
                  return MIN_VALUE;
              if (value + 1 >= TWO_PWR_63_DBL)
                  return MAX_VALUE;
          }
          if (value < 0)
              return fromNumber(-value, unsigned).neg();
          return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
      }

      /**
       * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
       * @function
       * @param {number} value The number in question
       * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
       * @returns {!Long} The corresponding Long value
       */
      Long.fromNumber = fromNumber;

      /**
       * @param {number} lowBits
       * @param {number} highBits
       * @param {boolean=} unsigned
       * @returns {!Long}
       * @inner
       */
      function fromBits(lowBits, highBits, unsigned) {
          return new Long(lowBits, highBits, unsigned);
      }

      /**
       * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
       *  assumed to use 32 bits.
       * @function
       * @param {number} lowBits The low 32 bits
       * @param {number} highBits The high 32 bits
       * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
       * @returns {!Long} The corresponding Long value
       */
      Long.fromBits = fromBits;

      /**
       * @function
       * @param {number} base
       * @param {number} exponent
       * @returns {number}
       * @inner
       */
      var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

      /**
       * @param {string} str
       * @param {(boolean|number)=} unsigned
       * @param {number=} radix
       * @returns {!Long}
       * @inner
       */
      function fromString(str, unsigned, radix) {
          if (str.length === 0)
              throw Error('empty string');
          if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
              return ZERO;
          if (typeof unsigned === 'number') {
              // For goog.math.long compatibility
              radix = unsigned,
              unsigned = false;
          } else {
              unsigned = !! unsigned;
          }
          radix = radix || 10;
          if (radix < 2 || 36 < radix)
              throw RangeError('radix');

          var p;
          if ((p = str.indexOf('-')) > 0)
              throw Error('interior hyphen');
          else if (p === 0) {
              return fromString(str.substring(1), unsigned, radix).neg();
          }

          // Do several (8) digits each time through the loop, so as to
          // minimize the calls to the very expensive emulated div.
          var radixToPower = fromNumber(pow_dbl(radix, 8));

          var result = ZERO;
          for (var i = 0; i < str.length; i += 8) {
              var size = Math.min(8, str.length - i),
                  value = parseInt(str.substring(i, i + size), radix);
              if (size < 8) {
                  var power = fromNumber(pow_dbl(radix, size));
                  result = result.mul(power).add(fromNumber(value));
              } else {
                  result = result.mul(radixToPower);
                  result = result.add(fromNumber(value));
              }
          }
          result.unsigned = unsigned;
          return result;
      }

      /**
       * Returns a Long representation of the given string, written using the specified radix.
       * @function
       * @param {string} str The textual representation of the Long
       * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed
       * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
       * @returns {!Long} The corresponding Long value
       */
      Long.fromString = fromString;

      /**
       * @function
       * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
       * @returns {!Long}
       * @inner
       */
      function fromValue(val) {
          if (val /* is compatible */ instanceof Long)
              return val;
          if (typeof val === 'number')
              return fromNumber(val);
          if (typeof val === 'string')
              return fromString(val);
          // Throws for non-objects, converts non-instanceof Long:
          return fromBits(val.low, val.high, val.unsigned);
      }

      /**
       * Converts the specified value to a Long.
       * @function
       * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
       * @returns {!Long}
       */
      Long.fromValue = fromValue;

      // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
      // no runtime penalty for these.

      /**
       * @type {number}
       * @const
       * @inner
       */
      var TWO_PWR_16_DBL = 1 << 16;

      /**
       * @type {number}
       * @const
       * @inner
       */
      var TWO_PWR_24_DBL = 1 << 24;

      /**
       * @type {number}
       * @const
       * @inner
       */
      var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

      /**
       * @type {number}
       * @const
       * @inner
       */
      var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

      /**
       * @type {number}
       * @const
       * @inner
       */
      var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

      /**
       * @type {!Long}
       * @const
       * @inner
       */
      var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

      /**
       * @type {!Long}
       * @inner
       */
      var ZERO = fromInt(0);

      /**
       * Signed zero.
       * @type {!Long}
       */
      Long.ZERO = ZERO;

      /**
       * @type {!Long}
       * @inner
       */
      var UZERO = fromInt(0, true);

      /**
       * Unsigned zero.
       * @type {!Long}
       */
      Long.UZERO = UZERO;

      /**
       * @type {!Long}
       * @inner
       */
      var ONE = fromInt(1);

      /**
       * Signed one.
       * @type {!Long}
       */
      Long.ONE = ONE;

      /**
       * @type {!Long}
       * @inner
       */
      var UONE = fromInt(1, true);

      /**
       * Unsigned one.
       * @type {!Long}
       */
      Long.UONE = UONE;

      /**
       * @type {!Long}
       * @inner
       */
      var NEG_ONE = fromInt(-1);

      /**
       * Signed negative one.
       * @type {!Long}
       */
      Long.NEG_ONE = NEG_ONE;

      /**
       * @type {!Long}
       * @inner
       */
      var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

      /**
       * Maximum signed value.
       * @type {!Long}
       */
      Long.MAX_VALUE = MAX_VALUE;

      /**
       * @type {!Long}
       * @inner
       */
      var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

      /**
       * Maximum unsigned value.
       * @type {!Long}
       */
      Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

      /**
       * @type {!Long}
       * @inner
       */
      var MIN_VALUE = fromBits(0, 0x80000000|0, false);

      /**
       * Minimum signed value.
       * @type {!Long}
       */
      Long.MIN_VALUE = MIN_VALUE;

      /**
       * @alias Long.prototype
       * @inner
       */
      var LongPrototype = Long.prototype;

      /**
       * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
       * @returns {number}
       */
      LongPrototype.toInt = function toInt() {
          return this.unsigned ? this.low >>> 0 : this.low;
      };

      /**
       * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
       * @returns {number}
       */
      LongPrototype.toNumber = function toNumber() {
          if (this.unsigned)
              return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
          return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
      };

      /**
       * Converts the Long to a string written in the specified radix.
       * @param {number=} radix Radix (2-36), defaults to 10
       * @returns {string}
       * @override
       * @throws {RangeError} If `radix` is out of range
       */
      LongPrototype.toString = function toString(radix) {
          radix = radix || 10;
          if (radix < 2 || 36 < radix)
              throw RangeError('radix');
          if (this.isZero())
              return '0';
          if (this.isNegative()) { // Unsigned Longs are never negative
              if (this.eq(MIN_VALUE)) {
                  // We need to change the Long value before it can be negated, so we remove
                  // the bottom-most digit in this base and then recurse to do the rest.
                  var radixLong = fromNumber(radix),
                      div = this.div(radixLong),
                      rem1 = div.mul(radixLong).sub(this);
                  return div.toString(radix) + rem1.toInt().toString(radix);
              } else
                  return '-' + this.neg().toString(radix);
          }

          // Do several (6) digits each time through the loop, so as to
          // minimize the calls to the very expensive emulated div.
          var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
              rem = this;
          var result = '';
          while (true) {
              var remDiv = rem.div(radixToPower),
                  intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
                  digits = intval.toString(radix);
              rem = remDiv;
              if (rem.isZero())
                  return digits + result;
              else {
                  while (digits.length < 6)
                      digits = '0' + digits;
                  result = '' + digits + result;
              }
          }
      };

      /**
       * Gets the high 32 bits as a signed integer.
       * @returns {number} Signed high bits
       */
      LongPrototype.getHighBits = function getHighBits() {
          return this.high;
      };

      /**
       * Gets the high 32 bits as an unsigned integer.
       * @returns {number} Unsigned high bits
       */
      LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
          return this.high >>> 0;
      };

      /**
       * Gets the low 32 bits as a signed integer.
       * @returns {number} Signed low bits
       */
      LongPrototype.getLowBits = function getLowBits() {
          return this.low;
      };

      /**
       * Gets the low 32 bits as an unsigned integer.
       * @returns {number} Unsigned low bits
       */
      LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
          return this.low >>> 0;
      };

      /**
       * Gets the number of bits needed to represent the absolute value of this Long.
       * @returns {number}
       */
      LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
          if (this.isNegative()) // Unsigned Longs are never negative
              return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
          var val = this.high != 0 ? this.high : this.low;
          for (var bit = 31; bit > 0; bit--)
              if ((val & (1 << bit)) != 0)
                  break;
          return this.high != 0 ? bit + 33 : bit + 1;
      };

      /**
       * Tests if this Long's value equals zero.
       * @returns {boolean}
       */
      LongPrototype.isZero = function isZero() {
          return this.high === 0 && this.low === 0;
      };

      /**
       * Tests if this Long's value is negative.
       * @returns {boolean}
       */
      LongPrototype.isNegative = function isNegative() {
          return !this.unsigned && this.high < 0;
      };

      /**
       * Tests if this Long's value is positive.
       * @returns {boolean}
       */
      LongPrototype.isPositive = function isPositive() {
          return this.unsigned || this.high >= 0;
      };

      /**
       * Tests if this Long's value is odd.
       * @returns {boolean}
       */
      LongPrototype.isOdd = function isOdd() {
          return (this.low & 1) === 1;
      };

      /**
       * Tests if this Long's value is even.
       * @returns {boolean}
       */
      LongPrototype.isEven = function isEven() {
          return (this.low & 1) === 0;
      };

      /**
       * Tests if this Long's value equals the specified's.
       * @param {!Long|number|string} other Other value
       * @returns {boolean}
       */
      LongPrototype.equals = function equals(other) {
          if (!isLong(other))
              other = fromValue(other);
          if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
              return false;
          return this.high === other.high && this.low === other.low;
      };

      /**
       * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
       * @function
       * @param {!Long|number|string} other Other value
       * @returns {boolean}
       */
      LongPrototype.eq = LongPrototype.equals;

      /**
       * Tests if this Long's value differs from the specified's.
       * @param {!Long|number|string} other Other value
       * @returns {boolean}
       */
      LongPrototype.notEquals = function notEquals(other) {
          return !this.eq(/* validates */ other);
      };

      /**
       * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
       * @function
       * @param {!Long|number|string} other Other value
       * @returns {boolean}
       */
      LongPrototype.neq = LongPrototype.notEquals;

      /**
       * Tests if this Long's value is less than the specified's.
       * @param {!Long|number|string} other Other value
       * @returns {boolean}
       */
      LongPrototype.lessThan = function lessThan(other) {
          return this.comp(/* validates */ other) < 0;
      };

      /**
       * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
       * @function
       * @param {!Long|number|string} other Other value
       * @returns {boolean}
       */
      LongPrototype.lt = LongPrototype.lessThan;

      /**
       * Tests if this Long's value is less than or equal the specified's.
       * @param {!Long|number|string} other Other value
       * @returns {boolean}
       */
      LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
          return this.comp(/* validates */ other) <= 0;
      };

      /**
       * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
       * @function
       * @param {!Long|number|string} other Other value
       * @returns {boolean}
       */
      LongPrototype.lte = LongPrototype.lessThanOrEqual;

      /**
       * Tests if this Long's value is greater than the specified's.
       * @param {!Long|number|string} other Other value
       * @returns {boolean}
       */
      LongPrototype.greaterThan = function greaterThan(other) {
          return this.comp(/* validates */ other) > 0;
      };

      /**
       * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
       * @function
       * @param {!Long|number|string} other Other value
       * @returns {boolean}
       */
      LongPrototype.gt = LongPrototype.greaterThan;

      /**
       * Tests if this Long's value is greater than or equal the specified's.
       * @param {!Long|number|string} other Other value
       * @returns {boolean}
       */
      LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
          return this.comp(/* validates */ other) >= 0;
      };

      /**
       * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
       * @function
       * @param {!Long|number|string} other Other value
       * @returns {boolean}
       */
      LongPrototype.gte = LongPrototype.greaterThanOrEqual;

      /**
       * Compares this Long's value with the specified's.
       * @param {!Long|number|string} other Other value
       * @returns {number} 0 if they are the same, 1 if the this is greater and -1
       *  if the given one is greater
       */
      LongPrototype.compare = function compare(other) {
          if (!isLong(other))
              other = fromValue(other);
          if (this.eq(other))
              return 0;
          var thisNeg = this.isNegative(),
              otherNeg = other.isNegative();
          if (thisNeg && !otherNeg)
              return -1;
          if (!thisNeg && otherNeg)
              return 1;
          // At this point the sign bits are the same
          if (!this.unsigned)
              return this.sub(other).isNegative() ? -1 : 1;
          // Both are positive if at least one is unsigned
          return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
      };

      /**
       * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
       * @function
       * @param {!Long|number|string} other Other value
       * @returns {number} 0 if they are the same, 1 if the this is greater and -1
       *  if the given one is greater
       */
      LongPrototype.comp = LongPrototype.compare;

      /**
       * Negates this Long's value.
       * @returns {!Long} Negated Long
       */
      LongPrototype.negate = function negate() {
          if (!this.unsigned && this.eq(MIN_VALUE))
              return MIN_VALUE;
          return this.not().add(ONE);
      };

      /**
       * Negates this Long's value. This is an alias of {@link Long#negate}.
       * @function
       * @returns {!Long} Negated Long
       */
      LongPrototype.neg = LongPrototype.negate;

      /**
       * Returns the sum of this and the specified Long.
       * @param {!Long|number|string} addend Addend
       * @returns {!Long} Sum
       */
      LongPrototype.add = function add(addend) {
          if (!isLong(addend))
              addend = fromValue(addend);

          // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

          var a48 = this.high >>> 16;
          var a32 = this.high & 0xFFFF;
          var a16 = this.low >>> 16;
          var a00 = this.low & 0xFFFF;

          var b48 = addend.high >>> 16;
          var b32 = addend.high & 0xFFFF;
          var b16 = addend.low >>> 16;
          var b00 = addend.low & 0xFFFF;

          var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
          c00 += a00 + b00;
          c16 += c00 >>> 16;
          c00 &= 0xFFFF;
          c16 += a16 + b16;
          c32 += c16 >>> 16;
          c16 &= 0xFFFF;
          c32 += a32 + b32;
          c48 += c32 >>> 16;
          c32 &= 0xFFFF;
          c48 += a48 + b48;
          c48 &= 0xFFFF;
          return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
      };

      /**
       * Returns the difference of this and the specified Long.
       * @param {!Long|number|string} subtrahend Subtrahend
       * @returns {!Long} Difference
       */
      LongPrototype.subtract = function subtract(subtrahend) {
          if (!isLong(subtrahend))
              subtrahend = fromValue(subtrahend);
          return this.add(subtrahend.neg());
      };

      /**
       * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
       * @function
       * @param {!Long|number|string} subtrahend Subtrahend
       * @returns {!Long} Difference
       */
      LongPrototype.sub = LongPrototype.subtract;

      /**
       * Returns the product of this and the specified Long.
       * @param {!Long|number|string} multiplier Multiplier
       * @returns {!Long} Product
       */
      LongPrototype.multiply = function multiply(multiplier) {
          if (this.isZero())
              return ZERO;
          if (!isLong(multiplier))
              multiplier = fromValue(multiplier);
          if (multiplier.isZero())
              return ZERO;
          if (this.eq(MIN_VALUE))
              return multiplier.isOdd() ? MIN_VALUE : ZERO;
          if (multiplier.eq(MIN_VALUE))
              return this.isOdd() ? MIN_VALUE : ZERO;

          if (this.isNegative()) {
              if (multiplier.isNegative())
                  return this.neg().mul(multiplier.neg());
              else
                  return this.neg().mul(multiplier).neg();
          } else if (multiplier.isNegative())
              return this.mul(multiplier.neg()).neg();

          // If both longs are small, use float multiplication
          if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
              return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

          // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
          // We can skip products that would overflow.

          var a48 = this.high >>> 16;
          var a32 = this.high & 0xFFFF;
          var a16 = this.low >>> 16;
          var a00 = this.low & 0xFFFF;

          var b48 = multiplier.high >>> 16;
          var b32 = multiplier.high & 0xFFFF;
          var b16 = multiplier.low >>> 16;
          var b00 = multiplier.low & 0xFFFF;

          var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
          c00 += a00 * b00;
          c16 += c00 >>> 16;
          c00 &= 0xFFFF;
          c16 += a16 * b00;
          c32 += c16 >>> 16;
          c16 &= 0xFFFF;
          c16 += a00 * b16;
          c32 += c16 >>> 16;
          c16 &= 0xFFFF;
          c32 += a32 * b00;
          c48 += c32 >>> 16;
          c32 &= 0xFFFF;
          c32 += a16 * b16;
          c48 += c32 >>> 16;
          c32 &= 0xFFFF;
          c32 += a00 * b32;
          c48 += c32 >>> 16;
          c32 &= 0xFFFF;
          c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
          c48 &= 0xFFFF;
          return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
      };

      /**
       * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
       * @function
       * @param {!Long|number|string} multiplier Multiplier
       * @returns {!Long} Product
       */
      LongPrototype.mul = LongPrototype.multiply;

      /**
       * Returns this Long divided by the specified. The result is signed if this Long is signed or
       *  unsigned if this Long is unsigned.
       * @param {!Long|number|string} divisor Divisor
       * @returns {!Long} Quotient
       */
      LongPrototype.divide = function divide(divisor) {
          if (!isLong(divisor))
              divisor = fromValue(divisor);
          if (divisor.isZero())
              throw Error('division by zero');
          if (this.isZero())
              return this.unsigned ? UZERO : ZERO;
          var approx, rem, res;
          if (!this.unsigned) {
              // This section is only relevant for signed longs and is derived from the
              // closure library as a whole.
              if (this.eq(MIN_VALUE)) {
                  if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                      return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
                  else if (divisor.eq(MIN_VALUE))
                      return ONE;
                  else {
                      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                      var halfThis = this.shr(1);
                      approx = halfThis.div(divisor).shl(1);
                      if (approx.eq(ZERO)) {
                          return divisor.isNegative() ? ONE : NEG_ONE;
                      } else {
                          rem = this.sub(divisor.mul(approx));
                          res = approx.add(rem.div(divisor));
                          return res;
                      }
                  }
              } else if (divisor.eq(MIN_VALUE))
                  return this.unsigned ? UZERO : ZERO;
              if (this.isNegative()) {
                  if (divisor.isNegative())
                      return this.neg().div(divisor.neg());
                  return this.neg().div(divisor).neg();
              } else if (divisor.isNegative())
                  return this.div(divisor.neg()).neg();
              res = ZERO;
          } else {
              // The algorithm below has not been made for unsigned longs. It's therefore
              // required to take special care of the MSB prior to running it.
              if (!divisor.unsigned)
                  divisor = divisor.toUnsigned();
              if (divisor.gt(this))
                  return UZERO;
              if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
                  return UONE;
              res = UZERO;
          }

          // Repeat the following until the remainder is less than other:  find a
          // floating-point that approximates remainder / other *from below*, add this
          // into the result, and subtract it from the remainder.  It is critical that
          // the approximate value is less than or equal to the real value so that the
          // remainder never becomes negative.
          rem = this;
          while (rem.gte(divisor)) {
              // Approximate the result of division. This may be a little greater or
              // smaller than the actual value.
              approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

              // We will tweak the approximate result by changing it in the 48-th digit or
              // the smallest non-fractional digit, whichever is larger.
              var log2 = Math.ceil(Math.log(approx) / Math.LN2),
                  delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

              // Decrease the approximation until it is smaller than the remainder.  Note
              // that if it is too large, the product overflows and is negative.
                  approxRes = fromNumber(approx),
                  approxRem = approxRes.mul(divisor);
              while (approxRem.isNegative() || approxRem.gt(rem)) {
                  approx -= delta;
                  approxRes = fromNumber(approx, this.unsigned);
                  approxRem = approxRes.mul(divisor);
              }

              // We know the answer can't be zero... and actually, zero would cause
              // infinite recursion since we would make no progress.
              if (approxRes.isZero())
                  approxRes = ONE;

              res = res.add(approxRes);
              rem = rem.sub(approxRem);
          }
          return res;
      };

      /**
       * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
       * @function
       * @param {!Long|number|string} divisor Divisor
       * @returns {!Long} Quotient
       */
      LongPrototype.div = LongPrototype.divide;

      /**
       * Returns this Long modulo the specified.
       * @param {!Long|number|string} divisor Divisor
       * @returns {!Long} Remainder
       */
      LongPrototype.modulo = function modulo(divisor) {
          if (!isLong(divisor))
              divisor = fromValue(divisor);
          return this.sub(this.div(divisor).mul(divisor));
      };

      /**
       * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
       * @function
       * @param {!Long|number|string} divisor Divisor
       * @returns {!Long} Remainder
       */
      LongPrototype.mod = LongPrototype.modulo;

      /**
       * Returns the bitwise NOT of this Long.
       * @returns {!Long}
       */
      LongPrototype.not = function not() {
          return fromBits(~this.low, ~this.high, this.unsigned);
      };

      /**
       * Returns the bitwise AND of this Long and the specified.
       * @param {!Long|number|string} other Other Long
       * @returns {!Long}
       */
      LongPrototype.and = function and(other) {
          if (!isLong(other))
              other = fromValue(other);
          return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
      };

      /**
       * Returns the bitwise OR of this Long and the specified.
       * @param {!Long|number|string} other Other Long
       * @returns {!Long}
       */
      LongPrototype.or = function or(other) {
          if (!isLong(other))
              other = fromValue(other);
          return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
      };

      /**
       * Returns the bitwise XOR of this Long and the given one.
       * @param {!Long|number|string} other Other Long
       * @returns {!Long}
       */
      LongPrototype.xor = function xor(other) {
          if (!isLong(other))
              other = fromValue(other);
          return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
      };

      /**
       * Returns this Long with bits shifted to the left by the given amount.
       * @param {number|!Long} numBits Number of bits
       * @returns {!Long} Shifted Long
       */
      LongPrototype.shiftLeft = function shiftLeft(numBits) {
          if (isLong(numBits))
              numBits = numBits.toInt();
          if ((numBits &= 63) === 0)
              return this;
          else if (numBits < 32)
              return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
          else
              return fromBits(0, this.low << (numBits - 32), this.unsigned);
      };

      /**
       * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
       * @function
       * @param {number|!Long} numBits Number of bits
       * @returns {!Long} Shifted Long
       */
      LongPrototype.shl = LongPrototype.shiftLeft;

      /**
       * Returns this Long with bits arithmetically shifted to the right by the given amount.
       * @param {number|!Long} numBits Number of bits
       * @returns {!Long} Shifted Long
       */
      LongPrototype.shiftRight = function shiftRight(numBits) {
          if (isLong(numBits))
              numBits = numBits.toInt();
          if ((numBits &= 63) === 0)
              return this;
          else if (numBits < 32)
              return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
          else
              return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
      };

      /**
       * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
       * @function
       * @param {number|!Long} numBits Number of bits
       * @returns {!Long} Shifted Long
       */
      LongPrototype.shr = LongPrototype.shiftRight;

      /**
       * Returns this Long with bits logically shifted to the right by the given amount.
       * @param {number|!Long} numBits Number of bits
       * @returns {!Long} Shifted Long
       */
      LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
          if (isLong(numBits))
              numBits = numBits.toInt();
          numBits &= 63;
          if (numBits === 0)
              return this;
          else {
              var high = this.high;
              if (numBits < 32) {
                  var low = this.low;
                  return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
              } else if (numBits === 32)
                  return fromBits(high, 0, this.unsigned);
              else
                  return fromBits(high >>> (numBits - 32), 0, this.unsigned);
          }
      };

      /**
       * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
       * @function
       * @param {number|!Long} numBits Number of bits
       * @returns {!Long} Shifted Long
       */
      LongPrototype.shru = LongPrototype.shiftRightUnsigned;

      /**
       * Converts this Long to signed.
       * @returns {!Long} Signed long
       */
      LongPrototype.toSigned = function toSigned() {
          if (!this.unsigned)
              return this;
          return fromBits(this.low, this.high, false);
      };

      /**
       * Converts this Long to unsigned.
       * @returns {!Long} Unsigned long
       */
      LongPrototype.toUnsigned = function toUnsigned() {
          if (this.unsigned)
              return this;
          return fromBits(this.low, this.high, true);
      };

      /**
       * Converts this Long to its byte representation.
       * @param {boolean=} le Whether little or big endian, defaults to big endian
       * @returns {!Array.<number>} Byte representation
       */
      LongPrototype.toBytes = function(le) {
          return le ? this.toBytesLE() : this.toBytesBE();
      };

      /**
       * Converts this Long to its little endian byte representation.
       * @returns {!Array.<number>} Little endian byte representation
       */
      LongPrototype.toBytesLE = function() {
          var hi = this.high,
              lo = this.low;
          return [
               lo         & 0xff,
              (lo >>>  8) & 0xff,
              (lo >>> 16) & 0xff,
              (lo >>> 24) & 0xff,
               hi         & 0xff,
              (hi >>>  8) & 0xff,
              (hi >>> 16) & 0xff,
              (hi >>> 24) & 0xff
          ];
      };

      /**
       * Converts this Long to its big endian byte representation.
       * @returns {!Array.<number>} Big endian byte representation
       */
      LongPrototype.toBytesBE = function() {
          var hi = this.high,
              lo = this.low;
          return [
              (hi >>> 24) & 0xff,
              (hi >>> 16) & 0xff,
              (hi >>>  8) & 0xff,
               hi         & 0xff,
              (lo >>> 24) & 0xff,
              (lo >>> 16) & 0xff,
              (lo >>>  8) & 0xff,
               lo         & 0xff
          ];
      };

      return Long;
  });
  });

  var bytebuffer = createCommonjsModule(function (module) {
  /*
   Copyright 2013-2014 Daniel Wirtz <dcode@dcode.io>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   */

  /**
   * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
   * Backing buffer: ArrayBuffer, Accessor: Uint8Array
   * Released under the Apache License, Version 2.0
   * see: https://github.com/dcodeIO/bytebuffer.js for details
   */
  (function(global, factory) {

      /* AMD */ if (typeof commonjsRequire === 'function' && 'object' === "object" && module && module["exports"])
          module['exports'] = (function() {
              var Long; try { Long = long_1; } catch (e) {}
              return factory(Long);
          })();
      /* Global */ else
          (global["dcodeIO"] = global["dcodeIO"] || {})["ByteBuffer"] = factory(global["dcodeIO"]["Long"]);

  })(commonjsGlobal, function(Long) {

      /**
       * Constructs a new ByteBuffer.
       * @class The swiss army knife for binary data in JavaScript.
       * @exports ByteBuffer
       * @constructor
       * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
       * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
       *  {@link ByteBuffer.DEFAULT_ENDIAN}.
       * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
       *  {@link ByteBuffer.DEFAULT_NOASSERT}.
       * @expose
       */
      var ByteBuffer = function(capacity, littleEndian, noAssert) {
          if (typeof capacity === 'undefined')
              capacity = ByteBuffer.DEFAULT_CAPACITY;
          if (typeof littleEndian === 'undefined')
              littleEndian = ByteBuffer.DEFAULT_ENDIAN;
          if (typeof noAssert === 'undefined')
              noAssert = ByteBuffer.DEFAULT_NOASSERT;
          if (!noAssert) {
              capacity = capacity | 0;
              if (capacity < 0)
                  throw RangeError("Illegal capacity");
              littleEndian = !!littleEndian;
              noAssert = !!noAssert;
          }

          /**
           * Backing ArrayBuffer.
           * @type {!ArrayBuffer}
           * @expose
           */
          this.buffer = capacity === 0 ? EMPTY_BUFFER : new ArrayBuffer(capacity);

          /**
           * Uint8Array utilized to manipulate the backing buffer. Becomes `null` if the backing buffer has a capacity of `0`.
           * @type {?Uint8Array}
           * @expose
           */
          this.view = capacity === 0 ? null : new Uint8Array(this.buffer);

          /**
           * Absolute read/write offset.
           * @type {number}
           * @expose
           * @see ByteBuffer#flip
           * @see ByteBuffer#clear
           */
          this.offset = 0;

          /**
           * Marked offset.
           * @type {number}
           * @expose
           * @see ByteBuffer#mark
           * @see ByteBuffer#reset
           */
          this.markedOffset = -1;

          /**
           * Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.
           * @type {number}
           * @expose
           * @see ByteBuffer#flip
           * @see ByteBuffer#clear
           */
          this.limit = capacity;

          /**
           * Whether to use little endian byte order, defaults to `false` for big endian.
           * @type {boolean}
           * @expose
           */
          this.littleEndian = littleEndian;

          /**
           * Whether to skip assertions of offsets and values, defaults to `false`.
           * @type {boolean}
           * @expose
           */
          this.noAssert = noAssert;
      };

      /**
       * ByteBuffer version.
       * @type {string}
       * @const
       * @expose
       */
      ByteBuffer.VERSION = "5.0.1";

      /**
       * Little endian constant that can be used instead of its boolean value. Evaluates to `true`.
       * @type {boolean}
       * @const
       * @expose
       */
      ByteBuffer.LITTLE_ENDIAN = true;

      /**
       * Big endian constant that can be used instead of its boolean value. Evaluates to `false`.
       * @type {boolean}
       * @const
       * @expose
       */
      ByteBuffer.BIG_ENDIAN = false;

      /**
       * Default initial capacity of `16`.
       * @type {number}
       * @expose
       */
      ByteBuffer.DEFAULT_CAPACITY = 16;

      /**
       * Default endianess of `false` for big endian.
       * @type {boolean}
       * @expose
       */
      ByteBuffer.DEFAULT_ENDIAN = ByteBuffer.BIG_ENDIAN;

      /**
       * Default no assertions flag of `false`.
       * @type {boolean}
       * @expose
       */
      ByteBuffer.DEFAULT_NOASSERT = false;

      /**
       * A `Long` class for representing a 64-bit two's-complement integer value. May be `null` if Long.js has not been loaded
       *  and int64 support is not available.
       * @type {?Long}
       * @const
       * @see https://github.com/dcodeIO/long.js
       * @expose
       */
      ByteBuffer.Long = Long || null;

      /**
       * @alias ByteBuffer.prototype
       * @inner
       */
      var ByteBufferPrototype = ByteBuffer.prototype;

      /**
       * An indicator used to reliably determine if an object is a ByteBuffer or not.
       * @type {boolean}
       * @const
       * @expose
       * @private
       */
      ByteBufferPrototype.__isByteBuffer__;

      Object.defineProperty(ByteBufferPrototype, "__isByteBuffer__", {
          value: true,
          enumerable: false,
          configurable: false
      });

      // helpers

      /**
       * @type {!ArrayBuffer}
       * @inner
       */
      var EMPTY_BUFFER = new ArrayBuffer(0);

      /**
       * String.fromCharCode reference for compile-time renaming.
       * @type {function(...number):string}
       * @inner
       */
      var stringFromCharCode = String.fromCharCode;

      /**
       * Creates a source function for a string.
       * @param {string} s String to read from
       * @returns {function():number|null} Source function returning the next char code respectively `null` if there are
       *  no more characters left.
       * @throws {TypeError} If the argument is invalid
       * @inner
       */
      function stringSource(s) {
          var i=0; return function() {
              return i < s.length ? s.charCodeAt(i++) : null;
          };
      }

      /**
       * Creates a destination function for a string.
       * @returns {function(number=):undefined|string} Destination function successively called with the next char code.
       *  Returns the final string when called without arguments.
       * @inner
       */
      function stringDestination() {
          var cs = [], ps = []; return function() {
              if (arguments.length === 0)
                  return ps.join('')+stringFromCharCode.apply(String, cs);
              if (cs.length + arguments.length > 1024)
                  ps.push(stringFromCharCode.apply(String, cs)),
                      cs.length = 0;
              Array.prototype.push.apply(cs, arguments);
          };
      }

      /**
       * Gets the accessor type.
       * @returns {Function} `Buffer` under node.js, `Uint8Array` respectively `DataView` in the browser (classes)
       * @expose
       */
      ByteBuffer.accessor = function() {
          return Uint8Array;
      };
      /**
       * Allocates a new ByteBuffer backed by a buffer of the specified capacity.
       * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
       * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
       *  {@link ByteBuffer.DEFAULT_ENDIAN}.
       * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
       *  {@link ByteBuffer.DEFAULT_NOASSERT}.
       * @returns {!ByteBuffer}
       * @expose
       */
      ByteBuffer.allocate = function(capacity, littleEndian, noAssert) {
          return new ByteBuffer(capacity, littleEndian, noAssert);
      };

      /**
       * Concatenates multiple ByteBuffers into one.
       * @param {!Array.<!ByteBuffer|!ArrayBuffer|!Uint8Array|string>} buffers Buffers to concatenate
       * @param {(string|boolean)=} encoding String encoding if `buffers` contains a string ("base64", "hex", "binary",
       *  defaults to "utf8")
       * @param {boolean=} littleEndian Whether to use little or big endian byte order for the resulting ByteBuffer. Defaults
       *  to {@link ByteBuffer.DEFAULT_ENDIAN}.
       * @param {boolean=} noAssert Whether to skip assertions of offsets and values for the resulting ByteBuffer. Defaults to
       *  {@link ByteBuffer.DEFAULT_NOASSERT}.
       * @returns {!ByteBuffer} Concatenated ByteBuffer
       * @expose
       */
      ByteBuffer.concat = function(buffers, encoding, littleEndian, noAssert) {
          if (typeof encoding === 'boolean' || typeof encoding !== 'string') {
              noAssert = littleEndian;
              littleEndian = encoding;
              encoding = undefined;
          }
          var capacity = 0;
          for (var i=0, k=buffers.length, length; i<k; ++i) {
              if (!ByteBuffer.isByteBuffer(buffers[i]))
                  buffers[i] = ByteBuffer.wrap(buffers[i], encoding);
              length = buffers[i].limit - buffers[i].offset;
              if (length > 0) capacity += length;
          }
          if (capacity === 0)
              return new ByteBuffer(0, littleEndian, noAssert);
          var bb = new ByteBuffer(capacity, littleEndian, noAssert),
              bi;
          i=0; while (i<k) {
              bi = buffers[i++];
              length = bi.limit - bi.offset;
              if (length <= 0) continue;
              bb.view.set(bi.view.subarray(bi.offset, bi.limit), bb.offset);
              bb.offset += length;
          }
          bb.limit = bb.offset;
          bb.offset = 0;
          return bb;
      };

      /**
       * Tests if the specified type is a ByteBuffer.
       * @param {*} bb ByteBuffer to test
       * @returns {boolean} `true` if it is a ByteBuffer, otherwise `false`
       * @expose
       */
      ByteBuffer.isByteBuffer = function(bb) {
          return (bb && bb["__isByteBuffer__"]) === true;
      };
      /**
       * Gets the backing buffer type.
       * @returns {Function} `Buffer` under node.js, `ArrayBuffer` in the browser (classes)
       * @expose
       */
      ByteBuffer.type = function() {
          return ArrayBuffer;
      };
      /**
       * Wraps a buffer or a string. Sets the allocated ByteBuffer's {@link ByteBuffer#offset} to `0` and its
       *  {@link ByteBuffer#limit} to the length of the wrapped data.
       * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string|!Array.<number>} buffer Anything that can be wrapped
       * @param {(string|boolean)=} encoding String encoding if `buffer` is a string ("base64", "hex", "binary", defaults to
       *  "utf8")
       * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
       *  {@link ByteBuffer.DEFAULT_ENDIAN}.
       * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
       *  {@link ByteBuffer.DEFAULT_NOASSERT}.
       * @returns {!ByteBuffer} A ByteBuffer wrapping `buffer`
       * @expose
       */
      ByteBuffer.wrap = function(buffer, encoding, littleEndian, noAssert) {
          if (typeof encoding !== 'string') {
              noAssert = littleEndian;
              littleEndian = encoding;
              encoding = undefined;
          }
          if (typeof buffer === 'string') {
              if (typeof encoding === 'undefined')
                  encoding = "utf8";
              switch (encoding) {
                  case "base64":
                      return ByteBuffer.fromBase64(buffer, littleEndian);
                  case "hex":
                      return ByteBuffer.fromHex(buffer, littleEndian);
                  case "binary":
                      return ByteBuffer.fromBinary(buffer, littleEndian);
                  case "utf8":
                      return ByteBuffer.fromUTF8(buffer, littleEndian);
                  case "debug":
                      return ByteBuffer.fromDebug(buffer, littleEndian);
                  default:
                      throw Error("Unsupported encoding: "+encoding);
              }
          }
          if (buffer === null || typeof buffer !== 'object')
              throw TypeError("Illegal buffer");
          var bb;
          if (ByteBuffer.isByteBuffer(buffer)) {
              bb = ByteBufferPrototype.clone.call(buffer);
              bb.markedOffset = -1;
              return bb;
          }
          if (buffer instanceof Uint8Array) { // Extract ArrayBuffer from Uint8Array
              bb = new ByteBuffer(0, littleEndian, noAssert);
              if (buffer.length > 0) { // Avoid references to more than one EMPTY_BUFFER
                  bb.buffer = buffer.buffer;
                  bb.offset = buffer.byteOffset;
                  bb.limit = buffer.byteOffset + buffer.byteLength;
                  bb.view = new Uint8Array(buffer.buffer);
              }
          } else if (buffer instanceof ArrayBuffer) { // Reuse ArrayBuffer
              bb = new ByteBuffer(0, littleEndian, noAssert);
              if (buffer.byteLength > 0) {
                  bb.buffer = buffer;
                  bb.offset = 0;
                  bb.limit = buffer.byteLength;
                  bb.view = buffer.byteLength > 0 ? new Uint8Array(buffer) : null;
              }
          } else if (Object.prototype.toString.call(buffer) === "[object Array]") { // Create from octets
              bb = new ByteBuffer(buffer.length, littleEndian, noAssert);
              bb.limit = buffer.length;
              for (var i=0; i<buffer.length; ++i)
                  bb.view[i] = buffer[i];
          } else
              throw TypeError("Illegal buffer"); // Otherwise fail
          return bb;
      };

      /**
       * Writes the array as a bitset.
       * @param {Array<boolean>} value Array of booleans to write
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
       * @returns {!ByteBuffer}
       * @expose
       */
      ByteBufferPrototype.writeBitSet = function(value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;
        if (!this.noAssert) {
          if (!(value instanceof Array))
            throw TypeError("Illegal BitSet: Not an array");
          if (typeof offset !== 'number' || offset % 1 !== 0)
              throw TypeError("Illegal offset: "+offset+" (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
        }

        var start = offset,
            bits = value.length,
            bytes = (bits >> 3),
            bit = 0,
            k;

        offset += this.writeVarint32(bits,offset);

        while(bytes--) {
          k = (!!value[bit++] & 1) |
              ((!!value[bit++] & 1) << 1) |
              ((!!value[bit++] & 1) << 2) |
              ((!!value[bit++] & 1) << 3) |
              ((!!value[bit++] & 1) << 4) |
              ((!!value[bit++] & 1) << 5) |
              ((!!value[bit++] & 1) << 6) |
              ((!!value[bit++] & 1) << 7);
          this.writeByte(k,offset++);
        }

        if(bit < bits) {
          var m = 0; k = 0;
          while(bit < bits) k = k | ((!!value[bit++] & 1) << (m++));
          this.writeByte(k,offset++);
        }

        if (relative) {
          this.offset = offset;
          return this;
        }
        return offset - start;
      };

      /**
       * Reads a BitSet as an array of booleans.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
       * @returns {Array<boolean>
       * @expose
       */
      ByteBufferPrototype.readBitSet = function(offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;

        var ret = this.readVarint32(offset),
            bits = ret.value,
            bytes = (bits >> 3),
            bit = 0,
            value = [],
            k;

        offset += ret.length;

        while(bytes--) {
          k = this.readByte(offset++);
          value[bit++] = !!(k & 0x01);
          value[bit++] = !!(k & 0x02);
          value[bit++] = !!(k & 0x04);
          value[bit++] = !!(k & 0x08);
          value[bit++] = !!(k & 0x10);
          value[bit++] = !!(k & 0x20);
          value[bit++] = !!(k & 0x40);
          value[bit++] = !!(k & 0x80);
        }

        if(bit < bits) {
          var m = 0;
          k = this.readByte(offset++);
          while(bit < bits) value[bit++] = !!((k >> (m++)) & 1);
        }

        if (relative) {
          this.offset = offset;
        }
        return value;
      };
      /**
       * Reads the specified number of bytes.
       * @param {number} length Number of bytes to read
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
       * @returns {!ByteBuffer}
       * @expose
       */
      ByteBufferPrototype.readBytes = function(length, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + length > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+length+") <= "+this.buffer.byteLength);
          }
          var slice = this.slice(offset, offset + length);
          if (relative) this.offset += length;
          return slice;
      };

      /**
       * Writes a payload of bytes. This is an alias of {@link ByteBuffer#append}.
       * @function
       * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to write. If `source` is a ByteBuffer, its offsets
       *  will be modified according to the performed read operation.
       * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  written if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.writeBytes = ByteBufferPrototype.append;

      // types/ints/int8

      /**
       * Writes an 8bit signed integer.
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.writeInt8 = function(value, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof value !== 'number' || value % 1 !== 0)
                  throw TypeError("Illegal value: "+value+" (not an integer)");
              value |= 0;
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          offset += 1;
          var capacity0 = this.buffer.byteLength;
          if (offset > capacity0)
              this.resize((capacity0 *= 2) > offset ? capacity0 : offset);
          offset -= 1;
          this.view[offset] = value;
          if (relative) this.offset += 1;
          return this;
      };

      /**
       * Writes an 8bit signed integer. This is an alias of {@link ByteBuffer#writeInt8}.
       * @function
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.writeByte = ByteBufferPrototype.writeInt8;

      /**
       * Reads an 8bit signed integer.
       * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
       * @returns {number} Value read
       * @expose
       */
      ByteBufferPrototype.readInt8 = function(offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 1 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
          }
          var value = this.view[offset];
          if ((value & 0x80) === 0x80) value = -(0xFF - value + 1); // Cast to signed
          if (relative) this.offset += 1;
          return value;
      };

      /**
       * Reads an 8bit signed integer. This is an alias of {@link ByteBuffer#readInt8}.
       * @function
       * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
       * @returns {number} Value read
       * @expose
       */
      ByteBufferPrototype.readByte = ByteBufferPrototype.readInt8;

      /**
       * Writes an 8bit unsigned integer.
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.writeUint8 = function(value, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof value !== 'number' || value % 1 !== 0)
                  throw TypeError("Illegal value: "+value+" (not an integer)");
              value >>>= 0;
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          offset += 1;
          var capacity1 = this.buffer.byteLength;
          if (offset > capacity1)
              this.resize((capacity1 *= 2) > offset ? capacity1 : offset);
          offset -= 1;
          this.view[offset] = value;
          if (relative) this.offset += 1;
          return this;
      };

      /**
       * Writes an 8bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint8}.
       * @function
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.writeUInt8 = ByteBufferPrototype.writeUint8;

      /**
       * Reads an 8bit unsigned integer.
       * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
       * @returns {number} Value read
       * @expose
       */
      ByteBufferPrototype.readUint8 = function(offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 1 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
          }
          var value = this.view[offset];
          if (relative) this.offset += 1;
          return value;
      };

      /**
       * Reads an 8bit unsigned integer. This is an alias of {@link ByteBuffer#readUint8}.
       * @function
       * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
       * @returns {number} Value read
       * @expose
       */
      ByteBufferPrototype.readUInt8 = ByteBufferPrototype.readUint8;

      // types/ints/int16

      /**
       * Writes a 16bit signed integer.
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
       * @throws {TypeError} If `offset` or `value` is not a valid number
       * @throws {RangeError} If `offset` is out of bounds
       * @expose
       */
      ByteBufferPrototype.writeInt16 = function(value, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof value !== 'number' || value % 1 !== 0)
                  throw TypeError("Illegal value: "+value+" (not an integer)");
              value |= 0;
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          offset += 2;
          var capacity2 = this.buffer.byteLength;
          if (offset > capacity2)
              this.resize((capacity2 *= 2) > offset ? capacity2 : offset);
          offset -= 2;
          if (this.littleEndian) {
              this.view[offset+1] = (value & 0xFF00) >>> 8;
              this.view[offset  ] =  value & 0x00FF;
          } else {
              this.view[offset]   = (value & 0xFF00) >>> 8;
              this.view[offset+1] =  value & 0x00FF;
          }
          if (relative) this.offset += 2;
          return this;
      };

      /**
       * Writes a 16bit signed integer. This is an alias of {@link ByteBuffer#writeInt16}.
       * @function
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
       * @throws {TypeError} If `offset` or `value` is not a valid number
       * @throws {RangeError} If `offset` is out of bounds
       * @expose
       */
      ByteBufferPrototype.writeShort = ByteBufferPrototype.writeInt16;

      /**
       * Reads a 16bit signed integer.
       * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
       * @returns {number} Value read
       * @throws {TypeError} If `offset` is not a valid number
       * @throws {RangeError} If `offset` is out of bounds
       * @expose
       */
      ByteBufferPrototype.readInt16 = function(offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 2 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+2+") <= "+this.buffer.byteLength);
          }
          var value = 0;
          if (this.littleEndian) {
              value  = this.view[offset  ];
              value |= this.view[offset+1] << 8;
          } else {
              value  = this.view[offset  ] << 8;
              value |= this.view[offset+1];
          }
          if ((value & 0x8000) === 0x8000) value = -(0xFFFF - value + 1); // Cast to signed
          if (relative) this.offset += 2;
          return value;
      };

      /**
       * Reads a 16bit signed integer. This is an alias of {@link ByteBuffer#readInt16}.
       * @function
       * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
       * @returns {number} Value read
       * @throws {TypeError} If `offset` is not a valid number
       * @throws {RangeError} If `offset` is out of bounds
       * @expose
       */
      ByteBufferPrototype.readShort = ByteBufferPrototype.readInt16;

      /**
       * Writes a 16bit unsigned integer.
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
       * @throws {TypeError} If `offset` or `value` is not a valid number
       * @throws {RangeError} If `offset` is out of bounds
       * @expose
       */
      ByteBufferPrototype.writeUint16 = function(value, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof value !== 'number' || value % 1 !== 0)
                  throw TypeError("Illegal value: "+value+" (not an integer)");
              value >>>= 0;
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          offset += 2;
          var capacity3 = this.buffer.byteLength;
          if (offset > capacity3)
              this.resize((capacity3 *= 2) > offset ? capacity3 : offset);
          offset -= 2;
          if (this.littleEndian) {
              this.view[offset+1] = (value & 0xFF00) >>> 8;
              this.view[offset  ] =  value & 0x00FF;
          } else {
              this.view[offset]   = (value & 0xFF00) >>> 8;
              this.view[offset+1] =  value & 0x00FF;
          }
          if (relative) this.offset += 2;
          return this;
      };

      /**
       * Writes a 16bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint16}.
       * @function
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
       * @throws {TypeError} If `offset` or `value` is not a valid number
       * @throws {RangeError} If `offset` is out of bounds
       * @expose
       */
      ByteBufferPrototype.writeUInt16 = ByteBufferPrototype.writeUint16;

      /**
       * Reads a 16bit unsigned integer.
       * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
       * @returns {number} Value read
       * @throws {TypeError} If `offset` is not a valid number
       * @throws {RangeError} If `offset` is out of bounds
       * @expose
       */
      ByteBufferPrototype.readUint16 = function(offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 2 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+2+") <= "+this.buffer.byteLength);
          }
          var value = 0;
          if (this.littleEndian) {
              value  = this.view[offset  ];
              value |= this.view[offset+1] << 8;
          } else {
              value  = this.view[offset  ] << 8;
              value |= this.view[offset+1];
          }
          if (relative) this.offset += 2;
          return value;
      };

      /**
       * Reads a 16bit unsigned integer. This is an alias of {@link ByteBuffer#readUint16}.
       * @function
       * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
       * @returns {number} Value read
       * @throws {TypeError} If `offset` is not a valid number
       * @throws {RangeError} If `offset` is out of bounds
       * @expose
       */
      ByteBufferPrototype.readUInt16 = ByteBufferPrototype.readUint16;

      // types/ints/int32

      /**
       * Writes a 32bit signed integer.
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
       * @expose
       */
      ByteBufferPrototype.writeInt32 = function(value, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof value !== 'number' || value % 1 !== 0)
                  throw TypeError("Illegal value: "+value+" (not an integer)");
              value |= 0;
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          offset += 4;
          var capacity4 = this.buffer.byteLength;
          if (offset > capacity4)
              this.resize((capacity4 *= 2) > offset ? capacity4 : offset);
          offset -= 4;
          if (this.littleEndian) {
              this.view[offset+3] = (value >>> 24) & 0xFF;
              this.view[offset+2] = (value >>> 16) & 0xFF;
              this.view[offset+1] = (value >>>  8) & 0xFF;
              this.view[offset  ] =  value         & 0xFF;
          } else {
              this.view[offset  ] = (value >>> 24) & 0xFF;
              this.view[offset+1] = (value >>> 16) & 0xFF;
              this.view[offset+2] = (value >>>  8) & 0xFF;
              this.view[offset+3] =  value         & 0xFF;
          }
          if (relative) this.offset += 4;
          return this;
      };

      /**
       * Writes a 32bit signed integer. This is an alias of {@link ByteBuffer#writeInt32}.
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
       * @expose
       */
      ByteBufferPrototype.writeInt = ByteBufferPrototype.writeInt32;

      /**
       * Reads a 32bit signed integer.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
       * @returns {number} Value read
       * @expose
       */
      ByteBufferPrototype.readInt32 = function(offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 4 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
          }
          var value = 0;
          if (this.littleEndian) {
              value  = this.view[offset+2] << 16;
              value |= this.view[offset+1] <<  8;
              value |= this.view[offset  ];
              value += this.view[offset+3] << 24 >>> 0;
          } else {
              value  = this.view[offset+1] << 16;
              value |= this.view[offset+2] <<  8;
              value |= this.view[offset+3];
              value += this.view[offset  ] << 24 >>> 0;
          }
          value |= 0; // Cast to signed
          if (relative) this.offset += 4;
          return value;
      };

      /**
       * Reads a 32bit signed integer. This is an alias of {@link ByteBuffer#readInt32}.
       * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `4` if omitted.
       * @returns {number} Value read
       * @expose
       */
      ByteBufferPrototype.readInt = ByteBufferPrototype.readInt32;

      /**
       * Writes a 32bit unsigned integer.
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
       * @expose
       */
      ByteBufferPrototype.writeUint32 = function(value, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof value !== 'number' || value % 1 !== 0)
                  throw TypeError("Illegal value: "+value+" (not an integer)");
              value >>>= 0;
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          offset += 4;
          var capacity5 = this.buffer.byteLength;
          if (offset > capacity5)
              this.resize((capacity5 *= 2) > offset ? capacity5 : offset);
          offset -= 4;
          if (this.littleEndian) {
              this.view[offset+3] = (value >>> 24) & 0xFF;
              this.view[offset+2] = (value >>> 16) & 0xFF;
              this.view[offset+1] = (value >>>  8) & 0xFF;
              this.view[offset  ] =  value         & 0xFF;
          } else {
              this.view[offset  ] = (value >>> 24) & 0xFF;
              this.view[offset+1] = (value >>> 16) & 0xFF;
              this.view[offset+2] = (value >>>  8) & 0xFF;
              this.view[offset+3] =  value         & 0xFF;
          }
          if (relative) this.offset += 4;
          return this;
      };

      /**
       * Writes a 32bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint32}.
       * @function
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
       * @expose
       */
      ByteBufferPrototype.writeUInt32 = ByteBufferPrototype.writeUint32;

      /**
       * Reads a 32bit unsigned integer.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
       * @returns {number} Value read
       * @expose
       */
      ByteBufferPrototype.readUint32 = function(offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 4 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
          }
          var value = 0;
          if (this.littleEndian) {
              value  = this.view[offset+2] << 16;
              value |= this.view[offset+1] <<  8;
              value |= this.view[offset  ];
              value += this.view[offset+3] << 24 >>> 0;
          } else {
              value  = this.view[offset+1] << 16;
              value |= this.view[offset+2] <<  8;
              value |= this.view[offset+3];
              value += this.view[offset  ] << 24 >>> 0;
          }
          if (relative) this.offset += 4;
          return value;
      };

      /**
       * Reads a 32bit unsigned integer. This is an alias of {@link ByteBuffer#readUint32}.
       * @function
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
       * @returns {number} Value read
       * @expose
       */
      ByteBufferPrototype.readUInt32 = ByteBufferPrototype.readUint32;

      // types/ints/int64

      if (Long) {

          /**
           * Writes a 64bit signed integer.
           * @param {number|!Long} value Value to write
           * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
           * @returns {!ByteBuffer} this
           * @expose
           */
          ByteBufferPrototype.writeInt64 = function(value, offset) {
              var relative = typeof offset === 'undefined';
              if (relative) offset = this.offset;
              if (!this.noAssert) {
                  if (typeof value === 'number')
                      value = Long.fromNumber(value);
                  else if (typeof value === 'string')
                      value = Long.fromString(value);
                  else if (!(value && value instanceof Long))
                      throw TypeError("Illegal value: "+value+" (not an integer or Long)");
                  if (typeof offset !== 'number' || offset % 1 !== 0)
                      throw TypeError("Illegal offset: "+offset+" (not an integer)");
                  offset >>>= 0;
                  if (offset < 0 || offset + 0 > this.buffer.byteLength)
                      throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
              }
              if (typeof value === 'number')
                  value = Long.fromNumber(value);
              else if (typeof value === 'string')
                  value = Long.fromString(value);
              offset += 8;
              var capacity6 = this.buffer.byteLength;
              if (offset > capacity6)
                  this.resize((capacity6 *= 2) > offset ? capacity6 : offset);
              offset -= 8;
              var lo = value.low,
                  hi = value.high;
              if (this.littleEndian) {
                  this.view[offset+3] = (lo >>> 24) & 0xFF;
                  this.view[offset+2] = (lo >>> 16) & 0xFF;
                  this.view[offset+1] = (lo >>>  8) & 0xFF;
                  this.view[offset  ] =  lo         & 0xFF;
                  offset += 4;
                  this.view[offset+3] = (hi >>> 24) & 0xFF;
                  this.view[offset+2] = (hi >>> 16) & 0xFF;
                  this.view[offset+1] = (hi >>>  8) & 0xFF;
                  this.view[offset  ] =  hi         & 0xFF;
              } else {
                  this.view[offset  ] = (hi >>> 24) & 0xFF;
                  this.view[offset+1] = (hi >>> 16) & 0xFF;
                  this.view[offset+2] = (hi >>>  8) & 0xFF;
                  this.view[offset+3] =  hi         & 0xFF;
                  offset += 4;
                  this.view[offset  ] = (lo >>> 24) & 0xFF;
                  this.view[offset+1] = (lo >>> 16) & 0xFF;
                  this.view[offset+2] = (lo >>>  8) & 0xFF;
                  this.view[offset+3] =  lo         & 0xFF;
              }
              if (relative) this.offset += 8;
              return this;
          };

          /**
           * Writes a 64bit signed integer. This is an alias of {@link ByteBuffer#writeInt64}.
           * @param {number|!Long} value Value to write
           * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
           * @returns {!ByteBuffer} this
           * @expose
           */
          ByteBufferPrototype.writeLong = ByteBufferPrototype.writeInt64;

          /**
           * Reads a 64bit signed integer.
           * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
           * @returns {!Long}
           * @expose
           */
          ByteBufferPrototype.readInt64 = function(offset) {
              var relative = typeof offset === 'undefined';
              if (relative) offset = this.offset;
              if (!this.noAssert) {
                  if (typeof offset !== 'number' || offset % 1 !== 0)
                      throw TypeError("Illegal offset: "+offset+" (not an integer)");
                  offset >>>= 0;
                  if (offset < 0 || offset + 8 > this.buffer.byteLength)
                      throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
              }
              var lo = 0,
                  hi = 0;
              if (this.littleEndian) {
                  lo  = this.view[offset+2] << 16;
                  lo |= this.view[offset+1] <<  8;
                  lo |= this.view[offset  ];
                  lo += this.view[offset+3] << 24 >>> 0;
                  offset += 4;
                  hi  = this.view[offset+2] << 16;
                  hi |= this.view[offset+1] <<  8;
                  hi |= this.view[offset  ];
                  hi += this.view[offset+3] << 24 >>> 0;
              } else {
                  hi  = this.view[offset+1] << 16;
                  hi |= this.view[offset+2] <<  8;
                  hi |= this.view[offset+3];
                  hi += this.view[offset  ] << 24 >>> 0;
                  offset += 4;
                  lo  = this.view[offset+1] << 16;
                  lo |= this.view[offset+2] <<  8;
                  lo |= this.view[offset+3];
                  lo += this.view[offset  ] << 24 >>> 0;
              }
              var value = new Long(lo, hi, false);
              if (relative) this.offset += 8;
              return value;
          };

          /**
           * Reads a 64bit signed integer. This is an alias of {@link ByteBuffer#readInt64}.
           * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
           * @returns {!Long}
           * @expose
           */
          ByteBufferPrototype.readLong = ByteBufferPrototype.readInt64;

          /**
           * Writes a 64bit unsigned integer.
           * @param {number|!Long} value Value to write
           * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
           * @returns {!ByteBuffer} this
           * @expose
           */
          ByteBufferPrototype.writeUint64 = function(value, offset) {
              var relative = typeof offset === 'undefined';
              if (relative) offset = this.offset;
              if (!this.noAssert) {
                  if (typeof value === 'number')
                      value = Long.fromNumber(value);
                  else if (typeof value === 'string')
                      value = Long.fromString(value);
                  else if (!(value && value instanceof Long))
                      throw TypeError("Illegal value: "+value+" (not an integer or Long)");
                  if (typeof offset !== 'number' || offset % 1 !== 0)
                      throw TypeError("Illegal offset: "+offset+" (not an integer)");
                  offset >>>= 0;
                  if (offset < 0 || offset + 0 > this.buffer.byteLength)
                      throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
              }
              if (typeof value === 'number')
                  value = Long.fromNumber(value);
              else if (typeof value === 'string')
                  value = Long.fromString(value);
              offset += 8;
              var capacity7 = this.buffer.byteLength;
              if (offset > capacity7)
                  this.resize((capacity7 *= 2) > offset ? capacity7 : offset);
              offset -= 8;
              var lo = value.low,
                  hi = value.high;
              if (this.littleEndian) {
                  this.view[offset+3] = (lo >>> 24) & 0xFF;
                  this.view[offset+2] = (lo >>> 16) & 0xFF;
                  this.view[offset+1] = (lo >>>  8) & 0xFF;
                  this.view[offset  ] =  lo         & 0xFF;
                  offset += 4;
                  this.view[offset+3] = (hi >>> 24) & 0xFF;
                  this.view[offset+2] = (hi >>> 16) & 0xFF;
                  this.view[offset+1] = (hi >>>  8) & 0xFF;
                  this.view[offset  ] =  hi         & 0xFF;
              } else {
                  this.view[offset  ] = (hi >>> 24) & 0xFF;
                  this.view[offset+1] = (hi >>> 16) & 0xFF;
                  this.view[offset+2] = (hi >>>  8) & 0xFF;
                  this.view[offset+3] =  hi         & 0xFF;
                  offset += 4;
                  this.view[offset  ] = (lo >>> 24) & 0xFF;
                  this.view[offset+1] = (lo >>> 16) & 0xFF;
                  this.view[offset+2] = (lo >>>  8) & 0xFF;
                  this.view[offset+3] =  lo         & 0xFF;
              }
              if (relative) this.offset += 8;
              return this;
          };

          /**
           * Writes a 64bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint64}.
           * @function
           * @param {number|!Long} value Value to write
           * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
           * @returns {!ByteBuffer} this
           * @expose
           */
          ByteBufferPrototype.writeUInt64 = ByteBufferPrototype.writeUint64;

          /**
           * Reads a 64bit unsigned integer.
           * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
           * @returns {!Long}
           * @expose
           */
          ByteBufferPrototype.readUint64 = function(offset) {
              var relative = typeof offset === 'undefined';
              if (relative) offset = this.offset;
              if (!this.noAssert) {
                  if (typeof offset !== 'number' || offset % 1 !== 0)
                      throw TypeError("Illegal offset: "+offset+" (not an integer)");
                  offset >>>= 0;
                  if (offset < 0 || offset + 8 > this.buffer.byteLength)
                      throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
              }
              var lo = 0,
                  hi = 0;
              if (this.littleEndian) {
                  lo  = this.view[offset+2] << 16;
                  lo |= this.view[offset+1] <<  8;
                  lo |= this.view[offset  ];
                  lo += this.view[offset+3] << 24 >>> 0;
                  offset += 4;
                  hi  = this.view[offset+2] << 16;
                  hi |= this.view[offset+1] <<  8;
                  hi |= this.view[offset  ];
                  hi += this.view[offset+3] << 24 >>> 0;
              } else {
                  hi  = this.view[offset+1] << 16;
                  hi |= this.view[offset+2] <<  8;
                  hi |= this.view[offset+3];
                  hi += this.view[offset  ] << 24 >>> 0;
                  offset += 4;
                  lo  = this.view[offset+1] << 16;
                  lo |= this.view[offset+2] <<  8;
                  lo |= this.view[offset+3];
                  lo += this.view[offset  ] << 24 >>> 0;
              }
              var value = new Long(lo, hi, true);
              if (relative) this.offset += 8;
              return value;
          };

          /**
           * Reads a 64bit unsigned integer. This is an alias of {@link ByteBuffer#readUint64}.
           * @function
           * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
           * @returns {!Long}
           * @expose
           */
          ByteBufferPrototype.readUInt64 = ByteBufferPrototype.readUint64;

      } // Long


      // types/floats/float32

      /*
       ieee754 - https://github.com/feross/ieee754

       The MIT License (MIT)

       Copyright (c) Feross Aboukhadijeh

       Permission is hereby granted, free of charge, to any person obtaining a copy
       of this software and associated documentation files (the "Software"), to deal
       in the Software without restriction, including without limitation the rights
       to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       copies of the Software, and to permit persons to whom the Software is
       furnished to do so, subject to the following conditions:

       The above copyright notice and this permission notice shall be included in
       all copies or substantial portions of the Software.

       THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
       THE SOFTWARE.
      */

      /**
       * Reads an IEEE754 float from a byte array.
       * @param {!Array} buffer
       * @param {number} offset
       * @param {boolean} isLE
       * @param {number} mLen
       * @param {number} nBytes
       * @returns {number}
       * @inner
       */
      function ieee754_read(buffer, offset, isLE, mLen, nBytes) {
          var e, m,
              eLen = nBytes * 8 - mLen - 1,
              eMax = (1 << eLen) - 1,
              eBias = eMax >> 1,
              nBits = -7,
              i = isLE ? (nBytes - 1) : 0,
              d = isLE ? -1 : 1,
              s = buffer[offset + i];

          i += d;

          e = s & ((1 << (-nBits)) - 1);
          s >>= (-nBits);
          nBits += eLen;
          for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

          m = e & ((1 << (-nBits)) - 1);
          e >>= (-nBits);
          nBits += mLen;
          for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

          if (e === 0) {
              e = 1 - eBias;
          } else if (e === eMax) {
              return m ? NaN : ((s ? -1 : 1) * Infinity);
          } else {
              m = m + Math.pow(2, mLen);
              e = e - eBias;
          }
          return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      }

      /**
       * Writes an IEEE754 float to a byte array.
       * @param {!Array} buffer
       * @param {number} value
       * @param {number} offset
       * @param {boolean} isLE
       * @param {number} mLen
       * @param {number} nBytes
       * @inner
       */
      function ieee754_write(buffer, value, offset, isLE, mLen, nBytes) {
          var e, m, c,
              eLen = nBytes * 8 - mLen - 1,
              eMax = (1 << eLen) - 1,
              eBias = eMax >> 1,
              rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
              i = isLE ? 0 : (nBytes - 1),
              d = isLE ? 1 : -1,
              s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

          value = Math.abs(value);

          if (isNaN(value) || value === Infinity) {
              m = isNaN(value) ? 1 : 0;
              e = eMax;
          } else {
              e = Math.floor(Math.log(value) / Math.LN2);
              if (value * (c = Math.pow(2, -e)) < 1) {
                  e--;
                  c *= 2;
              }
              if (e + eBias >= 1) {
                  value += rt / c;
              } else {
                  value += rt * Math.pow(2, 1 - eBias);
              }
              if (value * c >= 2) {
                  e++;
                  c /= 2;
              }

              if (e + eBias >= eMax) {
                  m = 0;
                  e = eMax;
              } else if (e + eBias >= 1) {
                  m = (value * c - 1) * Math.pow(2, mLen);
                  e = e + eBias;
              } else {
                  m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                  e = 0;
              }
          }

          for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

          e = (e << mLen) | m;
          eLen += mLen;
          for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

          buffer[offset + i - d] |= s * 128;
      }

      /**
       * Writes a 32bit float.
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.writeFloat32 = function(value, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof value !== 'number')
                  throw TypeError("Illegal value: "+value+" (not a number)");
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          offset += 4;
          var capacity8 = this.buffer.byteLength;
          if (offset > capacity8)
              this.resize((capacity8 *= 2) > offset ? capacity8 : offset);
          offset -= 4;
          ieee754_write(this.view, value, offset, this.littleEndian, 23, 4);
          if (relative) this.offset += 4;
          return this;
      };

      /**
       * Writes a 32bit float. This is an alias of {@link ByteBuffer#writeFloat32}.
       * @function
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.writeFloat = ByteBufferPrototype.writeFloat32;

      /**
       * Reads a 32bit float.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
       * @returns {number}
       * @expose
       */
      ByteBufferPrototype.readFloat32 = function(offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 4 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
          }
          var value = ieee754_read(this.view, offset, this.littleEndian, 23, 4);
          if (relative) this.offset += 4;
          return value;
      };

      /**
       * Reads a 32bit float. This is an alias of {@link ByteBuffer#readFloat32}.
       * @function
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
       * @returns {number}
       * @expose
       */
      ByteBufferPrototype.readFloat = ByteBufferPrototype.readFloat32;

      // types/floats/float64

      /**
       * Writes a 64bit float.
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.writeFloat64 = function(value, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof value !== 'number')
                  throw TypeError("Illegal value: "+value+" (not a number)");
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          offset += 8;
          var capacity9 = this.buffer.byteLength;
          if (offset > capacity9)
              this.resize((capacity9 *= 2) > offset ? capacity9 : offset);
          offset -= 8;
          ieee754_write(this.view, value, offset, this.littleEndian, 52, 8);
          if (relative) this.offset += 8;
          return this;
      };

      /**
       * Writes a 64bit float. This is an alias of {@link ByteBuffer#writeFloat64}.
       * @function
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.writeDouble = ByteBufferPrototype.writeFloat64;

      /**
       * Reads a 64bit float.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
       * @returns {number}
       * @expose
       */
      ByteBufferPrototype.readFloat64 = function(offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 8 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
          }
          var value = ieee754_read(this.view, offset, this.littleEndian, 52, 8);
          if (relative) this.offset += 8;
          return value;
      };

      /**
       * Reads a 64bit float. This is an alias of {@link ByteBuffer#readFloat64}.
       * @function
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
       * @returns {number}
       * @expose
       */
      ByteBufferPrototype.readDouble = ByteBufferPrototype.readFloat64;


      // types/varints/varint32

      /**
       * Maximum number of bytes required to store a 32bit base 128 variable-length integer.
       * @type {number}
       * @const
       * @expose
       */
      ByteBuffer.MAX_VARINT32_BYTES = 5;

      /**
       * Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.
       * @param {number} value Value to encode
       * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT32_BYTES}
       * @expose
       */
      ByteBuffer.calculateVarint32 = function(value) {
          // ref: src/google/protobuf/io/coded_stream.cc
          value = value >>> 0;
               if (value < 1 << 7 ) return 1;
          else if (value < 1 << 14) return 2;
          else if (value < 1 << 21) return 3;
          else if (value < 1 << 28) return 4;
          else                      return 5;
      };

      /**
       * Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.
       * @param {number} n Signed 32bit integer
       * @returns {number} Unsigned zigzag encoded 32bit integer
       * @expose
       */
      ByteBuffer.zigZagEncode32 = function(n) {
          return (((n |= 0) << 1) ^ (n >> 31)) >>> 0; // ref: src/google/protobuf/wire_format_lite.h
      };

      /**
       * Decodes a zigzag encoded signed 32bit integer.
       * @param {number} n Unsigned zigzag encoded 32bit integer
       * @returns {number} Signed 32bit integer
       * @expose
       */
      ByteBuffer.zigZagDecode32 = function(n) {
          return ((n >>> 1) ^ -(n & 1)) | 0; // // ref: src/google/protobuf/wire_format_lite.h
      };

      /**
       * Writes a 32bit base 128 variable-length integer.
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  written if omitted.
       * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
       * @expose
       */
      ByteBufferPrototype.writeVarint32 = function(value, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof value !== 'number' || value % 1 !== 0)
                  throw TypeError("Illegal value: "+value+" (not an integer)");
              value |= 0;
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          var size = ByteBuffer.calculateVarint32(value),
              b;
          offset += size;
          var capacity10 = this.buffer.byteLength;
          if (offset > capacity10)
              this.resize((capacity10 *= 2) > offset ? capacity10 : offset);
          offset -= size;
          value >>>= 0;
          while (value >= 0x80) {
              b = (value & 0x7f) | 0x80;
              this.view[offset++] = b;
              value >>>= 7;
          }
          this.view[offset++] = value;
          if (relative) {
              this.offset = offset;
              return this;
          }
          return size;
      };

      /**
       * Writes a zig-zag encoded (signed) 32bit base 128 variable-length integer.
       * @param {number} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  written if omitted.
       * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
       * @expose
       */
      ByteBufferPrototype.writeVarint32ZigZag = function(value, offset) {
          return this.writeVarint32(ByteBuffer.zigZagEncode32(value), offset);
      };

      /**
       * Reads a 32bit base 128 variable-length integer.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  written if omitted.
       * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
       *  and the actual number of bytes read.
       * @throws {Error} If it's not a valid varint. Has a property `truncated = true` if there is not enough data available
       *  to fully decode the varint.
       * @expose
       */
      ByteBufferPrototype.readVarint32 = function(offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 1 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
          }
          var c = 0,
              value = 0 >>> 0,
              b;
          do {
              if (!this.noAssert && offset > this.limit) {
                  var err = Error("Truncated");
                  err['truncated'] = true;
                  throw err;
              }
              b = this.view[offset++];
              if (c < 5)
                  value |= (b & 0x7f) << (7*c);
              ++c;
          } while ((b & 0x80) !== 0);
          value |= 0;
          if (relative) {
              this.offset = offset;
              return value;
          }
          return {
              "value": value,
              "length": c
          };
      };

      /**
       * Reads a zig-zag encoded (signed) 32bit base 128 variable-length integer.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  written if omitted.
       * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
       *  and the actual number of bytes read.
       * @throws {Error} If it's not a valid varint
       * @expose
       */
      ByteBufferPrototype.readVarint32ZigZag = function(offset) {
          var val = this.readVarint32(offset);
          if (typeof val === 'object')
              val["value"] = ByteBuffer.zigZagDecode32(val["value"]);
          else
              val = ByteBuffer.zigZagDecode32(val);
          return val;
      };

      // types/varints/varint64

      if (Long) {

          /**
           * Maximum number of bytes required to store a 64bit base 128 variable-length integer.
           * @type {number}
           * @const
           * @expose
           */
          ByteBuffer.MAX_VARINT64_BYTES = 10;

          /**
           * Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.
           * @param {number|!Long} value Value to encode
           * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT64_BYTES}
           * @expose
           */
          ByteBuffer.calculateVarint64 = function(value) {
              if (typeof value === 'number')
                  value = Long.fromNumber(value);
              else if (typeof value === 'string')
                  value = Long.fromString(value);
              // ref: src/google/protobuf/io/coded_stream.cc
              var part0 = value.toInt() >>> 0,
                  part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
                  part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
              if (part2 == 0) {
                  if (part1 == 0) {
                      if (part0 < 1 << 14)
                          return part0 < 1 << 7 ? 1 : 2;
                      else
                          return part0 < 1 << 21 ? 3 : 4;
                  } else {
                      if (part1 < 1 << 14)
                          return part1 < 1 << 7 ? 5 : 6;
                      else
                          return part1 < 1 << 21 ? 7 : 8;
                  }
              } else
                  return part2 < 1 << 7 ? 9 : 10;
          };

          /**
           * Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.
           * @param {number|!Long} value Signed long
           * @returns {!Long} Unsigned zigzag encoded long
           * @expose
           */
          ByteBuffer.zigZagEncode64 = function(value) {
              if (typeof value === 'number')
                  value = Long.fromNumber(value, false);
              else if (typeof value === 'string')
                  value = Long.fromString(value, false);
              else if (value.unsigned !== false) value = value.toSigned();
              // ref: src/google/protobuf/wire_format_lite.h
              return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();
          };

          /**
           * Decodes a zigzag encoded signed 64bit integer.
           * @param {!Long|number} value Unsigned zigzag encoded long or JavaScript number
           * @returns {!Long} Signed long
           * @expose
           */
          ByteBuffer.zigZagDecode64 = function(value) {
              if (typeof value === 'number')
                  value = Long.fromNumber(value, false);
              else if (typeof value === 'string')
                  value = Long.fromString(value, false);
              else if (value.unsigned !== false) value = value.toSigned();
              // ref: src/google/protobuf/wire_format_lite.h
              return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();
          };

          /**
           * Writes a 64bit base 128 variable-length integer.
           * @param {number|Long} value Value to write
           * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
           *  written if omitted.
           * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
           * @expose
           */
          ByteBufferPrototype.writeVarint64 = function(value, offset) {
              var relative = typeof offset === 'undefined';
              if (relative) offset = this.offset;
              if (!this.noAssert) {
                  if (typeof value === 'number')
                      value = Long.fromNumber(value);
                  else if (typeof value === 'string')
                      value = Long.fromString(value);
                  else if (!(value && value instanceof Long))
                      throw TypeError("Illegal value: "+value+" (not an integer or Long)");
                  if (typeof offset !== 'number' || offset % 1 !== 0)
                      throw TypeError("Illegal offset: "+offset+" (not an integer)");
                  offset >>>= 0;
                  if (offset < 0 || offset + 0 > this.buffer.byteLength)
                      throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
              }
              if (typeof value === 'number')
                  value = Long.fromNumber(value, false);
              else if (typeof value === 'string')
                  value = Long.fromString(value, false);
              else if (value.unsigned !== false) value = value.toSigned();
              var size = ByteBuffer.calculateVarint64(value),
                  part0 = value.toInt() >>> 0,
                  part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
                  part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
              offset += size;
              var capacity11 = this.buffer.byteLength;
              if (offset > capacity11)
                  this.resize((capacity11 *= 2) > offset ? capacity11 : offset);
              offset -= size;
              switch (size) {
                  case 10: this.view[offset+9] = (part2 >>>  7) & 0x01;
                  case 9 : this.view[offset+8] = size !== 9 ? (part2       ) | 0x80 : (part2       ) & 0x7F;
                  case 8 : this.view[offset+7] = size !== 8 ? (part1 >>> 21) | 0x80 : (part1 >>> 21) & 0x7F;
                  case 7 : this.view[offset+6] = size !== 7 ? (part1 >>> 14) | 0x80 : (part1 >>> 14) & 0x7F;
                  case 6 : this.view[offset+5] = size !== 6 ? (part1 >>>  7) | 0x80 : (part1 >>>  7) & 0x7F;
                  case 5 : this.view[offset+4] = size !== 5 ? (part1       ) | 0x80 : (part1       ) & 0x7F;
                  case 4 : this.view[offset+3] = size !== 4 ? (part0 >>> 21) | 0x80 : (part0 >>> 21) & 0x7F;
                  case 3 : this.view[offset+2] = size !== 3 ? (part0 >>> 14) | 0x80 : (part0 >>> 14) & 0x7F;
                  case 2 : this.view[offset+1] = size !== 2 ? (part0 >>>  7) | 0x80 : (part0 >>>  7) & 0x7F;
                  case 1 : this.view[offset  ] = size !== 1 ? (part0       ) | 0x80 : (part0       ) & 0x7F;
              }
              if (relative) {
                  this.offset += size;
                  return this;
              } else {
                  return size;
              }
          };

          /**
           * Writes a zig-zag encoded 64bit base 128 variable-length integer.
           * @param {number|Long} value Value to write
           * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
           *  written if omitted.
           * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
           * @expose
           */
          ByteBufferPrototype.writeVarint64ZigZag = function(value, offset) {
              return this.writeVarint64(ByteBuffer.zigZagEncode64(value), offset);
          };

          /**
           * Reads a 64bit base 128 variable-length integer. Requires Long.js.
           * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
           *  read if omitted.
           * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
           *  the actual number of bytes read.
           * @throws {Error} If it's not a valid varint
           * @expose
           */
          ByteBufferPrototype.readVarint64 = function(offset) {
              var relative = typeof offset === 'undefined';
              if (relative) offset = this.offset;
              if (!this.noAssert) {
                  if (typeof offset !== 'number' || offset % 1 !== 0)
                      throw TypeError("Illegal offset: "+offset+" (not an integer)");
                  offset >>>= 0;
                  if (offset < 0 || offset + 1 > this.buffer.byteLength)
                      throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
              }
              // ref: src/google/protobuf/io/coded_stream.cc
              var start = offset,
                  part0 = 0,
                  part1 = 0,
                  part2 = 0,
                  b  = 0;
              b = this.view[offset++]; part0  = (b & 0x7F)      ; if ( b & 0x80                                                   ) {
              b = this.view[offset++]; part0 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
              b = this.view[offset++]; part0 |= (b & 0x7F) << 14; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
              b = this.view[offset++]; part0 |= (b & 0x7F) << 21; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
              b = this.view[offset++]; part1  = (b & 0x7F)      ; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
              b = this.view[offset++]; part1 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
              b = this.view[offset++]; part1 |= (b & 0x7F) << 14; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
              b = this.view[offset++]; part1 |= (b & 0x7F) << 21; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
              b = this.view[offset++]; part2  = (b & 0x7F)      ; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
              b = this.view[offset++]; part2 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
              throw Error("Buffer overrun"); }}}}}}}}}}
              var value = Long.fromBits(part0 | (part1 << 28), (part1 >>> 4) | (part2) << 24, false);
              if (relative) {
                  this.offset = offset;
                  return value;
              } else {
                  return {
                      'value': value,
                      'length': offset-start
                  };
              }
          };

          /**
           * Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.
           * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
           *  read if omitted.
           * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
           *  the actual number of bytes read.
           * @throws {Error} If it's not a valid varint
           * @expose
           */
          ByteBufferPrototype.readVarint64ZigZag = function(offset) {
              var val = this.readVarint64(offset);
              if (val && val['value'] instanceof Long)
                  val["value"] = ByteBuffer.zigZagDecode64(val["value"]);
              else
                  val = ByteBuffer.zigZagDecode64(val);
              return val;
          };

      } // Long


      // types/strings/cstring

      /**
       * Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL
       *  characters itself.
       * @param {string} str String to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  contained in `str` + 1 if omitted.
       * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written
       * @expose
       */
      ByteBufferPrototype.writeCString = function(str, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          var i,
              k = str.length;
          if (!this.noAssert) {
              if (typeof str !== 'string')
                  throw TypeError("Illegal str: Not a string");
              for (i=0; i<k; ++i) {
                  if (str.charCodeAt(i) === 0)
                      throw RangeError("Illegal str: Contains NULL-characters");
              }
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          // UTF8 strings do not contain zero bytes in between except for the zero character, so:
          k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
          offset += k+1;
          var capacity12 = this.buffer.byteLength;
          if (offset > capacity12)
              this.resize((capacity12 *= 2) > offset ? capacity12 : offset);
          offset -= k+1;
          utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
              this.view[offset++] = b;
          }.bind(this));
          this.view[offset++] = 0;
          if (relative) {
              this.offset = offset;
              return this;
          }
          return k;
      };

      /**
       * Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters
       *  itself.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  read if omitted.
       * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
       *  read and the actual number of bytes read.
       * @expose
       */
      ByteBufferPrototype.readCString = function(offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 1 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
          }
          var start = offset;
          // UTF8 strings do not contain zero bytes in between except for the zero character itself, so:
          var sd, b = -1;
          utfx.decodeUTF8toUTF16(function() {
              if (b === 0) return null;
              if (offset >= this.limit)
                  throw RangeError("Illegal range: Truncated data, "+offset+" < "+this.limit);
              b = this.view[offset++];
              return b === 0 ? null : b;
          }.bind(this), sd = stringDestination(), true);
          if (relative) {
              this.offset = offset;
              return sd();
          } else {
              return {
                  "string": sd(),
                  "length": offset - start
              };
          }
      };

      // types/strings/istring

      /**
       * Writes a length as uint32 prefixed UTF8 encoded string.
       * @param {string} str String to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  written if omitted.
       * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
       * @expose
       * @see ByteBuffer#writeVarint32
       */
      ByteBufferPrototype.writeIString = function(str, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof str !== 'string')
                  throw TypeError("Illegal str: Not a string");
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          var start = offset,
              k;
          k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
          offset += 4+k;
          var capacity13 = this.buffer.byteLength;
          if (offset > capacity13)
              this.resize((capacity13 *= 2) > offset ? capacity13 : offset);
          offset -= 4+k;
          if (this.littleEndian) {
              this.view[offset+3] = (k >>> 24) & 0xFF;
              this.view[offset+2] = (k >>> 16) & 0xFF;
              this.view[offset+1] = (k >>>  8) & 0xFF;
              this.view[offset  ] =  k         & 0xFF;
          } else {
              this.view[offset  ] = (k >>> 24) & 0xFF;
              this.view[offset+1] = (k >>> 16) & 0xFF;
              this.view[offset+2] = (k >>>  8) & 0xFF;
              this.view[offset+3] =  k         & 0xFF;
          }
          offset += 4;
          utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
              this.view[offset++] = b;
          }.bind(this));
          if (offset !== start + 4 + k)
              throw RangeError("Illegal range: Truncated data, "+offset+" == "+(offset+4+k));
          if (relative) {
              this.offset = offset;
              return this;
          }
          return offset - start;
      };

      /**
       * Reads a length as uint32 prefixed UTF8 encoded string.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  read if omitted.
       * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
       *  read and the actual number of bytes read.
       * @expose
       * @see ByteBuffer#readVarint32
       */
      ByteBufferPrototype.readIString = function(offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 4 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
          }
          var start = offset;
          var len = this.readUint32(offset);
          var str = this.readUTF8String(len, ByteBuffer.METRICS_BYTES, offset += 4);
          offset += str['length'];
          if (relative) {
              this.offset = offset;
              return str['string'];
          } else {
              return {
                  'string': str['string'],
                  'length': offset - start
              };
          }
      };

      // types/strings/utf8string

      /**
       * Metrics representing number of UTF8 characters. Evaluates to `c`.
       * @type {string}
       * @const
       * @expose
       */
      ByteBuffer.METRICS_CHARS = 'c';

      /**
       * Metrics representing number of bytes. Evaluates to `b`.
       * @type {string}
       * @const
       * @expose
       */
      ByteBuffer.METRICS_BYTES = 'b';

      /**
       * Writes an UTF8 encoded string.
       * @param {string} str String to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
       * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
       * @expose
       */
      ByteBufferPrototype.writeUTF8String = function(str, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          var k;
          var start = offset;
          k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
          offset += k;
          var capacity14 = this.buffer.byteLength;
          if (offset > capacity14)
              this.resize((capacity14 *= 2) > offset ? capacity14 : offset);
          offset -= k;
          utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
              this.view[offset++] = b;
          }.bind(this));
          if (relative) {
              this.offset = offset;
              return this;
          }
          return offset - start;
      };

      /**
       * Writes an UTF8 encoded string. This is an alias of {@link ByteBuffer#writeUTF8String}.
       * @function
       * @param {string} str String to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
       * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
       * @expose
       */
      ByteBufferPrototype.writeString = ByteBufferPrototype.writeUTF8String;

      /**
       * Calculates the number of UTF8 characters of a string. JavaScript itself uses UTF-16, so that a string's
       *  `length` property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.
       * @param {string} str String to calculate
       * @returns {number} Number of UTF8 characters
       * @expose
       */
      ByteBuffer.calculateUTF8Chars = function(str) {
          return utfx.calculateUTF16asUTF8(stringSource(str))[0];
      };

      /**
       * Calculates the number of UTF8 bytes of a string.
       * @param {string} str String to calculate
       * @returns {number} Number of UTF8 bytes
       * @expose
       */
      ByteBuffer.calculateUTF8Bytes = function(str) {
          return utfx.calculateUTF16asUTF8(stringSource(str))[1];
      };

      /**
       * Calculates the number of UTF8 bytes of a string. This is an alias of {@link ByteBuffer.calculateUTF8Bytes}.
       * @function
       * @param {string} str String to calculate
       * @returns {number} Number of UTF8 bytes
       * @expose
       */
      ByteBuffer.calculateString = ByteBuffer.calculateUTF8Bytes;

      /**
       * Reads an UTF8 encoded string.
       * @param {number} length Number of characters or bytes to read.
       * @param {string=} metrics Metrics specifying what `length` is meant to count. Defaults to
       *  {@link ByteBuffer.METRICS_CHARS}.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  read if omitted.
       * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
       *  read and the actual number of bytes read.
       * @expose
       */
      ByteBufferPrototype.readUTF8String = function(length, metrics, offset) {
          if (typeof metrics === 'number') {
              offset = metrics;
              metrics = undefined;
          }
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (typeof metrics === 'undefined') metrics = ByteBuffer.METRICS_CHARS;
          if (!this.noAssert) {
              if (typeof length !== 'number' || length % 1 !== 0)
                  throw TypeError("Illegal length: "+length+" (not an integer)");
              length |= 0;
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          var i = 0,
              start = offset,
              sd;
          if (metrics === ByteBuffer.METRICS_CHARS) { // The same for node and the browser
              sd = stringDestination();
              utfx.decodeUTF8(function() {
                  return i < length && offset < this.limit ? this.view[offset++] : null;
              }.bind(this), function(cp) {
                  ++i; utfx.UTF8toUTF16(cp, sd);
              });
              if (i !== length)
                  throw RangeError("Illegal range: Truncated data, "+i+" == "+length);
              if (relative) {
                  this.offset = offset;
                  return sd();
              } else {
                  return {
                      "string": sd(),
                      "length": offset - start
                  };
              }
          } else if (metrics === ByteBuffer.METRICS_BYTES) {
              if (!this.noAssert) {
                  if (typeof offset !== 'number' || offset % 1 !== 0)
                      throw TypeError("Illegal offset: "+offset+" (not an integer)");
                  offset >>>= 0;
                  if (offset < 0 || offset + length > this.buffer.byteLength)
                      throw RangeError("Illegal offset: 0 <= "+offset+" (+"+length+") <= "+this.buffer.byteLength);
              }
              var k = offset + length;
              utfx.decodeUTF8toUTF16(function() {
                  return offset < k ? this.view[offset++] : null;
              }.bind(this), sd = stringDestination(), this.noAssert);
              if (offset !== k)
                  throw RangeError("Illegal range: Truncated data, "+offset+" == "+k);
              if (relative) {
                  this.offset = offset;
                  return sd();
              } else {
                  return {
                      'string': sd(),
                      'length': offset - start
                  };
              }
          } else
              throw TypeError("Unsupported metrics: "+metrics);
      };

      /**
       * Reads an UTF8 encoded string. This is an alias of {@link ByteBuffer#readUTF8String}.
       * @function
       * @param {number} length Number of characters or bytes to read
       * @param {number=} metrics Metrics specifying what `n` is meant to count. Defaults to
       *  {@link ByteBuffer.METRICS_CHARS}.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  read if omitted.
       * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
       *  read and the actual number of bytes read.
       * @expose
       */
      ByteBufferPrototype.readString = ByteBufferPrototype.readUTF8String;

      // types/strings/vstring

      /**
       * Writes a length as varint32 prefixed UTF8 encoded string.
       * @param {string} str String to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  written if omitted.
       * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
       * @expose
       * @see ByteBuffer#writeVarint32
       */
      ByteBufferPrototype.writeVString = function(str, offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof str !== 'string')
                  throw TypeError("Illegal str: Not a string");
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          var start = offset,
              k, l;
          k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
          l = ByteBuffer.calculateVarint32(k);
          offset += l+k;
          var capacity15 = this.buffer.byteLength;
          if (offset > capacity15)
              this.resize((capacity15 *= 2) > offset ? capacity15 : offset);
          offset -= l+k;
          offset += this.writeVarint32(k, offset);
          utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
              this.view[offset++] = b;
          }.bind(this));
          if (offset !== start+k+l)
              throw RangeError("Illegal range: Truncated data, "+offset+" == "+(offset+k+l));
          if (relative) {
              this.offset = offset;
              return this;
          }
          return offset - start;
      };

      /**
       * Reads a length as varint32 prefixed UTF8 encoded string.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  read if omitted.
       * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
       *  read and the actual number of bytes read.
       * @expose
       * @see ByteBuffer#readVarint32
       */
      ByteBufferPrototype.readVString = function(offset) {
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 1 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
          }
          var start = offset;
          var len = this.readVarint32(offset);
          var str = this.readUTF8String(len['value'], ByteBuffer.METRICS_BYTES, offset += len['length']);
          offset += str['length'];
          if (relative) {
              this.offset = offset;
              return str['string'];
          } else {
              return {
                  'string': str['string'],
                  'length': offset - start
              };
          }
      };


      /**
       * Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended
       *  data's length.
       * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to append. If `source` is a ByteBuffer, its offsets
       *  will be modified according to the performed read operation.
       * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
       * @param {number=} offset Offset to append at. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  written if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       * @example A relative `<01 02>03.append(<04 05>)` will result in `<01 02 04 05>, 04 05|`
       * @example An absolute `<01 02>03.append(04 05>, 1)` will result in `<01 04>05, 04 05|`
       */
      ByteBufferPrototype.append = function(source, encoding, offset) {
          if (typeof encoding === 'number' || typeof encoding !== 'string') {
              offset = encoding;
              encoding = undefined;
          }
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          if (!(source instanceof ByteBuffer))
              source = ByteBuffer.wrap(source, encoding);
          var length = source.limit - source.offset;
          if (length <= 0) return this; // Nothing to append
          offset += length;
          var capacity16 = this.buffer.byteLength;
          if (offset > capacity16)
              this.resize((capacity16 *= 2) > offset ? capacity16 : offset);
          offset -= length;
          this.view.set(source.view.subarray(source.offset, source.limit), offset);
          source.offset += length;
          if (relative) this.offset += length;
          return this;
      };

      /**
       * Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents at and after the
          specified offset up to the length of this ByteBuffer's data.
       * @param {!ByteBuffer} target Target ByteBuffer
       * @param {number=} offset Offset to append to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  read if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       * @see ByteBuffer#append
       */
      ByteBufferPrototype.appendTo = function(target, offset) {
          target.append(this, offset);
          return this;
      };

      /**
       * Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to
       *  disable them if your code already makes sure that everything is valid.
       * @param {boolean} assert `true` to enable assertions, otherwise `false`
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.assert = function(assert) {
          this.noAssert = !assert;
          return this;
      };

      /**
       * Gets the capacity of this ByteBuffer's backing buffer.
       * @returns {number} Capacity of the backing buffer
       * @expose
       */
      ByteBufferPrototype.capacity = function() {
          return this.buffer.byteLength;
      };
      /**
       * Clears this ByteBuffer's offsets by setting {@link ByteBuffer#offset} to `0` and {@link ByteBuffer#limit} to the
       *  backing buffer's capacity. Discards {@link ByteBuffer#markedOffset}.
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.clear = function() {
          this.offset = 0;
          this.limit = this.buffer.byteLength;
          this.markedOffset = -1;
          return this;
      };

      /**
       * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for {@link ByteBuffer#offset},
       *  {@link ByteBuffer#markedOffset} and {@link ByteBuffer#limit}.
       * @param {boolean=} copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`
       * @returns {!ByteBuffer} Cloned instance
       * @expose
       */
      ByteBufferPrototype.clone = function(copy) {
          var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);
          if (copy) {
              bb.buffer = new ArrayBuffer(this.buffer.byteLength);
              bb.view = new Uint8Array(bb.buffer);
          } else {
              bb.buffer = this.buffer;
              bb.view = this.view;
          }
          bb.offset = this.offset;
          bb.markedOffset = this.markedOffset;
          bb.limit = this.limit;
          return bb;
      };

      /**
       * Compacts this ByteBuffer to be backed by a {@link ByteBuffer#buffer} of its contents' length. Contents are the bytes
       *  between {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will set `offset = 0` and `limit = capacity` and
       *  adapt {@link ByteBuffer#markedOffset} to the same relative position if set.
       * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
       * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.compact = function(begin, end) {
          if (typeof begin === 'undefined') begin = this.offset;
          if (typeof end === 'undefined') end = this.limit;
          if (!this.noAssert) {
              if (typeof begin !== 'number' || begin % 1 !== 0)
                  throw TypeError("Illegal begin: Not an integer");
              begin >>>= 0;
              if (typeof end !== 'number' || end % 1 !== 0)
                  throw TypeError("Illegal end: Not an integer");
              end >>>= 0;
              if (begin < 0 || begin > end || end > this.buffer.byteLength)
                  throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
          }
          if (begin === 0 && end === this.buffer.byteLength)
              return this; // Already compacted
          var len = end - begin;
          if (len === 0) {
              this.buffer = EMPTY_BUFFER;
              this.view = null;
              if (this.markedOffset >= 0) this.markedOffset -= begin;
              this.offset = 0;
              this.limit = 0;
              return this;
          }
          var buffer = new ArrayBuffer(len);
          var view = new Uint8Array(buffer);
          view.set(this.view.subarray(begin, end));
          this.buffer = buffer;
          this.view = view;
          if (this.markedOffset >= 0) this.markedOffset -= begin;
          this.offset = 0;
          this.limit = len;
          return this;
      };

      /**
       * Creates a copy of this ByteBuffer's contents. Contents are the bytes between {@link ByteBuffer#offset} and
       *  {@link ByteBuffer#limit}.
       * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
       * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
       * @returns {!ByteBuffer} Copy
       * @expose
       */
      ByteBufferPrototype.copy = function(begin, end) {
          if (typeof begin === 'undefined') begin = this.offset;
          if (typeof end === 'undefined') end = this.limit;
          if (!this.noAssert) {
              if (typeof begin !== 'number' || begin % 1 !== 0)
                  throw TypeError("Illegal begin: Not an integer");
              begin >>>= 0;
              if (typeof end !== 'number' || end % 1 !== 0)
                  throw TypeError("Illegal end: Not an integer");
              end >>>= 0;
              if (begin < 0 || begin > end || end > this.buffer.byteLength)
                  throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
          }
          if (begin === end)
              return new ByteBuffer(0, this.littleEndian, this.noAssert);
          var capacity = end - begin,
              bb = new ByteBuffer(capacity, this.littleEndian, this.noAssert);
          bb.offset = 0;
          bb.limit = capacity;
          if (bb.markedOffset >= 0) bb.markedOffset -= begin;
          this.copyTo(bb, 0, begin, end);
          return bb;
      };

      /**
       * Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between {@link ByteBuffer#offset} and
       *  {@link ByteBuffer#limit}.
       * @param {!ByteBuffer} target Target ByteBuffer
       * @param {number=} targetOffset Offset to copy to. Will use and increase the target's {@link ByteBuffer#offset}
       *  by the number of bytes copied if omitted.
       * @param {number=} sourceOffset Offset to start copying from. Will use and increase {@link ByteBuffer#offset} by the
       *  number of bytes copied if omitted.
       * @param {number=} sourceLimit Offset to end copying from, defaults to {@link ByteBuffer#limit}
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.copyTo = function(target, targetOffset, sourceOffset, sourceLimit) {
          var relative,
              targetRelative;
          if (!this.noAssert) {
              if (!ByteBuffer.isByteBuffer(target))
                  throw TypeError("Illegal target: Not a ByteBuffer");
          }
          targetOffset = (targetRelative = typeof targetOffset === 'undefined') ? target.offset : targetOffset | 0;
          sourceOffset = (relative = typeof sourceOffset === 'undefined') ? this.offset : sourceOffset | 0;
          sourceLimit = typeof sourceLimit === 'undefined' ? this.limit : sourceLimit | 0;

          if (targetOffset < 0 || targetOffset > target.buffer.byteLength)
              throw RangeError("Illegal target range: 0 <= "+targetOffset+" <= "+target.buffer.byteLength);
          if (sourceOffset < 0 || sourceLimit > this.buffer.byteLength)
              throw RangeError("Illegal source range: 0 <= "+sourceOffset+" <= "+this.buffer.byteLength);

          var len = sourceLimit - sourceOffset;
          if (len === 0)
              return target; // Nothing to copy

          target.ensureCapacity(targetOffset + len);

          target.view.set(this.view.subarray(sourceOffset, sourceLimit), targetOffset);

          if (relative) this.offset += len;
          if (targetRelative) target.offset += len;

          return this;
      };

      /**
       * Makes sure that this ByteBuffer is backed by a {@link ByteBuffer#buffer} of at least the specified capacity. If the
       *  current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity,
       *  the required capacity will be used instead.
       * @param {number} capacity Required capacity
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.ensureCapacity = function(capacity) {
          var current = this.buffer.byteLength;
          if (current < capacity)
              return this.resize((current *= 2) > capacity ? current : capacity);
          return this;
      };

      /**
       * Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between
       *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
       * @param {number|string} value Byte value to fill with. If given as a string, the first character is used.
       * @param {number=} begin Begin offset. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  written if omitted. defaults to {@link ByteBuffer#offset}.
       * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
       * @returns {!ByteBuffer} this
       * @expose
       * @example `someByteBuffer.clear().fill(0)` fills the entire backing buffer with zeroes
       */
      ByteBufferPrototype.fill = function(value, begin, end) {
          var relative = typeof begin === 'undefined';
          if (relative) begin = this.offset;
          if (typeof value === 'string' && value.length > 0)
              value = value.charCodeAt(0);
          if (typeof begin === 'undefined') begin = this.offset;
          if (typeof end === 'undefined') end = this.limit;
          if (!this.noAssert) {
              if (typeof value !== 'number' || value % 1 !== 0)
                  throw TypeError("Illegal value: "+value+" (not an integer)");
              value |= 0;
              if (typeof begin !== 'number' || begin % 1 !== 0)
                  throw TypeError("Illegal begin: Not an integer");
              begin >>>= 0;
              if (typeof end !== 'number' || end % 1 !== 0)
                  throw TypeError("Illegal end: Not an integer");
              end >>>= 0;
              if (begin < 0 || begin > end || end > this.buffer.byteLength)
                  throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
          }
          if (begin >= end)
              return this; // Nothing to fill
          while (begin < end) this.view[begin++] = value;
          if (relative) this.offset = begin;
          return this;
      };

      /**
       * Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets `limit = offset` and
       *  `offset = 0`. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.flip = function() {
          this.limit = this.offset;
          this.offset = 0;
          return this;
      };
      /**
       * Marks an offset on this ByteBuffer to be used later.
       * @param {number=} offset Offset to mark. Defaults to {@link ByteBuffer#offset}.
       * @returns {!ByteBuffer} this
       * @throws {TypeError} If `offset` is not a valid number
       * @throws {RangeError} If `offset` is out of bounds
       * @see ByteBuffer#reset
       * @expose
       */
      ByteBufferPrototype.mark = function(offset) {
          offset = typeof offset === 'undefined' ? this.offset : offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          this.markedOffset = offset;
          return this;
      };
      /**
       * Sets the byte order.
       * @param {boolean} littleEndian `true` for little endian byte order, `false` for big endian
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.order = function(littleEndian) {
          if (!this.noAssert) {
              if (typeof littleEndian !== 'boolean')
                  throw TypeError("Illegal littleEndian: Not a boolean");
          }
          this.littleEndian = !!littleEndian;
          return this;
      };

      /**
       * Switches (to) little endian byte order.
       * @param {boolean=} littleEndian Defaults to `true`, otherwise uses big endian
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.LE = function(littleEndian) {
          this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : true;
          return this;
      };

      /**
       * Switches (to) big endian byte order.
       * @param {boolean=} bigEndian Defaults to `true`, otherwise uses little endian
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.BE = function(bigEndian) {
          this.littleEndian = typeof bigEndian !== 'undefined' ? !bigEndian : false;
          return this;
      };
      /**
       * Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the
       *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
       *  will be resized and its contents moved accordingly.
       * @param {!ByteBuffer|string|!ArrayBuffer} source Data to prepend. If `source` is a ByteBuffer, its offset will be
       *  modified according to the performed read operation.
       * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
       * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
       *  prepended if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       * @example A relative `00<01 02 03>.prepend(<04 05>)` results in `<04 05 01 02 03>, 04 05|`
       * @example An absolute `00<01 02 03>.prepend(<04 05>, 2)` results in `04<05 02 03>, 04 05|`
       */
      ByteBufferPrototype.prepend = function(source, encoding, offset) {
          if (typeof encoding === 'number' || typeof encoding !== 'string') {
              offset = encoding;
              encoding = undefined;
          }
          var relative = typeof offset === 'undefined';
          if (relative) offset = this.offset;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: "+offset+" (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                  throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
          }
          if (!(source instanceof ByteBuffer))
              source = ByteBuffer.wrap(source, encoding);
          var len = source.limit - source.offset;
          if (len <= 0) return this; // Nothing to prepend
          var diff = len - offset;
          if (diff > 0) { // Not enough space before offset, so resize + move
              var buffer = new ArrayBuffer(this.buffer.byteLength + diff);
              var view = new Uint8Array(buffer);
              view.set(this.view.subarray(offset, this.buffer.byteLength), len);
              this.buffer = buffer;
              this.view = view;
              this.offset += diff;
              if (this.markedOffset >= 0) this.markedOffset += diff;
              this.limit += diff;
              offset += diff;
          } else {
              var arrayView = new Uint8Array(this.buffer);
          }
          this.view.set(source.view.subarray(source.offset, source.limit), offset - len);

          source.offset = source.limit;
          if (relative)
              this.offset -= len;
          return this;
      };

      /**
       * Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the
       *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
       *  will be resized and its contents moved accordingly.
       * @param {!ByteBuffer} target Target ByteBuffer
       * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
       *  prepended if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       * @see ByteBuffer#prepend
       */
      ByteBufferPrototype.prependTo = function(target, offset) {
          target.prepend(this, offset);
          return this;
      };
      /**
       * Prints debug information about this ByteBuffer's contents.
       * @param {function(string)=} out Output function to call, defaults to console.log
       * @expose
       */
      ByteBufferPrototype.printDebug = function(out) {
          if (typeof out !== 'function') out = console.log.bind(console);
          out(
              this.toString()+"\n"+
              "-------------------------------------------------------------------\n"+
              this.toDebug(/* columns */ true)
          );
      };

      /**
       * Gets the number of remaining readable bytes. Contents are the bytes between {@link ByteBuffer#offset} and
       *  {@link ByteBuffer#limit}, so this returns `limit - offset`.
       * @returns {number} Remaining readable bytes. May be negative if `offset > limit`.
       * @expose
       */
      ByteBufferPrototype.remaining = function() {
          return this.limit - this.offset;
      };
      /**
       * Resets this ByteBuffer's {@link ByteBuffer#offset}. If an offset has been marked through {@link ByteBuffer#mark}
       *  before, `offset` will be set to {@link ByteBuffer#markedOffset}, which will then be discarded. If no offset has been
       *  marked, sets `offset = 0`.
       * @returns {!ByteBuffer} this
       * @see ByteBuffer#mark
       * @expose
       */
      ByteBufferPrototype.reset = function() {
          if (this.markedOffset >= 0) {
              this.offset = this.markedOffset;
              this.markedOffset = -1;
          } else {
              this.offset = 0;
          }
          return this;
      };
      /**
       * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that
       *  large or larger.
       * @param {number} capacity Capacity required
       * @returns {!ByteBuffer} this
       * @throws {TypeError} If `capacity` is not a number
       * @throws {RangeError} If `capacity < 0`
       * @expose
       */
      ByteBufferPrototype.resize = function(capacity) {
          if (!this.noAssert) {
              if (typeof capacity !== 'number' || capacity % 1 !== 0)
                  throw TypeError("Illegal capacity: "+capacity+" (not an integer)");
              capacity |= 0;
              if (capacity < 0)
                  throw RangeError("Illegal capacity: 0 <= "+capacity);
          }
          if (this.buffer.byteLength < capacity) {
              var buffer = new ArrayBuffer(capacity);
              var view = new Uint8Array(buffer);
              view.set(this.view);
              this.buffer = buffer;
              this.view = view;
          }
          return this;
      };
      /**
       * Reverses this ByteBuffer's contents.
       * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
       * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.reverse = function(begin, end) {
          if (typeof begin === 'undefined') begin = this.offset;
          if (typeof end === 'undefined') end = this.limit;
          if (!this.noAssert) {
              if (typeof begin !== 'number' || begin % 1 !== 0)
                  throw TypeError("Illegal begin: Not an integer");
              begin >>>= 0;
              if (typeof end !== 'number' || end % 1 !== 0)
                  throw TypeError("Illegal end: Not an integer");
              end >>>= 0;
              if (begin < 0 || begin > end || end > this.buffer.byteLength)
                  throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
          }
          if (begin === end)
              return this; // Nothing to reverse
          Array.prototype.reverse.call(this.view.subarray(begin, end));
          return this;
      };
      /**
       * Skips the next `length` bytes. This will just advance
       * @param {number} length Number of bytes to skip. May also be negative to move the offset back.
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.skip = function(length) {
          if (!this.noAssert) {
              if (typeof length !== 'number' || length % 1 !== 0)
                  throw TypeError("Illegal length: "+length+" (not an integer)");
              length |= 0;
          }
          var offset = this.offset + length;
          if (!this.noAssert) {
              if (offset < 0 || offset > this.buffer.byteLength)
                  throw RangeError("Illegal length: 0 <= "+this.offset+" + "+length+" <= "+this.buffer.byteLength);
          }
          this.offset = offset;
          return this;
      };

      /**
       * Slices this ByteBuffer by creating a cloned instance with `offset = begin` and `limit = end`.
       * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
       * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
       * @returns {!ByteBuffer} Clone of this ByteBuffer with slicing applied, backed by the same {@link ByteBuffer#buffer}
       * @expose
       */
      ByteBufferPrototype.slice = function(begin, end) {
          if (typeof begin === 'undefined') begin = this.offset;
          if (typeof end === 'undefined') end = this.limit;
          if (!this.noAssert) {
              if (typeof begin !== 'number' || begin % 1 !== 0)
                  throw TypeError("Illegal begin: Not an integer");
              begin >>>= 0;
              if (typeof end !== 'number' || end % 1 !== 0)
                  throw TypeError("Illegal end: Not an integer");
              end >>>= 0;
              if (begin < 0 || begin > end || end > this.buffer.byteLength)
                  throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
          }
          var bb = this.clone();
          bb.offset = begin;
          bb.limit = end;
          return bb;
      };
      /**
       * Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between
       *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
       * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory if
       *  possible. Defaults to `false`
       * @returns {!ArrayBuffer} Contents as an ArrayBuffer
       * @expose
       */
      ByteBufferPrototype.toBuffer = function(forceCopy) {
          var offset = this.offset,
              limit = this.limit;
          if (!this.noAssert) {
              if (typeof offset !== 'number' || offset % 1 !== 0)
                  throw TypeError("Illegal offset: Not an integer");
              offset >>>= 0;
              if (typeof limit !== 'number' || limit % 1 !== 0)
                  throw TypeError("Illegal limit: Not an integer");
              limit >>>= 0;
              if (offset < 0 || offset > limit || limit > this.buffer.byteLength)
                  throw RangeError("Illegal range: 0 <= "+offset+" <= "+limit+" <= "+this.buffer.byteLength);
          }
          // NOTE: It's not possible to have another ArrayBuffer reference the same memory as the backing buffer. This is
          // possible with Uint8Array#subarray only, but we have to return an ArrayBuffer by contract. So:
          if (!forceCopy && offset === 0 && limit === this.buffer.byteLength)
              return this.buffer;
          if (offset === limit)
              return EMPTY_BUFFER;
          var buffer = new ArrayBuffer(limit - offset);
          new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset, limit), 0);
          return buffer;
      };

      /**
       * Returns a raw buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between
       *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. This is an alias of {@link ByteBuffer#toBuffer}.
       * @function
       * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory.
       *  Defaults to `false`
       * @returns {!ArrayBuffer} Contents as an ArrayBuffer
       * @expose
       */
      ByteBufferPrototype.toArrayBuffer = ByteBufferPrototype.toBuffer;

      /**
       * Converts the ByteBuffer's contents to a string.
       * @param {string=} encoding Output encoding. Returns an informative string representation if omitted but also allows
       *  direct conversion to "utf8", "hex", "base64" and "binary" encoding. "debug" returns a hex representation with
       *  highlighted offsets.
       * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}
       * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
       * @returns {string} String representation
       * @throws {Error} If `encoding` is invalid
       * @expose
       */
      ByteBufferPrototype.toString = function(encoding, begin, end) {
          if (typeof encoding === 'undefined')
              return "ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";
          if (typeof encoding === 'number')
              encoding = "utf8",
              begin = encoding,
              end = begin;
          switch (encoding) {
              case "utf8":
                  return this.toUTF8(begin, end);
              case "base64":
                  return this.toBase64(begin, end);
              case "hex":
                  return this.toHex(begin, end);
              case "binary":
                  return this.toBinary(begin, end);
              case "debug":
                  return this.toDebug();
              case "columns":
                  return this.toColumns();
              default:
                  throw Error("Unsupported encoding: "+encoding);
          }
      };

      // lxiv-embeddable

      /**
       * lxiv-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
       * Released under the Apache License, Version 2.0
       * see: https://github.com/dcodeIO/lxiv for details
       */
      var lxiv = function() {

          /**
           * lxiv namespace.
           * @type {!Object.<string,*>}
           * @exports lxiv
           */
          var lxiv = {};

          /**
           * Character codes for output.
           * @type {!Array.<number>}
           * @inner
           */
          var aout = [
              65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
              81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102,
              103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
              119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47
          ];

          /**
           * Character codes for input.
           * @type {!Array.<number>}
           * @inner
           */
          var ain = [];
          for (var i=0, k=aout.length; i<k; ++i)
              ain[aout[i]] = i;

          /**
           * Encodes bytes to base64 char codes.
           * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if
           *  there are no more bytes left.
           * @param {!function(number)} dst Characters destination as a function successively called with each encoded char
           *  code.
           */
          lxiv.encode = function(src, dst) {
              var b, t;
              while ((b = src()) !== null) {
                  dst(aout[(b>>2)&0x3f]);
                  t = (b&0x3)<<4;
                  if ((b = src()) !== null) {
                      t |= (b>>4)&0xf;
                      dst(aout[(t|((b>>4)&0xf))&0x3f]);
                      t = (b&0xf)<<2;
                      if ((b = src()) !== null)
                          dst(aout[(t|((b>>6)&0x3))&0x3f]),
                          dst(aout[b&0x3f]);
                      else
                          dst(aout[t&0x3f]),
                          dst(61);
                  } else
                      dst(aout[t&0x3f]),
                      dst(61),
                      dst(61);
              }
          };

          /**
           * Decodes base64 char codes to bytes.
           * @param {!function():number|null} src Characters source as a function returning the next char code respectively
           *  `null` if there are no more characters left.
           * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
           * @throws {Error} If a character code is invalid
           */
          lxiv.decode = function(src, dst) {
              var c, t1, t2;
              function fail(c) {
                  throw Error("Illegal character code: "+c);
              }
              while ((c = src()) !== null) {
                  t1 = ain[c];
                  if (typeof t1 === 'undefined') fail(c);
                  if ((c = src()) !== null) {
                      t2 = ain[c];
                      if (typeof t2 === 'undefined') fail(c);
                      dst((t1<<2)>>>0|(t2&0x30)>>4);
                      if ((c = src()) !== null) {
                          t1 = ain[c];
                          if (typeof t1 === 'undefined')
                              if (c === 61) break; else fail(c);
                          dst(((t2&0xf)<<4)>>>0|(t1&0x3c)>>2);
                          if ((c = src()) !== null) {
                              t2 = ain[c];
                              if (typeof t2 === 'undefined')
                                  if (c === 61) break; else fail(c);
                              dst(((t1&0x3)<<6)>>>0|t2);
                          }
                      }
                  }
              }
          };

          /**
           * Tests if a string is valid base64.
           * @param {string} str String to test
           * @returns {boolean} `true` if valid, otherwise `false`
           */
          lxiv.test = function(str) {
              return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);
          };

          return lxiv;
      }();

      // encodings/base64

      /**
       * Encodes this ByteBuffer's contents to a base64 encoded string.
       * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}.
       * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}.
       * @returns {string} Base64 encoded string
       * @throws {RangeError} If `begin` or `end` is out of bounds
       * @expose
       */
      ByteBufferPrototype.toBase64 = function(begin, end) {
          if (typeof begin === 'undefined')
              begin = this.offset;
          if (typeof end === 'undefined')
              end = this.limit;
          begin = begin | 0; end = end | 0;
          if (begin < 0 || end > this.capacity || begin > end)
              throw RangeError("begin, end");
          var sd; lxiv.encode(function() {
              return begin < end ? this.view[begin++] : null;
          }.bind(this), sd = stringDestination());
          return sd();
      };

      /**
       * Decodes a base64 encoded string to a ByteBuffer.
       * @param {string} str String to decode
       * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
       *  {@link ByteBuffer.DEFAULT_ENDIAN}.
       * @returns {!ByteBuffer} ByteBuffer
       * @expose
       */
      ByteBuffer.fromBase64 = function(str, littleEndian) {
          if (typeof str !== 'string')
              throw TypeError("str");
          var bb = new ByteBuffer(str.length/4*3, littleEndian),
              i = 0;
          lxiv.decode(stringSource(str), function(b) {
              bb.view[i++] = b;
          });
          bb.limit = i;
          return bb;
      };

      /**
       * Encodes a binary string to base64 like `window.btoa` does.
       * @param {string} str Binary string
       * @returns {string} Base64 encoded string
       * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa
       * @expose
       */
      ByteBuffer.btoa = function(str) {
          return ByteBuffer.fromBinary(str).toBase64();
      };

      /**
       * Decodes a base64 encoded string to binary like `window.atob` does.
       * @param {string} b64 Base64 encoded string
       * @returns {string} Binary string
       * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.atob
       * @expose
       */
      ByteBuffer.atob = function(b64) {
          return ByteBuffer.fromBase64(b64).toBinary();
      };

      // encodings/binary

      /**
       * Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.
       * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
       * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
       * @returns {string} Binary encoded string
       * @throws {RangeError} If `offset > limit`
       * @expose
       */
      ByteBufferPrototype.toBinary = function(begin, end) {
          if (typeof begin === 'undefined')
              begin = this.offset;
          if (typeof end === 'undefined')
              end = this.limit;
          begin |= 0; end |= 0;
          if (begin < 0 || end > this.capacity() || begin > end)
              throw RangeError("begin, end");
          if (begin === end)
              return "";
          var chars = [],
              parts = [];
          while (begin < end) {
              chars.push(this.view[begin++]);
              if (chars.length >= 1024)
                  parts.push(String.fromCharCode.apply(String, chars)),
                  chars = [];
          }
          return parts.join('') + String.fromCharCode.apply(String, chars);
      };

      /**
       * Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.
       * @param {string} str String to decode
       * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
       *  {@link ByteBuffer.DEFAULT_ENDIAN}.
       * @returns {!ByteBuffer} ByteBuffer
       * @expose
       */
      ByteBuffer.fromBinary = function(str, littleEndian) {
          if (typeof str !== 'string')
              throw TypeError("str");
          var i = 0,
              k = str.length,
              charCode,
              bb = new ByteBuffer(k, littleEndian);
          while (i<k) {
              charCode = str.charCodeAt(i);
              if (charCode > 0xff)
                  throw RangeError("illegal char code: "+charCode);
              bb.view[i++] = charCode;
          }
          bb.limit = k;
          return bb;
      };

      // encodings/debug

      /**
       * Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:
       * * `<` : offset,
       * * `'` : markedOffset,
       * * `>` : limit,
       * * `|` : offset and limit,
       * * `[` : offset and markedOffset,
       * * `]` : markedOffset and limit,
       * * `!` : offset, markedOffset and limit
       * @param {boolean=} columns If `true` returns two columns hex + ascii, defaults to `false`
       * @returns {string|!Array.<string>} Debug string or array of lines if `asArray = true`
       * @expose
       * @example `>00'01 02<03` contains four bytes with `limit=0, markedOffset=1, offset=3`
       * @example `00[01 02 03>` contains four bytes with `offset=markedOffset=1, limit=4`
       * @example `00|01 02 03` contains four bytes with `offset=limit=1, markedOffset=-1`
       * @example `|` contains zero bytes with `offset=limit=0, markedOffset=-1`
       */
      ByteBufferPrototype.toDebug = function(columns) {
          var i = -1,
              k = this.buffer.byteLength,
              b,
              hex = "",
              asc = "",
              out = "";
          while (i<k) {
              if (i !== -1) {
                  b = this.view[i];
                  if (b < 0x10) hex += "0"+b.toString(16).toUpperCase();
                  else hex += b.toString(16).toUpperCase();
                  if (columns)
                      asc += b > 32 && b < 127 ? String.fromCharCode(b) : '.';
              }
              ++i;
              if (columns) {
                  if (i > 0 && i % 16 === 0 && i !== k) {
                      while (hex.length < 3*16+3) hex += " ";
                      out += hex+asc+"\n";
                      hex = asc = "";
                  }
              }
              if (i === this.offset && i === this.limit)
                  hex += i === this.markedOffset ? "!" : "|";
              else if (i === this.offset)
                  hex += i === this.markedOffset ? "[" : "<";
              else if (i === this.limit)
                  hex += i === this.markedOffset ? "]" : ">";
              else
                  hex += i === this.markedOffset ? "'" : (columns || (i !== 0 && i !== k) ? " " : "");
          }
          if (columns && hex !== " ") {
              while (hex.length < 3*16+3)
                  hex += " ";
              out += hex + asc + "\n";
          }
          return columns ? out : hex;
      };

      /**
       * Decodes a hex encoded string with marked offsets to a ByteBuffer.
       * @param {string} str Debug string to decode (not be generated with `columns = true`)
       * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
       *  {@link ByteBuffer.DEFAULT_ENDIAN}.
       * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
       *  {@link ByteBuffer.DEFAULT_NOASSERT}.
       * @returns {!ByteBuffer} ByteBuffer
       * @expose
       * @see ByteBuffer#toDebug
       */
      ByteBuffer.fromDebug = function(str, littleEndian, noAssert) {
          var k = str.length,
              bb = new ByteBuffer(((k+1)/3)|0, littleEndian, noAssert);
          var i = 0, j = 0, ch, b,
              rs = false, // Require symbol next
              ho = false, hm = false, hl = false, // Already has offset (ho), markedOffset (hm), limit (hl)?
              fail = false;
          while (i<k) {
              switch (ch = str.charAt(i++)) {
                  case '!':
                      if (!noAssert) {
                          if (ho || hm || hl) {
                              fail = true;
                              break;
                          }
                          ho = hm = hl = true;
                      }
                      bb.offset = bb.markedOffset = bb.limit = j;
                      rs = false;
                      break;
                  case '|':
                      if (!noAssert) {
                          if (ho || hl) {
                              fail = true;
                              break;
                          }
                          ho = hl = true;
                      }
                      bb.offset = bb.limit = j;
                      rs = false;
                      break;
                  case '[':
                      if (!noAssert) {
                          if (ho || hm) {
                              fail = true;
                              break;
                          }
                          ho = hm = true;
                      }
                      bb.offset = bb.markedOffset = j;
                      rs = false;
                      break;
                  case '<':
                      if (!noAssert) {
                          if (ho) {
                              fail = true;
                              break;
                          }
                          ho = true;
                      }
                      bb.offset = j;
                      rs = false;
                      break;
                  case ']':
                      if (!noAssert) {
                          if (hl || hm) {
                              fail = true;
                              break;
                          }
                          hl = hm = true;
                      }
                      bb.limit = bb.markedOffset = j;
                      rs = false;
                      break;
                  case '>':
                      if (!noAssert) {
                          if (hl) {
                              fail = true;
                              break;
                          }
                          hl = true;
                      }
                      bb.limit = j;
                      rs = false;
                      break;
                  case "'":
                      if (!noAssert) {
                          if (hm) {
                              fail = true;
                              break;
                          }
                          hm = true;
                      }
                      bb.markedOffset = j;
                      rs = false;
                      break;
                  case ' ':
                      rs = false;
                      break;
                  default:
                      if (!noAssert) {
                          if (rs) {
                              fail = true;
                              break;
                          }
                      }
                      b = parseInt(ch+str.charAt(i++), 16);
                      if (!noAssert) {
                          if (isNaN(b) || b < 0 || b > 255)
                              throw TypeError("Illegal str: Not a debug encoded string");
                      }
                      bb.view[j++] = b;
                      rs = true;
              }
              if (fail)
                  throw TypeError("Illegal str: Invalid symbol at "+i);
          }
          if (!noAssert) {
              if (!ho || !hl)
                  throw TypeError("Illegal str: Missing offset or limit");
              if (j<bb.buffer.byteLength)
                  throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+j+" < "+k);
          }
          return bb;
      };

      // encodings/hex

      /**
       * Encodes this ByteBuffer's contents to a hex encoded string.
       * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
       * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
       * @returns {string} Hex encoded string
       * @expose
       */
      ByteBufferPrototype.toHex = function(begin, end) {
          begin = typeof begin === 'undefined' ? this.offset : begin;
          end = typeof end === 'undefined' ? this.limit : end;
          if (!this.noAssert) {
              if (typeof begin !== 'number' || begin % 1 !== 0)
                  throw TypeError("Illegal begin: Not an integer");
              begin >>>= 0;
              if (typeof end !== 'number' || end % 1 !== 0)
                  throw TypeError("Illegal end: Not an integer");
              end >>>= 0;
              if (begin < 0 || begin > end || end > this.buffer.byteLength)
                  throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
          }
          var out = new Array(end - begin),
              b;
          while (begin < end) {
              b = this.view[begin++];
              if (b < 0x10)
                  out.push("0", b.toString(16));
              else out.push(b.toString(16));
          }
          return out.join('');
      };

      /**
       * Decodes a hex encoded string to a ByteBuffer.
       * @param {string} str String to decode
       * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
       *  {@link ByteBuffer.DEFAULT_ENDIAN}.
       * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
       *  {@link ByteBuffer.DEFAULT_NOASSERT}.
       * @returns {!ByteBuffer} ByteBuffer
       * @expose
       */
      ByteBuffer.fromHex = function(str, littleEndian, noAssert) {
          if (!noAssert) {
              if (typeof str !== 'string')
                  throw TypeError("Illegal str: Not a string");
              if (str.length % 2 !== 0)
                  throw TypeError("Illegal str: Length not a multiple of 2");
          }
          var k = str.length,
              bb = new ByteBuffer((k / 2) | 0, littleEndian),
              b;
          for (var i=0, j=0; i<k; i+=2) {
              b = parseInt(str.substring(i, i+2), 16);
              if (!noAssert)
                  if (!isFinite(b) || b < 0 || b > 255)
                      throw TypeError("Illegal str: Contains non-hex characters");
              bb.view[j++] = b;
          }
          bb.limit = j;
          return bb;
      };

      // utfx-embeddable

      /**
       * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
       * Released under the Apache License, Version 2.0
       * see: https://github.com/dcodeIO/utfx for details
       */
      var utfx = function() {

          /**
           * utfx namespace.
           * @inner
           * @type {!Object.<string,*>}
           */
          var utfx = {};

          /**
           * Maximum valid code point.
           * @type {number}
           * @const
           */
          utfx.MAX_CODEPOINT = 0x10FFFF;

          /**
           * Encodes UTF8 code points to UTF8 bytes.
           * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
           *  respectively `null` if there are no more code points left or a single numeric code point.
           * @param {!function(number)} dst Bytes destination as a function successively called with the next byte
           */
          utfx.encodeUTF8 = function(src, dst) {
              var cp = null;
              if (typeof src === 'number')
                  cp = src,
                  src = function() { return null; };
              while (cp !== null || (cp = src()) !== null) {
                  if (cp < 0x80)
                      dst(cp&0x7F);
                  else if (cp < 0x800)
                      dst(((cp>>6)&0x1F)|0xC0),
                      dst((cp&0x3F)|0x80);
                  else if (cp < 0x10000)
                      dst(((cp>>12)&0x0F)|0xE0),
                      dst(((cp>>6)&0x3F)|0x80),
                      dst((cp&0x3F)|0x80);
                  else
                      dst(((cp>>18)&0x07)|0xF0),
                      dst(((cp>>12)&0x3F)|0x80),
                      dst(((cp>>6)&0x3F)|0x80),
                      dst((cp&0x3F)|0x80);
                  cp = null;
              }
          };

          /**
           * Decodes UTF8 bytes to UTF8 code points.
           * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
           *  are no more bytes left.
           * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.
           * @throws {RangeError} If a starting byte is invalid in UTF8
           * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the
           *  remaining bytes.
           */
          utfx.decodeUTF8 = function(src, dst) {
              var a, b, c, d, fail = function(b) {
                  b = b.slice(0, b.indexOf(null));
                  var err = Error(b.toString());
                  err.name = "TruncatedError";
                  err['bytes'] = b;
                  throw err;
              };
              while ((a = src()) !== null) {
                  if ((a&0x80) === 0)
                      dst(a);
                  else if ((a&0xE0) === 0xC0)
                      ((b = src()) === null) && fail([a, b]),
                      dst(((a&0x1F)<<6) | (b&0x3F));
                  else if ((a&0xF0) === 0xE0)
                      ((b=src()) === null || (c=src()) === null) && fail([a, b, c]),
                      dst(((a&0x0F)<<12) | ((b&0x3F)<<6) | (c&0x3F));
                  else if ((a&0xF8) === 0xF0)
                      ((b=src()) === null || (c=src()) === null || (d=src()) === null) && fail([a, b, c ,d]),
                      dst(((a&0x07)<<18) | ((b&0x3F)<<12) | ((c&0x3F)<<6) | (d&0x3F));
                  else throw RangeError("Illegal starting byte: "+a);
              }
          };

          /**
           * Converts UTF16 characters to UTF8 code points.
           * @param {!function():number|null} src Characters source as a function returning the next char code respectively
           *  `null` if there are no more characters left.
           * @param {!function(number)} dst Code points destination as a function successively called with each converted code
           *  point.
           */
          utfx.UTF16toUTF8 = function(src, dst) {
              var c1, c2 = null;
              while (true) {
                  if ((c1 = c2 !== null ? c2 : src()) === null)
                      break;
                  if (c1 >= 0xD800 && c1 <= 0xDFFF) {
                      if ((c2 = src()) !== null) {
                          if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
                              dst((c1-0xD800)*0x400+c2-0xDC00+0x10000);
                              c2 = null; continue;
                          }
                      }
                  }
                  dst(c1);
              }
              if (c2 !== null) dst(c2);
          };

          /**
           * Converts UTF8 code points to UTF16 characters.
           * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
           *  respectively `null` if there are no more code points left or a single numeric code point.
           * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
           * @throws {RangeError} If a code point is out of range
           */
          utfx.UTF8toUTF16 = function(src, dst) {
              var cp = null;
              if (typeof src === 'number')
                  cp = src, src = function() { return null; };
              while (cp !== null || (cp = src()) !== null) {
                  if (cp <= 0xFFFF)
                      dst(cp);
                  else
                      cp -= 0x10000,
                      dst((cp>>10)+0xD800),
                      dst((cp%0x400)+0xDC00);
                  cp = null;
              }
          };

          /**
           * Converts and encodes UTF16 characters to UTF8 bytes.
           * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`
           *  if there are no more characters left.
           * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
           */
          utfx.encodeUTF16toUTF8 = function(src, dst) {
              utfx.UTF16toUTF8(src, function(cp) {
                  utfx.encodeUTF8(cp, dst);
              });
          };

          /**
           * Decodes and converts UTF8 bytes to UTF16 characters.
           * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
           *  are no more bytes left.
           * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
           * @throws {RangeError} If a starting byte is invalid in UTF8
           * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.
           */
          utfx.decodeUTF8toUTF16 = function(src, dst) {
              utfx.decodeUTF8(src, function(cp) {
                  utfx.UTF8toUTF16(cp, dst);
              });
          };

          /**
           * Calculates the byte length of an UTF8 code point.
           * @param {number} cp UTF8 code point
           * @returns {number} Byte length
           */
          utfx.calculateCodePoint = function(cp) {
              return (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
          };

          /**
           * Calculates the number of UTF8 bytes required to store UTF8 code points.
           * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively
           *  `null` if there are no more code points left.
           * @returns {number} The number of UTF8 bytes required
           */
          utfx.calculateUTF8 = function(src) {
              var cp, l=0;
              while ((cp = src()) !== null)
                  l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
              return l;
          };

          /**
           * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.
           * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively
           *  `null` if there are no more characters left.
           * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.
           */
          utfx.calculateUTF16asUTF8 = function(src) {
              var n=0, l=0;
              utfx.UTF16toUTF8(src, function(cp) {
                  ++n; l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
              });
              return [n,l];
          };

          return utfx;
      }();

      // encodings/utf8

      /**
       * Encodes this ByteBuffer's contents between {@link ByteBuffer#offset} and {@link ByteBuffer#limit} to an UTF8 encoded
       *  string.
       * @returns {string} Hex encoded string
       * @throws {RangeError} If `offset > limit`
       * @expose
       */
      ByteBufferPrototype.toUTF8 = function(begin, end) {
          if (typeof begin === 'undefined') begin = this.offset;
          if (typeof end === 'undefined') end = this.limit;
          if (!this.noAssert) {
              if (typeof begin !== 'number' || begin % 1 !== 0)
                  throw TypeError("Illegal begin: Not an integer");
              begin >>>= 0;
              if (typeof end !== 'number' || end % 1 !== 0)
                  throw TypeError("Illegal end: Not an integer");
              end >>>= 0;
              if (begin < 0 || begin > end || end > this.buffer.byteLength)
                  throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
          }
          var sd; try {
              utfx.decodeUTF8toUTF16(function() {
                  return begin < end ? this.view[begin++] : null;
              }.bind(this), sd = stringDestination());
          } catch (e) {
              if (begin !== end)
                  throw RangeError("Illegal range: Truncated data, "+begin+" != "+end);
          }
          return sd();
      };

      /**
       * Decodes an UTF8 encoded string to a ByteBuffer.
       * @param {string} str String to decode
       * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
       *  {@link ByteBuffer.DEFAULT_ENDIAN}.
       * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
       *  {@link ByteBuffer.DEFAULT_NOASSERT}.
       * @returns {!ByteBuffer} ByteBuffer
       * @expose
       */
      ByteBuffer.fromUTF8 = function(str, littleEndian, noAssert) {
          if (!noAssert)
              if (typeof str !== 'string')
                  throw TypeError("Illegal str: Not a string");
          var bb = new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str), true)[1], littleEndian, noAssert),
              i = 0;
          utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
              bb.view[i++] = b;
          });
          bb.limit = i;
          return bb;
      };

      return ByteBuffer;
  });
  });

  var empty$2 = {};

  var empty$3 = /*#__PURE__*/Object.freeze({
    default: empty$2
  });

  var require$$2 = ( empty$3 && empty$2 ) || empty$3;

  var protobuf = createCommonjsModule(function (module) {
  /*
   Copyright 2013 Daniel Wirtz <dcode@dcode.io>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   */

  /**
   * @license protobuf.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
   * Released under the Apache License, Version 2.0
   * see: https://github.com/dcodeIO/protobuf.js for details
   */
  (function(global, factory) {

      /* AMD */ if (typeof commonjsRequire === "function" && 'object' === "object" && module && module["exports"])
          module["exports"] = factory(bytebuffer, true);
      /* Global */ else
          (global["dcodeIO"] = global["dcodeIO"] || {})["ProtoBuf"] = factory(global["dcodeIO"]["ByteBuffer"]);

  })(commonjsGlobal, function(ByteBuffer, isCommonJS) {

      /**
       * The ProtoBuf namespace.
       * @exports ProtoBuf
       * @namespace
       * @expose
       */
      var ProtoBuf = {};

      /**
       * @type {!function(new: ByteBuffer, ...[*])}
       * @expose
       */
      ProtoBuf.ByteBuffer = ByteBuffer;

      /**
       * @type {?function(new: Long, ...[*])}
       * @expose
       */
      ProtoBuf.Long = ByteBuffer.Long || null;

      /**
       * ProtoBuf.js version.
       * @type {string}
       * @const
       * @expose
       */
      ProtoBuf.VERSION = "5.0.3";

      /**
       * Wire types.
       * @type {Object.<string,number>}
       * @const
       * @expose
       */
      ProtoBuf.WIRE_TYPES = {};

      /**
       * Varint wire type.
       * @type {number}
       * @expose
       */
      ProtoBuf.WIRE_TYPES.VARINT = 0;

      /**
       * Fixed 64 bits wire type.
       * @type {number}
       * @const
       * @expose
       */
      ProtoBuf.WIRE_TYPES.BITS64 = 1;

      /**
       * Length delimited wire type.
       * @type {number}
       * @const
       * @expose
       */
      ProtoBuf.WIRE_TYPES.LDELIM = 2;

      /**
       * Start group wire type.
       * @type {number}
       * @const
       * @expose
       */
      ProtoBuf.WIRE_TYPES.STARTGROUP = 3;

      /**
       * End group wire type.
       * @type {number}
       * @const
       * @expose
       */
      ProtoBuf.WIRE_TYPES.ENDGROUP = 4;

      /**
       * Fixed 32 bits wire type.
       * @type {number}
       * @const
       * @expose
       */
      ProtoBuf.WIRE_TYPES.BITS32 = 5;

      /**
       * Packable wire types.
       * @type {!Array.<number>}
       * @const
       * @expose
       */
      ProtoBuf.PACKABLE_WIRE_TYPES = [
          ProtoBuf.WIRE_TYPES.VARINT,
          ProtoBuf.WIRE_TYPES.BITS64,
          ProtoBuf.WIRE_TYPES.BITS32
      ];

      /**
       * Types.
       * @dict
       * @type {!Object.<string,{name: string, wireType: number, defaultValue: *}>}
       * @const
       * @expose
       */
      ProtoBuf.TYPES = {
          // According to the protobuf spec.
          "int32": {
              name: "int32",
              wireType: ProtoBuf.WIRE_TYPES.VARINT,
              defaultValue: 0
          },
          "uint32": {
              name: "uint32",
              wireType: ProtoBuf.WIRE_TYPES.VARINT,
              defaultValue: 0
          },
          "sint32": {
              name: "sint32",
              wireType: ProtoBuf.WIRE_TYPES.VARINT,
              defaultValue: 0
          },
          "int64": {
              name: "int64",
              wireType: ProtoBuf.WIRE_TYPES.VARINT,
              defaultValue: ProtoBuf.Long ? ProtoBuf.Long.ZERO : undefined
          },
          "uint64": {
              name: "uint64",
              wireType: ProtoBuf.WIRE_TYPES.VARINT,
              defaultValue: ProtoBuf.Long ? ProtoBuf.Long.UZERO : undefined
          },
          "sint64": {
              name: "sint64",
              wireType: ProtoBuf.WIRE_TYPES.VARINT,
              defaultValue: ProtoBuf.Long ? ProtoBuf.Long.ZERO : undefined
          },
          "bool": {
              name: "bool",
              wireType: ProtoBuf.WIRE_TYPES.VARINT,
              defaultValue: false
          },
          "double": {
              name: "double",
              wireType: ProtoBuf.WIRE_TYPES.BITS64,
              defaultValue: 0
          },
          "string": {
              name: "string",
              wireType: ProtoBuf.WIRE_TYPES.LDELIM,
              defaultValue: ""
          },
          "bytes": {
              name: "bytes",
              wireType: ProtoBuf.WIRE_TYPES.LDELIM,
              defaultValue: null // overridden in the code, must be a unique instance
          },
          "fixed32": {
              name: "fixed32",
              wireType: ProtoBuf.WIRE_TYPES.BITS32,
              defaultValue: 0
          },
          "sfixed32": {
              name: "sfixed32",
              wireType: ProtoBuf.WIRE_TYPES.BITS32,
              defaultValue: 0
          },
          "fixed64": {
              name: "fixed64",
              wireType: ProtoBuf.WIRE_TYPES.BITS64,
              defaultValue:  ProtoBuf.Long ? ProtoBuf.Long.UZERO : undefined
          },
          "sfixed64": {
              name: "sfixed64",
              wireType: ProtoBuf.WIRE_TYPES.BITS64,
              defaultValue: ProtoBuf.Long ? ProtoBuf.Long.ZERO : undefined
          },
          "float": {
              name: "float",
              wireType: ProtoBuf.WIRE_TYPES.BITS32,
              defaultValue: 0
          },
          "enum": {
              name: "enum",
              wireType: ProtoBuf.WIRE_TYPES.VARINT,
              defaultValue: 0
          },
          "message": {
              name: "message",
              wireType: ProtoBuf.WIRE_TYPES.LDELIM,
              defaultValue: null
          },
          "group": {
              name: "group",
              wireType: ProtoBuf.WIRE_TYPES.STARTGROUP,
              defaultValue: null
          }
      };

      /**
       * Valid map key types.
       * @type {!Array.<!Object.<string,{name: string, wireType: number, defaultValue: *}>>}
       * @const
       * @expose
       */
      ProtoBuf.MAP_KEY_TYPES = [
          ProtoBuf.TYPES["int32"],
          ProtoBuf.TYPES["sint32"],
          ProtoBuf.TYPES["sfixed32"],
          ProtoBuf.TYPES["uint32"],
          ProtoBuf.TYPES["fixed32"],
          ProtoBuf.TYPES["int64"],
          ProtoBuf.TYPES["sint64"],
          ProtoBuf.TYPES["sfixed64"],
          ProtoBuf.TYPES["uint64"],
          ProtoBuf.TYPES["fixed64"],
          ProtoBuf.TYPES["bool"],
          ProtoBuf.TYPES["string"],
          ProtoBuf.TYPES["bytes"]
      ];

      /**
       * Minimum field id.
       * @type {number}
       * @const
       * @expose
       */
      ProtoBuf.ID_MIN = 1;

      /**
       * Maximum field id.
       * @type {number}
       * @const
       * @expose
       */
      ProtoBuf.ID_MAX = 0x1FFFFFFF;

      /**
       * If set to `true`, field names will be converted from underscore notation to camel case. Defaults to `false`.
       *  Must be set prior to parsing.
       * @type {boolean}
       * @expose
       */
      ProtoBuf.convertFieldsToCamelCase = false;

      /**
       * By default, messages are populated with (setX, set_x) accessors for each field. This can be disabled by
       *  setting this to `false` prior to building messages.
       * @type {boolean}
       * @expose
       */
      ProtoBuf.populateAccessors = true;

      /**
       * By default, messages are populated with default values if a field is not present on the wire. To disable
       *  this behavior, set this setting to `false`.
       * @type {boolean}
       * @expose
       */
      ProtoBuf.populateDefaults = true;

      /**
       * @alias ProtoBuf.Util
       * @expose
       */
      ProtoBuf.Util = (function() {

          /**
           * ProtoBuf utilities.
           * @exports ProtoBuf.Util
           * @namespace
           */
          var Util = {};

          /**
           * Flag if running in node or not.
           * @type {boolean}
           * @const
           * @expose
           */
          Util.IS_NODE = !!(
              typeof process === 'object' && process+'' === '[object process]' && !process['browser']
          );

          /**
           * Constructs a XMLHttpRequest object.
           * @return {XMLHttpRequest}
           * @throws {Error} If XMLHttpRequest is not supported
           * @expose
           */
          Util.XHR = function() {
              // No dependencies please, ref: http://www.quirksmode.org/js/xmlhttp.html
              var XMLHttpFactories = [
                  function () {return new XMLHttpRequest()},
                  function () {return new ActiveXObject("Msxml2.XMLHTTP")},
                  function () {return new ActiveXObject("Msxml3.XMLHTTP")},
                  function () {return new ActiveXObject("Microsoft.XMLHTTP")}
              ];
              /** @type {?XMLHttpRequest} */
              var xhr = null;
              for (var i=0;i<XMLHttpFactories.length;i++) {
                  try { xhr = XMLHttpFactories[i](); }
                  catch (e) { continue; }
                  break;
              }
              if (!xhr)
                  throw Error("XMLHttpRequest is not supported");
              return xhr;
          };

          /**
           * Fetches a resource.
           * @param {string} path Resource path
           * @param {function(?string)=} callback Callback receiving the resource's contents. If omitted the resource will
           *   be fetched synchronously. If the request failed, contents will be null.
           * @return {?string|undefined} Resource contents if callback is omitted (null if the request failed), else undefined.
           * @expose
           */
          Util.fetch = function(path, callback) {
              if (callback && typeof callback != 'function')
                  callback = null;
              if (Util.IS_NODE) {
                  var fs = require$$2;
                  if (callback) {
                      fs.readFile(path, function(err, data) {
                          if (err)
                              callback(null);
                          else
                              callback(""+data);
                      });
                  } else
                      try {
                          return fs.readFileSync(path);
                      } catch (e) {
                          return null;
                      }
              } else {
                  var xhr = Util.XHR();
                  xhr.open('GET', path, callback ? true : false);
                  // xhr.setRequestHeader('User-Agent', 'XMLHTTP/1.0');
                  xhr.setRequestHeader('Accept', 'text/plain');
                  if (typeof xhr.overrideMimeType === 'function') xhr.overrideMimeType('text/plain');
                  if (callback) {
                      xhr.onreadystatechange = function() {
                          if (xhr.readyState != 4) return;
                          if (/* remote */ xhr.status == 200 || /* local */ (xhr.status == 0 && typeof xhr.responseText === 'string'))
                              callback(xhr.responseText);
                          else
                              callback(null);
                      };
                      if (xhr.readyState == 4)
                          return;
                      xhr.send(null);
                  } else {
                      xhr.send(null);
                      if (/* remote */ xhr.status == 200 || /* local */ (xhr.status == 0 && typeof xhr.responseText === 'string'))
                          return xhr.responseText;
                      return null;
                  }
              }
          };

          /**
           * Converts a string to camel case.
           * @param {string} str
           * @returns {string}
           * @expose
           */
          Util.toCamelCase = function(str) {
              return str.replace(/_([a-zA-Z])/g, function ($0, $1) {
                  return $1.toUpperCase();
              });
          };

          return Util;
      })();

      /**
       * Language expressions.
       * @type {!Object.<string,!RegExp>}
       * @expose
       */
      ProtoBuf.Lang = {

          // Characters always ending a statement
          DELIM: /[\s\{\}=;:\[\],'"\(\)<>]/g,

          // Field rules
          RULE: /^(?:required|optional|repeated|map)$/,

          // Field types
          TYPE: /^(?:double|float|int32|uint32|sint32|int64|uint64|sint64|fixed32|sfixed32|fixed64|sfixed64|bool|string|bytes)$/,

          // Names
          NAME: /^[a-zA-Z_][a-zA-Z_0-9]*$/,

          // Type definitions
          TYPEDEF: /^[a-zA-Z][a-zA-Z_0-9]*$/,

          // Type references
          TYPEREF: /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,

          // Fully qualified type references
          FQTYPEREF: /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/,

          // All numbers
          NUMBER: /^-?(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+|([0-9]*(\.[0-9]*)?([Ee][+-]?[0-9]+)?)|inf|nan)$/,

          // Decimal numbers
          NUMBER_DEC: /^(?:[1-9][0-9]*|0)$/,

          // Hexadecimal numbers
          NUMBER_HEX: /^0[xX][0-9a-fA-F]+$/,

          // Octal numbers
          NUMBER_OCT: /^0[0-7]+$/,

          // Floating point numbers
          NUMBER_FLT: /^([0-9]*(\.[0-9]*)?([Ee][+-]?[0-9]+)?|inf|nan)$/,

          // Booleans
          BOOL: /^(?:true|false)$/i,

          // Id numbers
          ID: /^(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+)$/,

          // Negative id numbers (enum values)
          NEGID: /^\-?(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+)$/,

          // Whitespaces
          WHITESPACE: /\s/,

          // All strings
          STRING: /(?:"([^"\\]*(?:\\.[^"\\]*)*)")|(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g,

          // Double quoted strings
          STRING_DQ: /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,

          // Single quoted strings
          STRING_SQ: /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g
      };

      /**
       * @alias ProtoBuf.DotProto
       * @expose
       */
      ProtoBuf.DotProto = (function(ProtoBuf, Lang) {

          /**
           * Utilities to parse .proto files.
           * @exports ProtoBuf.DotProto
           * @namespace
           */
          var DotProto = {};

          /**
           * Constructs a new Tokenizer.
           * @exports ProtoBuf.DotProto.Tokenizer
           * @class prototype tokenizer
           * @param {string} proto Proto to tokenize
           * @constructor
           */
          var Tokenizer = function(proto) {

              /**
               * Source to parse.
               * @type {string}
               * @expose
               */
              this.source = proto+"";

              /**
               * Current index.
               * @type {number}
               * @expose
               */
              this.index = 0;

              /**
               * Current line.
               * @type {number}
               * @expose
               */
              this.line = 1;

              /**
               * Token stack.
               * @type {!Array.<string>}
               * @expose
               */
              this.stack = [];

              /**
               * Opening character of the current string read, if any.
               * @type {?string}
               * @private
               */
              this._stringOpen = null;
          };

          /**
           * @alias ProtoBuf.DotProto.Tokenizer.prototype
           * @inner
           */
          var TokenizerPrototype = Tokenizer.prototype;

          /**
           * Reads a string beginning at the current index.
           * @return {string}
           * @private
           */
          TokenizerPrototype._readString = function() {
              var re = this._stringOpen === '"'
                  ? Lang.STRING_DQ
                  : Lang.STRING_SQ;
              re.lastIndex = this.index - 1; // Include the open quote
              var match = re.exec(this.source);
              if (!match)
                  throw Error("unterminated string");
              this.index = re.lastIndex;
              this.stack.push(this._stringOpen);
              this._stringOpen = null;
              return match[1];
          };

          /**
           * Gets the next token and advances by one.
           * @return {?string} Token or `null` on EOF
           * @expose
           */
          TokenizerPrototype.next = function() {
              if (this.stack.length > 0)
                  return this.stack.shift();
              if (this.index >= this.source.length)
                  return null;
              if (this._stringOpen !== null)
                  return this._readString();

              var repeat,
                  prev,
                  next;
              do {
                  repeat = false;

                  // Strip white spaces
                  while (Lang.WHITESPACE.test(next = this.source.charAt(this.index))) {
                      if (next === '\n')
                          ++this.line;
                      if (++this.index === this.source.length)
                          return null;
                  }

                  // Strip comments
                  if (this.source.charAt(this.index) === '/') {
                      ++this.index;
                      if (this.source.charAt(this.index) === '/') { // Line
                          while (this.source.charAt(++this.index) !== '\n')
                              if (this.index == this.source.length)
                                  return null;
                          ++this.index;
                          ++this.line;
                          repeat = true;
                      } else if ((next = this.source.charAt(this.index)) === '*') { /* Block */
                          do {
                              if (next === '\n')
                                  ++this.line;
                              if (++this.index === this.source.length)
                                  return null;
                              prev = next;
                              next = this.source.charAt(this.index);
                          } while (prev !== '*' || next !== '/');
                          ++this.index;
                          repeat = true;
                      } else
                          return '/';
                  }
              } while (repeat);

              if (this.index === this.source.length)
                  return null;

              // Read the next token
              var end = this.index;
              Lang.DELIM.lastIndex = 0;
              var delim = Lang.DELIM.test(this.source.charAt(end++));
              if (!delim)
                  while(end < this.source.length && !Lang.DELIM.test(this.source.charAt(end)))
                      ++end;
              var token = this.source.substring(this.index, this.index = end);
              if (token === '"' || token === "'")
                  this._stringOpen = token;
              return token;
          };

          /**
           * Peeks for the next token.
           * @return {?string} Token or `null` on EOF
           * @expose
           */
          TokenizerPrototype.peek = function() {
              if (this.stack.length === 0) {
                  var token = this.next();
                  if (token === null)
                      return null;
                  this.stack.push(token);
              }
              return this.stack[0];
          };

          /**
           * Skips a specific token and throws if it differs.
           * @param {string} expected Expected token
           * @throws {Error} If the actual token differs
           */
          TokenizerPrototype.skip = function(expected) {
              var actual = this.next();
              if (actual !== expected)
                  throw Error("illegal '"+actual+"', '"+expected+"' expected");
          };

          /**
           * Omits an optional token.
           * @param {string} expected Expected optional token
           * @returns {boolean} `true` if the token exists
           */
          TokenizerPrototype.omit = function(expected) {
              if (this.peek() === expected) {
                  this.next();
                  return true;
              }
              return false;
          };

          /**
           * Returns a string representation of this object.
           * @return {string} String representation as of "Tokenizer(index/length)"
           * @expose
           */
          TokenizerPrototype.toString = function() {
              return "Tokenizer ("+this.index+"/"+this.source.length+" at line "+this.line+")";
          };

          /**
           * @alias ProtoBuf.DotProto.Tokenizer
           * @expose
           */
          DotProto.Tokenizer = Tokenizer;

          /**
           * Constructs a new Parser.
           * @exports ProtoBuf.DotProto.Parser
           * @class prototype parser
           * @param {string} source Source
           * @constructor
           */
          var Parser = function(source) {

              /**
               * Tokenizer.
               * @type {!ProtoBuf.DotProto.Tokenizer}
               * @expose
               */
              this.tn = new Tokenizer(source);

              /**
               * Whether parsing proto3 or not.
               * @type {boolean}
               */
              this.proto3 = false;
          };

          /**
           * @alias ProtoBuf.DotProto.Parser.prototype
           * @inner
           */
          var ParserPrototype = Parser.prototype;

          /**
           * Parses the source.
           * @returns {!Object}
           * @throws {Error} If the source cannot be parsed
           * @expose
           */
          ParserPrototype.parse = function() {
              var topLevel = {
                  "name": "[ROOT]", // temporary
                  "package": null,
                  "messages": [],
                  "enums": [],
                  "imports": [],
                  "options": {},
                  "services": []
                  // "syntax": undefined
              };
              var token,
                  head = true,
                  weak;
              try {
                  while (token = this.tn.next()) {
                      switch (token) {
                          case 'package':
                              if (!head || topLevel["package"] !== null)
                                  throw Error("unexpected 'package'");
                              token = this.tn.next();
                              if (!Lang.TYPEREF.test(token))
                                  throw Error("illegal package name: " + token);
                              this.tn.skip(";");
                              topLevel["package"] = token;
                              break;
                          case 'import':
                              if (!head)
                                  throw Error("unexpected 'import'");
                              token = this.tn.peek();
                              if (token === "public" || (weak = token === "weak")) // token ignored
                                  this.tn.next();
                              token = this._readString();
                              this.tn.skip(";");
                              if (!weak) // import ignored
                                  topLevel["imports"].push(token);
                              break;
                          case 'syntax':
                              if (!head)
                                  throw Error("unexpected 'syntax'");
                              this.tn.skip("=");
                              if ((topLevel["syntax"] = this._readString()) === "proto3")
                                  this.proto3 = true;
                              this.tn.skip(";");
                              break;
                          case 'message':
                              this._parseMessage(topLevel, null);
                              head = false;
                              break;
                          case 'enum':
                              this._parseEnum(topLevel);
                              head = false;
                              break;
                          case 'option':
                              this._parseOption(topLevel);
                              break;
                          case 'service':
                              this._parseService(topLevel);
                              break;
                          case 'extend':
                              this._parseExtend(topLevel);
                              break;
                          default:
                              throw Error("unexpected '" + token + "'");
                      }
                  }
              } catch (e) {
                  e.message = "Parse error at line "+this.tn.line+": " + e.message;
                  throw e;
              }
              delete topLevel["name"];
              return topLevel;
          };

          /**
           * Parses the specified source.
           * @returns {!Object}
           * @throws {Error} If the source cannot be parsed
           * @expose
           */
          Parser.parse = function(source) {
              return new Parser(source).parse();
          };

          // ----- Conversion ------

          /**
           * Converts a numerical string to an id.
           * @param {string} value
           * @param {boolean=} mayBeNegative
           * @returns {number}
           * @inner
           */
          function mkId(value, mayBeNegative) {
              var id = -1,
                  sign = 1;
              if (value.charAt(0) == '-') {
                  sign = -1;
                  value = value.substring(1);
              }
              if (Lang.NUMBER_DEC.test(value))
                  id = parseInt(value);
              else if (Lang.NUMBER_HEX.test(value))
                  id = parseInt(value.substring(2), 16);
              else if (Lang.NUMBER_OCT.test(value))
                  id = parseInt(value.substring(1), 8);
              else
                  throw Error("illegal id value: " + (sign < 0 ? '-' : '') + value);
              id = (sign*id)|0; // Force to 32bit
              if (!mayBeNegative && id < 0)
                  throw Error("illegal id value: " + (sign < 0 ? '-' : '') + value);
              return id;
          }

          /**
           * Converts a numerical string to a number.
           * @param {string} val
           * @returns {number}
           * @inner
           */
          function mkNumber(val) {
              var sign = 1;
              if (val.charAt(0) == '-') {
                  sign = -1;
                  val = val.substring(1);
              }
              if (Lang.NUMBER_DEC.test(val))
                  return sign * parseInt(val, 10);
              else if (Lang.NUMBER_HEX.test(val))
                  return sign * parseInt(val.substring(2), 16);
              else if (Lang.NUMBER_OCT.test(val))
                  return sign * parseInt(val.substring(1), 8);
              else if (val === 'inf')
                  return sign * Infinity;
              else if (val === 'nan')
                  return NaN;
              else if (Lang.NUMBER_FLT.test(val))
                  return sign * parseFloat(val);
              throw Error("illegal number value: " + (sign < 0 ? '-' : '') + val);
          }

          // ----- Reading ------

          /**
           * Reads a string.
           * @returns {string}
           * @private
           */
          ParserPrototype._readString = function() {
              var value = "",
                  token,
                  delim;
              do {
                  delim = this.tn.next();
                  if (delim !== "'" && delim !== '"')
                      throw Error("illegal string delimiter: "+delim);
                  value += this.tn.next();
                  this.tn.skip(delim);
                  token = this.tn.peek();
              } while (token === '"' || token === '"'); // multi line?
              return value;
          };

          /**
           * Reads a value.
           * @param {boolean=} mayBeTypeRef
           * @returns {number|boolean|string}
           * @private
           */
          ParserPrototype._readValue = function(mayBeTypeRef) {
              var token = this.tn.peek();
              if (token === '"' || token === "'")
                  return this._readString();
              this.tn.next();
              if (Lang.NUMBER.test(token))
                  return mkNumber(token);
              if (Lang.BOOL.test(token))
                  return (token.toLowerCase() === 'true');
              if (mayBeTypeRef && Lang.TYPEREF.test(token))
                  return token;
              throw Error("illegal value: "+token);

          };

          // ----- Parsing constructs -----

          /**
           * Parses a namespace option.
           * @param {!Object} parent Parent definition
           * @param {boolean=} isList
           * @private
           */
          ParserPrototype._parseOption = function(parent, isList) {
              var token = this.tn.next(),
                  custom = false;
              if (token === '(') {
                  custom = true;
                  token = this.tn.next();
              }
              if (!Lang.TYPEREF.test(token))
                  // we can allow options of the form google.protobuf.* since they will just get ignored anyways
                  // if (!/google\.protobuf\./.test(token)) // FIXME: Why should that not be a valid typeref?
                      throw Error("illegal option name: "+token);
              var name = token;
              if (custom) { // (my_method_option).foo, (my_method_option), some_method_option, (foo.my_option).bar
                  this.tn.skip(')');
                  name = '('+name+')';
                  token = this.tn.peek();
                  if (Lang.FQTYPEREF.test(token)) {
                      name += token;
                      this.tn.next();
                  }
              }
              this.tn.skip('=');
              this._parseOptionValue(parent, name);
              if (!isList)
                  this.tn.skip(";");
          };

          /**
           * Sets an option on the specified options object.
           * @param {!Object.<string,*>} options
           * @param {string} name
           * @param {string|number|boolean} value
           * @inner
           */
          function setOption(options, name, value) {
              if (typeof options[name] === 'undefined')
                  options[name] = value;
              else {
                  if (!Array.isArray(options[name]))
                      options[name] = [ options[name] ];
                  options[name].push(value);
              }
          }

          /**
           * Parses an option value.
           * @param {!Object} parent
           * @param {string} name
           * @private
           */
          ParserPrototype._parseOptionValue = function(parent, name) {
              var token = this.tn.peek();
              if (token !== '{') { // Plain value
                  setOption(parent["options"], name, this._readValue(true));
              } else { // Aggregate options
                  this.tn.skip("{");
                  while ((token = this.tn.next()) !== '}') {
                      if (!Lang.NAME.test(token))
                          throw Error("illegal option name: " + name + "." + token);
                      if (this.tn.omit(":"))
                          setOption(parent["options"], name + "." + token, this._readValue(true));
                      else
                          this._parseOptionValue(parent, name + "." + token);
                  }
              }
          };

          /**
           * Parses a service definition.
           * @param {!Object} parent Parent definition
           * @private
           */
          ParserPrototype._parseService = function(parent) {
              var token = this.tn.next();
              if (!Lang.NAME.test(token))
                  throw Error("illegal service name at line "+this.tn.line+": "+token);
              var name = token;
              var svc = {
                  "name": name,
                  "rpc": {},
                  "options": {}
              };
              this.tn.skip("{");
              while ((token = this.tn.next()) !== '}') {
                  if (token === "option")
                      this._parseOption(svc);
                  else if (token === 'rpc')
                      this._parseServiceRPC(svc);
                  else
                      throw Error("illegal service token: "+token);
              }
              this.tn.omit(";");
              parent["services"].push(svc);
          };

          /**
           * Parses a RPC service definition of the form ['rpc', name, (request), 'returns', (response)].
           * @param {!Object} svc Service definition
           * @private
           */
          ParserPrototype._parseServiceRPC = function(svc) {
              var type = "rpc",
                  token = this.tn.next();
              if (!Lang.NAME.test(token))
                  throw Error("illegal rpc service method name: "+token);
              var name = token;
              var method = {
                  "request": null,
                  "response": null,
                  "request_stream": false,
                  "response_stream": false,
                  "options": {}
              };
              this.tn.skip("(");
              token = this.tn.next();
              if (token.toLowerCase() === "stream") {
                method["request_stream"] = true;
                token = this.tn.next();
              }
              if (!Lang.TYPEREF.test(token))
                  throw Error("illegal rpc service request type: "+token);
              method["request"] = token;
              this.tn.skip(")");
              token = this.tn.next();
              if (token.toLowerCase() !== "returns")
                  throw Error("illegal rpc service request type delimiter: "+token);
              this.tn.skip("(");
              token = this.tn.next();
              if (token.toLowerCase() === "stream") {
                method["response_stream"] = true;
                token = this.tn.next();
              }
              method["response"] = token;
              this.tn.skip(")");
              token = this.tn.peek();
              if (token === '{') {
                  this.tn.next();
                  while ((token = this.tn.next()) !== '}') {
                      if (token === 'option')
                          this._parseOption(method);
                      else
                          throw Error("illegal rpc service token: " + token);
                  }
                  this.tn.omit(";");
              } else
                  this.tn.skip(";");
              if (typeof svc[type] === 'undefined')
                  svc[type] = {};
              svc[type][name] = method;
          };

          /**
           * Parses a message definition.
           * @param {!Object} parent Parent definition
           * @param {!Object=} fld Field definition if this is a group
           * @returns {!Object}
           * @private
           */
          ParserPrototype._parseMessage = function(parent, fld) {
              var isGroup = !!fld,
                  token = this.tn.next();
              var msg = {
                  "name": "",
                  "fields": [],
                  "enums": [],
                  "messages": [],
                  "options": {},
                  "services": [],
                  "oneofs": {}
                  // "extensions": undefined
              };
              if (!Lang.NAME.test(token))
                  throw Error("illegal "+(isGroup ? "group" : "message")+" name: "+token);
              msg["name"] = token;
              if (isGroup) {
                  this.tn.skip("=");
                  fld["id"] = mkId(this.tn.next());
                  msg["isGroup"] = true;
              }
              token = this.tn.peek();
              if (token === '[' && fld)
                  this._parseFieldOptions(fld);
              this.tn.skip("{");
              while ((token = this.tn.next()) !== '}') {
                  if (Lang.RULE.test(token))
                      this._parseMessageField(msg, token);
                  else if (token === "oneof")
                      this._parseMessageOneOf(msg);
                  else if (token === "enum")
                      this._parseEnum(msg);
                  else if (token === "message")
                      this._parseMessage(msg);
                  else if (token === "option")
                      this._parseOption(msg);
                  else if (token === "service")
                      this._parseService(msg);
                  else if (token === "extensions")
                      if (msg.hasOwnProperty("extensions")) {
                          msg["extensions"] = msg["extensions"].concat(this._parseExtensionRanges());
                      } else {
                          msg["extensions"] = this._parseExtensionRanges();
                      }
                  else if (token === "reserved")
                      this._parseIgnored(); // TODO
                  else if (token === "extend")
                      this._parseExtend(msg);
                  else if (Lang.TYPEREF.test(token)) {
                      if (!this.proto3)
                          throw Error("illegal field rule: "+token);
                      this._parseMessageField(msg, "optional", token);
                  } else
                      throw Error("illegal message token: "+token);
              }
              this.tn.omit(";");
              parent["messages"].push(msg);
              return msg;
          };

          /**
           * Parses an ignored statement.
           * @private
           */
          ParserPrototype._parseIgnored = function() {
              while (this.tn.peek() !== ';')
                  this.tn.next();
              this.tn.skip(";");
          };

          /**
           * Parses a message field.
           * @param {!Object} msg Message definition
           * @param {string} rule Field rule
           * @param {string=} type Field type if already known (never known for maps)
           * @returns {!Object} Field descriptor
           * @private
           */
          ParserPrototype._parseMessageField = function(msg, rule, type) {
              if (!Lang.RULE.test(rule))
                  throw Error("illegal message field rule: "+rule);
              var fld = {
                  "rule": rule,
                  "type": "",
                  "name": "",
                  "options": {},
                  "id": 0
              };
              var token;
              if (rule === "map") {

                  if (type)
                      throw Error("illegal type: " + type);
                  this.tn.skip('<');
                  token = this.tn.next();
                  if (!Lang.TYPE.test(token) && !Lang.TYPEREF.test(token))
                      throw Error("illegal message field type: " + token);
                  fld["keytype"] = token;
                  this.tn.skip(',');
                  token = this.tn.next();
                  if (!Lang.TYPE.test(token) && !Lang.TYPEREF.test(token))
                      throw Error("illegal message field: " + token);
                  fld["type"] = token;
                  this.tn.skip('>');
                  token = this.tn.next();
                  if (!Lang.NAME.test(token))
                      throw Error("illegal message field name: " + token);
                  fld["name"] = token;
                  this.tn.skip("=");
                  fld["id"] = mkId(this.tn.next());
                  token = this.tn.peek();
                  if (token === '[')
                      this._parseFieldOptions(fld);
                  this.tn.skip(";");

              } else {

                  type = typeof type !== 'undefined' ? type : this.tn.next();

                  if (type === "group") {

                      // "A [legacy] group simply combines a nested message type and a field into a single declaration. In your
                      // code, you can treat this message just as if it had a Result type field called result (the latter name is
                      // converted to lower-case so that it does not conflict with the former)."
                      var grp = this._parseMessage(msg, fld);
                      if (!/^[A-Z]/.test(grp["name"]))
                          throw Error('illegal group name: '+grp["name"]);
                      fld["type"] = grp["name"];
                      fld["name"] = grp["name"].toLowerCase();
                      this.tn.omit(";");

                  } else {

                      if (!Lang.TYPE.test(type) && !Lang.TYPEREF.test(type))
                          throw Error("illegal message field type: " + type);
                      fld["type"] = type;
                      token = this.tn.next();
                      if (!Lang.NAME.test(token))
                          throw Error("illegal message field name: " + token);
                      fld["name"] = token;
                      this.tn.skip("=");
                      fld["id"] = mkId(this.tn.next());
                      token = this.tn.peek();
                      if (token === "[")
                          this._parseFieldOptions(fld);
                      this.tn.skip(";");

                  }
              }
              msg["fields"].push(fld);
              return fld;
          };

          /**
           * Parses a message oneof.
           * @param {!Object} msg Message definition
           * @private
           */
          ParserPrototype._parseMessageOneOf = function(msg) {
              var token = this.tn.next();
              if (!Lang.NAME.test(token))
                  throw Error("illegal oneof name: "+token);
              var name = token,
                  fld;
              var fields = [];
              this.tn.skip("{");
              while ((token = this.tn.next()) !== "}") {
                  fld = this._parseMessageField(msg, "optional", token);
                  fld["oneof"] = name;
                  fields.push(fld["id"]);
              }
              this.tn.omit(";");
              msg["oneofs"][name] = fields;
          };

          /**
           * Parses a set of field option definitions.
           * @param {!Object} fld Field definition
           * @private
           */
          ParserPrototype._parseFieldOptions = function(fld) {
              this.tn.skip("[");
              var token,
                  first = true;
              while ((token = this.tn.peek()) !== ']') {
                  if (!first)
                      this.tn.skip(",");
                  this._parseOption(fld, true);
                  first = false;
              }
              this.tn.next();
          };

          /**
           * Parses an enum.
           * @param {!Object} msg Message definition
           * @private
           */
          ParserPrototype._parseEnum = function(msg) {
              var enm = {
                  "name": "",
                  "values": [],
                  "options": {}
              };
              var token = this.tn.next();
              if (!Lang.NAME.test(token))
                  throw Error("illegal name: "+token);
              enm["name"] = token;
              this.tn.skip("{");
              while ((token = this.tn.next()) !== '}') {
                  if (token === "option")
                      this._parseOption(enm);
                  else {
                      if (!Lang.NAME.test(token))
                          throw Error("illegal name: "+token);
                      this.tn.skip("=");
                      var val = {
                          "name": token,
                          "id": mkId(this.tn.next(), true)
                      };
                      token = this.tn.peek();
                      if (token === "[")
                          this._parseFieldOptions({ "options": {} });
                      this.tn.skip(";");
                      enm["values"].push(val);
                  }
              }
              this.tn.omit(";");
              msg["enums"].push(enm);
          };

          /**
           * Parses extension / reserved ranges.
           * @returns {!Array.<!Array.<number>>}
           * @private
           */
          ParserPrototype._parseExtensionRanges = function() {
              var ranges = [];
              var token,
                  range,
                  value;
              do {
                  range = [];
                  while (true) {
                      token = this.tn.next();
                      switch (token) {
                          case "min":
                              value = ProtoBuf.ID_MIN;
                              break;
                          case "max":
                              value = ProtoBuf.ID_MAX;
                              break;
                          default:
                              value = mkNumber(token);
                              break;
                      }
                      range.push(value);
                      if (range.length === 2)
                          break;
                      if (this.tn.peek() !== "to") {
                          range.push(value);
                          break;
                      }
                      this.tn.next();
                  }
                  ranges.push(range);
              } while (this.tn.omit(","));
              this.tn.skip(";");
              return ranges;
          };

          /**
           * Parses an extend block.
           * @param {!Object} parent Parent object
           * @private
           */
          ParserPrototype._parseExtend = function(parent) {
              var token = this.tn.next();
              if (!Lang.TYPEREF.test(token))
                  throw Error("illegal extend reference: "+token);
              var ext = {
                  "ref": token,
                  "fields": []
              };
              this.tn.skip("{");
              while ((token = this.tn.next()) !== '}') {
                  if (Lang.RULE.test(token))
                      this._parseMessageField(ext, token);
                  else if (Lang.TYPEREF.test(token)) {
                      if (!this.proto3)
                          throw Error("illegal field rule: "+token);
                      this._parseMessageField(ext, "optional", token);
                  } else
                      throw Error("illegal extend token: "+token);
              }
              this.tn.omit(";");
              parent["messages"].push(ext);
              return ext;
          };

          // ----- General -----

          /**
           * Returns a string representation of this parser.
           * @returns {string}
           */
          ParserPrototype.toString = function() {
              return "Parser at line "+this.tn.line;
          };

          /**
           * @alias ProtoBuf.DotProto.Parser
           * @expose
           */
          DotProto.Parser = Parser;

          return DotProto;

      })(ProtoBuf, ProtoBuf.Lang);

      /**
       * @alias ProtoBuf.Reflect
       * @expose
       */
      ProtoBuf.Reflect = (function(ProtoBuf) {

          /**
           * Reflection types.
           * @exports ProtoBuf.Reflect
           * @namespace
           */
          var Reflect = {};

          /**
           * Constructs a Reflect base class.
           * @exports ProtoBuf.Reflect.T
           * @constructor
           * @abstract
           * @param {!ProtoBuf.Builder} builder Builder reference
           * @param {?ProtoBuf.Reflect.T} parent Parent object
           * @param {string} name Object name
           */
          var T = function(builder, parent, name) {

              /**
               * Builder reference.
               * @type {!ProtoBuf.Builder}
               * @expose
               */
              this.builder = builder;

              /**
               * Parent object.
               * @type {?ProtoBuf.Reflect.T}
               * @expose
               */
              this.parent = parent;

              /**
               * Object name in namespace.
               * @type {string}
               * @expose
               */
              this.name = name;

              /**
               * Fully qualified class name
               * @type {string}
               * @expose
               */
              this.className;
          };

          /**
           * @alias ProtoBuf.Reflect.T.prototype
           * @inner
           */
          var TPrototype = T.prototype;

          /**
           * Returns the fully qualified name of this object.
           * @returns {string} Fully qualified name as of ".PATH.TO.THIS"
           * @expose
           */
          TPrototype.fqn = function() {
              var name = this.name,
                  ptr = this;
              do {
                  ptr = ptr.parent;
                  if (ptr == null)
                      break;
                  name = ptr.name+"."+name;
              } while (true);
              return name;
          };

          /**
           * Returns a string representation of this Reflect object (its fully qualified name).
           * @param {boolean=} includeClass Set to true to include the class name. Defaults to false.
           * @return String representation
           * @expose
           */
          TPrototype.toString = function(includeClass) {
              return (includeClass ? this.className + " " : "") + this.fqn();
          };

          /**
           * Builds this type.
           * @throws {Error} If this type cannot be built directly
           * @expose
           */
          TPrototype.build = function() {
              throw Error(this.toString(true)+" cannot be built directly");
          };

          /**
           * @alias ProtoBuf.Reflect.T
           * @expose
           */
          Reflect.T = T;

          /**
           * Constructs a new Namespace.
           * @exports ProtoBuf.Reflect.Namespace
           * @param {!ProtoBuf.Builder} builder Builder reference
           * @param {?ProtoBuf.Reflect.Namespace} parent Namespace parent
           * @param {string} name Namespace name
           * @param {Object.<string,*>=} options Namespace options
           * @param {string?} syntax The syntax level of this definition (e.g., proto3)
           * @constructor
           * @extends ProtoBuf.Reflect.T
           */
          var Namespace = function(builder, parent, name, options, syntax) {
              T.call(this, builder, parent, name);

              /**
               * @override
               */
              this.className = "Namespace";

              /**
               * Children inside the namespace.
               * @type {!Array.<ProtoBuf.Reflect.T>}
               */
              this.children = [];

              /**
               * Options.
               * @type {!Object.<string, *>}
               */
              this.options = options || {};

              /**
               * Syntax level (e.g., proto2 or proto3).
               * @type {!string}
               */
              this.syntax = syntax || "proto2";
          };

          /**
           * @alias ProtoBuf.Reflect.Namespace.prototype
           * @inner
           */
          var NamespacePrototype = Namespace.prototype = Object.create(T.prototype);

          /**
           * Returns an array of the namespace's children.
           * @param {ProtoBuf.Reflect.T=} type Filter type (returns instances of this type only). Defaults to null (all children).
           * @return {Array.<ProtoBuf.Reflect.T>}
           * @expose
           */
          NamespacePrototype.getChildren = function(type) {
              type = type || null;
              if (type == null)
                  return this.children.slice();
              var children = [];
              for (var i=0, k=this.children.length; i<k; ++i)
                  if (this.children[i] instanceof type)
                      children.push(this.children[i]);
              return children;
          };

          /**
           * Adds a child to the namespace.
           * @param {ProtoBuf.Reflect.T} child Child
           * @throws {Error} If the child cannot be added (duplicate)
           * @expose
           */
          NamespacePrototype.addChild = function(child) {
              var other;
              if (other = this.getChild(child.name)) {
                  // Try to revert camelcase transformation on collision
                  if (other instanceof Message.Field && other.name !== other.originalName && this.getChild(other.originalName) === null)
                      other.name = other.originalName; // Revert previous first (effectively keeps both originals)
                  else if (child instanceof Message.Field && child.name !== child.originalName && this.getChild(child.originalName) === null)
                      child.name = child.originalName;
                  else
                      throw Error("Duplicate name in namespace "+this.toString(true)+": "+child.name);
              }
              this.children.push(child);
          };

          /**
           * Gets a child by its name or id.
           * @param {string|number} nameOrId Child name or id
           * @return {?ProtoBuf.Reflect.T} The child or null if not found
           * @expose
           */
          NamespacePrototype.getChild = function(nameOrId) {
              var key = typeof nameOrId === 'number' ? 'id' : 'name';
              for (var i=0, k=this.children.length; i<k; ++i)
                  if (this.children[i][key] === nameOrId)
                      return this.children[i];
              return null;
          };

          /**
           * Resolves a reflect object inside of this namespace.
           * @param {string|!Array.<string>} qn Qualified name to resolve
           * @param {boolean=} excludeNonNamespace Excludes non-namespace types, defaults to `false`
           * @return {?ProtoBuf.Reflect.Namespace} The resolved type or null if not found
           * @expose
           */
          NamespacePrototype.resolve = function(qn, excludeNonNamespace) {
              var part = typeof qn === 'string' ? qn.split(".") : qn,
                  ptr = this,
                  i = 0;
              if (part[i] === "") { // Fully qualified name, e.g. ".My.Message'
                  while (ptr.parent !== null)
                      ptr = ptr.parent;
                  i++;
              }
              var child;
              do {
                  do {
                      if (!(ptr instanceof Reflect.Namespace)) {
                          ptr = null;
                          break;
                      }
                      child = ptr.getChild(part[i]);
                      if (!child || !(child instanceof Reflect.T) || (excludeNonNamespace && !(child instanceof Reflect.Namespace))) {
                          ptr = null;
                          break;
                      }
                      ptr = child; i++;
                  } while (i < part.length);
                  if (ptr != null)
                      break; // Found
                  // Else search the parent
                  if (this.parent !== null)
                      return this.parent.resolve(qn, excludeNonNamespace);
              } while (ptr != null);
              return ptr;
          };

          /**
           * Determines the shortest qualified name of the specified type, if any, relative to this namespace.
           * @param {!ProtoBuf.Reflect.T} t Reflection type
           * @returns {string} The shortest qualified name or, if there is none, the fqn
           * @expose
           */
          NamespacePrototype.qn = function(t) {
              var part = [], ptr = t;
              do {
                  part.unshift(ptr.name);
                  ptr = ptr.parent;
              } while (ptr !== null);
              for (var len=1; len <= part.length; len++) {
                  var qn = part.slice(part.length-len);
                  if (t === this.resolve(qn, t instanceof Reflect.Namespace))
                      return qn.join(".");
              }
              return t.fqn();
          };

          /**
           * Builds the namespace and returns the runtime counterpart.
           * @return {Object.<string,Function|Object>} Runtime namespace
           * @expose
           */
          NamespacePrototype.build = function() {
              /** @dict */
              var ns = {};
              var children = this.children;
              for (var i=0, k=children.length, child; i<k; ++i) {
                  child = children[i];
                  if (child instanceof Namespace)
                      ns[child.name] = child.build();
              }
              if (Object.defineProperty)
                  Object.defineProperty(ns, "$options", { "value": this.buildOpt() });
              return ns;
          };

          /**
           * Builds the namespace's '$options' property.
           * @return {Object.<string,*>}
           */
          NamespacePrototype.buildOpt = function() {
              var opt = {},
                  keys = Object.keys(this.options);
              for (var i=0, k=keys.length; i<k; ++i) {
                  var key = keys[i],
                      val = this.options[keys[i]];
                  // TODO: Options are not resolved, yet.
                  // if (val instanceof Namespace) {
                  //     opt[key] = val.build();
                  // } else {
                  opt[key] = val;
                  // }
              }
              return opt;
          };

          /**
           * Gets the value assigned to the option with the specified name.
           * @param {string=} name Returns the option value if specified, otherwise all options are returned.
           * @return {*|Object.<string,*>}null} Option value or NULL if there is no such option
           */
          NamespacePrototype.getOption = function(name) {
              if (typeof name === 'undefined')
                  return this.options;
              return typeof this.options[name] !== 'undefined' ? this.options[name] : null;
          };

          /**
           * @alias ProtoBuf.Reflect.Namespace
           * @expose
           */
          Reflect.Namespace = Namespace;

          /**
           * Constructs a new Element implementation that checks and converts values for a
           * particular field type, as appropriate.
           *
           * An Element represents a single value: either the value of a singular field,
           * or a value contained in one entry of a repeated field or map field. This
           * class does not implement these higher-level concepts; it only encapsulates
           * the low-level typechecking and conversion.
           *
           * @exports ProtoBuf.Reflect.Element
           * @param {{name: string, wireType: number}} type Resolved data type
           * @param {ProtoBuf.Reflect.T|null} resolvedType Resolved type, if relevant
           * (e.g. submessage field).
           * @param {boolean} isMapKey Is this element a Map key? The value will be
           * converted to string form if so.
           * @param {string} syntax Syntax level of defining message type, e.g.,
           * proto2 or proto3.
           * @param {string} name Name of the field containing this element (for error
           * messages)
           * @constructor
           */
          var Element = function(type, resolvedType, isMapKey, syntax, name) {

              /**
               * Element type, as a string (e.g., int32).
               * @type {{name: string, wireType: number}}
               */
              this.type = type;

              /**
               * Element type reference to submessage or enum definition, if needed.
               * @type {ProtoBuf.Reflect.T|null}
               */
              this.resolvedType = resolvedType;

              /**
               * Element is a map key.
               * @type {boolean}
               */
              this.isMapKey = isMapKey;

              /**
               * Syntax level of defining message type, e.g., proto2 or proto3.
               * @type {string}
               */
              this.syntax = syntax;

              /**
               * Name of the field containing this element (for error messages)
               * @type {string}
               */
              this.name = name;

              if (isMapKey && ProtoBuf.MAP_KEY_TYPES.indexOf(type) < 0)
                  throw Error("Invalid map key type: " + type.name);
          };

          var ElementPrototype = Element.prototype;

          /**
           * Obtains a (new) default value for the specified type.
           * @param type {string|{name: string, wireType: number}} Field type
           * @returns {*} Default value
           * @inner
           */
          function mkDefault(type) {
              if (typeof type === 'string')
                  type = ProtoBuf.TYPES[type];
              if (typeof type.defaultValue === 'undefined')
                  throw Error("default value for type "+type.name+" is not supported");
              if (type == ProtoBuf.TYPES["bytes"])
                  return new ByteBuffer(0);
              return type.defaultValue;
          }

          /**
           * Returns the default value for this field in proto3.
           * @function
           * @param type {string|{name: string, wireType: number}} the field type
           * @returns {*} Default value
           */
          Element.defaultFieldValue = mkDefault;

          /**
           * Makes a Long from a value.
           * @param {{low: number, high: number, unsigned: boolean}|string|number} value Value
           * @param {boolean=} unsigned Whether unsigned or not, defaults to reuse it from Long-like objects or to signed for
           *  strings and numbers
           * @returns {!Long}
           * @throws {Error} If the value cannot be converted to a Long
           * @inner
           */
          function mkLong(value, unsigned) {
              if (value && typeof value.low === 'number' && typeof value.high === 'number' && typeof value.unsigned === 'boolean'
                  && value.low === value.low && value.high === value.high)
                  return new ProtoBuf.Long(value.low, value.high, typeof unsigned === 'undefined' ? value.unsigned : unsigned);
              if (typeof value === 'string')
                  return ProtoBuf.Long.fromString(value, unsigned || false, 10);
              if (typeof value === 'number')
                  return ProtoBuf.Long.fromNumber(value, unsigned || false);
              throw Error("not convertible to Long");
          }

          ElementPrototype.toString = function() {
              return (this.name || '') + (this.isMapKey ? 'map' : 'value') + ' element';
          };

          /**
           * Checks if the given value can be set for an element of this type (singular
           * field or one element of a repeated field or map).
           * @param {*} value Value to check
           * @return {*} Verified, maybe adjusted, value
           * @throws {Error} If the value cannot be verified for this element slot
           * @expose
           */
          ElementPrototype.verifyValue = function(value) {
              var self = this;
              function fail(val, msg) {
                  throw Error("Illegal value for "+self.toString(true)+" of type "+self.type.name+": "+val+" ("+msg+")");
              }
              switch (this.type) {
                  // Signed 32bit
                  case ProtoBuf.TYPES["int32"]:
                  case ProtoBuf.TYPES["sint32"]:
                  case ProtoBuf.TYPES["sfixed32"]:
                      // Account for !NaN: value === value
                      if (typeof value !== 'number' || (value === value && value % 1 !== 0))
                          fail(typeof value, "not an integer");
                      return value > 4294967295 ? value | 0 : value;

                  // Unsigned 32bit
                  case ProtoBuf.TYPES["uint32"]:
                  case ProtoBuf.TYPES["fixed32"]:
                      if (typeof value !== 'number' || (value === value && value % 1 !== 0))
                          fail(typeof value, "not an integer");
                      return value < 0 ? value >>> 0 : value;

                  // Signed 64bit
                  case ProtoBuf.TYPES["int64"]:
                  case ProtoBuf.TYPES["sint64"]:
                  case ProtoBuf.TYPES["sfixed64"]: {
                      if (ProtoBuf.Long)
                          try {
                              return mkLong(value, false);
                          } catch (e) {
                              fail(typeof value, e.message);
                          }
                      else
                          fail(typeof value, "requires Long.js");
                  }

                  // Unsigned 64bit
                  case ProtoBuf.TYPES["uint64"]:
                  case ProtoBuf.TYPES["fixed64"]: {
                      if (ProtoBuf.Long)
                          try {
                              return mkLong(value, true);
                          } catch (e) {
                              fail(typeof value, e.message);
                          }
                      else
                          fail(typeof value, "requires Long.js");
                  }

                  // Bool
                  case ProtoBuf.TYPES["bool"]:
                      if (typeof value !== 'boolean')
                          fail(typeof value, "not a boolean");
                      return value;

                  // Float
                  case ProtoBuf.TYPES["float"]:
                  case ProtoBuf.TYPES["double"]:
                      if (typeof value !== 'number')
                          fail(typeof value, "not a number");
                      return value;

                  // Length-delimited string
                  case ProtoBuf.TYPES["string"]:
                      if (typeof value !== 'string' && !(value && value instanceof String))
                          fail(typeof value, "not a string");
                      return ""+value; // Convert String object to string

                  // Length-delimited bytes
                  case ProtoBuf.TYPES["bytes"]:
                      if (ByteBuffer.isByteBuffer(value))
                          return value;
                      return ByteBuffer.wrap(value, "base64");

                  // Constant enum value
                  case ProtoBuf.TYPES["enum"]: {
                      var values = this.resolvedType.getChildren(ProtoBuf.Reflect.Enum.Value);
                      for (i=0; i<values.length; i++)
                          if (values[i].name == value)
                              return values[i].id;
                          else if (values[i].id == value)
                              return values[i].id;

                      if (this.syntax === 'proto3') {
                          // proto3: just make sure it's an integer.
                          if (typeof value !== 'number' || (value === value && value % 1 !== 0))
                              fail(typeof value, "not an integer");
                          if (value > 4294967295 || value < 0)
                              fail(typeof value, "not in range for uint32");
                          return value;
                      } else {
                          // proto2 requires enum values to be valid.
                          fail(value, "not a valid enum value");
                      }
                  }
                  // Embedded message
                  case ProtoBuf.TYPES["group"]:
                  case ProtoBuf.TYPES["message"]: {
                      if (!value || typeof value !== 'object')
                          fail(typeof value, "object expected");
                      if (value instanceof this.resolvedType.clazz)
                          return value;
                      if (value instanceof ProtoBuf.Builder.Message) {
                          // Mismatched type: Convert to object (see: https://github.com/dcodeIO/ProtoBuf.js/issues/180)
                          var obj = {};
                          for (var i in value)
                              if (value.hasOwnProperty(i))
                                  obj[i] = value[i];
                          value = obj;
                      }
                      // Else let's try to construct one from a key-value object
                      return new (this.resolvedType.clazz)(value); // May throw for a hundred of reasons
                  }
              }

              // We should never end here
              throw Error("[INTERNAL] Illegal value for "+this.toString(true)+": "+value+" (undefined type "+this.type+")");
          };

          /**
           * Calculates the byte length of an element on the wire.
           * @param {number} id Field number
           * @param {*} value Field value
           * @returns {number} Byte length
           * @throws {Error} If the value cannot be calculated
           * @expose
           */
          ElementPrototype.calculateLength = function(id, value) {
              if (value === null) return 0; // Nothing to encode
              // Tag has already been written
              var n;
              switch (this.type) {
                  case ProtoBuf.TYPES["int32"]:
                      return value < 0 ? ByteBuffer.calculateVarint64(value) : ByteBuffer.calculateVarint32(value);
                  case ProtoBuf.TYPES["uint32"]:
                      return ByteBuffer.calculateVarint32(value);
                  case ProtoBuf.TYPES["sint32"]:
                      return ByteBuffer.calculateVarint32(ByteBuffer.zigZagEncode32(value));
                  case ProtoBuf.TYPES["fixed32"]:
                  case ProtoBuf.TYPES["sfixed32"]:
                  case ProtoBuf.TYPES["float"]:
                      return 4;
                  case ProtoBuf.TYPES["int64"]:
                  case ProtoBuf.TYPES["uint64"]:
                      return ByteBuffer.calculateVarint64(value);
                  case ProtoBuf.TYPES["sint64"]:
                      return ByteBuffer.calculateVarint64(ByteBuffer.zigZagEncode64(value));
                  case ProtoBuf.TYPES["fixed64"]:
                  case ProtoBuf.TYPES["sfixed64"]:
                      return 8;
                  case ProtoBuf.TYPES["bool"]:
                      return 1;
                  case ProtoBuf.TYPES["enum"]:
                      return ByteBuffer.calculateVarint32(value);
                  case ProtoBuf.TYPES["double"]:
                      return 8;
                  case ProtoBuf.TYPES["string"]:
                      n = ByteBuffer.calculateUTF8Bytes(value);
                      return ByteBuffer.calculateVarint32(n) + n;
                  case ProtoBuf.TYPES["bytes"]:
                      if (value.remaining() < 0)
                          throw Error("Illegal value for "+this.toString(true)+": "+value.remaining()+" bytes remaining");
                      return ByteBuffer.calculateVarint32(value.remaining()) + value.remaining();
                  case ProtoBuf.TYPES["message"]:
                      n = this.resolvedType.calculate(value);
                      return ByteBuffer.calculateVarint32(n) + n;
                  case ProtoBuf.TYPES["group"]:
                      n = this.resolvedType.calculate(value);
                      return n + ByteBuffer.calculateVarint32((id << 3) | ProtoBuf.WIRE_TYPES.ENDGROUP);
              }
              // We should never end here
              throw Error("[INTERNAL] Illegal value to encode in "+this.toString(true)+": "+value+" (unknown type)");
          };

          /**
           * Encodes a value to the specified buffer. Does not encode the key.
           * @param {number} id Field number
           * @param {*} value Field value
           * @param {ByteBuffer} buffer ByteBuffer to encode to
           * @return {ByteBuffer} The ByteBuffer for chaining
           * @throws {Error} If the value cannot be encoded
           * @expose
           */
          ElementPrototype.encodeValue = function(id, value, buffer) {
              if (value === null) return buffer; // Nothing to encode
              // Tag has already been written

              switch (this.type) {
                  // 32bit signed varint
                  case ProtoBuf.TYPES["int32"]:
                      // "If you use int32 or int64 as the type for a negative number, the resulting varint is always ten bytes
                      // long – it is, effectively, treated like a very large unsigned integer." (see #122)
                      if (value < 0)
                          buffer.writeVarint64(value);
                      else
                          buffer.writeVarint32(value);
                      break;

                  // 32bit unsigned varint
                  case ProtoBuf.TYPES["uint32"]:
                      buffer.writeVarint32(value);
                      break;

                  // 32bit varint zig-zag
                  case ProtoBuf.TYPES["sint32"]:
                      buffer.writeVarint32ZigZag(value);
                      break;

                  // Fixed unsigned 32bit
                  case ProtoBuf.TYPES["fixed32"]:
                      buffer.writeUint32(value);
                      break;

                  // Fixed signed 32bit
                  case ProtoBuf.TYPES["sfixed32"]:
                      buffer.writeInt32(value);
                      break;

                  // 64bit varint as-is
                  case ProtoBuf.TYPES["int64"]:
                  case ProtoBuf.TYPES["uint64"]:
                      buffer.writeVarint64(value); // throws
                      break;

                  // 64bit varint zig-zag
                  case ProtoBuf.TYPES["sint64"]:
                      buffer.writeVarint64ZigZag(value); // throws
                      break;

                  // Fixed unsigned 64bit
                  case ProtoBuf.TYPES["fixed64"]:
                      buffer.writeUint64(value); // throws
                      break;

                  // Fixed signed 64bit
                  case ProtoBuf.TYPES["sfixed64"]:
                      buffer.writeInt64(value); // throws
                      break;

                  // Bool
                  case ProtoBuf.TYPES["bool"]:
                      if (typeof value === 'string')
                          buffer.writeVarint32(value.toLowerCase() === 'false' ? 0 : !!value);
                      else
                          buffer.writeVarint32(value ? 1 : 0);
                      break;

                  // Constant enum value
                  case ProtoBuf.TYPES["enum"]:
                      buffer.writeVarint32(value);
                      break;

                  // 32bit float
                  case ProtoBuf.TYPES["float"]:
                      buffer.writeFloat32(value);
                      break;

                  // 64bit float
                  case ProtoBuf.TYPES["double"]:
                      buffer.writeFloat64(value);
                      break;

                  // Length-delimited string
                  case ProtoBuf.TYPES["string"]:
                      buffer.writeVString(value);
                      break;

                  // Length-delimited bytes
                  case ProtoBuf.TYPES["bytes"]:
                      if (value.remaining() < 0)
                          throw Error("Illegal value for "+this.toString(true)+": "+value.remaining()+" bytes remaining");
                      var prevOffset = value.offset;
                      buffer.writeVarint32(value.remaining());
                      buffer.append(value);
                      value.offset = prevOffset;
                      break;

                  // Embedded message
                  case ProtoBuf.TYPES["message"]:
                      var bb = new ByteBuffer().LE();
                      this.resolvedType.encode(value, bb);
                      buffer.writeVarint32(bb.offset);
                      buffer.append(bb.flip());
                      break;

                  // Legacy group
                  case ProtoBuf.TYPES["group"]:
                      this.resolvedType.encode(value, buffer);
                      buffer.writeVarint32((id << 3) | ProtoBuf.WIRE_TYPES.ENDGROUP);
                      break;

                  default:
                      // We should never end here
                      throw Error("[INTERNAL] Illegal value to encode in "+this.toString(true)+": "+value+" (unknown type)");
              }
              return buffer;
          };

          /**
           * Decode one element value from the specified buffer.
           * @param {ByteBuffer} buffer ByteBuffer to decode from
           * @param {number} wireType The field wire type
           * @param {number} id The field number
           * @return {*} Decoded value
           * @throws {Error} If the field cannot be decoded
           * @expose
           */
          ElementPrototype.decode = function(buffer, wireType, id) {
              if (wireType != this.type.wireType)
                  throw Error("Unexpected wire type for element");

              var value, nBytes;
              switch (this.type) {
                  // 32bit signed varint
                  case ProtoBuf.TYPES["int32"]:
                      return buffer.readVarint32() | 0;

                  // 32bit unsigned varint
                  case ProtoBuf.TYPES["uint32"]:
                      return buffer.readVarint32() >>> 0;

                  // 32bit signed varint zig-zag
                  case ProtoBuf.TYPES["sint32"]:
                      return buffer.readVarint32ZigZag() | 0;

                  // Fixed 32bit unsigned
                  case ProtoBuf.TYPES["fixed32"]:
                      return buffer.readUint32() >>> 0;

                  case ProtoBuf.TYPES["sfixed32"]:
                      return buffer.readInt32() | 0;

                  // 64bit signed varint
                  case ProtoBuf.TYPES["int64"]:
                      return buffer.readVarint64();

                  // 64bit unsigned varint
                  case ProtoBuf.TYPES["uint64"]:
                      return buffer.readVarint64().toUnsigned();

                  // 64bit signed varint zig-zag
                  case ProtoBuf.TYPES["sint64"]:
                      return buffer.readVarint64ZigZag();

                  // Fixed 64bit unsigned
                  case ProtoBuf.TYPES["fixed64"]:
                      return buffer.readUint64();

                  // Fixed 64bit signed
                  case ProtoBuf.TYPES["sfixed64"]:
                      return buffer.readInt64();

                  // Bool varint
                  case ProtoBuf.TYPES["bool"]:
                      return !!buffer.readVarint32();

                  // Constant enum value (varint)
                  case ProtoBuf.TYPES["enum"]:
                      // The following Builder.Message#set will already throw
                      return buffer.readVarint32();

                  // 32bit float
                  case ProtoBuf.TYPES["float"]:
                      return buffer.readFloat();

                  // 64bit float
                  case ProtoBuf.TYPES["double"]:
                      return buffer.readDouble();

                  // Length-delimited string
                  case ProtoBuf.TYPES["string"]:
                      return buffer.readVString();

                  // Length-delimited bytes
                  case ProtoBuf.TYPES["bytes"]: {
                      nBytes = buffer.readVarint32();
                      if (buffer.remaining() < nBytes)
                          throw Error("Illegal number of bytes for "+this.toString(true)+": "+nBytes+" required but got only "+buffer.remaining());
                      value = buffer.clone(); // Offset already set
                      value.limit = value.offset+nBytes;
                      buffer.offset += nBytes;
                      return value;
                  }

                  // Length-delimited embedded message
                  case ProtoBuf.TYPES["message"]: {
                      nBytes = buffer.readVarint32();
                      return this.resolvedType.decode(buffer, nBytes);
                  }

                  // Legacy group
                  case ProtoBuf.TYPES["group"]:
                      return this.resolvedType.decode(buffer, -1, id);
              }

              // We should never end here
              throw Error("[INTERNAL] Illegal decode type");
          };

          /**
           * Converts a value from a string to the canonical element type.
           *
           * Legal only when isMapKey is true.
           *
           * @param {string} str The string value
           * @returns {*} The value
           */
          ElementPrototype.valueFromString = function(str) {
              if (!this.isMapKey) {
                  throw Error("valueFromString() called on non-map-key element");
              }

              switch (this.type) {
                  case ProtoBuf.TYPES["int32"]:
                  case ProtoBuf.TYPES["sint32"]:
                  case ProtoBuf.TYPES["sfixed32"]:
                  case ProtoBuf.TYPES["uint32"]:
                  case ProtoBuf.TYPES["fixed32"]:
                      return this.verifyValue(parseInt(str));

                  case ProtoBuf.TYPES["int64"]:
                  case ProtoBuf.TYPES["sint64"]:
                  case ProtoBuf.TYPES["sfixed64"]:
                  case ProtoBuf.TYPES["uint64"]:
                  case ProtoBuf.TYPES["fixed64"]:
                        // Long-based fields support conversions from string already.
                        return this.verifyValue(str);

                  case ProtoBuf.TYPES["bool"]:
                        return str === "true";

                  case ProtoBuf.TYPES["string"]:
                        return this.verifyValue(str);

                  case ProtoBuf.TYPES["bytes"]:
                        return ByteBuffer.fromBinary(str);
              }
          };

          /**
           * Converts a value from the canonical element type to a string.
           *
           * It should be the case that `valueFromString(valueToString(val))` returns
           * a value equivalent to `verifyValue(val)` for every legal value of `val`
           * according to this element type.
           *
           * This may be used when the element must be stored or used as a string,
           * e.g., as a map key on an Object.
           *
           * Legal only when isMapKey is true.
           *
           * @param {*} val The value
           * @returns {string} The string form of the value.
           */
          ElementPrototype.valueToString = function(value) {
              if (!this.isMapKey) {
                  throw Error("valueToString() called on non-map-key element");
              }

              if (this.type === ProtoBuf.TYPES["bytes"]) {
                  return value.toString("binary");
              } else {
                  return value.toString();
              }
          };

          /**
           * @alias ProtoBuf.Reflect.Element
           * @expose
           */
          Reflect.Element = Element;

          /**
           * Constructs a new Message.
           * @exports ProtoBuf.Reflect.Message
           * @param {!ProtoBuf.Builder} builder Builder reference
           * @param {!ProtoBuf.Reflect.Namespace} parent Parent message or namespace
           * @param {string} name Message name
           * @param {Object.<string,*>=} options Message options
           * @param {boolean=} isGroup `true` if this is a legacy group
           * @param {string?} syntax The syntax level of this definition (e.g., proto3)
           * @constructor
           * @extends ProtoBuf.Reflect.Namespace
           */
          var Message = function(builder, parent, name, options, isGroup, syntax) {
              Namespace.call(this, builder, parent, name, options, syntax);

              /**
               * @override
               */
              this.className = "Message";

              /**
               * Extensions range.
               * @type {!Array.<number>|undefined}
               * @expose
               */
              this.extensions = undefined;

              /**
               * Runtime message class.
               * @type {?function(new:ProtoBuf.Builder.Message)}
               * @expose
               */
              this.clazz = null;

              /**
               * Whether this is a legacy group or not.
               * @type {boolean}
               * @expose
               */
              this.isGroup = !!isGroup;

              // The following cached collections are used to efficiently iterate over or look up fields when decoding.

              /**
               * Cached fields.
               * @type {?Array.<!ProtoBuf.Reflect.Message.Field>}
               * @private
               */
              this._fields = null;

              /**
               * Cached fields by id.
               * @type {?Object.<number,!ProtoBuf.Reflect.Message.Field>}
               * @private
               */
              this._fieldsById = null;

              /**
               * Cached fields by name.
               * @type {?Object.<string,!ProtoBuf.Reflect.Message.Field>}
               * @private
               */
              this._fieldsByName = null;
          };

          /**
           * @alias ProtoBuf.Reflect.Message.prototype
           * @inner
           */
          var MessagePrototype = Message.prototype = Object.create(Namespace.prototype);

          /**
           * Builds the message and returns the runtime counterpart, which is a fully functional class.
           * @see ProtoBuf.Builder.Message
           * @param {boolean=} rebuild Whether to rebuild or not, defaults to false
           * @return {ProtoBuf.Reflect.Message} Message class
           * @throws {Error} If the message cannot be built
           * @expose
           */
          MessagePrototype.build = function(rebuild) {
              if (this.clazz && !rebuild)
                  return this.clazz;

              // Create the runtime Message class in its own scope
              var clazz = (function(ProtoBuf, T) {

                  var fields = T.getChildren(ProtoBuf.Reflect.Message.Field),
                      oneofs = T.getChildren(ProtoBuf.Reflect.Message.OneOf);

                  /**
                   * Constructs a new runtime Message.
                   * @name ProtoBuf.Builder.Message
                   * @class Barebone of all runtime messages.
                   * @param {!Object.<string,*>|string} values Preset values
                   * @param {...string} var_args
                   * @constructor
                   * @throws {Error} If the message cannot be created
                   */
                  var Message = function(values, var_args) {
                      ProtoBuf.Builder.Message.call(this);

                      // Create virtual oneof properties
                      for (var i=0, k=oneofs.length; i<k; ++i)
                          this[oneofs[i].name] = null;
                      // Create fields and set default values
                      for (i=0, k=fields.length; i<k; ++i) {
                          var field = fields[i];
                          this[field.name] =
                              field.repeated ? [] :
                              (field.map ? new ProtoBuf.Map(field) : null);
                          if ((field.required || T.syntax === 'proto3') &&
                              field.defaultValue !== null)
                              this[field.name] = field.defaultValue;
                      }

                      if (arguments.length > 0) {
                          var value;
                          // Set field values from a values object
                          if (arguments.length === 1 && values !== null && typeof values === 'object' &&
                              /* not _another_ Message */ (typeof values.encode !== 'function' || values instanceof Message) &&
                              /* not a repeated field */ !Array.isArray(values) &&
                              /* not a Map */ !(values instanceof ProtoBuf.Map) &&
                              /* not a ByteBuffer */ !ByteBuffer.isByteBuffer(values) &&
                              /* not an ArrayBuffer */ !(values instanceof ArrayBuffer) &&
                              /* not a Long */ !(ProtoBuf.Long && values instanceof ProtoBuf.Long)) {
                              this.$set(values);
                          } else // Set field values from arguments, in declaration order
                              for (i=0, k=arguments.length; i<k; ++i)
                                  if (typeof (value = arguments[i]) !== 'undefined')
                                      this.$set(fields[i].name, value); // May throw
                      }
                  };

                  /**
                   * @alias ProtoBuf.Builder.Message.prototype
                   * @inner
                   */
                  var MessagePrototype = Message.prototype = Object.create(ProtoBuf.Builder.Message.prototype);

                  /**
                   * Adds a value to a repeated field.
                   * @name ProtoBuf.Builder.Message#add
                   * @function
                   * @param {string} key Field name
                   * @param {*} value Value to add
                   * @param {boolean=} noAssert Whether to assert the value or not (asserts by default)
                   * @returns {!ProtoBuf.Builder.Message} this
                   * @throws {Error} If the value cannot be added
                   * @expose
                   */
                  MessagePrototype.add = function(key, value, noAssert) {
                      var field = T._fieldsByName[key];
                      if (!noAssert) {
                          if (!field)
                              throw Error(this+"#"+key+" is undefined");
                          if (!(field instanceof ProtoBuf.Reflect.Message.Field))
                              throw Error(this+"#"+key+" is not a field: "+field.toString(true)); // May throw if it's an enum or embedded message
                          if (!field.repeated)
                              throw Error(this+"#"+key+" is not a repeated field");
                          value = field.verifyValue(value, true);
                      }
                      if (this[key] === null)
                          this[key] = [];
                      this[key].push(value);
                      return this;
                  };

                  /**
                   * Adds a value to a repeated field. This is an alias for {@link ProtoBuf.Builder.Message#add}.
                   * @name ProtoBuf.Builder.Message#$add
                   * @function
                   * @param {string} key Field name
                   * @param {*} value Value to add
                   * @param {boolean=} noAssert Whether to assert the value or not (asserts by default)
                   * @returns {!ProtoBuf.Builder.Message} this
                   * @throws {Error} If the value cannot be added
                   * @expose
                   */
                  MessagePrototype.$add = MessagePrototype.add;

                  /**
                   * Sets a field's value.
                   * @name ProtoBuf.Builder.Message#set
                   * @function
                   * @param {string|!Object.<string,*>} keyOrObj String key or plain object holding multiple values
                   * @param {(*|boolean)=} value Value to set if key is a string, otherwise omitted
                   * @param {boolean=} noAssert Whether to not assert for an actual field / proper value type, defaults to `false`
                   * @returns {!ProtoBuf.Builder.Message} this
                   * @throws {Error} If the value cannot be set
                   * @expose
                   */
                  MessagePrototype.set = function(keyOrObj, value, noAssert) {
                      if (keyOrObj && typeof keyOrObj === 'object') {
                          noAssert = value;
                          for (var ikey in keyOrObj) {
                              // Check if virtual oneof field - don't set these
                              if (keyOrObj.hasOwnProperty(ikey) && typeof (value = keyOrObj[ikey]) !== 'undefined' && T._oneofsByName[ikey] === undefined)
                                  this.$set(ikey, value, noAssert);
                          }
                          return this;
                      }
                      var field = T._fieldsByName[keyOrObj];
                      if (!noAssert) {
                          if (!field)
                              throw Error(this+"#"+keyOrObj+" is not a field: undefined");
                          if (!(field instanceof ProtoBuf.Reflect.Message.Field))
                              throw Error(this+"#"+keyOrObj+" is not a field: "+field.toString(true));
                          this[field.name] = (value = field.verifyValue(value)); // May throw
                      } else
                          this[keyOrObj] = value;
                      if (field && field.oneof) { // Field is part of an OneOf (not a virtual OneOf field)
                          var currentField = this[field.oneof.name]; // Virtual field references currently set field
                          if (value !== null) {
                              if (currentField !== null && currentField !== field.name)
                                  this[currentField] = null; // Clear currently set field
                              this[field.oneof.name] = field.name; // Point virtual field at this field
                          } else if (/* value === null && */currentField === keyOrObj)
                              this[field.oneof.name] = null; // Clear virtual field (current field explicitly cleared)
                      }
                      return this;
                  };

                  /**
                   * Sets a field's value. This is an alias for [@link ProtoBuf.Builder.Message#set}.
                   * @name ProtoBuf.Builder.Message#$set
                   * @function
                   * @param {string|!Object.<string,*>} keyOrObj String key or plain object holding multiple values
                   * @param {(*|boolean)=} value Value to set if key is a string, otherwise omitted
                   * @param {boolean=} noAssert Whether to not assert the value, defaults to `false`
                   * @throws {Error} If the value cannot be set
                   * @expose
                   */
                  MessagePrototype.$set = MessagePrototype.set;

                  /**
                   * Gets a field's value.
                   * @name ProtoBuf.Builder.Message#get
                   * @function
                   * @param {string} key Key
                   * @param {boolean=} noAssert Whether to not assert for an actual field, defaults to `false`
                   * @return {*} Value
                   * @throws {Error} If there is no such field
                   * @expose
                   */
                  MessagePrototype.get = function(key, noAssert) {
                      if (noAssert)
                          return this[key];
                      var field = T._fieldsByName[key];
                      if (!field || !(field instanceof ProtoBuf.Reflect.Message.Field))
                          throw Error(this+"#"+key+" is not a field: undefined");
                      if (!(field instanceof ProtoBuf.Reflect.Message.Field))
                          throw Error(this+"#"+key+" is not a field: "+field.toString(true));
                      return this[field.name];
                  };

                  /**
                   * Gets a field's value. This is an alias for {@link ProtoBuf.Builder.Message#$get}.
                   * @name ProtoBuf.Builder.Message#$get
                   * @function
                   * @param {string} key Key
                   * @return {*} Value
                   * @throws {Error} If there is no such field
                   * @expose
                   */
                  MessagePrototype.$get = MessagePrototype.get;

                  // Getters and setters

                  for (var i=0; i<fields.length; i++) {
                      var field = fields[i];
                      // no setters for extension fields as these are named by their fqn
                      if (field instanceof ProtoBuf.Reflect.Message.ExtensionField)
                          continue;

                      if (T.builder.options['populateAccessors'])
                          (function(field) {
                              // set/get[SomeValue]
                              var Name = field.originalName.replace(/(_[a-zA-Z])/g, function(match) {
                                  return match.toUpperCase().replace('_','');
                              });
                              Name = Name.substring(0,1).toUpperCase() + Name.substring(1);

                              // set/get_[some_value] FIXME: Do we really need these?
                              var name = field.originalName.replace(/([A-Z])/g, function(match) {
                                  return "_"+match;
                              });

                              /**
                               * The current field's unbound setter function.
                               * @function
                               * @param {*} value
                               * @param {boolean=} noAssert
                               * @returns {!ProtoBuf.Builder.Message}
                               * @inner
                               */
                              var setter = function(value, noAssert) {
                                  this[field.name] = noAssert ? value : field.verifyValue(value);
                                  return this;
                              };

                              /**
                               * The current field's unbound getter function.
                               * @function
                               * @returns {*}
                               * @inner
                               */
                              var getter = function() {
                                  return this[field.name];
                              };

                              if (T.getChild("set"+Name) === null)
                                  /**
                                   * Sets a value. This method is present for each field, but only if there is no name conflict with
                                   *  another field.
                                   * @name ProtoBuf.Builder.Message#set[SomeField]
                                   * @function
                                   * @param {*} value Value to set
                                   * @param {boolean=} noAssert Whether to not assert the value, defaults to `false`
                                   * @returns {!ProtoBuf.Builder.Message} this
                                   * @abstract
                                   * @throws {Error} If the value cannot be set
                                   */
                                  MessagePrototype["set"+Name] = setter;

                              if (T.getChild("set_"+name) === null)
                                  /**
                                   * Sets a value. This method is present for each field, but only if there is no name conflict with
                                   *  another field.
                                   * @name ProtoBuf.Builder.Message#set_[some_field]
                                   * @function
                                   * @param {*} value Value to set
                                   * @param {boolean=} noAssert Whether to not assert the value, defaults to `false`
                                   * @returns {!ProtoBuf.Builder.Message} this
                                   * @abstract
                                   * @throws {Error} If the value cannot be set
                                   */
                                  MessagePrototype["set_"+name] = setter;

                              if (T.getChild("get"+Name) === null)
                                  /**
                                   * Gets a value. This method is present for each field, but only if there is no name conflict with
                                   *  another field.
                                   * @name ProtoBuf.Builder.Message#get[SomeField]
                                   * @function
                                   * @abstract
                                   * @return {*} The value
                                   */
                                  MessagePrototype["get"+Name] = getter;

                              if (T.getChild("get_"+name) === null)
                                  /**
                                   * Gets a value. This method is present for each field, but only if there is no name conflict with
                                   *  another field.
                                   * @name ProtoBuf.Builder.Message#get_[some_field]
                                   * @function
                                   * @return {*} The value
                                   * @abstract
                                   */
                                  MessagePrototype["get_"+name] = getter;

                          })(field);
                  }

                  // En-/decoding

                  /**
                   * Encodes the message.
                   * @name ProtoBuf.Builder.Message#$encode
                   * @function
                   * @param {(!ByteBuffer|boolean)=} buffer ByteBuffer to encode to. Will create a new one and flip it if omitted.
                   * @param {boolean=} noVerify Whether to not verify field values, defaults to `false`
                   * @return {!ByteBuffer} Encoded message as a ByteBuffer
                   * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                   *  returns the encoded ByteBuffer in the `encoded` property on the error.
                   * @expose
                   * @see ProtoBuf.Builder.Message#encode64
                   * @see ProtoBuf.Builder.Message#encodeHex
                   * @see ProtoBuf.Builder.Message#encodeAB
                   */
                  MessagePrototype.encode = function(buffer, noVerify) {
                      if (typeof buffer === 'boolean')
                          noVerify = buffer,
                          buffer = undefined;
                      var isNew = false;
                      if (!buffer)
                          buffer = new ByteBuffer(),
                          isNew = true;
                      var le = buffer.littleEndian;
                      try {
                          T.encode(this, buffer.LE(), noVerify);
                          return (isNew ? buffer.flip() : buffer).LE(le);
                      } catch (e) {
                          buffer.LE(le);
                          throw(e);
                      }
                  };

                  /**
                   * Encodes a message using the specified data payload.
                   * @param {!Object.<string,*>} data Data payload
                   * @param {(!ByteBuffer|boolean)=} buffer ByteBuffer to encode to. Will create a new one and flip it if omitted.
                   * @param {boolean=} noVerify Whether to not verify field values, defaults to `false`
                   * @return {!ByteBuffer} Encoded message as a ByteBuffer
                   * @expose
                   */
                  Message.encode = function(data, buffer, noVerify) {
                      return new Message(data).encode(buffer, noVerify);
                  };

                  /**
                   * Calculates the byte length of the message.
                   * @name ProtoBuf.Builder.Message#calculate
                   * @function
                   * @returns {number} Byte length
                   * @throws {Error} If the message cannot be calculated or if required fields are missing.
                   * @expose
                   */
                  MessagePrototype.calculate = function() {
                      return T.calculate(this);
                  };

                  /**
                   * Encodes the varint32 length-delimited message.
                   * @name ProtoBuf.Builder.Message#encodeDelimited
                   * @function
                   * @param {(!ByteBuffer|boolean)=} buffer ByteBuffer to encode to. Will create a new one and flip it if omitted.
                   * @param {boolean=} noVerify Whether to not verify field values, defaults to `false`
                   * @return {!ByteBuffer} Encoded message as a ByteBuffer
                   * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                   *  returns the encoded ByteBuffer in the `encoded` property on the error.
                   * @expose
                   */
                  MessagePrototype.encodeDelimited = function(buffer, noVerify) {
                      var isNew = false;
                      if (!buffer)
                          buffer = new ByteBuffer(),
                          isNew = true;
                      var enc = new ByteBuffer().LE();
                      T.encode(this, enc, noVerify).flip();
                      buffer.writeVarint32(enc.remaining());
                      buffer.append(enc);
                      return isNew ? buffer.flip() : buffer;
                  };

                  /**
                   * Directly encodes the message to an ArrayBuffer.
                   * @name ProtoBuf.Builder.Message#encodeAB
                   * @function
                   * @return {ArrayBuffer} Encoded message as ArrayBuffer
                   * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                   *  returns the encoded ArrayBuffer in the `encoded` property on the error.
                   * @expose
                   */
                  MessagePrototype.encodeAB = function() {
                      try {
                          return this.encode().toArrayBuffer();
                      } catch (e) {
                          if (e["encoded"]) e["encoded"] = e["encoded"].toArrayBuffer();
                          throw(e);
                      }
                  };

                  /**
                   * Returns the message as an ArrayBuffer. This is an alias for {@link ProtoBuf.Builder.Message#encodeAB}.
                   * @name ProtoBuf.Builder.Message#toArrayBuffer
                   * @function
                   * @return {ArrayBuffer} Encoded message as ArrayBuffer
                   * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                   *  returns the encoded ArrayBuffer in the `encoded` property on the error.
                   * @expose
                   */
                  MessagePrototype.toArrayBuffer = MessagePrototype.encodeAB;

                  /**
                   * Directly encodes the message to a node Buffer.
                   * @name ProtoBuf.Builder.Message#encodeNB
                   * @function
                   * @return {!Buffer}
                   * @throws {Error} If the message cannot be encoded, not running under node.js or if required fields are
                   *  missing. The later still returns the encoded node Buffer in the `encoded` property on the error.
                   * @expose
                   */
                  MessagePrototype.encodeNB = function() {
                      try {
                          return this.encode().toBuffer();
                      } catch (e) {
                          if (e["encoded"]) e["encoded"] = e["encoded"].toBuffer();
                          throw(e);
                      }
                  };

                  /**
                   * Returns the message as a node Buffer. This is an alias for {@link ProtoBuf.Builder.Message#encodeNB}.
                   * @name ProtoBuf.Builder.Message#toBuffer
                   * @function
                   * @return {!Buffer}
                   * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                   *  returns the encoded node Buffer in the `encoded` property on the error.
                   * @expose
                   */
                  MessagePrototype.toBuffer = MessagePrototype.encodeNB;

                  /**
                   * Directly encodes the message to a base64 encoded string.
                   * @name ProtoBuf.Builder.Message#encode64
                   * @function
                   * @return {string} Base64 encoded string
                   * @throws {Error} If the underlying buffer cannot be encoded or if required fields are missing. The later
                   *  still returns the encoded base64 string in the `encoded` property on the error.
                   * @expose
                   */
                  MessagePrototype.encode64 = function() {
                      try {
                          return this.encode().toBase64();
                      } catch (e) {
                          if (e["encoded"]) e["encoded"] = e["encoded"].toBase64();
                          throw(e);
                      }
                  };

                  /**
                   * Returns the message as a base64 encoded string. This is an alias for {@link ProtoBuf.Builder.Message#encode64}.
                   * @name ProtoBuf.Builder.Message#toBase64
                   * @function
                   * @return {string} Base64 encoded string
                   * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                   *  returns the encoded base64 string in the `encoded` property on the error.
                   * @expose
                   */
                  MessagePrototype.toBase64 = MessagePrototype.encode64;

                  /**
                   * Directly encodes the message to a hex encoded string.
                   * @name ProtoBuf.Builder.Message#encodeHex
                   * @function
                   * @return {string} Hex encoded string
                   * @throws {Error} If the underlying buffer cannot be encoded or if required fields are missing. The later
                   *  still returns the encoded hex string in the `encoded` property on the error.
                   * @expose
                   */
                  MessagePrototype.encodeHex = function() {
                      try {
                          return this.encode().toHex();
                      } catch (e) {
                          if (e["encoded"]) e["encoded"] = e["encoded"].toHex();
                          throw(e);
                      }
                  };

                  /**
                   * Returns the message as a hex encoded string. This is an alias for {@link ProtoBuf.Builder.Message#encodeHex}.
                   * @name ProtoBuf.Builder.Message#toHex
                   * @function
                   * @return {string} Hex encoded string
                   * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still
                   *  returns the encoded hex string in the `encoded` property on the error.
                   * @expose
                   */
                  MessagePrototype.toHex = MessagePrototype.encodeHex;

                  /**
                   * Clones a message object or field value to a raw object.
                   * @param {*} obj Object to clone
                   * @param {boolean} binaryAsBase64 Whether to include binary data as base64 strings or as a buffer otherwise
                   * @param {boolean} longsAsStrings Whether to encode longs as strings
                   * @param {!ProtoBuf.Reflect.T=} resolvedType The resolved field type if a field
                   * @returns {*} Cloned object
                   * @inner
                   */
                  function cloneRaw(obj, binaryAsBase64, longsAsStrings, resolvedType) {
                      if (obj === null || typeof obj !== 'object') {
                          // Convert enum values to their respective names
                          if (resolvedType && resolvedType instanceof ProtoBuf.Reflect.Enum) {
                              var name = ProtoBuf.Reflect.Enum.getName(resolvedType.object, obj);
                              if (name !== null)
                                  return name;
                          }
                          // Pass-through string, number, boolean, null...
                          return obj;
                      }
                      // Convert ByteBuffers to raw buffer or strings
                      if (ByteBuffer.isByteBuffer(obj))
                          return binaryAsBase64 ? obj.toBase64() : obj.toBuffer();
                      // Convert Longs to proper objects or strings
                      if (ProtoBuf.Long.isLong(obj))
                          return longsAsStrings ? obj.toString() : ProtoBuf.Long.fromValue(obj);
                      var clone;
                      // Clone arrays
                      if (Array.isArray(obj)) {
                          clone = [];
                          obj.forEach(function(v, k) {
                              clone[k] = cloneRaw(v, binaryAsBase64, longsAsStrings, resolvedType);
                          });
                          return clone;
                      }
                      clone = {};
                      // Convert maps to objects
                      if (obj instanceof ProtoBuf.Map) {
                          var it = obj.entries();
                          for (var e = it.next(); !e.done; e = it.next())
                              clone[obj.keyElem.valueToString(e.value[0])] = cloneRaw(e.value[1], binaryAsBase64, longsAsStrings, obj.valueElem.resolvedType);
                          return clone;
                      }
                      // Everything else is a non-null object
                      var type = obj.$type,
                          field = undefined;
                      for (var i in obj)
                          if (obj.hasOwnProperty(i)) {
                              if (type && (field = type.getChild(i)))
                                  clone[i] = cloneRaw(obj[i], binaryAsBase64, longsAsStrings, field.resolvedType);
                              else
                                  clone[i] = cloneRaw(obj[i], binaryAsBase64, longsAsStrings);
                          }
                      return clone;
                  }

                  /**
                   * Returns the message's raw payload.
                   * @param {boolean=} binaryAsBase64 Whether to include binary data as base64 strings instead of Buffers, defaults to `false`
                   * @param {boolean} longsAsStrings Whether to encode longs as strings
                   * @returns {Object.<string,*>} Raw payload
                   * @expose
                   */
                  MessagePrototype.toRaw = function(binaryAsBase64, longsAsStrings) {
                      return cloneRaw(this, !!binaryAsBase64, !!longsAsStrings, this.$type);
                  };

                  /**
                   * Encodes a message to JSON.
                   * @returns {string} JSON string
                   * @expose
                   */
                  MessagePrototype.encodeJSON = function() {
                      return JSON.stringify(
                          cloneRaw(this,
                               /* binary-as-base64 */ true,
                               /* longs-as-strings */ true,
                               this.$type
                          )
                      );
                  };

                  /**
                   * Decodes a message from the specified buffer or string.
                   * @name ProtoBuf.Builder.Message.decode
                   * @function
                   * @param {!ByteBuffer|!ArrayBuffer|!Buffer|string} buffer Buffer to decode from
                   * @param {(number|string)=} length Message length. Defaults to decode all the remainig data.
                   * @param {string=} enc Encoding if buffer is a string: hex, utf8 (not recommended), defaults to base64
                   * @return {!ProtoBuf.Builder.Message} Decoded message
                   * @throws {Error} If the message cannot be decoded or if required fields are missing. The later still
                   *  returns the decoded message with missing fields in the `decoded` property on the error.
                   * @expose
                   * @see ProtoBuf.Builder.Message.decode64
                   * @see ProtoBuf.Builder.Message.decodeHex
                   */
                  Message.decode = function(buffer, length, enc) {
                      if (typeof length === 'string')
                          enc = length,
                          length = -1;
                      if (typeof buffer === 'string')
                          buffer = ByteBuffer.wrap(buffer, enc ? enc : "base64");
                      else if (!ByteBuffer.isByteBuffer(buffer))
                          buffer = ByteBuffer.wrap(buffer); // May throw
                      var le = buffer.littleEndian;
                      try {
                          var msg = T.decode(buffer.LE(), length);
                          buffer.LE(le);
                          return msg;
                      } catch (e) {
                          buffer.LE(le);
                          throw(e);
                      }
                  };

                  /**
                   * Decodes a varint32 length-delimited message from the specified buffer or string.
                   * @name ProtoBuf.Builder.Message.decodeDelimited
                   * @function
                   * @param {!ByteBuffer|!ArrayBuffer|!Buffer|string} buffer Buffer to decode from
                   * @param {string=} enc Encoding if buffer is a string: hex, utf8 (not recommended), defaults to base64
                   * @return {ProtoBuf.Builder.Message} Decoded message or `null` if not enough bytes are available yet
                   * @throws {Error} If the message cannot be decoded or if required fields are missing. The later still
                   *  returns the decoded message with missing fields in the `decoded` property on the error.
                   * @expose
                   */
                  Message.decodeDelimited = function(buffer, enc) {
                      if (typeof buffer === 'string')
                          buffer = ByteBuffer.wrap(buffer, enc ? enc : "base64");
                      else if (!ByteBuffer.isByteBuffer(buffer))
                          buffer = ByteBuffer.wrap(buffer); // May throw
                      if (buffer.remaining() < 1)
                          return null;
                      var off = buffer.offset,
                          len = buffer.readVarint32();
                      if (buffer.remaining() < len) {
                          buffer.offset = off;
                          return null;
                      }
                      try {
                          var msg = T.decode(buffer.slice(buffer.offset, buffer.offset + len).LE());
                          buffer.offset += len;
                          return msg;
                      } catch (err) {
                          buffer.offset += len;
                          throw err;
                      }
                  };

                  /**
                   * Decodes the message from the specified base64 encoded string.
                   * @name ProtoBuf.Builder.Message.decode64
                   * @function
                   * @param {string} str String to decode from
                   * @return {!ProtoBuf.Builder.Message} Decoded message
                   * @throws {Error} If the message cannot be decoded or if required fields are missing. The later still
                   *  returns the decoded message with missing fields in the `decoded` property on the error.
                   * @expose
                   */
                  Message.decode64 = function(str) {
                      return Message.decode(str, "base64");
                  };

                  /**
                   * Decodes the message from the specified hex encoded string.
                   * @name ProtoBuf.Builder.Message.decodeHex
                   * @function
                   * @param {string} str String to decode from
                   * @return {!ProtoBuf.Builder.Message} Decoded message
                   * @throws {Error} If the message cannot be decoded or if required fields are missing. The later still
                   *  returns the decoded message with missing fields in the `decoded` property on the error.
                   * @expose
                   */
                  Message.decodeHex = function(str) {
                      return Message.decode(str, "hex");
                  };

                  /**
                   * Decodes the message from a JSON string.
                   * @name ProtoBuf.Builder.Message.decodeJSON
                   * @function
                   * @param {string} str String to decode from
                   * @return {!ProtoBuf.Builder.Message} Decoded message
                   * @throws {Error} If the message cannot be decoded or if required fields are
                   * missing.
                   * @expose
                   */
                  Message.decodeJSON = function(str) {
                      return new Message(JSON.parse(str));
                  };

                  // Utility

                  /**
                   * Returns a string representation of this Message.
                   * @name ProtoBuf.Builder.Message#toString
                   * @function
                   * @return {string} String representation as of ".Fully.Qualified.MessageName"
                   * @expose
                   */
                  MessagePrototype.toString = function() {
                      return T.toString();
                  };

                  if (Object.defineProperty)
                      Object.defineProperty(Message, '$options', { "value": T.buildOpt() }),
                      Object.defineProperty(MessagePrototype, "$options", { "value": Message["$options"] }),
                      Object.defineProperty(Message, "$type", { "value": T }),
                      Object.defineProperty(MessagePrototype, "$type", { "value": T });

                  return Message;

              })(ProtoBuf, this);

              // Static enums and prototyped sub-messages / cached collections
              this._fields = [];
              this._fieldsById = {};
              this._fieldsByName = {};
              this._oneofsByName = {};
              for (var i=0, k=this.children.length, child; i<k; i++) {
                  child = this.children[i];
                  if (child instanceof Enum || child instanceof Message || child instanceof Service) {
                      if (clazz.hasOwnProperty(child.name))
                          throw Error("Illegal reflect child of "+this.toString(true)+": "+child.toString(true)+" cannot override static property '"+child.name+"'");
                      clazz[child.name] = child.build();
                  } else if (child instanceof Message.Field)
                      child.build(),
                      this._fields.push(child),
                      this._fieldsById[child.id] = child,
                      this._fieldsByName[child.name] = child;
                  else if (child instanceof Message.OneOf) {
                      this._oneofsByName[child.name] = child;
                  }
                  else if (!(child instanceof Message.OneOf) && !(child instanceof Extension)) // Not built
                      throw Error("Illegal reflect child of "+this.toString(true)+": "+this.children[i].toString(true));
              }

              return this.clazz = clazz;
          };

          /**
           * Encodes a runtime message's contents to the specified buffer.
           * @param {!ProtoBuf.Builder.Message} message Runtime message to encode
           * @param {ByteBuffer} buffer ByteBuffer to write to
           * @param {boolean=} noVerify Whether to not verify field values, defaults to `false`
           * @return {ByteBuffer} The ByteBuffer for chaining
           * @throws {Error} If required fields are missing or the message cannot be encoded for another reason
           * @expose
           */
          MessagePrototype.encode = function(message, buffer, noVerify) {
              var fieldMissing = null,
                  field;
              for (var i=0, k=this._fields.length, val; i<k; ++i) {
                  field = this._fields[i];
                  val = message[field.name];
                  if (field.required && val === null) {
                      if (fieldMissing === null)
                          fieldMissing = field;
                  } else
                      field.encode(noVerify ? val : field.verifyValue(val), buffer, message);
              }
              if (fieldMissing !== null) {
                  var err = Error("Missing at least one required field for "+this.toString(true)+": "+fieldMissing);
                  err["encoded"] = buffer; // Still expose what we got
                  throw(err);
              }
              return buffer;
          };

          /**
           * Calculates a runtime message's byte length.
           * @param {!ProtoBuf.Builder.Message} message Runtime message to encode
           * @returns {number} Byte length
           * @throws {Error} If required fields are missing or the message cannot be calculated for another reason
           * @expose
           */
          MessagePrototype.calculate = function(message) {
              for (var n=0, i=0, k=this._fields.length, field, val; i<k; ++i) {
                  field = this._fields[i];
                  val = message[field.name];
                  if (field.required && val === null)
                     throw Error("Missing at least one required field for "+this.toString(true)+": "+field);
                  else
                      n += field.calculate(val, message);
              }
              return n;
          };

          /**
           * Skips all data until the end of the specified group has been reached.
           * @param {number} expectedId Expected GROUPEND id
           * @param {!ByteBuffer} buf ByteBuffer
           * @returns {boolean} `true` if a value as been skipped, `false` if the end has been reached
           * @throws {Error} If it wasn't possible to find the end of the group (buffer overrun or end tag mismatch)
           * @inner
           */
          function skipTillGroupEnd(expectedId, buf) {
              var tag = buf.readVarint32(), // Throws on OOB
                  wireType = tag & 0x07,
                  id = tag >>> 3;
              switch (wireType) {
                  case ProtoBuf.WIRE_TYPES.VARINT:
                      do tag = buf.readUint8();
                      while ((tag & 0x80) === 0x80);
                      break;
                  case ProtoBuf.WIRE_TYPES.BITS64:
                      buf.offset += 8;
                      break;
                  case ProtoBuf.WIRE_TYPES.LDELIM:
                      tag = buf.readVarint32(); // reads the varint
                      buf.offset += tag;        // skips n bytes
                      break;
                  case ProtoBuf.WIRE_TYPES.STARTGROUP:
                      skipTillGroupEnd(id, buf);
                      break;
                  case ProtoBuf.WIRE_TYPES.ENDGROUP:
                      if (id === expectedId)
                          return false;
                      else
                          throw Error("Illegal GROUPEND after unknown group: "+id+" ("+expectedId+" expected)");
                  case ProtoBuf.WIRE_TYPES.BITS32:
                      buf.offset += 4;
                      break;
                  default:
                      throw Error("Illegal wire type in unknown group "+expectedId+": "+wireType);
              }
              return true;
          }

          /**
           * Decodes an encoded message and returns the decoded message.
           * @param {ByteBuffer} buffer ByteBuffer to decode from
           * @param {number=} length Message length. Defaults to decode all remaining data.
           * @param {number=} expectedGroupEndId Expected GROUPEND id if this is a legacy group
           * @return {ProtoBuf.Builder.Message} Decoded message
           * @throws {Error} If the message cannot be decoded
           * @expose
           */
          MessagePrototype.decode = function(buffer, length, expectedGroupEndId) {
              if (typeof length !== 'number')
                  length = -1;
              var start = buffer.offset,
                  msg = new (this.clazz)(),
                  tag, wireType, id, field;
              while (buffer.offset < start+length || (length === -1 && buffer.remaining() > 0)) {
                  tag = buffer.readVarint32();
                  wireType = tag & 0x07;
                  id = tag >>> 3;
                  if (wireType === ProtoBuf.WIRE_TYPES.ENDGROUP) {
                      if (id !== expectedGroupEndId)
                          throw Error("Illegal group end indicator for "+this.toString(true)+": "+id+" ("+(expectedGroupEndId ? expectedGroupEndId+" expected" : "not a group")+")");
                      break;
                  }
                  if (!(field = this._fieldsById[id])) {
                      // "messages created by your new code can be parsed by your old code: old binaries simply ignore the new field when parsing."
                      switch (wireType) {
                          case ProtoBuf.WIRE_TYPES.VARINT:
                              buffer.readVarint32();
                              break;
                          case ProtoBuf.WIRE_TYPES.BITS32:
                              buffer.offset += 4;
                              break;
                          case ProtoBuf.WIRE_TYPES.BITS64:
                              buffer.offset += 8;
                              break;
                          case ProtoBuf.WIRE_TYPES.LDELIM:
                              var len = buffer.readVarint32();
                              buffer.offset += len;
                              break;
                          case ProtoBuf.WIRE_TYPES.STARTGROUP:
                              while (skipTillGroupEnd(id, buffer)) {}
                              break;
                          default:
                              throw Error("Illegal wire type for unknown field "+id+" in "+this.toString(true)+"#decode: "+wireType);
                      }
                      continue;
                  }
                  if (field.repeated && !field.options["packed"]) {
                      msg[field.name].push(field.decode(wireType, buffer));
                  } else if (field.map) {
                      var keyval = field.decode(wireType, buffer);
                      msg[field.name].set(keyval[0], keyval[1]);
                  } else {
                      msg[field.name] = field.decode(wireType, buffer);
                      if (field.oneof) { // Field is part of an OneOf (not a virtual OneOf field)
                          var currentField = msg[field.oneof.name]; // Virtual field references currently set field
                          if (currentField !== null && currentField !== field.name)
                              msg[currentField] = null; // Clear currently set field
                          msg[field.oneof.name] = field.name; // Point virtual field at this field
                      }
                  }
              }

              // Check if all required fields are present and set default values for optional fields that are not
              for (var i=0, k=this._fields.length; i<k; ++i) {
                  field = this._fields[i];
                  if (msg[field.name] === null) {
                      if (this.syntax === "proto3") { // Proto3 sets default values by specification
                          msg[field.name] = field.defaultValue;
                      } else if (field.required) {
                          var err = Error("Missing at least one required field for " + this.toString(true) + ": " + field.name);
                          err["decoded"] = msg; // Still expose what we got
                          throw(err);
                      } else if (ProtoBuf.populateDefaults && field.defaultValue !== null)
                          msg[field.name] = field.defaultValue;
                  }
              }
              return msg;
          };

          /**
           * @alias ProtoBuf.Reflect.Message
           * @expose
           */
          Reflect.Message = Message;

          /**
           * Constructs a new Message Field.
           * @exports ProtoBuf.Reflect.Message.Field
           * @param {!ProtoBuf.Builder} builder Builder reference
           * @param {!ProtoBuf.Reflect.Message} message Message reference
           * @param {string} rule Rule, one of requried, optional, repeated
           * @param {string?} keytype Key data type, if any.
           * @param {string} type Data type, e.g. int32
           * @param {string} name Field name
           * @param {number} id Unique field id
           * @param {Object.<string,*>=} options Options
           * @param {!ProtoBuf.Reflect.Message.OneOf=} oneof Enclosing OneOf
           * @param {string?} syntax The syntax level of this definition (e.g., proto3)
           * @constructor
           * @extends ProtoBuf.Reflect.T
           */
          var Field = function(builder, message, rule, keytype, type, name, id, options, oneof, syntax) {
              T.call(this, builder, message, name);

              /**
               * @override
               */
              this.className = "Message.Field";

              /**
               * Message field required flag.
               * @type {boolean}
               * @expose
               */
              this.required = rule === "required";

              /**
               * Message field repeated flag.
               * @type {boolean}
               * @expose
               */
              this.repeated = rule === "repeated";

              /**
               * Message field map flag.
               * @type {boolean}
               * @expose
               */
              this.map = rule === "map";

              /**
               * Message field key type. Type reference string if unresolved, protobuf
               * type if resolved. Valid only if this.map === true, null otherwise.
               * @type {string|{name: string, wireType: number}|null}
               * @expose
               */
              this.keyType = keytype || null;

              /**
               * Message field type. Type reference string if unresolved, protobuf type if
               * resolved. In a map field, this is the value type.
               * @type {string|{name: string, wireType: number}}
               * @expose
               */
              this.type = type;

              /**
               * Resolved type reference inside the global namespace.
               * @type {ProtoBuf.Reflect.T|null}
               * @expose
               */
              this.resolvedType = null;

              /**
               * Unique message field id.
               * @type {number}
               * @expose
               */
              this.id = id;

              /**
               * Message field options.
               * @type {!Object.<string,*>}
               * @dict
               * @expose
               */
              this.options = options || {};

              /**
               * Default value.
               * @type {*}
               * @expose
               */
              this.defaultValue = null;

              /**
               * Enclosing OneOf.
               * @type {?ProtoBuf.Reflect.Message.OneOf}
               * @expose
               */
              this.oneof = oneof || null;

              /**
               * Syntax level of this definition (e.g., proto3).
               * @type {string}
               * @expose
               */
              this.syntax = syntax || 'proto2';

              /**
               * Original field name.
               * @type {string}
               * @expose
               */
              this.originalName = this.name; // Used to revert camelcase transformation on naming collisions

              /**
               * Element implementation. Created in build() after types are resolved.
               * @type {ProtoBuf.Element}
               * @expose
               */
              this.element = null;

              /**
               * Key element implementation, for map fields. Created in build() after
               * types are resolved.
               * @type {ProtoBuf.Element}
               * @expose
               */
              this.keyElement = null;

              // Convert field names to camel case notation if the override is set
              if (this.builder.options['convertFieldsToCamelCase'] && !(this instanceof Message.ExtensionField))
                  this.name = ProtoBuf.Util.toCamelCase(this.name);
          };

          /**
           * @alias ProtoBuf.Reflect.Message.Field.prototype
           * @inner
           */
          var FieldPrototype = Field.prototype = Object.create(T.prototype);

          /**
           * Builds the field.
           * @override
           * @expose
           */
          FieldPrototype.build = function() {
              this.element = new Element(this.type, this.resolvedType, false, this.syntax, this.name);
              if (this.map)
                  this.keyElement = new Element(this.keyType, undefined, true, this.syntax, this.name);

              // In proto3, fields do not have field presence, and every field is set to
              // its type's default value ("", 0, 0.0, or false).
              if (this.syntax === 'proto3' && !this.repeated && !this.map)
                  this.defaultValue = Element.defaultFieldValue(this.type);

              // Otherwise, default values are present when explicitly specified
              else if (typeof this.options['default'] !== 'undefined')
                  this.defaultValue = this.verifyValue(this.options['default']);
          };

          /**
           * Checks if the given value can be set for this field.
           * @param {*} value Value to check
           * @param {boolean=} skipRepeated Whether to skip the repeated value check or not. Defaults to false.
           * @return {*} Verified, maybe adjusted, value
           * @throws {Error} If the value cannot be set for this field
           * @expose
           */
          FieldPrototype.verifyValue = function(value, skipRepeated) {
              skipRepeated = skipRepeated || false;
              var self = this;
              function fail(val, msg) {
                  throw Error("Illegal value for "+self.toString(true)+" of type "+self.type.name+": "+val+" ("+msg+")");
              }
              if (value === null) { // NULL values for optional fields
                  if (this.required)
                      fail(typeof value, "required");
                  if (this.syntax === 'proto3' && this.type !== ProtoBuf.TYPES["message"])
                      fail(typeof value, "proto3 field without field presence cannot be null");
                  return null;
              }
              var i;
              if (this.repeated && !skipRepeated) { // Repeated values as arrays
                  if (!Array.isArray(value))
                      value = [value];
                  var res = [];
                  for (i=0; i<value.length; i++)
                      res.push(this.element.verifyValue(value[i]));
                  return res;
              }
              if (this.map && !skipRepeated) { // Map values as objects
                  if (!(value instanceof ProtoBuf.Map)) {
                      // If not already a Map, attempt to convert.
                      if (!(value instanceof Object)) {
                          fail(typeof value,
                               "expected ProtoBuf.Map or raw object for map field");
                      }
                      return new ProtoBuf.Map(this, value);
                  } else {
                      return value;
                  }
              }
              // All non-repeated fields expect no array
              if (!this.repeated && Array.isArray(value))
                  fail(typeof value, "no array expected");

              return this.element.verifyValue(value);
          };

          /**
           * Determines whether the field will have a presence on the wire given its
           * value.
           * @param {*} value Verified field value
           * @param {!ProtoBuf.Builder.Message} message Runtime message
           * @return {boolean} Whether the field will be present on the wire
           */
          FieldPrototype.hasWirePresence = function(value, message) {
              if (this.syntax !== 'proto3')
                  return (value !== null);
              if (this.oneof && message[this.oneof.name] === this.name)
                  return true;
              switch (this.type) {
                  case ProtoBuf.TYPES["int32"]:
                  case ProtoBuf.TYPES["sint32"]:
                  case ProtoBuf.TYPES["sfixed32"]:
                  case ProtoBuf.TYPES["uint32"]:
                  case ProtoBuf.TYPES["fixed32"]:
                      return value !== 0;

                  case ProtoBuf.TYPES["int64"]:
                  case ProtoBuf.TYPES["sint64"]:
                  case ProtoBuf.TYPES["sfixed64"]:
                  case ProtoBuf.TYPES["uint64"]:
                  case ProtoBuf.TYPES["fixed64"]:
                      return value.low !== 0 || value.high !== 0;

                  case ProtoBuf.TYPES["bool"]:
                      return value;

                  case ProtoBuf.TYPES["float"]:
                  case ProtoBuf.TYPES["double"]:
                      return value !== 0.0;

                  case ProtoBuf.TYPES["string"]:
                      return value.length > 0;

                  case ProtoBuf.TYPES["bytes"]:
                      return value.remaining() > 0;

                  case ProtoBuf.TYPES["enum"]:
                      return value !== 0;

                  case ProtoBuf.TYPES["message"]:
                      return value !== null;
                  default:
                      return true;
              }
          };

          /**
           * Encodes the specified field value to the specified buffer.
           * @param {*} value Verified field value
           * @param {ByteBuffer} buffer ByteBuffer to encode to
           * @param {!ProtoBuf.Builder.Message} message Runtime message
           * @return {ByteBuffer} The ByteBuffer for chaining
           * @throws {Error} If the field cannot be encoded
           * @expose
           */
          FieldPrototype.encode = function(value, buffer, message) {
              if (this.type === null || typeof this.type !== 'object')
                  throw Error("[INTERNAL] Unresolved type in "+this.toString(true)+": "+this.type);
              if (value === null || (this.repeated && value.length == 0))
                  return buffer; // Optional omitted
              try {
                  if (this.repeated) {
                      var i;
                      // "Only repeated fields of primitive numeric types (types which use the varint, 32-bit, or 64-bit wire
                      // types) can be declared 'packed'."
                      if (this.options["packed"] && ProtoBuf.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {
                          // "All of the elements of the field are packed into a single key-value pair with wire type 2
                          // (length-delimited). Each element is encoded the same way it would be normally, except without a
                          // tag preceding it."
                          buffer.writeVarint32((this.id << 3) | ProtoBuf.WIRE_TYPES.LDELIM);
                          buffer.ensureCapacity(buffer.offset += 1); // We do not know the length yet, so let's assume a varint of length 1
                          var start = buffer.offset; // Remember where the contents begin
                          for (i=0; i<value.length; i++)
                              this.element.encodeValue(this.id, value[i], buffer);
                          var len = buffer.offset-start,
                              varintLen = ByteBuffer.calculateVarint32(len);
                          if (varintLen > 1) { // We need to move the contents
                              var contents = buffer.slice(start, buffer.offset);
                              start += varintLen-1;
                              buffer.offset = start;
                              buffer.append(contents);
                          }
                          buffer.writeVarint32(len, start-varintLen);
                      } else {
                          // "If your message definition has repeated elements (without the [packed=true] option), the encoded
                          // message has zero or more key-value pairs with the same tag number"
                          for (i=0; i<value.length; i++)
                              buffer.writeVarint32((this.id << 3) | this.type.wireType),
                              this.element.encodeValue(this.id, value[i], buffer);
                      }
                  } else if (this.map) {
                      // Write out each map entry as a submessage.
                      value.forEach(function(val, key, m) {
                          // Compute the length of the submessage (key, val) pair.
                          var length =
                              ByteBuffer.calculateVarint32((1 << 3) | this.keyType.wireType) +
                              this.keyElement.calculateLength(1, key) +
                              ByteBuffer.calculateVarint32((2 << 3) | this.type.wireType) +
                              this.element.calculateLength(2, val);

                          // Submessage with wire type of length-delimited.
                          buffer.writeVarint32((this.id << 3) | ProtoBuf.WIRE_TYPES.LDELIM);
                          buffer.writeVarint32(length);

                          // Write out the key and val.
                          buffer.writeVarint32((1 << 3) | this.keyType.wireType);
                          this.keyElement.encodeValue(1, key, buffer);
                          buffer.writeVarint32((2 << 3) | this.type.wireType);
                          this.element.encodeValue(2, val, buffer);
                      }, this);
                  } else {
                      if (this.hasWirePresence(value, message)) {
                          buffer.writeVarint32((this.id << 3) | this.type.wireType);
                          this.element.encodeValue(this.id, value, buffer);
                      }
                  }
              } catch (e) {
                  throw Error("Illegal value for "+this.toString(true)+": "+value+" ("+e+")");
              }
              return buffer;
          };

          /**
           * Calculates the length of this field's value on the network level.
           * @param {*} value Field value
           * @param {!ProtoBuf.Builder.Message} message Runtime message
           * @returns {number} Byte length
           * @expose
           */
          FieldPrototype.calculate = function(value, message) {
              value = this.verifyValue(value); // May throw
              if (this.type === null || typeof this.type !== 'object')
                  throw Error("[INTERNAL] Unresolved type in "+this.toString(true)+": "+this.type);
              if (value === null || (this.repeated && value.length == 0))
                  return 0; // Optional omitted
              var n = 0;
              try {
                  if (this.repeated) {
                      var i, ni;
                      if (this.options["packed"] && ProtoBuf.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {
                          n += ByteBuffer.calculateVarint32((this.id << 3) | ProtoBuf.WIRE_TYPES.LDELIM);
                          ni = 0;
                          for (i=0; i<value.length; i++)
                              ni += this.element.calculateLength(this.id, value[i]);
                          n += ByteBuffer.calculateVarint32(ni);
                          n += ni;
                      } else {
                          for (i=0; i<value.length; i++)
                              n += ByteBuffer.calculateVarint32((this.id << 3) | this.type.wireType),
                              n += this.element.calculateLength(this.id, value[i]);
                      }
                  } else if (this.map) {
                      // Each map entry becomes a submessage.
                      value.forEach(function(val, key, m) {
                          // Compute the length of the submessage (key, val) pair.
                          var length =
                              ByteBuffer.calculateVarint32((1 << 3) | this.keyType.wireType) +
                              this.keyElement.calculateLength(1, key) +
                              ByteBuffer.calculateVarint32((2 << 3) | this.type.wireType) +
                              this.element.calculateLength(2, val);

                          n += ByteBuffer.calculateVarint32((this.id << 3) | ProtoBuf.WIRE_TYPES.LDELIM);
                          n += ByteBuffer.calculateVarint32(length);
                          n += length;
                      }, this);
                  } else {
                      if (this.hasWirePresence(value, message)) {
                          n += ByteBuffer.calculateVarint32((this.id << 3) | this.type.wireType);
                          n += this.element.calculateLength(this.id, value);
                      }
                  }
              } catch (e) {
                  throw Error("Illegal value for "+this.toString(true)+": "+value+" ("+e+")");
              }
              return n;
          };

          /**
           * Decode the field value from the specified buffer.
           * @param {number} wireType Leading wire type
           * @param {ByteBuffer} buffer ByteBuffer to decode from
           * @param {boolean=} skipRepeated Whether to skip the repeated check or not. Defaults to false.
           * @return {*} Decoded value: array for packed repeated fields, [key, value] for
           *             map fields, or an individual value otherwise.
           * @throws {Error} If the field cannot be decoded
           * @expose
           */
          FieldPrototype.decode = function(wireType, buffer, skipRepeated) {
              var value, nBytes;

              // We expect wireType to match the underlying type's wireType unless we see
              // a packed repeated field, or unless this is a map field.
              var wireTypeOK =
                  (!this.map && wireType == this.type.wireType) ||
                  (!skipRepeated && this.repeated && this.options["packed"] &&
                   wireType == ProtoBuf.WIRE_TYPES.LDELIM) ||
                  (this.map && wireType == ProtoBuf.WIRE_TYPES.LDELIM);
              if (!wireTypeOK)
                  throw Error("Illegal wire type for field "+this.toString(true)+": "+wireType+" ("+this.type.wireType+" expected)");

              // Handle packed repeated fields.
              if (wireType == ProtoBuf.WIRE_TYPES.LDELIM && this.repeated && this.options["packed"] && ProtoBuf.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {
                  if (!skipRepeated) {
                      nBytes = buffer.readVarint32();
                      nBytes = buffer.offset + nBytes; // Limit
                      var values = [];
                      while (buffer.offset < nBytes)
                          values.push(this.decode(this.type.wireType, buffer, true));
                      return values;
                  }
                  // Read the next value otherwise...
              }

              // Handle maps.
              if (this.map) {
                  // Read one (key, value) submessage, and return [key, value]
                  var key = Element.defaultFieldValue(this.keyType);
                  value = Element.defaultFieldValue(this.type);

                  // Read the length
                  nBytes = buffer.readVarint32();
                  if (buffer.remaining() < nBytes)
                      throw Error("Illegal number of bytes for "+this.toString(true)+": "+nBytes+" required but got only "+buffer.remaining());

                  // Get a sub-buffer of this key/value submessage
                  var msgbuf = buffer.clone();
                  msgbuf.limit = msgbuf.offset + nBytes;
                  buffer.offset += nBytes;

                  while (msgbuf.remaining() > 0) {
                      var tag = msgbuf.readVarint32();
                      wireType = tag & 0x07;
                      var id = tag >>> 3;
                      if (id === 1) {
                          key = this.keyElement.decode(msgbuf, wireType, id);
                      } else if (id === 2) {
                          value = this.element.decode(msgbuf, wireType, id);
                      } else {
                          throw Error("Unexpected tag in map field key/value submessage");
                      }
                  }

                  return [key, value];
              }

              // Handle singular and non-packed repeated field values.
              return this.element.decode(buffer, wireType, this.id);
          };

          /**
           * @alias ProtoBuf.Reflect.Message.Field
           * @expose
           */
          Reflect.Message.Field = Field;

          /**
           * Constructs a new Message ExtensionField.
           * @exports ProtoBuf.Reflect.Message.ExtensionField
           * @param {!ProtoBuf.Builder} builder Builder reference
           * @param {!ProtoBuf.Reflect.Message} message Message reference
           * @param {string} rule Rule, one of requried, optional, repeated
           * @param {string} type Data type, e.g. int32
           * @param {string} name Field name
           * @param {number} id Unique field id
           * @param {!Object.<string,*>=} options Options
           * @constructor
           * @extends ProtoBuf.Reflect.Message.Field
           */
          var ExtensionField = function(builder, message, rule, type, name, id, options) {
              Field.call(this, builder, message, rule, /* keytype = */ null, type, name, id, options);

              /**
               * Extension reference.
               * @type {!ProtoBuf.Reflect.Extension}
               * @expose
               */
              this.extension;
          };

          // Extends Field
          ExtensionField.prototype = Object.create(Field.prototype);

          /**
           * @alias ProtoBuf.Reflect.Message.ExtensionField
           * @expose
           */
          Reflect.Message.ExtensionField = ExtensionField;

          /**
           * Constructs a new Message OneOf.
           * @exports ProtoBuf.Reflect.Message.OneOf
           * @param {!ProtoBuf.Builder} builder Builder reference
           * @param {!ProtoBuf.Reflect.Message} message Message reference
           * @param {string} name OneOf name
           * @constructor
           * @extends ProtoBuf.Reflect.T
           */
          var OneOf = function(builder, message, name) {
              T.call(this, builder, message, name);

              /**
               * Enclosed fields.
               * @type {!Array.<!ProtoBuf.Reflect.Message.Field>}
               * @expose
               */
              this.fields = [];
          };

          /**
           * @alias ProtoBuf.Reflect.Message.OneOf
           * @expose
           */
          Reflect.Message.OneOf = OneOf;

          /**
           * Constructs a new Enum.
           * @exports ProtoBuf.Reflect.Enum
           * @param {!ProtoBuf.Builder} builder Builder reference
           * @param {!ProtoBuf.Reflect.T} parent Parent Reflect object
           * @param {string} name Enum name
           * @param {Object.<string,*>=} options Enum options
           * @param {string?} syntax The syntax level (e.g., proto3)
           * @constructor
           * @extends ProtoBuf.Reflect.Namespace
           */
          var Enum = function(builder, parent, name, options, syntax) {
              Namespace.call(this, builder, parent, name, options, syntax);

              /**
               * @override
               */
              this.className = "Enum";

              /**
               * Runtime enum object.
               * @type {Object.<string,number>|null}
               * @expose
               */
              this.object = null;
          };

          /**
           * Gets the string name of an enum value.
           * @param {!ProtoBuf.Builder.Enum} enm Runtime enum
           * @param {number} value Enum value
           * @returns {?string} Name or `null` if not present
           * @expose
           */
          Enum.getName = function(enm, value) {
              var keys = Object.keys(enm);
              for (var i=0, key; i<keys.length; ++i)
                  if (enm[key = keys[i]] === value)
                      return key;
              return null;
          };

          /**
           * @alias ProtoBuf.Reflect.Enum.prototype
           * @inner
           */
          var EnumPrototype = Enum.prototype = Object.create(Namespace.prototype);

          /**
           * Builds this enum and returns the runtime counterpart.
           * @param {boolean} rebuild Whether to rebuild or not, defaults to false
           * @returns {!Object.<string,number>}
           * @expose
           */
          EnumPrototype.build = function(rebuild) {
              if (this.object && !rebuild)
                  return this.object;
              var enm = new ProtoBuf.Builder.Enum(),
                  values = this.getChildren(Enum.Value);
              for (var i=0, k=values.length; i<k; ++i)
                  enm[values[i]['name']] = values[i]['id'];
              if (Object.defineProperty)
                  Object.defineProperty(enm, '$options', {
                      "value": this.buildOpt(),
                      "enumerable": false
                  });
              return this.object = enm;
          };

          /**
           * @alias ProtoBuf.Reflect.Enum
           * @expose
           */
          Reflect.Enum = Enum;

          /**
           * Constructs a new Enum Value.
           * @exports ProtoBuf.Reflect.Enum.Value
           * @param {!ProtoBuf.Builder} builder Builder reference
           * @param {!ProtoBuf.Reflect.Enum} enm Enum reference
           * @param {string} name Field name
           * @param {number} id Unique field id
           * @constructor
           * @extends ProtoBuf.Reflect.T
           */
          var Value = function(builder, enm, name, id) {
              T.call(this, builder, enm, name);

              /**
               * @override
               */
              this.className = "Enum.Value";

              /**
               * Unique enum value id.
               * @type {number}
               * @expose
               */
              this.id = id;
          };

          // Extends T
          Value.prototype = Object.create(T.prototype);

          /**
           * @alias ProtoBuf.Reflect.Enum.Value
           * @expose
           */
          Reflect.Enum.Value = Value;

          /**
           * An extension (field).
           * @exports ProtoBuf.Reflect.Extension
           * @constructor
           * @param {!ProtoBuf.Builder} builder Builder reference
           * @param {!ProtoBuf.Reflect.T} parent Parent object
           * @param {string} name Object name
           * @param {!ProtoBuf.Reflect.Message.Field} field Extension field
           */
          var Extension = function(builder, parent, name, field) {
              T.call(this, builder, parent, name);

              /**
               * Extended message field.
               * @type {!ProtoBuf.Reflect.Message.Field}
               * @expose
               */
              this.field = field;
          };

          // Extends T
          Extension.prototype = Object.create(T.prototype);

          /**
           * @alias ProtoBuf.Reflect.Extension
           * @expose
           */
          Reflect.Extension = Extension;

          /**
           * Constructs a new Service.
           * @exports ProtoBuf.Reflect.Service
           * @param {!ProtoBuf.Builder} builder Builder reference
           * @param {!ProtoBuf.Reflect.Namespace} root Root
           * @param {string} name Service name
           * @param {Object.<string,*>=} options Options
           * @constructor
           * @extends ProtoBuf.Reflect.Namespace
           */
          var Service = function(builder, root, name, options) {
              Namespace.call(this, builder, root, name, options);

              /**
               * @override
               */
              this.className = "Service";

              /**
               * Built runtime service class.
               * @type {?function(new:ProtoBuf.Builder.Service)}
               */
              this.clazz = null;
          };

          /**
           * @alias ProtoBuf.Reflect.Service.prototype
           * @inner
           */
          var ServicePrototype = Service.prototype = Object.create(Namespace.prototype);

          /**
           * Builds the service and returns the runtime counterpart, which is a fully functional class.
           * @see ProtoBuf.Builder.Service
           * @param {boolean=} rebuild Whether to rebuild or not
           * @return {Function} Service class
           * @throws {Error} If the message cannot be built
           * @expose
           */
          ServicePrototype.build = function(rebuild) {
              if (this.clazz && !rebuild)
                  return this.clazz;

              // Create the runtime Service class in its own scope
              return this.clazz = (function(ProtoBuf, T) {

                  /**
                   * Constructs a new runtime Service.
                   * @name ProtoBuf.Builder.Service
                   * @param {function(string, ProtoBuf.Builder.Message, function(Error, ProtoBuf.Builder.Message=))=} rpcImpl RPC implementation receiving the method name and the message
                   * @class Barebone of all runtime services.
                   * @constructor
                   * @throws {Error} If the service cannot be created
                   */
                  var Service = function(rpcImpl) {
                      ProtoBuf.Builder.Service.call(this);

                      /**
                       * Service implementation.
                       * @name ProtoBuf.Builder.Service#rpcImpl
                       * @type {!function(string, ProtoBuf.Builder.Message, function(Error, ProtoBuf.Builder.Message=))}
                       * @expose
                       */
                      this.rpcImpl = rpcImpl || function(name, msg, callback) {
                          // This is what a user has to implement: A function receiving the method name, the actual message to
                          // send (type checked) and the callback that's either provided with the error as its first
                          // argument or null and the actual response message.
                          setTimeout(callback.bind(this, Error("Not implemented, see: https://github.com/dcodeIO/ProtoBuf.js/wiki/Services")), 0); // Must be async!
                      };
                  };

                  /**
                   * @alias ProtoBuf.Builder.Service.prototype
                   * @inner
                   */
                  var ServicePrototype = Service.prototype = Object.create(ProtoBuf.Builder.Service.prototype);

                  /**
                   * Asynchronously performs an RPC call using the given RPC implementation.
                   * @name ProtoBuf.Builder.Service.[Method]
                   * @function
                   * @param {!function(string, ProtoBuf.Builder.Message, function(Error, ProtoBuf.Builder.Message=))} rpcImpl RPC implementation
                   * @param {ProtoBuf.Builder.Message} req Request
                   * @param {function(Error, (ProtoBuf.Builder.Message|ByteBuffer|Buffer|string)=)} callback Callback receiving
                   *  the error if any and the response either as a pre-parsed message or as its raw bytes
                   * @abstract
                   */

                  /**
                   * Asynchronously performs an RPC call using the instance's RPC implementation.
                   * @name ProtoBuf.Builder.Service#[Method]
                   * @function
                   * @param {ProtoBuf.Builder.Message} req Request
                   * @param {function(Error, (ProtoBuf.Builder.Message|ByteBuffer|Buffer|string)=)} callback Callback receiving
                   *  the error if any and the response either as a pre-parsed message or as its raw bytes
                   * @abstract
                   */

                  var rpc = T.getChildren(ProtoBuf.Reflect.Service.RPCMethod);
                  for (var i=0; i<rpc.length; i++) {
                      (function(method) {

                          // service#Method(message, callback)
                          ServicePrototype[method.name] = function(req, callback) {
                              try {
                                  try {
                                      // If given as a buffer, decode the request. Will throw a TypeError if not a valid buffer.
                                      req = method.resolvedRequestType.clazz.decode(ByteBuffer.wrap(req));
                                  } catch (err) {
                                      if (!(err instanceof TypeError))
                                          throw err;
                                  }
                                  if (req === null || typeof req !== 'object')
                                      throw Error("Illegal arguments");
                                  if (!(req instanceof method.resolvedRequestType.clazz))
                                      req = new method.resolvedRequestType.clazz(req);
                                  this.rpcImpl(method.fqn(), req, function(err, res) { // Assumes that this is properly async
                                      if (err) {
                                          callback(err);
                                          return;
                                      }
                                      // Coalesce to empty string when service response has empty content
                                      if (res === null)
                                          res = '';
                                      try { res = method.resolvedResponseType.clazz.decode(res); } catch (notABuffer) {}
                                      if (!res || !(res instanceof method.resolvedResponseType.clazz)) {
                                          callback(Error("Illegal response type received in service method "+ T.name+"#"+method.name));
                                          return;
                                      }
                                      callback(null, res);
                                  });
                              } catch (err) {
                                  setTimeout(callback.bind(this, err), 0);
                              }
                          };

                          // Service.Method(rpcImpl, message, callback)
                          Service[method.name] = function(rpcImpl, req, callback) {
                              new Service(rpcImpl)[method.name](req, callback);
                          };

                          if (Object.defineProperty)
                              Object.defineProperty(Service[method.name], "$options", { "value": method.buildOpt() }),
                              Object.defineProperty(ServicePrototype[method.name], "$options", { "value": Service[method.name]["$options"] });
                      })(rpc[i]);
                  }

                  if (Object.defineProperty)
                      Object.defineProperty(Service, "$options", { "value": T.buildOpt() }),
                      Object.defineProperty(ServicePrototype, "$options", { "value": Service["$options"] }),
                      Object.defineProperty(Service, "$type", { "value": T }),
                      Object.defineProperty(ServicePrototype, "$type", { "value": T });

                  return Service;

              })(ProtoBuf, this);
          };

          /**
           * @alias ProtoBuf.Reflect.Service
           * @expose
           */
          Reflect.Service = Service;

          /**
           * Abstract service method.
           * @exports ProtoBuf.Reflect.Service.Method
           * @param {!ProtoBuf.Builder} builder Builder reference
           * @param {!ProtoBuf.Reflect.Service} svc Service
           * @param {string} name Method name
           * @param {Object.<string,*>=} options Options
           * @constructor
           * @extends ProtoBuf.Reflect.T
           */
          var Method = function(builder, svc, name, options) {
              T.call(this, builder, svc, name);

              /**
               * @override
               */
              this.className = "Service.Method";

              /**
               * Options.
               * @type {Object.<string, *>}
               * @expose
               */
              this.options = options || {};
          };

          /**
           * @alias ProtoBuf.Reflect.Service.Method.prototype
           * @inner
           */
          var MethodPrototype = Method.prototype = Object.create(T.prototype);

          /**
           * Builds the method's '$options' property.
           * @name ProtoBuf.Reflect.Service.Method#buildOpt
           * @function
           * @return {Object.<string,*>}
           */
          MethodPrototype.buildOpt = NamespacePrototype.buildOpt;

          /**
           * @alias ProtoBuf.Reflect.Service.Method
           * @expose
           */
          Reflect.Service.Method = Method;

          /**
           * RPC service method.
           * @exports ProtoBuf.Reflect.Service.RPCMethod
           * @param {!ProtoBuf.Builder} builder Builder reference
           * @param {!ProtoBuf.Reflect.Service} svc Service
           * @param {string} name Method name
           * @param {string} request Request message name
           * @param {string} response Response message name
           * @param {boolean} request_stream Whether requests are streamed
           * @param {boolean} response_stream Whether responses are streamed
           * @param {Object.<string,*>=} options Options
           * @constructor
           * @extends ProtoBuf.Reflect.Service.Method
           */
          var RPCMethod = function(builder, svc, name, request, response, request_stream, response_stream, options) {
              Method.call(this, builder, svc, name, options);

              /**
               * @override
               */
              this.className = "Service.RPCMethod";

              /**
               * Request message name.
               * @type {string}
               * @expose
               */
              this.requestName = request;

              /**
               * Response message name.
               * @type {string}
               * @expose
               */
              this.responseName = response;

              /**
               * Whether requests are streamed
               * @type {bool}
               * @expose
               */
              this.requestStream = request_stream;

              /**
               * Whether responses are streamed
               * @type {bool}
               * @expose
               */
              this.responseStream = response_stream;

              /**
               * Resolved request message type.
               * @type {ProtoBuf.Reflect.Message}
               * @expose
               */
              this.resolvedRequestType = null;

              /**
               * Resolved response message type.
               * @type {ProtoBuf.Reflect.Message}
               * @expose
               */
              this.resolvedResponseType = null;
          };

          // Extends Method
          RPCMethod.prototype = Object.create(Method.prototype);

          /**
           * @alias ProtoBuf.Reflect.Service.RPCMethod
           * @expose
           */
          Reflect.Service.RPCMethod = RPCMethod;

          return Reflect;

      })(ProtoBuf);

      /**
       * @alias ProtoBuf.Builder
       * @expose
       */
      ProtoBuf.Builder = (function(ProtoBuf, Lang, Reflect) {

          /**
           * Constructs a new Builder.
           * @exports ProtoBuf.Builder
           * @class Provides the functionality to build protocol messages.
           * @param {Object.<string,*>=} options Options
           * @constructor
           */
          var Builder = function(options) {

              /**
               * Namespace.
               * @type {ProtoBuf.Reflect.Namespace}
               * @expose
               */
              this.ns = new Reflect.Namespace(this, null, ""); // Global namespace

              /**
               * Namespace pointer.
               * @type {ProtoBuf.Reflect.T}
               * @expose
               */
              this.ptr = this.ns;

              /**
               * Resolved flag.
               * @type {boolean}
               * @expose
               */
              this.resolved = false;

              /**
               * The current building result.
               * @type {Object.<string,ProtoBuf.Builder.Message|Object>|null}
               * @expose
               */
              this.result = null;

              /**
               * Imported files.
               * @type {Array.<string>}
               * @expose
               */
              this.files = {};

              /**
               * Import root override.
               * @type {?string}
               * @expose
               */
              this.importRoot = null;

              /**
               * Options.
               * @type {!Object.<string, *>}
               * @expose
               */
              this.options = options || {};
          };

          /**
           * @alias ProtoBuf.Builder.prototype
           * @inner
           */
          var BuilderPrototype = Builder.prototype;

          // ----- Definition tests -----

          /**
           * Tests if a definition most likely describes a message.
           * @param {!Object} def
           * @returns {boolean}
           * @expose
           */
          Builder.isMessage = function(def) {
              // Messages require a string name
              if (typeof def["name"] !== 'string')
                  return false;
              // Messages do not contain values (enum) or rpc methods (service)
              if (typeof def["values"] !== 'undefined' || typeof def["rpc"] !== 'undefined')
                  return false;
              return true;
          };

          /**
           * Tests if a definition most likely describes a message field.
           * @param {!Object} def
           * @returns {boolean}
           * @expose
           */
          Builder.isMessageField = function(def) {
              // Message fields require a string rule, name and type and an id
              if (typeof def["rule"] !== 'string' || typeof def["name"] !== 'string' || typeof def["type"] !== 'string' || typeof def["id"] === 'undefined')
                  return false;
              return true;
          };

          /**
           * Tests if a definition most likely describes an enum.
           * @param {!Object} def
           * @returns {boolean}
           * @expose
           */
          Builder.isEnum = function(def) {
              // Enums require a string name
              if (typeof def["name"] !== 'string')
                  return false;
              // Enums require at least one value
              if (typeof def["values"] === 'undefined' || !Array.isArray(def["values"]) || def["values"].length === 0)
                  return false;
              return true;
          };

          /**
           * Tests if a definition most likely describes a service.
           * @param {!Object} def
           * @returns {boolean}
           * @expose
           */
          Builder.isService = function(def) {
              // Services require a string name and an rpc object
              if (typeof def["name"] !== 'string' || typeof def["rpc"] !== 'object' || !def["rpc"])
                  return false;
              return true;
          };

          /**
           * Tests if a definition most likely describes an extended message
           * @param {!Object} def
           * @returns {boolean}
           * @expose
           */
          Builder.isExtend = function(def) {
              // Extends rquire a string ref
              if (typeof def["ref"] !== 'string')
                  return false;
              return true;
          };

          // ----- Building -----

          /**
           * Resets the pointer to the root namespace.
           * @returns {!ProtoBuf.Builder} this
           * @expose
           */
          BuilderPrototype.reset = function() {
              this.ptr = this.ns;
              return this;
          };

          /**
           * Defines a namespace on top of the current pointer position and places the pointer on it.
           * @param {string} namespace
           * @return {!ProtoBuf.Builder} this
           * @expose
           */
          BuilderPrototype.define = function(namespace) {
              if (typeof namespace !== 'string' || !Lang.TYPEREF.test(namespace))
                  throw Error("illegal namespace: "+namespace);
              namespace.split(".").forEach(function(part) {
                  var ns = this.ptr.getChild(part);
                  if (ns === null) // Keep existing
                      this.ptr.addChild(ns = new Reflect.Namespace(this, this.ptr, part));
                  this.ptr = ns;
              }, this);
              return this;
          };

          /**
           * Creates the specified definitions at the current pointer position.
           * @param {!Array.<!Object>} defs Messages, enums or services to create
           * @returns {!ProtoBuf.Builder} this
           * @throws {Error} If a message definition is invalid
           * @expose
           */
          BuilderPrototype.create = function(defs) {
              if (!defs)
                  return this; // Nothing to create
              if (!Array.isArray(defs))
                  defs = [defs];
              else {
                  if (defs.length === 0)
                      return this;
                  defs = defs.slice();
              }

              // It's quite hard to keep track of scopes and memory here, so let's do this iteratively.
              var stack = [defs];
              while (stack.length > 0) {
                  defs = stack.pop();

                  if (!Array.isArray(defs)) // Stack always contains entire namespaces
                      throw Error("not a valid namespace: "+JSON.stringify(defs));

                  while (defs.length > 0) {
                      var def = defs.shift(); // Namespaces always contain an array of messages, enums and services

                      if (Builder.isMessage(def)) {
                          var obj = new Reflect.Message(this, this.ptr, def["name"], def["options"], def["isGroup"], def["syntax"]);

                          // Create OneOfs
                          var oneofs = {};
                          if (def["oneofs"])
                              Object.keys(def["oneofs"]).forEach(function(name) {
                                  obj.addChild(oneofs[name] = new Reflect.Message.OneOf(this, obj, name));
                              }, this);

                          // Create fields
                          if (def["fields"])
                              def["fields"].forEach(function(fld) {
                                  if (obj.getChild(fld["id"]|0) !== null)
                                      throw Error("duplicate or invalid field id in "+obj.name+": "+fld['id']);
                                  if (fld["options"] && typeof fld["options"] !== 'object')
                                      throw Error("illegal field options in "+obj.name+"#"+fld["name"]);
                                  var oneof = null;
                                  if (typeof fld["oneof"] === 'string' && !(oneof = oneofs[fld["oneof"]]))
                                      throw Error("illegal oneof in "+obj.name+"#"+fld["name"]+": "+fld["oneof"]);
                                  fld = new Reflect.Message.Field(this, obj, fld["rule"], fld["keytype"], fld["type"], fld["name"], fld["id"], fld["options"], oneof, def["syntax"]);
                                  if (oneof)
                                      oneof.fields.push(fld);
                                  obj.addChild(fld);
                              }, this);

                          // Push children to stack
                          var subObj = [];
                          if (def["enums"])
                              def["enums"].forEach(function(enm) {
                                  subObj.push(enm);
                              });
                          if (def["messages"])
                              def["messages"].forEach(function(msg) {
                                  subObj.push(msg);
                              });
                          if (def["services"])
                              def["services"].forEach(function(svc) {
                                  subObj.push(svc);
                              });

                          // Set extension ranges
                          if (def["extensions"]) {
                              if (typeof def["extensions"][0] === 'number') // pre 5.0.1
                                  obj.extensions = [ def["extensions"] ];
                              else
                                  obj.extensions = def["extensions"];
                          }

                          // Create on top of current namespace
                          this.ptr.addChild(obj);
                          if (subObj.length > 0) {
                              stack.push(defs); // Push the current level back
                              defs = subObj; // Continue processing sub level
                              subObj = null;
                              this.ptr = obj; // And move the pointer to this namespace
                              obj = null;
                              continue;
                          }
                          subObj = null;

                      } else if (Builder.isEnum(def)) {

                          obj = new Reflect.Enum(this, this.ptr, def["name"], def["options"], def["syntax"]);
                          def["values"].forEach(function(val) {
                              obj.addChild(new Reflect.Enum.Value(this, obj, val["name"], val["id"]));
                          }, this);
                          this.ptr.addChild(obj);

                      } else if (Builder.isService(def)) {

                          obj = new Reflect.Service(this, this.ptr, def["name"], def["options"]);
                          Object.keys(def["rpc"]).forEach(function(name) {
                              var mtd = def["rpc"][name];
                              obj.addChild(new Reflect.Service.RPCMethod(this, obj, name, mtd["request"], mtd["response"], !!mtd["request_stream"], !!mtd["response_stream"], mtd["options"]));
                          }, this);
                          this.ptr.addChild(obj);

                      } else if (Builder.isExtend(def)) {

                          obj = this.ptr.resolve(def["ref"], true);
                          if (obj) {
                              def["fields"].forEach(function(fld) {
                                  if (obj.getChild(fld['id']|0) !== null)
                                      throw Error("duplicate extended field id in "+obj.name+": "+fld['id']);
                                  // Check if field id is allowed to be extended
                                  if (obj.extensions) {
                                      var valid = false;
                                      obj.extensions.forEach(function(range) {
                                          if (fld["id"] >= range[0] && fld["id"] <= range[1])
                                              valid = true;
                                      });
                                      if (!valid)
                                          throw Error("illegal extended field id in "+obj.name+": "+fld['id']+" (not within valid ranges)");
                                  }
                                  // Convert extension field names to camel case notation if the override is set
                                  var name = fld["name"];
                                  if (this.options['convertFieldsToCamelCase'])
                                      name = ProtoBuf.Util.toCamelCase(name);
                                  // see #161: Extensions use their fully qualified name as their runtime key and...
                                  var field = new Reflect.Message.ExtensionField(this, obj, fld["rule"], fld["type"], this.ptr.fqn()+'.'+name, fld["id"], fld["options"]);
                                  // ...are added on top of the current namespace as an extension which is used for
                                  // resolving their type later on (the extension always keeps the original name to
                                  // prevent naming collisions)
                                  var ext = new Reflect.Extension(this, this.ptr, fld["name"], field);
                                  field.extension = ext;
                                  this.ptr.addChild(ext);
                                  obj.addChild(field);
                              }, this);

                          } else if (!/\.?google\.protobuf\./.test(def["ref"])) // Silently skip internal extensions
                              throw Error("extended message "+def["ref"]+" is not defined");

                      } else
                          throw Error("not a valid definition: "+JSON.stringify(def));

                      def = null;
                      obj = null;
                  }
                  // Break goes here
                  defs = null;
                  this.ptr = this.ptr.parent; // Namespace done, continue at parent
              }
              this.resolved = false; // Require re-resolve
              this.result = null; // Require re-build
              return this;
          };

          /**
           * Propagates syntax to all children.
           * @param {!Object} parent
           * @inner
           */
          function propagateSyntax(parent) {
              if (parent['messages']) {
                  parent['messages'].forEach(function(child) {
                      child["syntax"] = parent["syntax"];
                      propagateSyntax(child);
                  });
              }
              if (parent['enums']) {
                  parent['enums'].forEach(function(child) {
                      child["syntax"] = parent["syntax"];
                  });
              }
          }

          /**
           * Imports another definition into this builder.
           * @param {Object.<string,*>} json Parsed import
           * @param {(string|{root: string, file: string})=} filename Imported file name
           * @returns {!ProtoBuf.Builder} this
           * @throws {Error} If the definition or file cannot be imported
           * @expose
           */
          BuilderPrototype["import"] = function(json, filename) {
              var delim = '/';

              // Make sure to skip duplicate imports

              if (typeof filename === 'string') {

                  if (ProtoBuf.Util.IS_NODE)
                      filename = require$$2['resolve'](filename);
                  if (this.files[filename] === true)
                      return this.reset();
                  this.files[filename] = true;

              } else if (typeof filename === 'object') { // Object with root, file.

                  var root = filename.root;
                  if (ProtoBuf.Util.IS_NODE)
                      root = require$$2['resolve'](root);
                  if (root.indexOf("\\") >= 0 || filename.file.indexOf("\\") >= 0)
                      delim = '\\';
                  var fname;
                  if (ProtoBuf.Util.IS_NODE)
                      fname = require$$2['join'](root, filename.file);
                  else
                      fname = root + delim + filename.file;
                  if (this.files[fname] === true)
                      return this.reset();
                  this.files[fname] = true;
              }

              // Import imports

              if (json['imports'] && json['imports'].length > 0) {
                  var importRoot,
                      resetRoot = false;

                  if (typeof filename === 'object') { // If an import root is specified, override

                      this.importRoot = filename["root"]; resetRoot = true; // ... and reset afterwards
                      importRoot = this.importRoot;
                      filename = filename["file"];
                      if (importRoot.indexOf("\\") >= 0 || filename.indexOf("\\") >= 0)
                          delim = '\\';

                  } else if (typeof filename === 'string') {

                      if (this.importRoot) // If import root is overridden, use it
                          importRoot = this.importRoot;
                      else { // Otherwise compute from filename
                          if (filename.indexOf("/") >= 0) { // Unix
                              importRoot = filename.replace(/\/[^\/]*$/, "");
                              if (/* /file.proto */ importRoot === "")
                                  importRoot = "/";
                          } else if (filename.indexOf("\\") >= 0) { // Windows
                              importRoot = filename.replace(/\\[^\\]*$/, "");
                              delim = '\\';
                          } else
                              importRoot = ".";
                      }

                  } else
                      importRoot = null;

                  for (var i=0; i<json['imports'].length; i++) {
                      if (typeof json['imports'][i] === 'string') { // Import file
                          if (!importRoot)
                              throw Error("cannot determine import root");
                          var importFilename = json['imports'][i];
                          if (importFilename === "google/protobuf/descriptor.proto")
                              continue; // Not needed and therefore not used
                          if (ProtoBuf.Util.IS_NODE)
                              importFilename = require$$2['join'](importRoot, importFilename);
                          else
                              importFilename = importRoot + delim + importFilename;
                          if (this.files[importFilename] === true)
                              continue; // Already imported
                          if (/\.proto$/i.test(importFilename) && !ProtoBuf.DotProto)       // If this is a light build
                              importFilename = importFilename.replace(/\.proto$/, ".json"); // always load the JSON file
                          var contents = ProtoBuf.Util.fetch(importFilename);
                          if (contents === null)
                              throw Error("failed to import '"+importFilename+"' in '"+filename+"': file not found");
                          if (/\.json$/i.test(importFilename)) // Always possible
                              this["import"](JSON.parse(contents+""), importFilename); // May throw
                          else
                              this["import"](ProtoBuf.DotProto.Parser.parse(contents), importFilename); // May throw
                      } else // Import structure
                          if (!filename)
                              this["import"](json['imports'][i]);
                          else if (/\.(\w+)$/.test(filename)) // With extension: Append _importN to the name portion to make it unique
                              this["import"](json['imports'][i], filename.replace(/^(.+)\.(\w+)$/, function($0, $1, $2) { return $1+"_import"+i+"."+$2; }));
                          else // Without extension: Append _importN to make it unique
                              this["import"](json['imports'][i], filename+"_import"+i);
                  }
                  if (resetRoot) // Reset import root override when all imports are done
                      this.importRoot = null;
              }

              // Import structures

              if (json['package'])
                  this.define(json['package']);
              if (json['syntax'])
                  propagateSyntax(json);
              var base = this.ptr;
              if (json['options'])
                  Object.keys(json['options']).forEach(function(key) {
                      base.options[key] = json['options'][key];
                  });
              if (json['messages'])
                  this.create(json['messages']),
                  this.ptr = base;
              if (json['enums'])
                  this.create(json['enums']),
                  this.ptr = base;
              if (json['services'])
                  this.create(json['services']),
                  this.ptr = base;
              if (json['extends'])
                  this.create(json['extends']);

              return this.reset();
          };

          /**
           * Resolves all namespace objects.
           * @throws {Error} If a type cannot be resolved
           * @returns {!ProtoBuf.Builder} this
           * @expose
           */
          BuilderPrototype.resolveAll = function() {
              // Resolve all reflected objects
              var res;
              if (this.ptr == null || typeof this.ptr.type === 'object')
                  return this; // Done (already resolved)

              if (this.ptr instanceof Reflect.Namespace) { // Resolve children

                  this.ptr.children.forEach(function(child) {
                      this.ptr = child;
                      this.resolveAll();
                  }, this);

              } else if (this.ptr instanceof Reflect.Message.Field) { // Resolve type

                  if (!Lang.TYPE.test(this.ptr.type)) {
                      if (!Lang.TYPEREF.test(this.ptr.type))
                          throw Error("illegal type reference in "+this.ptr.toString(true)+": "+this.ptr.type);
                      res = (this.ptr instanceof Reflect.Message.ExtensionField ? this.ptr.extension.parent : this.ptr.parent).resolve(this.ptr.type, true);
                      if (!res)
                          throw Error("unresolvable type reference in "+this.ptr.toString(true)+": "+this.ptr.type);
                      this.ptr.resolvedType = res;
                      if (res instanceof Reflect.Enum) {
                          this.ptr.type = ProtoBuf.TYPES["enum"];
                          if (this.ptr.syntax === 'proto3' && res.syntax !== 'proto3')
                              throw Error("proto3 message cannot reference proto2 enum");
                      }
                      else if (res instanceof Reflect.Message)
                          this.ptr.type = res.isGroup ? ProtoBuf.TYPES["group"] : ProtoBuf.TYPES["message"];
                      else
                          throw Error("illegal type reference in "+this.ptr.toString(true)+": "+this.ptr.type);
                  } else
                      this.ptr.type = ProtoBuf.TYPES[this.ptr.type];

                  // If it's a map field, also resolve the key type. The key type can be only a numeric, string, or bool type
                  // (i.e., no enums or messages), so we don't need to resolve against the current namespace.
                  if (this.ptr.map) {
                      if (!Lang.TYPE.test(this.ptr.keyType))
                          throw Error("illegal key type for map field in "+this.ptr.toString(true)+": "+this.ptr.keyType);
                      this.ptr.keyType = ProtoBuf.TYPES[this.ptr.keyType];
                  }

                  // If it's a repeated and packable field then proto3 mandates it should be packed by
                  // default
                  if (
                    this.ptr.syntax === 'proto3' &&
                    this.ptr.repeated && this.ptr.options.packed === undefined &&
                    ProtoBuf.PACKABLE_WIRE_TYPES.indexOf(this.ptr.type.wireType) !== -1
                  ) {
                    this.ptr.options.packed = true;
                  }

              } else if (this.ptr instanceof ProtoBuf.Reflect.Service.Method) {

                  if (this.ptr instanceof ProtoBuf.Reflect.Service.RPCMethod) {
                      res = this.ptr.parent.resolve(this.ptr.requestName, true);
                      if (!res || !(res instanceof ProtoBuf.Reflect.Message))
                          throw Error("Illegal type reference in "+this.ptr.toString(true)+": "+this.ptr.requestName);
                      this.ptr.resolvedRequestType = res;
                      res = this.ptr.parent.resolve(this.ptr.responseName, true);
                      if (!res || !(res instanceof ProtoBuf.Reflect.Message))
                          throw Error("Illegal type reference in "+this.ptr.toString(true)+": "+this.ptr.responseName);
                      this.ptr.resolvedResponseType = res;
                  } else // Should not happen as nothing else is implemented
                      throw Error("illegal service type in "+this.ptr.toString(true));

              } else if (
                  !(this.ptr instanceof ProtoBuf.Reflect.Message.OneOf) && // Not built
                  !(this.ptr instanceof ProtoBuf.Reflect.Extension) && // Not built
                  !(this.ptr instanceof ProtoBuf.Reflect.Enum.Value) // Built in enum
              )
                  throw Error("illegal object in namespace: "+typeof(this.ptr)+": "+this.ptr);

              return this.reset();
          };

          /**
           * Builds the protocol. This will first try to resolve all definitions and, if this has been successful,
           * return the built package.
           * @param {(string|Array.<string>)=} path Specifies what to return. If omitted, the entire namespace will be returned.
           * @returns {!ProtoBuf.Builder.Message|!Object.<string,*>}
           * @throws {Error} If a type could not be resolved
           * @expose
           */
          BuilderPrototype.build = function(path) {
              this.reset();
              if (!this.resolved)
                  this.resolveAll(),
                  this.resolved = true,
                  this.result = null; // Require re-build
              if (this.result === null) // (Re-)Build
                  this.result = this.ns.build();
              if (!path)
                  return this.result;
              var part = typeof path === 'string' ? path.split(".") : path,
                  ptr = this.result; // Build namespace pointer (no hasChild etc.)
              for (var i=0; i<part.length; i++)
                  if (ptr[part[i]])
                      ptr = ptr[part[i]];
                  else {
                      ptr = null;
                      break;
                  }
              return ptr;
          };

          /**
           * Similar to {@link ProtoBuf.Builder#build}, but looks up the internal reflection descriptor.
           * @param {string=} path Specifies what to return. If omitted, the entire namespace wiil be returned.
           * @param {boolean=} excludeNonNamespace Excludes non-namespace types like fields, defaults to `false`
           * @returns {?ProtoBuf.Reflect.T} Reflection descriptor or `null` if not found
           */
          BuilderPrototype.lookup = function(path, excludeNonNamespace) {
              return path ? this.ns.resolve(path, excludeNonNamespace) : this.ns;
          };

          /**
           * Returns a string representation of this object.
           * @return {string} String representation as of "Builder"
           * @expose
           */
          BuilderPrototype.toString = function() {
              return "Builder";
          };

          // ----- Base classes -----
          // Exist for the sole purpose of being able to "... instanceof ProtoBuf.Builder.Message" etc.

          /**
           * @alias ProtoBuf.Builder.Message
           */
          Builder.Message = function() {};

          /**
           * @alias ProtoBuf.Builder.Enum
           */
          Builder.Enum = function() {};

          /**
           * @alias ProtoBuf.Builder.Message
           */
          Builder.Service = function() {};

          return Builder;

      })(ProtoBuf, ProtoBuf.Lang, ProtoBuf.Reflect);

      /**
       * @alias ProtoBuf.Map
       * @expose
       */
      ProtoBuf.Map = (function(ProtoBuf, Reflect) {

          /**
           * Constructs a new Map. A Map is a container that is used to implement map
           * fields on message objects. It closely follows the ES6 Map API; however,
           * it is distinct because we do not want to depend on external polyfills or
           * on ES6 itself.
           *
           * @exports ProtoBuf.Map
           * @param {!ProtoBuf.Reflect.Field} field Map field
           * @param {Object.<string,*>=} contents Initial contents
           * @constructor
           */
          var Map = function(field, contents) {
              if (!field.map)
                  throw Error("field is not a map");

              /**
               * The field corresponding to this map.
               * @type {!ProtoBuf.Reflect.Field}
               */
              this.field = field;

              /**
               * Element instance corresponding to key type.
               * @type {!ProtoBuf.Reflect.Element}
               */
              this.keyElem = new Reflect.Element(field.keyType, null, true, field.syntax);

              /**
               * Element instance corresponding to value type.
               * @type {!ProtoBuf.Reflect.Element}
               */
              this.valueElem = new Reflect.Element(field.type, field.resolvedType, false, field.syntax);

              /**
               * Internal map: stores mapping of (string form of key) -> (key, value)
               * pair.
               *
               * We provide map semantics for arbitrary key types, but we build on top
               * of an Object, which has only string keys. In order to avoid the need
               * to convert a string key back to its native type in many situations,
               * we store the native key value alongside the value. Thus, we only need
               * a one-way mapping from a key type to its string form that guarantees
               * uniqueness and equality (i.e., str(K1) === str(K2) if and only if K1
               * === K2).
               *
               * @type {!Object<string, {key: *, value: *}>}
               */
              this.map = {};

              /**
               * Returns the number of elements in the map.
               */
              Object.defineProperty(this, "size", {
                  get: function() { return Object.keys(this.map).length; }
              });

              // Fill initial contents from a raw object.
              if (contents) {
                  var keys = Object.keys(contents);
                  for (var i = 0; i < keys.length; i++) {
                      var key = this.keyElem.valueFromString(keys[i]);
                      var val = this.valueElem.verifyValue(contents[keys[i]]);
                      this.map[this.keyElem.valueToString(key)] =
                          { key: key, value: val };
                  }
              }
          };

          var MapPrototype = Map.prototype;

          /**
           * Helper: return an iterator over an array.
           * @param {!Array<*>} arr the array
           * @returns {!Object} an iterator
           * @inner
           */
          function arrayIterator(arr) {
              var idx = 0;
              return {
                  next: function() {
                      if (idx < arr.length)
                          return { done: false, value: arr[idx++] };
                      return { done: true };
                  }
              }
          }

          /**
           * Clears the map.
           */
          MapPrototype.clear = function() {
              this.map = {};
          };

          /**
           * Deletes a particular key from the map.
           * @returns {boolean} Whether any entry with this key was deleted.
           */
          MapPrototype["delete"] = function(key) {
              var keyValue = this.keyElem.valueToString(this.keyElem.verifyValue(key));
              var hadKey = keyValue in this.map;
              delete this.map[keyValue];
              return hadKey;
          };

          /**
           * Returns an iterator over [key, value] pairs in the map.
           * @returns {Object} The iterator
           */
          MapPrototype.entries = function() {
              var entries = [];
              var strKeys = Object.keys(this.map);
              for (var i = 0, entry; i < strKeys.length; i++)
                  entries.push([(entry=this.map[strKeys[i]]).key, entry.value]);
              return arrayIterator(entries);
          };

          /**
           * Returns an iterator over keys in the map.
           * @returns {Object} The iterator
           */
          MapPrototype.keys = function() {
              var keys = [];
              var strKeys = Object.keys(this.map);
              for (var i = 0; i < strKeys.length; i++)
                  keys.push(this.map[strKeys[i]].key);
              return arrayIterator(keys);
          };

          /**
           * Returns an iterator over values in the map.
           * @returns {!Object} The iterator
           */
          MapPrototype.values = function() {
              var values = [];
              var strKeys = Object.keys(this.map);
              for (var i = 0; i < strKeys.length; i++)
                  values.push(this.map[strKeys[i]].value);
              return arrayIterator(values);
          };

          /**
           * Iterates over entries in the map, calling a function on each.
           * @param {function(this:*, *, *, *)} cb The callback to invoke with value, key, and map arguments.
           * @param {Object=} thisArg The `this` value for the callback
           */
          MapPrototype.forEach = function(cb, thisArg) {
              var strKeys = Object.keys(this.map);
              for (var i = 0, entry; i < strKeys.length; i++)
                  cb.call(thisArg, (entry=this.map[strKeys[i]]).value, entry.key, this);
          };

          /**
           * Sets a key in the map to the given value.
           * @param {*} key The key
           * @param {*} value The value
           * @returns {!ProtoBuf.Map} The map instance
           */
          MapPrototype.set = function(key, value) {
              var keyValue = this.keyElem.verifyValue(key);
              var valValue = this.valueElem.verifyValue(value);
              this.map[this.keyElem.valueToString(keyValue)] =
                  { key: keyValue, value: valValue };
              return this;
          };

          /**
           * Gets the value corresponding to a key in the map.
           * @param {*} key The key
           * @returns {*|undefined} The value, or `undefined` if key not present
           */
          MapPrototype.get = function(key) {
              var keyValue = this.keyElem.valueToString(this.keyElem.verifyValue(key));
              if (!(keyValue in this.map))
                  return undefined;
              return this.map[keyValue].value;
          };

          /**
           * Determines whether the given key is present in the map.
           * @param {*} key The key
           * @returns {boolean} `true` if the key is present
           */
          MapPrototype.has = function(key) {
              var keyValue = this.keyElem.valueToString(this.keyElem.verifyValue(key));
              return (keyValue in this.map);
          };

          return Map;
      })(ProtoBuf, ProtoBuf.Reflect);


      /**
       * Loads a .proto string and returns the Builder.
       * @param {string} proto .proto file contents
       * @param {(ProtoBuf.Builder|string|{root: string, file: string})=} builder Builder to append to. Will create a new one if omitted.
       * @param {(string|{root: string, file: string})=} filename The corresponding file name if known. Must be specified for imports.
       * @return {ProtoBuf.Builder} Builder to create new messages
       * @throws {Error} If the definition cannot be parsed or built
       * @expose
       */
      ProtoBuf.loadProto = function(proto, builder, filename) {
          if (typeof builder === 'string' || (builder && typeof builder["file"] === 'string' && typeof builder["root"] === 'string'))
              filename = builder,
              builder = undefined;
          return ProtoBuf.loadJson(ProtoBuf.DotProto.Parser.parse(proto), builder, filename);
      };

      /**
       * Loads a .proto string and returns the Builder. This is an alias of {@link ProtoBuf.loadProto}.
       * @function
       * @param {string} proto .proto file contents
       * @param {(ProtoBuf.Builder|string)=} builder Builder to append to. Will create a new one if omitted.
       * @param {(string|{root: string, file: string})=} filename The corresponding file name if known. Must be specified for imports.
       * @return {ProtoBuf.Builder} Builder to create new messages
       * @throws {Error} If the definition cannot be parsed or built
       * @expose
       */
      ProtoBuf.protoFromString = ProtoBuf.loadProto; // Legacy

      /**
       * Loads a .proto file and returns the Builder.
       * @param {string|{root: string, file: string}} filename Path to proto file or an object specifying 'file' with
       *  an overridden 'root' path for all imported files.
       * @param {function(?Error, !ProtoBuf.Builder=)=} callback Callback that will receive `null` as the first and
       *  the Builder as its second argument on success, otherwise the error as its first argument. If omitted, the
       *  file will be read synchronously and this function will return the Builder.
       * @param {ProtoBuf.Builder=} builder Builder to append to. Will create a new one if omitted.
       * @return {?ProtoBuf.Builder|undefined} The Builder if synchronous (no callback specified, will be NULL if the
       *   request has failed), else undefined
       * @expose
       */
      ProtoBuf.loadProtoFile = function(filename, callback, builder) {
          if (callback && typeof callback === 'object')
              builder = callback,
              callback = null;
          else if (!callback || typeof callback !== 'function')
              callback = null;
          if (callback)
              return ProtoBuf.Util.fetch(typeof filename === 'string' ? filename : filename["root"]+"/"+filename["file"], function(contents) {
                  if (contents === null) {
                      callback(Error("Failed to fetch file"));
                      return;
                  }
                  try {
                      callback(null, ProtoBuf.loadProto(contents, builder, filename));
                  } catch (e) {
                      callback(e);
                  }
              });
          var contents = ProtoBuf.Util.fetch(typeof filename === 'object' ? filename["root"]+"/"+filename["file"] : filename);
          return contents === null ? null : ProtoBuf.loadProto(contents, builder, filename);
      };

      /**
       * Loads a .proto file and returns the Builder. This is an alias of {@link ProtoBuf.loadProtoFile}.
       * @function
       * @param {string|{root: string, file: string}} filename Path to proto file or an object specifying 'file' with
       *  an overridden 'root' path for all imported files.
       * @param {function(?Error, !ProtoBuf.Builder=)=} callback Callback that will receive `null` as the first and
       *  the Builder as its second argument on success, otherwise the error as its first argument. If omitted, the
       *  file will be read synchronously and this function will return the Builder.
       * @param {ProtoBuf.Builder=} builder Builder to append to. Will create a new one if omitted.
       * @return {!ProtoBuf.Builder|undefined} The Builder if synchronous (no callback specified, will be NULL if the
       *   request has failed), else undefined
       * @expose
       */
      ProtoBuf.protoFromFile = ProtoBuf.loadProtoFile; // Legacy


      /**
       * Constructs a new empty Builder.
       * @param {Object.<string,*>=} options Builder options, defaults to global options set on ProtoBuf
       * @return {!ProtoBuf.Builder} Builder
       * @expose
       */
      ProtoBuf.newBuilder = function(options) {
          options = options || {};
          if (typeof options['convertFieldsToCamelCase'] === 'undefined')
              options['convertFieldsToCamelCase'] = ProtoBuf.convertFieldsToCamelCase;
          if (typeof options['populateAccessors'] === 'undefined')
              options['populateAccessors'] = ProtoBuf.populateAccessors;
          return new ProtoBuf.Builder(options);
      };

      /**
       * Loads a .json definition and returns the Builder.
       * @param {!*|string} json JSON definition
       * @param {(ProtoBuf.Builder|string|{root: string, file: string})=} builder Builder to append to. Will create a new one if omitted.
       * @param {(string|{root: string, file: string})=} filename The corresponding file name if known. Must be specified for imports.
       * @return {ProtoBuf.Builder} Builder to create new messages
       * @throws {Error} If the definition cannot be parsed or built
       * @expose
       */
      ProtoBuf.loadJson = function(json, builder, filename) {
          if (typeof builder === 'string' || (builder && typeof builder["file"] === 'string' && typeof builder["root"] === 'string'))
              filename = builder,
              builder = null;
          if (!builder || typeof builder !== 'object')
              builder = ProtoBuf.newBuilder();
          if (typeof json === 'string')
              json = JSON.parse(json);
          builder["import"](json, filename);
          builder.resolveAll();
          return builder;
      };

      /**
       * Loads a .json file and returns the Builder.
       * @param {string|!{root: string, file: string}} filename Path to json file or an object specifying 'file' with
       *  an overridden 'root' path for all imported files.
       * @param {function(?Error, !ProtoBuf.Builder=)=} callback Callback that will receive `null` as the first and
       *  the Builder as its second argument on success, otherwise the error as its first argument. If omitted, the
       *  file will be read synchronously and this function will return the Builder.
       * @param {ProtoBuf.Builder=} builder Builder to append to. Will create a new one if omitted.
       * @return {?ProtoBuf.Builder|undefined} The Builder if synchronous (no callback specified, will be NULL if the
       *   request has failed), else undefined
       * @expose
       */
      ProtoBuf.loadJsonFile = function(filename, callback, builder) {
          if (callback && typeof callback === 'object')
              builder = callback,
              callback = null;
          else if (!callback || typeof callback !== 'function')
              callback = null;
          if (callback)
              return ProtoBuf.Util.fetch(typeof filename === 'string' ? filename : filename["root"]+"/"+filename["file"], function(contents) {
                  if (contents === null) {
                      callback(Error("Failed to fetch file"));
                      return;
                  }
                  try {
                      callback(null, ProtoBuf.loadJson(JSON.parse(contents), builder, filename));
                  } catch (e) {
                      callback(e);
                  }
              });
          var contents = ProtoBuf.Util.fetch(typeof filename === 'object' ? filename["root"]+"/"+filename["file"] : filename);
          return contents === null ? null : ProtoBuf.loadJson(JSON.parse(contents), builder, filename);
      };

      return ProtoBuf;
  });
  });

  var semver = createCommonjsModule(function (module, exports) {
  exports = module.exports = SemVer;

  // The debug function is excluded entirely from the minified version.
  /* nomin */ var debug;
  /* nomin */ if (typeof process === 'object' &&
      /* nomin */ process.env &&
      /* nomin */ process.env.NODE_DEBUG &&
      /* nomin */ /\bsemver\b/i.test(process.env.NODE_DEBUG))
    /* nomin */ debug = function() {
      /* nomin */ var args = Array.prototype.slice.call(arguments, 0);
      /* nomin */ args.unshift('SEMVER');
      /* nomin */ console.log.apply(console, args);
      /* nomin */ };
  /* nomin */ else
    /* nomin */ debug = function() {};

  // Note: this is the semver.org version of the spec that it implements
  // Not necessarily the package version of this code.
  exports.SEMVER_SPEC_VERSION = '2.0.0';

  var MAX_LENGTH = 256;
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

  // Max safe segment length for coercion.
  var MAX_SAFE_COMPONENT_LENGTH = 16;

  // The actual regexps go on exports.re
  var re = exports.re = [];
  var src = exports.src = [];
  var R = 0;

  // The following Regular Expressions can be used for tokenizing,
  // validating, and parsing SemVer version strings.

  // ## Numeric Identifier
  // A single `0`, or a non-zero digit followed by zero or more digits.

  var NUMERICIDENTIFIER = R++;
  src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
  var NUMERICIDENTIFIERLOOSE = R++;
  src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';


  // ## Non-numeric Identifier
  // Zero or more digits, followed by a letter or hyphen, and then zero or
  // more letters, digits, or hyphens.

  var NONNUMERICIDENTIFIER = R++;
  src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';


  // ## Main Version
  // Three dot-separated numeric identifiers.

  var MAINVERSION = R++;
  src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                     '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                     '(' + src[NUMERICIDENTIFIER] + ')';

  var MAINVERSIONLOOSE = R++;
  src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                          '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                          '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

  // ## Pre-release Version Identifier
  // A numeric identifier, or a non-numeric identifier.

  var PRERELEASEIDENTIFIER = R++;
  src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
                              '|' + src[NONNUMERICIDENTIFIER] + ')';

  var PRERELEASEIDENTIFIERLOOSE = R++;
  src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
                                   '|' + src[NONNUMERICIDENTIFIER] + ')';


  // ## Pre-release Version
  // Hyphen, followed by one or more dot-separated pre-release version
  // identifiers.

  var PRERELEASE = R++;
  src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
                    '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

  var PRERELEASELOOSE = R++;
  src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
                         '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

  // ## Build Metadata Identifier
  // Any combination of digits, letters, or hyphens.

  var BUILDIDENTIFIER = R++;
  src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

  // ## Build Metadata
  // Plus sign, followed by one or more period-separated build metadata
  // identifiers.

  var BUILD = R++;
  src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
               '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';


  // ## Full Version String
  // A main version, followed optionally by a pre-release version and
  // build metadata.

  // Note that the only major, minor, patch, and pre-release sections of
  // the version string are capturing groups.  The build metadata is not a
  // capturing group, because it should not ever be used in version
  // comparison.

  var FULL = R++;
  var FULLPLAIN = 'v?' + src[MAINVERSION] +
                  src[PRERELEASE] + '?' +
                  src[BUILD] + '?';

  src[FULL] = '^' + FULLPLAIN + '$';

  // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
  // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
  // common in the npm registry.
  var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
                   src[PRERELEASELOOSE] + '?' +
                   src[BUILD] + '?';

  var LOOSE = R++;
  src[LOOSE] = '^' + LOOSEPLAIN + '$';

  var GTLT = R++;
  src[GTLT] = '((?:<|>)?=?)';

  // Something like "2.*" or "1.2.x".
  // Note that "x.x" is a valid xRange identifer, meaning "any version"
  // Only the first item is strictly required.
  var XRANGEIDENTIFIERLOOSE = R++;
  src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
  var XRANGEIDENTIFIER = R++;
  src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

  var XRANGEPLAIN = R++;
  src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
                     '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                     '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                     '(?:' + src[PRERELEASE] + ')?' +
                     src[BUILD] + '?' +
                     ')?)?';

  var XRANGEPLAINLOOSE = R++;
  src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                          '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                          '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                          '(?:' + src[PRERELEASELOOSE] + ')?' +
                          src[BUILD] + '?' +
                          ')?)?';

  var XRANGE = R++;
  src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
  var XRANGELOOSE = R++;
  src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

  // Coercion.
  // Extract anything that could conceivably be a part of a valid semver
  var COERCE = R++;
  src[COERCE] = '(?:^|[^\\d])' +
                '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
                '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
                '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
                '(?:$|[^\\d])';

  // Tilde ranges.
  // Meaning is "reasonably at or greater than"
  var LONETILDE = R++;
  src[LONETILDE] = '(?:~>?)';

  var TILDETRIM = R++;
  src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
  re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
  var tildeTrimReplace = '$1~';

  var TILDE = R++;
  src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
  var TILDELOOSE = R++;
  src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

  // Caret ranges.
  // Meaning is "at least and backwards compatible with"
  var LONECARET = R++;
  src[LONECARET] = '(?:\\^)';

  var CARETTRIM = R++;
  src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
  re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
  var caretTrimReplace = '$1^';

  var CARET = R++;
  src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
  var CARETLOOSE = R++;
  src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

  // A simple gt/lt/eq thing, or just "" to indicate "any version"
  var COMPARATORLOOSE = R++;
  src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
  var COMPARATOR = R++;
  src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';


  // An expression to strip any whitespace between the gtlt and the thing
  // it modifies, so that `> 1.2.3` ==> `>1.2.3`
  var COMPARATORTRIM = R++;
  src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
                        '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

  // this one has to use the /g flag
  re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
  var comparatorTrimReplace = '$1$2$3';


  // Something like `1.2.3 - 1.2.4`
  // Note that these all use the loose form, because they'll be
  // checked against either the strict or loose comparator form
  // later.
  var HYPHENRANGE = R++;
  src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
                     '\\s+-\\s+' +
                     '(' + src[XRANGEPLAIN] + ')' +
                     '\\s*$';

  var HYPHENRANGELOOSE = R++;
  src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
                          '\\s+-\\s+' +
                          '(' + src[XRANGEPLAINLOOSE] + ')' +
                          '\\s*$';

  // Star ranges basically just allow anything at all.
  var STAR = R++;
  src[STAR] = '(<|>)?=?\\s*\\*';

  // Compile to actual regexp objects.
  // All are flag-free, unless they were created above with a flag.
  for (var i = 0; i < R; i++) {
    debug(i, src[i]);
    if (!re[i])
      re[i] = new RegExp(src[i]);
  }

  exports.parse = parse;
  function parse(version, loose) {
    if (version instanceof SemVer)
      return version;

    if (typeof version !== 'string')
      return null;

    if (version.length > MAX_LENGTH)
      return null;

    var r = loose ? re[LOOSE] : re[FULL];
    if (!r.test(version))
      return null;

    try {
      return new SemVer(version, loose);
    } catch (er) {
      return null;
    }
  }

  exports.valid = valid;
  function valid(version, loose) {
    var v = parse(version, loose);
    return v ? v.version : null;
  }


  exports.clean = clean;
  function clean(version, loose) {
    var s = parse(version.trim().replace(/^[=v]+/, ''), loose);
    return s ? s.version : null;
  }

  exports.SemVer = SemVer;

  function SemVer(version, loose) {
    if (version instanceof SemVer) {
      if (version.loose === loose)
        return version;
      else
        version = version.version;
    } else if (typeof version !== 'string') {
      throw new TypeError('Invalid Version: ' + version);
    }

    if (version.length > MAX_LENGTH)
      throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')

    if (!(this instanceof SemVer))
      return new SemVer(version, loose);

    debug('SemVer', version, loose);
    this.loose = loose;
    var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);

    if (!m)
      throw new TypeError('Invalid Version: ' + version);

    this.raw = version;

    // these are actually numbers
    this.major = +m[1];
    this.minor = +m[2];
    this.patch = +m[3];

    if (this.major > MAX_SAFE_INTEGER || this.major < 0)
      throw new TypeError('Invalid major version')

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
      throw new TypeError('Invalid minor version')

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
      throw new TypeError('Invalid patch version')

    // numberify any prerelease numeric ids
    if (!m[4])
      this.prerelease = [];
    else
      this.prerelease = m[4].split('.').map(function(id) {
        if (/^[0-9]+$/.test(id)) {
          var num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER)
            return num;
        }
        return id;
      });

    this.build = m[5] ? m[5].split('.') : [];
    this.format();
  }

  SemVer.prototype.format = function() {
    this.version = this.major + '.' + this.minor + '.' + this.patch;
    if (this.prerelease.length)
      this.version += '-' + this.prerelease.join('.');
    return this.version;
  };

  SemVer.prototype.toString = function() {
    return this.version;
  };

  SemVer.prototype.compare = function(other) {
    debug('SemVer.compare', this.version, this.loose, other);
    if (!(other instanceof SemVer))
      other = new SemVer(other, this.loose);

    return this.compareMain(other) || this.comparePre(other);
  };

  SemVer.prototype.compareMain = function(other) {
    if (!(other instanceof SemVer))
      other = new SemVer(other, this.loose);

    return compareIdentifiers(this.major, other.major) ||
           compareIdentifiers(this.minor, other.minor) ||
           compareIdentifiers(this.patch, other.patch);
  };

  SemVer.prototype.comparePre = function(other) {
    if (!(other instanceof SemVer))
      other = new SemVer(other, this.loose);

    // NOT having a prerelease is > having one
    if (this.prerelease.length && !other.prerelease.length)
      return -1;
    else if (!this.prerelease.length && other.prerelease.length)
      return 1;
    else if (!this.prerelease.length && !other.prerelease.length)
      return 0;

    var i = 0;
    do {
      var a = this.prerelease[i];
      var b = other.prerelease[i];
      debug('prerelease compare', i, a, b);
      if (a === undefined && b === undefined)
        return 0;
      else if (b === undefined)
        return 1;
      else if (a === undefined)
        return -1;
      else if (a === b)
        continue;
      else
        return compareIdentifiers(a, b);
    } while (++i);
  };

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  SemVer.prototype.inc = function(release, identifier) {
    switch (release) {
      case 'premajor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor = 0;
        this.major++;
        this.inc('pre', identifier);
        break;
      case 'preminor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor++;
        this.inc('pre', identifier);
        break;
      case 'prepatch':
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        this.prerelease.length = 0;
        this.inc('patch', identifier);
        this.inc('pre', identifier);
        break;
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case 'prerelease':
        if (this.prerelease.length === 0)
          this.inc('patch', identifier);
        this.inc('pre', identifier);
        break;

      case 'major':
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)
          this.major++;
        this.minor = 0;
        this.patch = 0;
        this.prerelease = [];
        break;
      case 'minor':
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if (this.patch !== 0 || this.prerelease.length === 0)
          this.minor++;
        this.patch = 0;
        this.prerelease = [];
        break;
      case 'patch':
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if (this.prerelease.length === 0)
          this.patch++;
        this.prerelease = [];
        break;
      // This probably shouldn't be used publicly.
      // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
      case 'pre':
        if (this.prerelease.length === 0)
          this.prerelease = [0];
        else {
          var i = this.prerelease.length;
          while (--i >= 0) {
            if (typeof this.prerelease[i] === 'number') {
              this.prerelease[i]++;
              i = -2;
            }
          }
          if (i === -1) // didn't increment anything
            this.prerelease.push(0);
        }
        if (identifier) {
          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
          if (this.prerelease[0] === identifier) {
            if (isNaN(this.prerelease[1]))
              this.prerelease = [identifier, 0];
          } else
            this.prerelease = [identifier, 0];
        }
        break;

      default:
        throw new Error('invalid increment argument: ' + release);
    }
    this.format();
    this.raw = this.version;
    return this;
  };

  exports.inc = inc;
  function inc(version, release, loose, identifier) {
    if (typeof(loose) === 'string') {
      identifier = loose;
      loose = undefined;
    }

    try {
      return new SemVer(version, loose).inc(release, identifier).version;
    } catch (er) {
      return null;
    }
  }

  exports.diff = diff;
  function diff(version1, version2) {
    if (eq(version1, version2)) {
      return null;
    } else {
      var v1 = parse(version1);
      var v2 = parse(version2);
      if (v1.prerelease.length || v2.prerelease.length) {
        for (var key in v1) {
          if (key === 'major' || key === 'minor' || key === 'patch') {
            if (v1[key] !== v2[key]) {
              return 'pre'+key;
            }
          }
        }
        return 'prerelease';
      }
      for (var key in v1) {
        if (key === 'major' || key === 'minor' || key === 'patch') {
          if (v1[key] !== v2[key]) {
            return key;
          }
        }
      }
    }
  }

  exports.compareIdentifiers = compareIdentifiers;

  var numeric = /^[0-9]+$/;
  function compareIdentifiers(a, b) {
    var anum = numeric.test(a);
    var bnum = numeric.test(b);

    if (anum && bnum) {
      a = +a;
      b = +b;
    }

    return (anum && !bnum) ? -1 :
           (bnum && !anum) ? 1 :
           a < b ? -1 :
           a > b ? 1 :
           0;
  }

  exports.rcompareIdentifiers = rcompareIdentifiers;
  function rcompareIdentifiers(a, b) {
    return compareIdentifiers(b, a);
  }

  exports.major = major;
  function major(a, loose) {
    return new SemVer(a, loose).major;
  }

  exports.minor = minor;
  function minor(a, loose) {
    return new SemVer(a, loose).minor;
  }

  exports.patch = patch;
  function patch(a, loose) {
    return new SemVer(a, loose).patch;
  }

  exports.compare = compare;
  function compare(a, b, loose) {
    return new SemVer(a, loose).compare(new SemVer(b, loose));
  }

  exports.compareLoose = compareLoose;
  function compareLoose(a, b) {
    return compare(a, b, true);
  }

  exports.rcompare = rcompare;
  function rcompare(a, b, loose) {
    return compare(b, a, loose);
  }

  exports.sort = sort;
  function sort(list, loose) {
    return list.sort(function(a, b) {
      return exports.compare(a, b, loose);
    });
  }

  exports.rsort = rsort;
  function rsort(list, loose) {
    return list.sort(function(a, b) {
      return exports.rcompare(a, b, loose);
    });
  }

  exports.gt = gt;
  function gt(a, b, loose) {
    return compare(a, b, loose) > 0;
  }

  exports.lt = lt;
  function lt(a, b, loose) {
    return compare(a, b, loose) < 0;
  }

  exports.eq = eq;
  function eq(a, b, loose) {
    return compare(a, b, loose) === 0;
  }

  exports.neq = neq;
  function neq(a, b, loose) {
    return compare(a, b, loose) !== 0;
  }

  exports.gte = gte;
  function gte(a, b, loose) {
    return compare(a, b, loose) >= 0;
  }

  exports.lte = lte;
  function lte(a, b, loose) {
    return compare(a, b, loose) <= 0;
  }

  exports.cmp = cmp;
  function cmp(a, op, b, loose) {
    var ret;
    switch (op) {
      case '===':
        if (typeof a === 'object') a = a.version;
        if (typeof b === 'object') b = b.version;
        ret = a === b;
        break;
      case '!==':
        if (typeof a === 'object') a = a.version;
        if (typeof b === 'object') b = b.version;
        ret = a !== b;
        break;
      case '': case '=': case '==': ret = eq(a, b, loose); break;
      case '!=': ret = neq(a, b, loose); break;
      case '>': ret = gt(a, b, loose); break;
      case '>=': ret = gte(a, b, loose); break;
      case '<': ret = lt(a, b, loose); break;
      case '<=': ret = lte(a, b, loose); break;
      default: throw new TypeError('Invalid operator: ' + op);
    }
    return ret;
  }

  exports.Comparator = Comparator;
  function Comparator(comp, loose) {
    if (comp instanceof Comparator) {
      if (comp.loose === loose)
        return comp;
      else
        comp = comp.value;
    }

    if (!(this instanceof Comparator))
      return new Comparator(comp, loose);

    debug('comparator', comp, loose);
    this.loose = loose;
    this.parse(comp);

    if (this.semver === ANY)
      this.value = '';
    else
      this.value = this.operator + this.semver.version;

    debug('comp', this);
  }

  var ANY = {};
  Comparator.prototype.parse = function(comp) {
    var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
    var m = comp.match(r);

    if (!m)
      throw new TypeError('Invalid comparator: ' + comp);

    this.operator = m[1];
    if (this.operator === '=')
      this.operator = '';

    // if it literally is just '>' or '' then allow anything.
    if (!m[2])
      this.semver = ANY;
    else
      this.semver = new SemVer(m[2], this.loose);
  };

  Comparator.prototype.toString = function() {
    return this.value;
  };

  Comparator.prototype.test = function(version) {
    debug('Comparator.test', version, this.loose);

    if (this.semver === ANY)
      return true;

    if (typeof version === 'string')
      version = new SemVer(version, this.loose);

    return cmp(version, this.operator, this.semver, this.loose);
  };

  Comparator.prototype.intersects = function(comp, loose) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError('a Comparator is required');
    }

    var rangeTmp;

    if (this.operator === '') {
      rangeTmp = new Range(comp.value, loose);
      return satisfies(this.value, rangeTmp, loose);
    } else if (comp.operator === '') {
      rangeTmp = new Range(this.value, loose);
      return satisfies(comp.semver, rangeTmp, loose);
    }

    var sameDirectionIncreasing =
      (this.operator === '>=' || this.operator === '>') &&
      (comp.operator === '>=' || comp.operator === '>');
    var sameDirectionDecreasing =
      (this.operator === '<=' || this.operator === '<') &&
      (comp.operator === '<=' || comp.operator === '<');
    var sameSemVer = this.semver.version === comp.semver.version;
    var differentDirectionsInclusive =
      (this.operator === '>=' || this.operator === '<=') &&
      (comp.operator === '>=' || comp.operator === '<=');
    var oppositeDirectionsLessThan =
      cmp(this.semver, '<', comp.semver, loose) &&
      ((this.operator === '>=' || this.operator === '>') &&
      (comp.operator === '<=' || comp.operator === '<'));
    var oppositeDirectionsGreaterThan =
      cmp(this.semver, '>', comp.semver, loose) &&
      ((this.operator === '<=' || this.operator === '<') &&
      (comp.operator === '>=' || comp.operator === '>'));

    return sameDirectionIncreasing || sameDirectionDecreasing ||
      (sameSemVer && differentDirectionsInclusive) ||
      oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
  };


  exports.Range = Range;
  function Range(range, loose) {
    if (range instanceof Range) {
      if (range.loose === loose) {
        return range;
      } else {
        return new Range(range.raw, loose);
      }
    }

    if (range instanceof Comparator) {
      return new Range(range.value, loose);
    }

    if (!(this instanceof Range))
      return new Range(range, loose);

    this.loose = loose;

    // First, split based on boolean or ||
    this.raw = range;
    this.set = range.split(/\s*\|\|\s*/).map(function(range) {
      return this.parseRange(range.trim());
    }, this).filter(function(c) {
      // throw out any that are not relevant for whatever reason
      return c.length;
    });

    if (!this.set.length) {
      throw new TypeError('Invalid SemVer Range: ' + range);
    }

    this.format();
  }

  Range.prototype.format = function() {
    this.range = this.set.map(function(comps) {
      return comps.join(' ').trim();
    }).join('||').trim();
    return this.range;
  };

  Range.prototype.toString = function() {
    return this.range;
  };

  Range.prototype.parseRange = function(range) {
    var loose = this.loose;
    range = range.trim();
    debug('range', range, loose);
    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
    range = range.replace(hr, hyphenReplace);
    debug('hyphen replace', range);
    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
    debug('comparator trim', range, re[COMPARATORTRIM]);

    // `~ 1.2.3` => `~1.2.3`
    range = range.replace(re[TILDETRIM], tildeTrimReplace);

    // `^ 1.2.3` => `^1.2.3`
    range = range.replace(re[CARETTRIM], caretTrimReplace);

    // normalize spaces
    range = range.split(/\s+/).join(' ');

    // At this point, the range is completely trimmed and
    // ready to be split into comparators.

    var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
    var set = range.split(' ').map(function(comp) {
      return parseComparator(comp, loose);
    }).join(' ').split(/\s+/);
    if (this.loose) {
      // in loose mode, throw out any that are not valid comparators
      set = set.filter(function(comp) {
        return !!comp.match(compRe);
      });
    }
    set = set.map(function(comp) {
      return new Comparator(comp, loose);
    });

    return set;
  };

  Range.prototype.intersects = function(range, loose) {
    if (!(range instanceof Range)) {
      throw new TypeError('a Range is required');
    }

    return this.set.some(function(thisComparators) {
      return thisComparators.every(function(thisComparator) {
        return range.set.some(function(rangeComparators) {
          return rangeComparators.every(function(rangeComparator) {
            return thisComparator.intersects(rangeComparator, loose);
          });
        });
      });
    });
  };

  // Mostly just for testing and legacy API reasons
  exports.toComparators = toComparators;
  function toComparators(range, loose) {
    return new Range(range, loose).set.map(function(comp) {
      return comp.map(function(c) {
        return c.value;
      }).join(' ').trim().split(' ');
    });
  }

  // comprised of xranges, tildes, stars, and gtlt's at this point.
  // already replaced the hyphen ranges
  // turn into a set of JUST comparators.
  function parseComparator(comp, loose) {
    debug('comp', comp);
    comp = replaceCarets(comp, loose);
    debug('caret', comp);
    comp = replaceTildes(comp, loose);
    debug('tildes', comp);
    comp = replaceXRanges(comp, loose);
    debug('xrange', comp);
    comp = replaceStars(comp, loose);
    debug('stars', comp);
    return comp;
  }

  function isX(id) {
    return !id || id.toLowerCase() === 'x' || id === '*';
  }

  // ~, ~> --> * (any, kinda silly)
  // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
  // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
  // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
  // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
  // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
  function replaceTildes(comp, loose) {
    return comp.trim().split(/\s+/).map(function(comp) {
      return replaceTilde(comp, loose);
    }).join(' ');
  }

  function replaceTilde(comp, loose) {
    var r = loose ? re[TILDELOOSE] : re[TILDE];
    return comp.replace(r, function(_, M, m, p, pr) {
      debug('tilde', comp, _, M, m, p, pr);
      var ret;

      if (isX(M))
        ret = '';
      else if (isX(m))
        ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
      else if (isX(p))
        // ~1.2 == >=1.2.0 <1.3.0
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
      else if (pr) {
        debug('replaceTilde pr', pr);
        if (pr.charAt(0) !== '-')
          pr = '-' + pr;
        ret = '>=' + M + '.' + m + '.' + p + pr +
              ' <' + M + '.' + (+m + 1) + '.0';
      } else
        // ~1.2.3 == >=1.2.3 <1.3.0
        ret = '>=' + M + '.' + m + '.' + p +
              ' <' + M + '.' + (+m + 1) + '.0';

      debug('tilde return', ret);
      return ret;
    });
  }

  // ^ --> * (any, kinda silly)
  // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
  // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
  // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
  // ^1.2.3 --> >=1.2.3 <2.0.0
  // ^1.2.0 --> >=1.2.0 <2.0.0
  function replaceCarets(comp, loose) {
    return comp.trim().split(/\s+/).map(function(comp) {
      return replaceCaret(comp, loose);
    }).join(' ');
  }

  function replaceCaret(comp, loose) {
    debug('caret', comp, loose);
    var r = loose ? re[CARETLOOSE] : re[CARET];
    return comp.replace(r, function(_, M, m, p, pr) {
      debug('caret', comp, _, M, m, p, pr);
      var ret;

      if (isX(M))
        ret = '';
      else if (isX(m))
        ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
      else if (isX(p)) {
        if (M === '0')
          ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
        else
          ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
      } else if (pr) {
        debug('replaceCaret pr', pr);
        if (pr.charAt(0) !== '-')
          pr = '-' + pr;
        if (M === '0') {
          if (m === '0')
            ret = '>=' + M + '.' + m + '.' + p + pr +
                  ' <' + M + '.' + m + '.' + (+p + 1);
          else
            ret = '>=' + M + '.' + m + '.' + p + pr +
                  ' <' + M + '.' + (+m + 1) + '.0';
        } else
          ret = '>=' + M + '.' + m + '.' + p + pr +
                ' <' + (+M + 1) + '.0.0';
      } else {
        debug('no pr');
        if (M === '0') {
          if (m === '0')
            ret = '>=' + M + '.' + m + '.' + p +
                  ' <' + M + '.' + m + '.' + (+p + 1);
          else
            ret = '>=' + M + '.' + m + '.' + p +
                  ' <' + M + '.' + (+m + 1) + '.0';
        } else
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + (+M + 1) + '.0.0';
      }

      debug('caret return', ret);
      return ret;
    });
  }

  function replaceXRanges(comp, loose) {
    debug('replaceXRanges', comp, loose);
    return comp.split(/\s+/).map(function(comp) {
      return replaceXRange(comp, loose);
    }).join(' ');
  }

  function replaceXRange(comp, loose) {
    comp = comp.trim();
    var r = loose ? re[XRANGELOOSE] : re[XRANGE];
    return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
      debug('xRange', comp, ret, gtlt, M, m, p, pr);
      var xM = isX(M);
      var xm = xM || isX(m);
      var xp = xm || isX(p);
      var anyX = xp;

      if (gtlt === '=' && anyX)
        gtlt = '';

      if (xM) {
        if (gtlt === '>' || gtlt === '<') {
          // nothing is allowed
          ret = '<0.0.0';
        } else {
          // nothing is forbidden
          ret = '*';
        }
      } else if (gtlt && anyX) {
        // replace X with 0
        if (xm)
          m = 0;
        if (xp)
          p = 0;

        if (gtlt === '>') {
          // >1 => >=2.0.0
          // >1.2 => >=1.3.0
          // >1.2.3 => >= 1.2.4
          gtlt = '>=';
          if (xm) {
            M = +M + 1;
            m = 0;
            p = 0;
          } else if (xp) {
            m = +m + 1;
            p = 0;
          }
        } else if (gtlt === '<=') {
          // <=0.7.x is actually <0.8.0, since any 0.7.x should
          // pass.  Similarly, <=7.x is actually <8.0.0, etc.
          gtlt = '<';
          if (xm)
            M = +M + 1;
          else
            m = +m + 1;
        }

        ret = gtlt + M + '.' + m + '.' + p;
      } else if (xm) {
        ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
      } else if (xp) {
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
      }

      debug('xRange return', ret);

      return ret;
    });
  }

  // Because * is AND-ed with everything else in the comparator,
  // and '' means "any version", just remove the *s entirely.
  function replaceStars(comp, loose) {
    debug('replaceStars', comp, loose);
    // Looseness is ignored here.  star is always as loose as it gets!
    return comp.trim().replace(re[STAR], '');
  }

  // This function is passed to string.replace(re[HYPHENRANGE])
  // M, m, patch, prerelease, build
  // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
  // 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
  // 1.2 - 3.4 => >=1.2.0 <3.5.0
  function hyphenReplace($0,
                         from, fM, fm, fp, fpr, fb,
                         to, tM, tm, tp, tpr, tb) {

    if (isX(fM))
      from = '';
    else if (isX(fm))
      from = '>=' + fM + '.0.0';
    else if (isX(fp))
      from = '>=' + fM + '.' + fm + '.0';
    else
      from = '>=' + from;

    if (isX(tM))
      to = '';
    else if (isX(tm))
      to = '<' + (+tM + 1) + '.0.0';
    else if (isX(tp))
      to = '<' + tM + '.' + (+tm + 1) + '.0';
    else if (tpr)
      to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
    else
      to = '<=' + to;

    return (from + ' ' + to).trim();
  }


  // if ANY of the sets match ALL of its comparators, then pass
  Range.prototype.test = function(version) {
    if (!version)
      return false;

    if (typeof version === 'string')
      version = new SemVer(version, this.loose);

    for (var i = 0; i < this.set.length; i++) {
      if (testSet(this.set[i], version))
        return true;
    }
    return false;
  };

  function testSet(set, version) {
    for (var i = 0; i < set.length; i++) {
      if (!set[i].test(version))
        return false;
    }

    if (version.prerelease.length) {
      // Find the set of versions that are allowed to have prereleases
      // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
      // That should allow `1.2.3-pr.2` to pass.
      // However, `1.2.4-alpha.notready` should NOT be allowed,
      // even though it's within the range set by the comparators.
      for (var i = 0; i < set.length; i++) {
        debug(set[i].semver);
        if (set[i].semver === ANY)
          continue;

        if (set[i].semver.prerelease.length > 0) {
          var allowed = set[i].semver;
          if (allowed.major === version.major &&
              allowed.minor === version.minor &&
              allowed.patch === version.patch)
            return true;
        }
      }

      // Version has a -pre, but it's not one of the ones we like.
      return false;
    }

    return true;
  }

  exports.satisfies = satisfies;
  function satisfies(version, range, loose) {
    try {
      range = new Range(range, loose);
    } catch (er) {
      return false;
    }
    return range.test(version);
  }

  exports.maxSatisfying = maxSatisfying;
  function maxSatisfying(versions, range, loose) {
    var max = null;
    var maxSV = null;
    try {
      var rangeObj = new Range(range, loose);
    } catch (er) {
      return null;
    }
    versions.forEach(function (v) {
      if (rangeObj.test(v)) { // satisfies(v, range, loose)
        if (!max || maxSV.compare(v) === -1) { // compare(max, v, true)
          max = v;
          maxSV = new SemVer(max, loose);
        }
      }
    });
    return max;
  }

  exports.minSatisfying = minSatisfying;
  function minSatisfying(versions, range, loose) {
    var min = null;
    var minSV = null;
    try {
      var rangeObj = new Range(range, loose);
    } catch (er) {
      return null;
    }
    versions.forEach(function (v) {
      if (rangeObj.test(v)) { // satisfies(v, range, loose)
        if (!min || minSV.compare(v) === 1) { // compare(min, v, true)
          min = v;
          minSV = new SemVer(min, loose);
        }
      }
    });
    return min;
  }

  exports.validRange = validRange;
  function validRange(range, loose) {
    try {
      // Return '*' instead of '' so that truthiness works.
      // This will throw if it's invalid anyway
      return new Range(range, loose).range || '*';
    } catch (er) {
      return null;
    }
  }

  // Determine if version is less than all the versions possible in the range
  exports.ltr = ltr;
  function ltr(version, range, loose) {
    return outside(version, range, '<', loose);
  }

  // Determine if version is greater than all the versions possible in the range.
  exports.gtr = gtr;
  function gtr(version, range, loose) {
    return outside(version, range, '>', loose);
  }

  exports.outside = outside;
  function outside(version, range, hilo, loose) {
    version = new SemVer(version, loose);
    range = new Range(range, loose);

    var gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case '>':
        gtfn = gt;
        ltefn = lte;
        ltfn = lt;
        comp = '>';
        ecomp = '>=';
        break;
      case '<':
        gtfn = lt;
        ltefn = gte;
        ltfn = gt;
        comp = '<';
        ecomp = '<=';
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }

    // If it satisifes the range it is not outside
    if (satisfies(version, range, loose)) {
      return false;
    }

    // From now on, variable terms are as if we're in "gtr" mode.
    // but note that everything is flipped for the "ltr" function.

    for (var i = 0; i < range.set.length; ++i) {
      var comparators = range.set[i];

      var high = null;
      var low = null;

      comparators.forEach(function(comparator) {
        if (comparator.semver === ANY) {
          comparator = new Comparator('>=0.0.0');
        }
        high = high || comparator;
        low = low || comparator;
        if (gtfn(comparator.semver, high.semver, loose)) {
          high = comparator;
        } else if (ltfn(comparator.semver, low.semver, loose)) {
          low = comparator;
        }
      });

      // If the edge version comparator has a operator then our version
      // isn't outside it
      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }

      // If the lowest version comparator has an operator and our version
      // is less than it then it isn't higher than the range
      if ((!low.operator || low.operator === comp) &&
          ltefn(version, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version, low.semver)) {
        return false;
      }
    }
    return true;
  }

  exports.prerelease = prerelease;
  function prerelease(version, loose) {
    var parsed = parse(version, loose);
    return (parsed && parsed.prerelease.length) ? parsed.prerelease : null;
  }

  exports.intersects = intersects;
  function intersects(r1, r2, loose) {
    r1 = new Range(r1, loose);
    r2 = new Range(r2, loose);
    return r1.intersects(r2)
  }

  exports.coerce = coerce;
  function coerce(version) {
    if (version instanceof SemVer)
      return version;

    if (typeof version !== 'string')
      return null;

    var match = version.match(re[COERCE]);

    if (match == null)
      return null;

    return parse((match[1] || '0') + '.' + (match[2] || '0') + '.' + (match[3] || '0')); 
  }
  });
  var semver_1 = semver.SEMVER_SPEC_VERSION;
  var semver_2 = semver.re;
  var semver_3 = semver.src;
  var semver_4 = semver.parse;
  var semver_5 = semver.valid;
  var semver_6 = semver.clean;
  var semver_7 = semver.SemVer;
  var semver_8 = semver.inc;
  var semver_9 = semver.diff;
  var semver_10 = semver.compareIdentifiers;
  var semver_11 = semver.rcompareIdentifiers;
  var semver_12 = semver.major;
  var semver_13 = semver.minor;
  var semver_14 = semver.patch;
  var semver_15 = semver.compare;
  var semver_16 = semver.compareLoose;
  var semver_17 = semver.rcompare;
  var semver_18 = semver.sort;
  var semver_19 = semver.rsort;
  var semver_20 = semver.gt;
  var semver_21 = semver.lt;
  var semver_22 = semver.eq;
  var semver_23 = semver.neq;
  var semver_24 = semver.gte;
  var semver_25 = semver.lte;
  var semver_26 = semver.cmp;
  var semver_27 = semver.Comparator;
  var semver_28 = semver.Range;
  var semver_29 = semver.toComparators;
  var semver_30 = semver.satisfies;
  var semver_31 = semver.maxSatisfying;
  var semver_32 = semver.minSatisfying;
  var semver_33 = semver.validRange;
  var semver_34 = semver.ltr;
  var semver_35 = semver.gtr;
  var semver_36 = semver.outside;
  var semver_37 = semver.prerelease;
  var semver_38 = semver.intersects;
  var semver_39 = semver.coerce;

  /*
  The MIT License (MIT)

  Copyright (c) 2016 CoderPuppy

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

  */
  var _endianness;
  function endianness() {
    if (typeof _endianness === 'undefined') {
      var a = new ArrayBuffer(2);
      var b = new Uint8Array(a);
      var c = new Uint16Array(a);
      b[0] = 1;
      b[1] = 2;
      if (c[0] === 258) {
        _endianness = 'BE';
      } else if (c[0] === 513){
        _endianness = 'LE';
      } else {
        throw new Error('unable to figure out endianess');
      }
    }
    return _endianness;
  }

  function hostname() {
    if (typeof global.location !== 'undefined') {
      return global.location.hostname
    } else return '';
  }

  function loadavg() {
    return [];
  }

  function uptime$1() {
    return 0;
  }

  function freemem() {
    return Number.MAX_VALUE;
  }

  function totalmem() {
    return Number.MAX_VALUE;
  }

  function cpus() {
    return [];
  }

  function type() {
    return 'Browser';
  }

  function release$1 () {
    if (typeof global.navigator !== 'undefined') {
      return global.navigator.appVersion;
    }
    return '';
  }

  function networkInterfaces(){}
  function getNetworkInterfaces(){}

  function arch() {
    return 'javascript';
  }

  function platform$1() {
    return 'browser';
  }

  function tmpDir() {
    return '/tmp';
  }
  var tmpdir = tmpDir;

  var EOL = '\n';
  var os = {
    EOL: EOL,
    tmpdir: tmpdir,
    tmpDir: tmpDir,
    networkInterfaces:networkInterfaces,
    getNetworkInterfaces: getNetworkInterfaces,
    release: release$1,
    type: type,
    cpus: cpus,
    totalmem: totalmem,
    freemem: freemem,
    uptime: uptime$1,
    loadavg: loadavg,
    hostname: hostname,
    endianness: endianness,
  };

  var os$1 = /*#__PURE__*/Object.freeze({
    endianness: endianness,
    hostname: hostname,
    loadavg: loadavg,
    uptime: uptime$1,
    freemem: freemem,
    totalmem: totalmem,
    cpus: cpus,
    type: type,
    release: release$1,
    networkInterfaces: networkInterfaces,
    getNetworkInterfaces: getNetworkInterfaces,
    arch: arch,
    platform: platform$1,
    tmpDir: tmpDir,
    tmpdir: tmpdir,
    EOL: EOL,
    default: os
  });

  var require$$0 = ( os$1 && os ) || os$1;

  var fs = ( empty$1 && empty ) || empty$1;

  var platform$2 = require$$0.platform();
  var spawnSync = fs.spawnSync;
  var readdirSync = fs.readdirSync;

  var GLIBC = 'glibc';
  var MUSL = 'musl';

  var spawnOptions = {
    encoding: 'utf8',
    env: process.env
  };

  if (!spawnSync) {
    spawnSync = function () {
      return { status: 126, stdout: '', stderr: '' };
    };
  }

  function contains (needle) {
    return function (haystack) {
      return haystack.indexOf(needle) !== -1;
    };
  }

  function versionFromMuslLdd (out) {
    return out.split(/[\r\n]+/)[1].trim().split(/\s/)[1];
  }

  function safeReaddirSync (path) {
    try {
      return readdirSync(path);
    } catch (e) {}
    return [];
  }

  var family = '';
  var version$1 = '';
  var method$1 = '';

  if (platform$2 === 'linux') {
    // Try getconf
    var glibc = spawnSync('getconf', ['GNU_LIBC_VERSION'], spawnOptions);
    if (glibc.status === 0) {
      family = GLIBC;
      version$1 = glibc.stdout.trim().split(' ')[1];
      method$1 = 'getconf';
    } else {
      // Try ldd
      var ldd = spawnSync('ldd', ['--version'], spawnOptions);
      if (ldd.status === 0 && ldd.stdout.indexOf(MUSL) !== -1) {
        family = MUSL;
        version$1 = versionFromMuslLdd(ldd.stdout);
        method$1 = 'ldd';
      } else if (ldd.status === 1 && ldd.stderr.indexOf(MUSL) !== -1) {
        family = MUSL;
        version$1 = versionFromMuslLdd(ldd.stderr);
        method$1 = 'ldd';
      } else {
        // Try filesystem (family only)
        var lib = safeReaddirSync('/lib');
        if (lib.some(contains('-linux-gnu'))) {
          family = GLIBC;
          method$1 = 'filesystem';
        } else if (lib.some(contains('libc.musl-'))) {
          family = MUSL;
          method$1 = 'filesystem';
        } else if (lib.some(contains('ld-musl-'))) {
          family = MUSL;
          method$1 = 'filesystem';
        } else {
          var usrSbin = safeReaddirSync('/usr/sbin');
          if (usrSbin.some(contains('glibc'))) {
            family = GLIBC;
            method$1 = 'filesystem';
          }
        }
      }
    }
  }

  var isNonGlibcLinux = (family !== '' && family !== GLIBC);

  var detectLibc = {
    GLIBC: GLIBC,
    MUSL: MUSL,
    family: family,
    version: version$1,
    method: method$1,
    isNonGlibcLinux: isNonGlibcLinux
  };

  function compare(a, b) {
    if (a === b) {
      return 0;
    }

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }

    if (x < y) {
      return -1;
    }
    if (y < x) {
      return 1;
    }
    return 0;
  }
  var hasOwn = Object.prototype.hasOwnProperty;

  var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) {
      if (hasOwn.call(obj, key)) keys.push(key);
    }
    return keys;
  };
  var pSlice = Array.prototype.slice;
  var _functionsHaveNames;
  function functionsHaveNames() {
    if (typeof _functionsHaveNames !== 'undefined') {
      return _functionsHaveNames;
    }
    return _functionsHaveNames = (function () {
      return function foo() {}.name === 'foo';
    }());
  }
  function pToString (obj) {
    return Object.prototype.toString.call(obj);
  }
  function isView(arrbuf) {
    if (isBuffer(arrbuf)) {
      return false;
    }
    if (typeof global.ArrayBuffer !== 'function') {
      return false;
    }
    if (typeof ArrayBuffer.isView === 'function') {
      return ArrayBuffer.isView(arrbuf);
    }
    if (!arrbuf) {
      return false;
    }
    if (arrbuf instanceof DataView) {
      return true;
    }
    if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
      return true;
    }
    return false;
  }
  // 1. The assert module provides functions that throw
  // AssertionError's when particular conditions are not met. The
  // assert module must conform to the following interface.

  function assert(value, message) {
    if (!value) fail(value, true, message, '==', ok);
  }

  // 2. The AssertionError is defined in assert.
  // new assert.AssertionError({ message: message,
  //                             actual: actual,
  //                             expected: expected })

  var regex = /\s*function\s+([^\(\s]*)\s*/;
  // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
  function getName(func) {
    if (!isFunction(func)) {
      return;
    }
    if (functionsHaveNames()) {
      return func.name;
    }
    var str = func.toString();
    var match = str.match(regex);
    return match && match[1];
  }
  assert.AssertionError = AssertionError;
  function AssertionError(options) {
    this.name = 'AssertionError';
    this.actual = options.actual;
    this.expected = options.expected;
    this.operator = options.operator;
    if (options.message) {
      this.message = options.message;
      this.generatedMessage = false;
    } else {
      this.message = getMessage$1(this);
      this.generatedMessage = true;
    }
    var stackStartFunction = options.stackStartFunction || fail;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, stackStartFunction);
    } else {
      // non v8 browsers so we can have a stacktrace
      var err = new Error();
      if (err.stack) {
        var out = err.stack;

        // try to strip useless frames
        var fn_name = getName(stackStartFunction);
        var idx = out.indexOf('\n' + fn_name);
        if (idx >= 0) {
          // once we have located the function frame
          // we need to strip out everything before it (and its line)
          var next_line = out.indexOf('\n', idx + 1);
          out = out.substring(next_line + 1);
        }

        this.stack = out;
      }
    }
  }

  // assert.AssertionError instanceof Error
  inherits$2(AssertionError, Error);

  function truncate(s, n) {
    if (typeof s === 'string') {
      return s.length < n ? s : s.slice(0, n);
    } else {
      return s;
    }
  }
  function inspect$1(something) {
    if (functionsHaveNames() || !isFunction(something)) {
      return inspect(something);
    }
    var rawname = getName(something);
    var name = rawname ? ': ' + rawname : '';
    return '[Function' +  name + ']';
  }
  function getMessage$1(self) {
    return truncate(inspect$1(self.actual), 128) + ' ' +
           self.operator + ' ' +
           truncate(inspect$1(self.expected), 128);
  }

  // At present only the three keys mentioned above are used and
  // understood by the spec. Implementations or sub modules can pass
  // other keys to the AssertionError's constructor - they will be
  // ignored.

  // 3. All of the following functions must throw an AssertionError
  // when a corresponding condition is not met, with a message that
  // may be undefined if not provided.  All assertion methods provide
  // both the actual and expected values to the assertion error for
  // display purposes.

  function fail(actual, expected, message, operator, stackStartFunction) {
    throw new AssertionError({
      message: message,
      actual: actual,
      expected: expected,
      operator: operator,
      stackStartFunction: stackStartFunction
    });
  }

  // EXTENSION! allows for well behaved errors defined elsewhere.
  assert.fail = fail;

  // 4. Pure assertion tests whether a value is truthy, as determined
  // by !!guard.
  // assert.ok(guard, message_opt);
  // This statement is equivalent to assert.equal(true, !!guard,
  // message_opt);. To test strictly for the value true, use
  // assert.strictEqual(true, guard, message_opt);.

  function ok(value, message) {
    if (!value) fail(value, true, message, '==', ok);
  }
  assert.ok = ok;

  // 5. The equality assertion tests shallow, coercive equality with
  // ==.
  // assert.equal(actual, expected, message_opt);
  assert.equal = equal;
  function equal(actual, expected, message) {
    if (actual != expected) fail(actual, expected, message, '==', equal);
  }

  // 6. The non-equality assertion tests for whether two objects are not equal
  // with != assert.notEqual(actual, expected, message_opt);
  assert.notEqual = notEqual;
  function notEqual(actual, expected, message) {
    if (actual == expected) {
      fail(actual, expected, message, '!=', notEqual);
    }
  }

  // 7. The equivalence assertion tests a deep equality relation.
  // assert.deepEqual(actual, expected, message_opt);
  assert.deepEqual = deepEqual;
  function deepEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, 'deepEqual', deepEqual);
    }
  }
  assert.deepStrictEqual = deepStrictEqual;
  function deepStrictEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
    }
  }

  function _deepEqual(actual, expected, strict, memos) {
    // 7.1. All identical values are equivalent, as determined by ===.
    if (actual === expected) {
      return true;
    } else if (isBuffer(actual) && isBuffer(expected)) {
      return compare(actual, expected) === 0;

    // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
    } else if (isDate(actual) && isDate(expected)) {
      return actual.getTime() === expected.getTime();

    // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
    } else if (isRegExp(actual) && isRegExp(expected)) {
      return actual.source === expected.source &&
             actual.global === expected.global &&
             actual.multiline === expected.multiline &&
             actual.lastIndex === expected.lastIndex &&
             actual.ignoreCase === expected.ignoreCase;

    // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
    } else if ((actual === null || typeof actual !== 'object') &&
               (expected === null || typeof expected !== 'object')) {
      return strict ? actual === expected : actual == expected;

    // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
    } else if (isView(actual) && isView(expected) &&
               pToString(actual) === pToString(expected) &&
               !(actual instanceof Float32Array ||
                 actual instanceof Float64Array)) {
      return compare(new Uint8Array(actual.buffer),
                     new Uint8Array(expected.buffer)) === 0;

    // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
    } else if (isBuffer(actual) !== isBuffer(expected)) {
      return false;
    } else {
      memos = memos || {actual: [], expected: []};

      var actualIndex = memos.actual.indexOf(actual);
      if (actualIndex !== -1) {
        if (actualIndex === memos.expected.indexOf(expected)) {
          return true;
        }
      }

      memos.actual.push(actual);
      memos.expected.push(expected);

      return objEquiv(actual, expected, strict, memos);
    }
  }

  function isArguments(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
  }

  function objEquiv(a, b, strict, actualVisitedObjects) {
    if (a === null || a === undefined || b === null || b === undefined)
      return false;
    // if one is a primitive, the other must be same
    if (isPrimitive(a) || isPrimitive(b))
      return a === b;
    if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
      return false;
    var aIsArgs = isArguments(a);
    var bIsArgs = isArguments(b);
    if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
      return false;
    if (aIsArgs) {
      a = pSlice.call(a);
      b = pSlice.call(b);
      return _deepEqual(a, b, strict);
    }
    var ka = objectKeys(a);
    var kb = objectKeys(b);
    var key, i;
    // having the same number of owned properties (keys incorporates
    // hasOwnProperty)
    if (ka.length !== kb.length)
      return false;
    //the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    //~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] !== kb[i])
        return false;
    }
    //equivalent values for every corresponding key, and
    //~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
        return false;
    }
    return true;
  }

  // 8. The non-equivalence assertion tests for any deep inequality.
  // assert.notDeepEqual(actual, expected, message_opt);
  assert.notDeepEqual = notDeepEqual;
  function notDeepEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
    }
  }

  assert.notDeepStrictEqual = notDeepStrictEqual;
  function notDeepStrictEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
    }
  }


  // 9. The strict equality assertion tests strict equality, as determined by ===.
  // assert.strictEqual(actual, expected, message_opt);
  assert.strictEqual = strictEqual;
  function strictEqual(actual, expected, message) {
    if (actual !== expected) {
      fail(actual, expected, message, '===', strictEqual);
    }
  }

  // 10. The strict non-equality assertion tests for strict inequality, as
  // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
  assert.notStrictEqual = notStrictEqual;
  function notStrictEqual(actual, expected, message) {
    if (actual === expected) {
      fail(actual, expected, message, '!==', notStrictEqual);
    }
  }

  function expectedException(actual, expected) {
    if (!actual || !expected) {
      return false;
    }

    if (Object.prototype.toString.call(expected) == '[object RegExp]') {
      return expected.test(actual);
    }

    try {
      if (actual instanceof expected) {
        return true;
      }
    } catch (e) {
      // Ignore.  The instanceof check doesn't work for arrow functions.
    }

    if (Error.isPrototypeOf(expected)) {
      return false;
    }

    return expected.call({}, actual) === true;
  }

  function _tryBlock(block) {
    var error;
    try {
      block();
    } catch (e) {
      error = e;
    }
    return error;
  }

  function _throws(shouldThrow, block, expected, message) {
    var actual;

    if (typeof block !== 'function') {
      throw new TypeError('"block" argument must be a function');
    }

    if (typeof expected === 'string') {
      message = expected;
      expected = null;
    }

    actual = _tryBlock(block);

    message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
              (message ? ' ' + message : '.');

    if (shouldThrow && !actual) {
      fail(actual, expected, 'Missing expected exception' + message);
    }

    var userProvidedMessage = typeof message === 'string';
    var isUnwantedException = !shouldThrow && isError(actual);
    var isUnexpectedException = !shouldThrow && actual && !expected;

    if ((isUnwantedException &&
        userProvidedMessage &&
        expectedException(actual, expected)) ||
        isUnexpectedException) {
      fail(actual, expected, 'Got unwanted exception' + message);
    }

    if ((shouldThrow && actual && expected &&
        !expectedException(actual, expected)) || (!shouldThrow && actual)) {
      throw actual;
    }
  }

  // 11. Expected to throw an error:
  // assert.throws(block, Error_opt, message_opt);
  assert.throws = throws;
  function throws(block, /*optional*/error, /*optional*/message) {
    _throws(true, block, error, message);
  }

  // EXTENSION! This is annoying to write outside this module.
  assert.doesNotThrow = doesNotThrow;
  function doesNotThrow(block, /*optional*/error, /*optional*/message) {
    _throws(false, block, error, message);
  }

  assert.ifError = ifError;
  function ifError(err) {
    if (err) throw err;
  }

  var assert$1 = /*#__PURE__*/Object.freeze({
    default: assert,
    AssertionError: AssertionError,
    fail: fail,
    ok: ok,
    assert: ok,
    equal: equal,
    notEqual: notEqual,
    deepEqual: deepEqual,
    deepStrictEqual: deepStrictEqual,
    notDeepEqual: notDeepEqual,
    notDeepStrictEqual: notDeepStrictEqual,
    strictEqual: strictEqual,
    notStrictEqual: notStrictEqual,
    throws: throws,
    doesNotThrow: doesNotThrow,
    ifError: ifError
  });

  var pathModule = ( path$1 && path ) || path$1;

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.


  var isWindows = process.platform === 'win32';


  // JavaScript implementation of realpath, ported from node pre-v6

  var DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);

  function rethrow() {
    // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and
    // is fairly slow to generate.
    var callback;
    if (DEBUG) {
      var backtrace = new Error;
      callback = debugCallback;
    } else
      callback = missingCallback;

    return callback;

    function debugCallback(err) {
      if (err) {
        backtrace.message = err.message;
        err = backtrace;
        missingCallback(err);
      }
    }

    function missingCallback(err) {
      if (err) {
        if (process.throwDeprecation)
          throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs
        else if (!process.noDeprecation) {
          var msg = 'fs: missing callback ' + (err.stack || err.message);
          if (process.traceDeprecation)
            console.trace(msg);
          else
            console.error(msg);
        }
      }
    }
  }

  function maybeCallback(cb) {
    return typeof cb === 'function' ? cb : rethrow();
  }

  var normalize$1 = pathModule.normalize;

  // Regexp that finds the next partion of a (partial) path
  // result is [base_with_slash, base], e.g. ['somedir/', 'somedir']
  if (isWindows) {
    var nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
  } else {
    var nextPartRe = /(.*?)(?:[\/]+|$)/g;
  }

  // Regex to find the device root, including trailing slash. E.g. 'c:\\'.
  if (isWindows) {
    var splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
  } else {
    var splitRootRe = /^[\/]*/;
  }

  var realpathSync = function realpathSync(p, cache) {
    // make p is absolute
    p = pathModule.resolve(p);

    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
      return cache[p];
    }

    var original = p,
        seenLinks = {},
        knownHard = {};

    // current character position in p
    var pos;
    // the partial path so far, including a trailing slash if any
    var current;
    // the partial path without a trailing slash (except when pointing at a root)
    var base;
    // the partial path scanned in the previous round, with slash
    var previous;

    start();

    function start() {
      // Skip over roots
      var m = splitRootRe.exec(p);
      pos = m[0].length;
      current = m[0];
      base = m[0];
      previous = '';

      // On windows, check that the root exists. On unix there is no need.
      if (isWindows && !knownHard[base]) {
        fs.lstatSync(base);
        knownHard[base] = true;
      }
    }

    // walk down the path, swapping out linked pathparts for their real
    // values
    // NB: p.length changes.
    while (pos < p.length) {
      // find the next part
      nextPartRe.lastIndex = pos;
      var result = nextPartRe.exec(p);
      previous = current;
      current += result[0];
      base = previous + result[1];
      pos = nextPartRe.lastIndex;

      // continue if not a symlink
      if (knownHard[base] || (cache && cache[base] === base)) {
        continue;
      }

      var resolvedLink;
      if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
        // some known symbolic link.  no need to stat again.
        resolvedLink = cache[base];
      } else {
        var stat = fs.lstatSync(base);
        if (!stat.isSymbolicLink()) {
          knownHard[base] = true;
          if (cache) cache[base] = base;
          continue;
        }

        // read the link if it wasn't read before
        // dev/ino always return 0 on windows, so skip the check.
        var linkTarget = null;
        if (!isWindows) {
          var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
          if (seenLinks.hasOwnProperty(id)) {
            linkTarget = seenLinks[id];
          }
        }
        if (linkTarget === null) {
          fs.statSync(base);
          linkTarget = fs.readlinkSync(base);
        }
        resolvedLink = pathModule.resolve(previous, linkTarget);
        // track this, if given a cache.
        if (cache) cache[base] = resolvedLink;
        if (!isWindows) seenLinks[id] = linkTarget;
      }

      // resolve the link, then start over
      p = pathModule.resolve(resolvedLink, p.slice(pos));
      start();
    }

    if (cache) cache[original] = p;

    return p;
  };


  var realpath = function realpath(p, cache, cb) {
    if (typeof cb !== 'function') {
      cb = maybeCallback(cache);
      cache = null;
    }

    // make p is absolute
    p = pathModule.resolve(p);

    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
      return process.nextTick(cb.bind(null, null, cache[p]));
    }

    var original = p,
        seenLinks = {},
        knownHard = {};

    // current character position in p
    var pos;
    // the partial path so far, including a trailing slash if any
    var current;
    // the partial path without a trailing slash (except when pointing at a root)
    var base;
    // the partial path scanned in the previous round, with slash
    var previous;

    start();

    function start() {
      // Skip over roots
      var m = splitRootRe.exec(p);
      pos = m[0].length;
      current = m[0];
      base = m[0];
      previous = '';

      // On windows, check that the root exists. On unix there is no need.
      if (isWindows && !knownHard[base]) {
        fs.lstat(base, function(err) {
          if (err) return cb(err);
          knownHard[base] = true;
          LOOP();
        });
      } else {
        process.nextTick(LOOP);
      }
    }

    // walk down the path, swapping out linked pathparts for their real
    // values
    function LOOP() {
      // stop if scanned past end of path
      if (pos >= p.length) {
        if (cache) cache[original] = p;
        return cb(null, p);
      }

      // find the next part
      nextPartRe.lastIndex = pos;
      var result = nextPartRe.exec(p);
      previous = current;
      current += result[0];
      base = previous + result[1];
      pos = nextPartRe.lastIndex;

      // continue if not a symlink
      if (knownHard[base] || (cache && cache[base] === base)) {
        return process.nextTick(LOOP);
      }

      if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
        // known symbolic link.  no need to stat again.
        return gotResolvedLink(cache[base]);
      }

      return fs.lstat(base, gotStat);
    }

    function gotStat(err, stat) {
      if (err) return cb(err);

      // if not a symlink, skip to the next path part
      if (!stat.isSymbolicLink()) {
        knownHard[base] = true;
        if (cache) cache[base] = base;
        return process.nextTick(LOOP);
      }

      // stat & read the link if not read before
      // call gotTarget as soon as the link target is known
      // dev/ino always return 0 on windows, so skip the check.
      if (!isWindows) {
        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
        if (seenLinks.hasOwnProperty(id)) {
          return gotTarget(null, seenLinks[id], base);
        }
      }
      fs.stat(base, function(err) {
        if (err) return cb(err);

        fs.readlink(base, function(err, target) {
          if (!isWindows) seenLinks[id] = target;
          gotTarget(err, target);
        });
      });
    }

    function gotTarget(err, target, base) {
      if (err) return cb(err);

      var resolvedLink = pathModule.resolve(previous, target);
      if (cache) cache[base] = resolvedLink;
      gotResolvedLink(resolvedLink);
    }

    function gotResolvedLink(resolvedLink) {
      // resolve the link, then start over
      p = pathModule.resolve(resolvedLink, p.slice(pos));
      start();
    }
  };

  var old = {
  	realpathSync: realpathSync,
  	realpath: realpath
  };

  var fs_realpath = realpath$1;
  realpath$1.realpath = realpath$1;
  realpath$1.sync = realpathSync$1;
  realpath$1.realpathSync = realpathSync$1;
  realpath$1.monkeypatch = monkeypatch;
  realpath$1.unmonkeypatch = unmonkeypatch;


  var origRealpath = fs.realpath;
  var origRealpathSync = fs.realpathSync;

  var version$2 = process.version;
  var ok$1 = /^v[0-5]\./.test(version$2);


  function newError (er) {
    return er && er.syscall === 'realpath' && (
      er.code === 'ELOOP' ||
      er.code === 'ENOMEM' ||
      er.code === 'ENAMETOOLONG'
    )
  }

  function realpath$1 (p, cache, cb) {
    if (ok$1) {
      return origRealpath(p, cache, cb)
    }

    if (typeof cache === 'function') {
      cb = cache;
      cache = null;
    }
    origRealpath(p, cache, function (er, result) {
      if (newError(er)) {
        old.realpath(p, cache, cb);
      } else {
        cb(er, result);
      }
    });
  }

  function realpathSync$1 (p, cache) {
    if (ok$1) {
      return origRealpathSync(p, cache)
    }

    try {
      return origRealpathSync(p, cache)
    } catch (er) {
      if (newError(er)) {
        return old.realpathSync(p, cache)
      } else {
        throw er
      }
    }
  }

  function monkeypatch () {
    fs.realpath = realpath$1;
    fs.realpathSync = realpathSync$1;
  }

  function unmonkeypatch () {
    fs.realpath = origRealpath;
    fs.realpathSync = origRealpathSync;
  }

  var concatMap = function (xs, fn) {
      var res = [];
      for (var i = 0; i < xs.length; i++) {
          var x = fn(xs[i], i);
          if (isArray$2(x)) res.push.apply(res, x);
          else res.push(x);
      }
      return res;
  };

  var isArray$2 = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
  };

  var balancedMatch = balanced;
  function balanced(a, b, str) {
    if (a instanceof RegExp) a = maybeMatch(a, str);
    if (b instanceof RegExp) b = maybeMatch(b, str);

    var r = range(a, b, str);

    return r && {
      start: r[0],
      end: r[1],
      pre: str.slice(0, r[0]),
      body: str.slice(r[0] + a.length, r[1]),
      post: str.slice(r[1] + b.length)
    };
  }

  function maybeMatch(reg, str) {
    var m = str.match(reg);
    return m ? m[0] : null;
  }

  balanced.range = range;
  function range(a, b, str) {
    var begs, beg, left, right, result;
    var ai = str.indexOf(a);
    var bi = str.indexOf(b, ai + 1);
    var i = ai;

    if (ai >= 0 && bi > 0) {
      begs = [];
      left = str.length;

      while (i >= 0 && !result) {
        if (i == ai) {
          begs.push(i);
          ai = str.indexOf(a, i + 1);
        } else if (begs.length == 1) {
          result = [ begs.pop(), bi ];
        } else {
          beg = begs.pop();
          if (beg < left) {
            left = beg;
            right = bi;
          }

          bi = str.indexOf(b, i + 1);
        }

        i = ai < bi && ai >= 0 ? ai : bi;
      }

      if (begs.length) {
        result = [ left, right ];
      }
    }

    return result;
  }

  var braceExpansion = expandTop;

  var escSlash = '\0SLASH'+Math.random()+'\0';
  var escOpen = '\0OPEN'+Math.random()+'\0';
  var escClose = '\0CLOSE'+Math.random()+'\0';
  var escComma = '\0COMMA'+Math.random()+'\0';
  var escPeriod = '\0PERIOD'+Math.random()+'\0';

  function numeric(str) {
    return parseInt(str, 10) == str
      ? parseInt(str, 10)
      : str.charCodeAt(0);
  }

  function escapeBraces(str) {
    return str.split('\\\\').join(escSlash)
              .split('\\{').join(escOpen)
              .split('\\}').join(escClose)
              .split('\\,').join(escComma)
              .split('\\.').join(escPeriod);
  }

  function unescapeBraces(str) {
    return str.split(escSlash).join('\\')
              .split(escOpen).join('{')
              .split(escClose).join('}')
              .split(escComma).join(',')
              .split(escPeriod).join('.');
  }


  // Basically just str.split(","), but handling cases
  // where we have nested braced sections, which should be
  // treated as individual members, like {a,{b,c},d}
  function parseCommaParts(str) {
    if (!str)
      return [''];

    var parts = [];
    var m = balancedMatch('{', '}', str);

    if (!m)
      return str.split(',');

    var pre = m.pre;
    var body = m.body;
    var post = m.post;
    var p = pre.split(',');

    p[p.length-1] += '{' + body + '}';
    var postParts = parseCommaParts(post);
    if (post.length) {
      p[p.length-1] += postParts.shift();
      p.push.apply(p, postParts);
    }

    parts.push.apply(parts, p);

    return parts;
  }

  function expandTop(str) {
    if (!str)
      return [];

    // I don't know why Bash 4.3 does this, but it does.
    // Anything starting with {} will have the first two bytes preserved
    // but *only* at the top level, so {},a}b will not expand to anything,
    // but a{},b}c will be expanded to [a}c,abc].
    // One could argue that this is a bug in Bash, but since the goal of
    // this module is to match Bash's rules, we escape a leading {}
    if (str.substr(0, 2) === '{}') {
      str = '\\{\\}' + str.substr(2);
    }

    return expand(escapeBraces(str), true).map(unescapeBraces);
  }

  function embrace(str) {
    return '{' + str + '}';
  }
  function isPadded(el) {
    return /^-?0\d/.test(el);
  }

  function lte(i, y) {
    return i <= y;
  }
  function gte(i, y) {
    return i >= y;
  }

  function expand(str, isTop) {
    var expansions = [];

    var m = balancedMatch('{', '}', str);
    if (!m || /\$$/.test(m.pre)) return [str];

    var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
    var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
    var isSequence = isNumericSequence || isAlphaSequence;
    var isOptions = m.body.indexOf(',') >= 0;
    if (!isSequence && !isOptions) {
      // {a},b}
      if (m.post.match(/,.*\}/)) {
        str = m.pre + '{' + m.body + escClose + m.post;
        return expand(str);
      }
      return [str];
    }

    var n;
    if (isSequence) {
      n = m.body.split(/\.\./);
    } else {
      n = parseCommaParts(m.body);
      if (n.length === 1) {
        // x{{a,b}}y ==> x{a}y x{b}y
        n = expand(n[0], false).map(embrace);
        if (n.length === 1) {
          var post = m.post.length
            ? expand(m.post, false)
            : [''];
          return post.map(function(p) {
            return m.pre + n[0] + p;
          });
        }
      }
    }

    // at this point, n is the parts, and we know it's not a comma set
    // with a single entry.

    // no need to expand pre, since it is guaranteed to be free of brace-sets
    var pre = m.pre;
    var post = m.post.length
      ? expand(m.post, false)
      : [''];

    var N;

    if (isSequence) {
      var x = numeric(n[0]);
      var y = numeric(n[1]);
      var width = Math.max(n[0].length, n[1].length);
      var incr = n.length == 3
        ? Math.abs(numeric(n[2]))
        : 1;
      var test = lte;
      var reverse = y < x;
      if (reverse) {
        incr *= -1;
        test = gte;
      }
      var pad = n.some(isPadded);

      N = [];

      for (var i = x; test(i, y); i += incr) {
        var c;
        if (isAlphaSequence) {
          c = String.fromCharCode(i);
          if (c === '\\')
            c = '';
        } else {
          c = String(i);
          if (pad) {
            var need = width - c.length;
            if (need > 0) {
              var z = new Array(need + 1).join('0');
              if (i < 0)
                c = '-' + z + c.slice(1);
              else
                c = z + c;
            }
          }
        }
        N.push(c);
      }
    } else {
      N = concatMap(n, function(el) { return expand(el, false) });
    }

    for (var j = 0; j < N.length; j++) {
      for (var k = 0; k < post.length; k++) {
        var expansion = pre + N[j] + post[k];
        if (!isTop || isSequence || expansion)
          expansions.push(expansion);
      }
    }

    return expansions;
  }

  var minimatch_1 = minimatch;
  minimatch.Minimatch = Minimatch;

  var path$2 = { sep: '/' };
  try {
    path$2 = pathModule;
  } catch (er) {}

  var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};


  var plTypes = {
    '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
    '?': { open: '(?:', close: ')?' },
    '+': { open: '(?:', close: ')+' },
    '*': { open: '(?:', close: ')*' },
    '@': { open: '(?:', close: ')' }
  };

  // any single thing other than /
  // don't need to escape / when using new RegExp()
  var qmark = '[^/]';

  // * => any number of characters
  var star = qmark + '*?';

  // ** when dots are allowed.  Anything goes, except .. and .
  // not (^ or / followed by one or two dots followed by $ or /),
  // followed by anything, any number of times.
  var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?';

  // not a ^ or / followed by a dot,
  // followed by anything, any number of times.
  var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?';

  // characters that need to be escaped in RegExp.
  var reSpecials = charSet('().*{}+?[]^$\\!');

  // "abc" -> { a:true, b:true, c:true }
  function charSet (s) {
    return s.split('').reduce(function (set, c) {
      set[c] = true;
      return set
    }, {})
  }

  // normalizes slashes.
  var slashSplit = /\/+/;

  minimatch.filter = filter$1;
  function filter$1 (pattern, options) {
    options = options || {};
    return function (p, i, list) {
      return minimatch(p, pattern, options)
    }
  }

  function ext (a, b) {
    a = a || {};
    b = b || {};
    var t = {};
    Object.keys(b).forEach(function (k) {
      t[k] = b[k];
    });
    Object.keys(a).forEach(function (k) {
      t[k] = a[k];
    });
    return t
  }

  minimatch.defaults = function (def) {
    if (!def || !Object.keys(def).length) return minimatch

    var orig = minimatch;

    var m = function minimatch (p, pattern, options) {
      return orig.minimatch(p, pattern, ext(def, options))
    };

    m.Minimatch = function Minimatch (pattern, options) {
      return new orig.Minimatch(pattern, ext(def, options))
    };

    return m
  };

  Minimatch.defaults = function (def) {
    if (!def || !Object.keys(def).length) return Minimatch
    return minimatch.defaults(def).Minimatch
  };

  function minimatch (p, pattern, options) {
    if (typeof pattern !== 'string') {
      throw new TypeError('glob pattern string required')
    }

    if (!options) options = {};

    // shortcut: comments match nothing.
    if (!options.nocomment && pattern.charAt(0) === '#') {
      return false
    }

    // "" only matches ""
    if (pattern.trim() === '') return p === ''

    return new Minimatch(pattern, options).match(p)
  }

  function Minimatch (pattern, options) {
    if (!(this instanceof Minimatch)) {
      return new Minimatch(pattern, options)
    }

    if (typeof pattern !== 'string') {
      throw new TypeError('glob pattern string required')
    }

    if (!options) options = {};
    pattern = pattern.trim();

    // windows support: need to use /, not \
    if (path$2.sep !== '/') {
      pattern = pattern.split(path$2.sep).join('/');
    }

    this.options = options;
    this.set = [];
    this.pattern = pattern;
    this.regexp = null;
    this.negate = false;
    this.comment = false;
    this.empty = false;

    // make the set of regexps etc.
    this.make();
  }

  Minimatch.prototype.debug = function () {};

  Minimatch.prototype.make = make;
  function make () {
    // don't do it more than once.
    if (this._made) return

    var pattern = this.pattern;
    var options = this.options;

    // empty patterns and comments match nothing.
    if (!options.nocomment && pattern.charAt(0) === '#') {
      this.comment = true;
      return
    }
    if (!pattern) {
      this.empty = true;
      return
    }

    // step 1: figure out negation, etc.
    this.parseNegate();

    // step 2: expand braces
    var set = this.globSet = this.braceExpand();

    if (options.debug) this.debug = console.error;

    this.debug(this.pattern, set);

    // step 3: now we have a set, so turn each one into a series of path-portion
    // matching patterns.
    // These will be regexps, except in the case of "**", which is
    // set to the GLOBSTAR object for globstar behavior,
    // and will not contain any / characters
    set = this.globParts = set.map(function (s) {
      return s.split(slashSplit)
    });

    this.debug(this.pattern, set);

    // glob --> regexps
    set = set.map(function (s, si, set) {
      return s.map(this.parse, this)
    }, this);

    this.debug(this.pattern, set);

    // filter out everything that didn't compile properly.
    set = set.filter(function (s) {
      return s.indexOf(false) === -1
    });

    this.debug(this.pattern, set);

    this.set = set;
  }

  Minimatch.prototype.parseNegate = parseNegate;
  function parseNegate () {
    var pattern = this.pattern;
    var negate = false;
    var options = this.options;
    var negateOffset = 0;

    if (options.nonegate) return

    for (var i = 0, l = pattern.length
      ; i < l && pattern.charAt(i) === '!'
      ; i++) {
      negate = !negate;
      negateOffset++;
    }

    if (negateOffset) this.pattern = pattern.substr(negateOffset);
    this.negate = negate;
  }

  // Brace expansion:
  // a{b,c}d -> abd acd
  // a{b,}c -> abc ac
  // a{0..3}d -> a0d a1d a2d a3d
  // a{b,c{d,e}f}g -> abg acdfg acefg
  // a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
  //
  // Invalid sets are not expanded.
  // a{2..}b -> a{2..}b
  // a{b}c -> a{b}c
  minimatch.braceExpand = function (pattern, options) {
    return braceExpand(pattern, options)
  };

  Minimatch.prototype.braceExpand = braceExpand;

  function braceExpand (pattern, options) {
    if (!options) {
      if (this instanceof Minimatch) {
        options = this.options;
      } else {
        options = {};
      }
    }

    pattern = typeof pattern === 'undefined'
      ? this.pattern : pattern;

    if (typeof pattern === 'undefined') {
      throw new TypeError('undefined pattern')
    }

    if (options.nobrace ||
      !pattern.match(/\{.*\}/)) {
      // shortcut. no need to expand.
      return [pattern]
    }

    return braceExpansion(pattern)
  }

  // parse a component of the expanded set.
  // At this point, no pattern may contain "/" in it
  // so we're going to return a 2d array, where each entry is the full
  // pattern, split on '/', and then turned into a regular expression.
  // A regexp is made at the end which joins each array with an
  // escaped /, and another full one which joins each regexp with |.
  //
  // Following the lead of Bash 4.1, note that "**" only has special meaning
  // when it is the *only* thing in a path portion.  Otherwise, any series
  // of * is equivalent to a single *.  Globstar behavior is enabled by
  // default, and can be disabled by setting options.noglobstar.
  Minimatch.prototype.parse = parse;
  var SUBPARSE = {};
  function parse (pattern, isSub) {
    if (pattern.length > 1024 * 64) {
      throw new TypeError('pattern is too long')
    }

    var options = this.options;

    // shortcuts
    if (!options.noglobstar && pattern === '**') return GLOBSTAR
    if (pattern === '') return ''

    var re = '';
    var hasMagic = !!options.nocase;
    var escaping = false;
    // ? => one single character
    var patternListStack = [];
    var negativeLists = [];
    var stateChar;
    var inClass = false;
    var reClassStart = -1;
    var classStart = -1;
    // . and .. never match anything that doesn't start with .,
    // even when options.dot is set.
    var patternStart = pattern.charAt(0) === '.' ? '' // anything
    // not (start or / followed by . or .. followed by / or end)
    : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
    : '(?!\\.)';
    var self = this;

    function clearStateChar () {
      if (stateChar) {
        // we had some state-tracking character
        // that wasn't consumed by this pass.
        switch (stateChar) {
          case '*':
            re += star;
            hasMagic = true;
          break
          case '?':
            re += qmark;
            hasMagic = true;
          break
          default:
            re += '\\' + stateChar;
          break
        }
        self.debug('clearStateChar %j %j', stateChar, re);
        stateChar = false;
      }
    }

    for (var i = 0, len = pattern.length, c
      ; (i < len) && (c = pattern.charAt(i))
      ; i++) {
      this.debug('%s\t%s %s %j', pattern, i, re, c);

      // skip over any that are escaped.
      if (escaping && reSpecials[c]) {
        re += '\\' + c;
        escaping = false;
        continue
      }

      switch (c) {
        case '/':
          // completely not allowed, even escaped.
          // Should already be path-split by now.
          return false

        case '\\':
          clearStateChar();
          escaping = true;
        continue

        // the various stateChar values
        // for the "extglob" stuff.
        case '?':
        case '*':
        case '+':
        case '@':
        case '!':
          this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c);

          // all of those are literals inside a class, except that
          // the glob [!a] means [^a] in regexp
          if (inClass) {
            this.debug('  in class');
            if (c === '!' && i === classStart + 1) c = '^';
            re += c;
            continue
          }

          // if we already have a stateChar, then it means
          // that there was something like ** or +? in there.
          // Handle the stateChar, then proceed with this one.
          self.debug('call clearStateChar %j', stateChar);
          clearStateChar();
          stateChar = c;
          // if extglob is disabled, then +(asdf|foo) isn't a thing.
          // just clear the statechar *now*, rather than even diving into
          // the patternList stuff.
          if (options.noext) clearStateChar();
        continue

        case '(':
          if (inClass) {
            re += '(';
            continue
          }

          if (!stateChar) {
            re += '\\(';
            continue
          }

          patternListStack.push({
            type: stateChar,
            start: i - 1,
            reStart: re.length,
            open: plTypes[stateChar].open,
            close: plTypes[stateChar].close
          });
          // negation is (?:(?!js)[^/]*)
          re += stateChar === '!' ? '(?:(?!(?:' : '(?:';
          this.debug('plType %j %j', stateChar, re);
          stateChar = false;
        continue

        case ')':
          if (inClass || !patternListStack.length) {
            re += '\\)';
            continue
          }

          clearStateChar();
          hasMagic = true;
          var pl = patternListStack.pop();
          // negation is (?:(?!js)[^/]*)
          // The others are (?:<pattern>)<type>
          re += pl.close;
          if (pl.type === '!') {
            negativeLists.push(pl);
          }
          pl.reEnd = re.length;
        continue

        case '|':
          if (inClass || !patternListStack.length || escaping) {
            re += '\\|';
            escaping = false;
            continue
          }

          clearStateChar();
          re += '|';
        continue

        // these are mostly the same in regexp and glob
        case '[':
          // swallow any state-tracking char before the [
          clearStateChar();

          if (inClass) {
            re += '\\' + c;
            continue
          }

          inClass = true;
          classStart = i;
          reClassStart = re.length;
          re += c;
        continue

        case ']':
          //  a right bracket shall lose its special
          //  meaning and represent itself in
          //  a bracket expression if it occurs
          //  first in the list.  -- POSIX.2 2.8.3.2
          if (i === classStart + 1 || !inClass) {
            re += '\\' + c;
            escaping = false;
            continue
          }

          // handle the case where we left a class open.
          // "[z-a]" is valid, equivalent to "\[z-a\]"
          if (inClass) {
            // split where the last [ was, make sure we don't have
            // an invalid re. if so, re-walk the contents of the
            // would-be class to re-translate any characters that
            // were passed through as-is
            // TODO: It would probably be faster to determine this
            // without a try/catch and a new RegExp, but it's tricky
            // to do safely.  For now, this is safe and works.
            var cs = pattern.substring(classStart + 1, i);
            try {
            } catch (er) {
              // not a valid class!
              var sp = this.parse(cs, SUBPARSE);
              re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]';
              hasMagic = hasMagic || sp[1];
              inClass = false;
              continue
            }
          }

          // finish up the class.
          hasMagic = true;
          inClass = false;
          re += c;
        continue

        default:
          // swallow any state char that wasn't consumed
          clearStateChar();

          if (escaping) {
            // no need
            escaping = false;
          } else if (reSpecials[c]
            && !(c === '^' && inClass)) {
            re += '\\';
          }

          re += c;

      } // switch
    } // for

    // handle the case where we left a class open.
    // "[abc" is valid, equivalent to "\[abc"
    if (inClass) {
      // split where the last [ was, and escape it
      // this is a huge pita.  We now have to re-walk
      // the contents of the would-be class to re-translate
      // any characters that were passed through as-is
      cs = pattern.substr(classStart + 1);
      sp = this.parse(cs, SUBPARSE);
      re = re.substr(0, reClassStart) + '\\[' + sp[0];
      hasMagic = hasMagic || sp[1];
    }

    // handle the case where we had a +( thing at the *end*
    // of the pattern.
    // each pattern list stack adds 3 chars, and we need to go through
    // and escape any | chars that were passed through as-is for the regexp.
    // Go through and escape them, taking care not to double-escape any
    // | chars that were already escaped.
    for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
      var tail = re.slice(pl.reStart + pl.open.length);
      this.debug('setting tail', re, pl);
      // maybe some even number of \, then maybe 1 \, followed by a |
      tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
        if (!$2) {
          // the | isn't already escaped, so escape it.
          $2 = '\\';
        }

        // need to escape all those slashes *again*, without escaping the
        // one that we need for escaping the | character.  As it works out,
        // escaping an even number of slashes can be done by simply repeating
        // it exactly after itself.  That's why this trick works.
        //
        // I am sorry that you have to see this.
        return $1 + $1 + $2 + '|'
      });

      this.debug('tail=%j\n   %s', tail, tail, pl, re);
      var t = pl.type === '*' ? star
        : pl.type === '?' ? qmark
        : '\\' + pl.type;

      hasMagic = true;
      re = re.slice(0, pl.reStart) + t + '\\(' + tail;
    }

    // handle trailing things that only matter at the very end.
    clearStateChar();
    if (escaping) {
      // trailing \\
      re += '\\\\';
    }

    // only need to apply the nodot start if the re starts with
    // something that could conceivably capture a dot
    var addPatternStart = false;
    switch (re.charAt(0)) {
      case '.':
      case '[':
      case '(': addPatternStart = true;
    }

    // Hack to work around lack of negative lookbehind in JS
    // A pattern like: *.!(x).!(y|z) needs to ensure that a name
    // like 'a.xyz.yz' doesn't match.  So, the first negative
    // lookahead, has to look ALL the way ahead, to the end of
    // the pattern.
    for (var n = negativeLists.length - 1; n > -1; n--) {
      var nl = negativeLists[n];

      var nlBefore = re.slice(0, nl.reStart);
      var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
      var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
      var nlAfter = re.slice(nl.reEnd);

      nlLast += nlAfter;

      // Handle nested stuff like *(*.js|!(*.json)), where open parens
      // mean that we should *not* include the ) in the bit that is considered
      // "after" the negated section.
      var openParensBefore = nlBefore.split('(').length - 1;
      var cleanAfter = nlAfter;
      for (i = 0; i < openParensBefore; i++) {
        cleanAfter = cleanAfter.replace(/\)[+*?]?/, '');
      }
      nlAfter = cleanAfter;

      var dollar = '';
      if (nlAfter === '' && isSub !== SUBPARSE) {
        dollar = '$';
      }
      var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
      re = newRe;
    }

    // if the re is not "" at this point, then we need to make sure
    // it doesn't match against an empty path part.
    // Otherwise a/* will match a/, which it should not.
    if (re !== '' && hasMagic) {
      re = '(?=.)' + re;
    }

    if (addPatternStart) {
      re = patternStart + re;
    }

    // parsing just a piece of a larger pattern.
    if (isSub === SUBPARSE) {
      return [re, hasMagic]
    }

    // skip the regexp for non-magical patterns
    // unescape anything in it, though, so that it'll be
    // an exact match against a file etc.
    if (!hasMagic) {
      return globUnescape(pattern)
    }

    var flags = options.nocase ? 'i' : '';
    try {
      var regExp = new RegExp('^' + re + '$', flags);
    } catch (er) {
      // If it was an invalid regular expression, then it can't match
      // anything.  This trick looks for a character after the end of
      // the string, which is of course impossible, except in multi-line
      // mode, but it's not a /m regex.
      return new RegExp('$.')
    }

    regExp._glob = pattern;
    regExp._src = re;

    return regExp
  }

  minimatch.makeRe = function (pattern, options) {
    return new Minimatch(pattern, options || {}).makeRe()
  };

  Minimatch.prototype.makeRe = makeRe;
  function makeRe () {
    if (this.regexp || this.regexp === false) return this.regexp

    // at this point, this.set is a 2d array of partial
    // pattern strings, or "**".
    //
    // It's better to use .match().  This function shouldn't
    // be used, really, but it's pretty convenient sometimes,
    // when you just want to work with a regex.
    var set = this.set;

    if (!set.length) {
      this.regexp = false;
      return this.regexp
    }
    var options = this.options;

    var twoStar = options.noglobstar ? star
      : options.dot ? twoStarDot
      : twoStarNoDot;
    var flags = options.nocase ? 'i' : '';

    var re = set.map(function (pattern) {
      return pattern.map(function (p) {
        return (p === GLOBSTAR) ? twoStar
        : (typeof p === 'string') ? regExpEscape(p)
        : p._src
      }).join('\\\/')
    }).join('|');

    // must match entire pattern
    // ending in a * or ** will make it less strict.
    re = '^(?:' + re + ')$';

    // can match anything, as long as it's not this.
    if (this.negate) re = '^(?!' + re + ').*$';

    try {
      this.regexp = new RegExp(re, flags);
    } catch (ex) {
      this.regexp = false;
    }
    return this.regexp
  }

  minimatch.match = function (list, pattern, options) {
    options = options || {};
    var mm = new Minimatch(pattern, options);
    list = list.filter(function (f) {
      return mm.match(f)
    });
    if (mm.options.nonull && !list.length) {
      list.push(pattern);
    }
    return list
  };

  Minimatch.prototype.match = match;
  function match (f, partial) {
    this.debug('match', f, this.pattern);
    // short-circuit in the case of busted things.
    // comments, etc.
    if (this.comment) return false
    if (this.empty) return f === ''

    if (f === '/' && partial) return true

    var options = this.options;

    // windows: need to use /, not \
    if (path$2.sep !== '/') {
      f = f.split(path$2.sep).join('/');
    }

    // treat the test path as a set of pathparts.
    f = f.split(slashSplit);
    this.debug(this.pattern, 'split', f);

    // just ONE of the pattern sets in this.set needs to match
    // in order for it to be valid.  If negating, then just one
    // match means that we have failed.
    // Either way, return on the first hit.

    var set = this.set;
    this.debug(this.pattern, 'set', set);

    // Find the basename of the path by looking for the last non-empty segment
    var filename;
    var i;
    for (i = f.length - 1; i >= 0; i--) {
      filename = f[i];
      if (filename) break
    }

    for (i = 0; i < set.length; i++) {
      var pattern = set[i];
      var file = f;
      if (options.matchBase && pattern.length === 1) {
        file = [filename];
      }
      var hit = this.matchOne(file, pattern, partial);
      if (hit) {
        if (options.flipNegate) return true
        return !this.negate
      }
    }

    // didn't get any hits.  this is success if it's a negative
    // pattern, failure otherwise.
    if (options.flipNegate) return false
    return this.negate
  }

  // set partial to true to test if, for example,
  // "/a/b" matches the start of "/*/b/*/d"
  // Partial means, if you run out of file before you run
  // out of pattern, then that's fine, as long as all
  // the parts match.
  Minimatch.prototype.matchOne = function (file, pattern, partial) {
    var options = this.options;

    this.debug('matchOne',
      { 'this': this, file: file, pattern: pattern });

    this.debug('matchOne', file.length, pattern.length);

    for (var fi = 0,
        pi = 0,
        fl = file.length,
        pl = pattern.length
        ; (fi < fl) && (pi < pl)
        ; fi++, pi++) {
      this.debug('matchOne loop');
      var p = pattern[pi];
      var f = file[fi];

      this.debug(pattern, p, f);

      // should be impossible.
      // some invalid regexp stuff in the set.
      if (p === false) return false

      if (p === GLOBSTAR) {
        this.debug('GLOBSTAR', [pattern, p, f]);

        // "**"
        // a/**/b/**/c would match the following:
        // a/b/x/y/z/c
        // a/x/y/z/b/c
        // a/b/x/b/x/c
        // a/b/c
        // To do this, take the rest of the pattern after
        // the **, and see if it would match the file remainder.
        // If so, return success.
        // If not, the ** "swallows" a segment, and try again.
        // This is recursively awful.
        //
        // a/**/b/**/c matching a/b/x/y/z/c
        // - a matches a
        // - doublestar
        //   - matchOne(b/x/y/z/c, b/**/c)
        //     - b matches b
        //     - doublestar
        //       - matchOne(x/y/z/c, c) -> no
        //       - matchOne(y/z/c, c) -> no
        //       - matchOne(z/c, c) -> no
        //       - matchOne(c, c) yes, hit
        var fr = fi;
        var pr = pi + 1;
        if (pr === pl) {
          this.debug('** at the end');
          // a ** at the end will just swallow the rest.
          // We have found a match.
          // however, it will not swallow /.x, unless
          // options.dot is set.
          // . and .. are *never* matched by **, for explosively
          // exponential reasons.
          for (; fi < fl; fi++) {
            if (file[fi] === '.' || file[fi] === '..' ||
              (!options.dot && file[fi].charAt(0) === '.')) return false
          }
          return true
        }

        // ok, let's see if we can swallow whatever we can.
        while (fr < fl) {
          var swallowee = file[fr];

          this.debug('\nglobstar while', file, fr, pattern, pr, swallowee);

          // XXX remove this slice.  Just pass the start index.
          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
            this.debug('globstar found match!', fr, fl, swallowee);
            // found a match.
            return true
          } else {
            // can't swallow "." or ".." ever.
            // can only swallow ".foo" when explicitly asked.
            if (swallowee === '.' || swallowee === '..' ||
              (!options.dot && swallowee.charAt(0) === '.')) {
              this.debug('dot detected!', file, fr, pattern, pr);
              break
            }

            // ** swallows a segment, and continue.
            this.debug('globstar swallow a segment, and continue');
            fr++;
          }
        }

        // no match was found.
        // However, in partial mode, we can't say this is necessarily over.
        // If there's more *pattern* left, then
        if (partial) {
          // ran out of file
          this.debug('\n>>> no match, partial?', file, fr, pattern, pr);
          if (fr === fl) return true
        }
        return false
      }

      // something other than **
      // non-magic patterns just have to match exactly
      // patterns with magic have been turned into regexps.
      var hit;
      if (typeof p === 'string') {
        if (options.nocase) {
          hit = f.toLowerCase() === p.toLowerCase();
        } else {
          hit = f === p;
        }
        this.debug('string match', p, f, hit);
      } else {
        hit = f.match(p);
        this.debug('pattern match', p, f, hit);
      }

      if (!hit) return false
    }

    // Note: ending in / means that we'll get a final ""
    // at the end of the pattern.  This can only match a
    // corresponding "" at the end of the file.
    // If the file ends in /, then it can only match a
    // a pattern that ends in /, unless the pattern just
    // doesn't have any more for it. But, a/b/ should *not*
    // match "a/b/*", even though "" matches against the
    // [^/]*? pattern, except in partial mode, where it might
    // simply not be reached yet.
    // However, a/b/ should still satisfy a/*

    // now either we fell off the end of the pattern, or we're done.
    if (fi === fl && pi === pl) {
      // ran out of pattern and filename at the same time.
      // an exact hit!
      return true
    } else if (fi === fl) {
      // ran out of file, but still had pattern left.
      // this is ok if we're doing the match as part of
      // a glob fs traversal.
      return partial
    } else if (pi === pl) {
      // ran out of pattern, still have file left.
      // this is only acceptable if we're on the very last
      // empty segment of a file with a trailing slash.
      // a/* should match a/b/
      var emptyFileEnd = (fi === fl - 1) && (file[fi] === '');
      return emptyFileEnd
    }

    // should be unreachable.
    throw new Error('wtf?')
  };

  // replace stuff like \* with *
  function globUnescape (s) {
    return s.replace(/\\(.)/g, '$1')
  }

  function regExpEscape (s) {
    return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
  }

  var inherits_browser$1 = createCommonjsModule(function (module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  });

  function posix(path) {
  	return path.charAt(0) === '/';
  }

  function win32(path) {
  	// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
  	var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
  	var result = splitDeviceRe.exec(path);
  	var device = result[1] || '';
  	var isUnc = Boolean(device && device.charAt(1) !== ':');

  	// UNC paths are always absolute
  	return Boolean(result[2] || isUnc);
  }

  var pathIsAbsolute = process.platform === 'win32' ? win32 : posix;
  var posix_1 = posix;
  var win32_1 = win32;
  pathIsAbsolute.posix = posix_1;
  pathIsAbsolute.win32 = win32_1;

  var alphasort_1 = alphasort;
  var alphasorti_1 = alphasorti;
  var setopts_1 = setopts;
  var ownProp_1 = ownProp;
  var makeAbs_1 = makeAbs;
  var finish_1 = finish;
  var mark_1 = mark;
  var isIgnored_1 = isIgnored;
  var childrenIgnored_1 = childrenIgnored;

  function ownProp (obj, field) {
    return Object.prototype.hasOwnProperty.call(obj, field)
  }




  var Minimatch$1 = minimatch_1.Minimatch;

  function alphasorti (a, b) {
    return a.toLowerCase().localeCompare(b.toLowerCase())
  }

  function alphasort (a, b) {
    return a.localeCompare(b)
  }

  function setupIgnores (self, options) {
    self.ignore = options.ignore || [];

    if (!Array.isArray(self.ignore))
      self.ignore = [self.ignore];

    if (self.ignore.length) {
      self.ignore = self.ignore.map(ignoreMap);
    }
  }

  // ignore patterns are always in dot:true mode.
  function ignoreMap (pattern) {
    var gmatcher = null;
    if (pattern.slice(-3) === '/**') {
      var gpattern = pattern.replace(/(\/\*\*)+$/, '');
      gmatcher = new Minimatch$1(gpattern, { dot: true });
    }

    return {
      matcher: new Minimatch$1(pattern, { dot: true }),
      gmatcher: gmatcher
    }
  }

  function setopts (self, pattern, options) {
    if (!options)
      options = {};

    // base-matching: just use globstar for that.
    if (options.matchBase && -1 === pattern.indexOf("/")) {
      if (options.noglobstar) {
        throw new Error("base matching requires globstar")
      }
      pattern = "**/" + pattern;
    }

    self.silent = !!options.silent;
    self.pattern = pattern;
    self.strict = options.strict !== false;
    self.realpath = !!options.realpath;
    self.realpathCache = options.realpathCache || Object.create(null);
    self.follow = !!options.follow;
    self.dot = !!options.dot;
    self.mark = !!options.mark;
    self.nodir = !!options.nodir;
    if (self.nodir)
      self.mark = true;
    self.sync = !!options.sync;
    self.nounique = !!options.nounique;
    self.nonull = !!options.nonull;
    self.nosort = !!options.nosort;
    self.nocase = !!options.nocase;
    self.stat = !!options.stat;
    self.noprocess = !!options.noprocess;
    self.absolute = !!options.absolute;

    self.maxLength = options.maxLength || Infinity;
    self.cache = options.cache || Object.create(null);
    self.statCache = options.statCache || Object.create(null);
    self.symlinks = options.symlinks || Object.create(null);

    setupIgnores(self, options);

    self.changedCwd = false;
    var cwd = process.cwd();
    if (!ownProp(options, "cwd"))
      self.cwd = cwd;
    else {
      self.cwd = pathModule.resolve(options.cwd);
      self.changedCwd = self.cwd !== cwd;
    }

    self.root = options.root || pathModule.resolve(self.cwd, "/");
    self.root = pathModule.resolve(self.root);
    if (process.platform === "win32")
      self.root = self.root.replace(/\\/g, "/");

    // TODO: is an absolute `cwd` supposed to be resolved against `root`?
    // e.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')
    self.cwdAbs = pathIsAbsolute(self.cwd) ? self.cwd : makeAbs(self, self.cwd);
    if (process.platform === "win32")
      self.cwdAbs = self.cwdAbs.replace(/\\/g, "/");
    self.nomount = !!options.nomount;

    // disable comments and negation in Minimatch.
    // Note that they are not supported in Glob itself anyway.
    options.nonegate = true;
    options.nocomment = true;

    self.minimatch = new Minimatch$1(pattern, options);
    self.options = self.minimatch.options;
  }

  function finish (self) {
    var nou = self.nounique;
    var all = nou ? [] : Object.create(null);

    for (var i = 0, l = self.matches.length; i < l; i ++) {
      var matches = self.matches[i];
      if (!matches || Object.keys(matches).length === 0) {
        if (self.nonull) {
          // do like the shell, and spit out the literal glob
          var literal = self.minimatch.globSet[i];
          if (nou)
            all.push(literal);
          else
            all[literal] = true;
        }
      } else {
        // had matches
        var m = Object.keys(matches);
        if (nou)
          all.push.apply(all, m);
        else
          m.forEach(function (m) {
            all[m] = true;
          });
      }
    }

    if (!nou)
      all = Object.keys(all);

    if (!self.nosort)
      all = all.sort(self.nocase ? alphasorti : alphasort);

    // at *some* point we statted all of these
    if (self.mark) {
      for (var i = 0; i < all.length; i++) {
        all[i] = self._mark(all[i]);
      }
      if (self.nodir) {
        all = all.filter(function (e) {
          var notDir = !(/\/$/.test(e));
          var c = self.cache[e] || self.cache[makeAbs(self, e)];
          if (notDir && c)
            notDir = c !== 'DIR' && !Array.isArray(c);
          return notDir
        });
      }
    }

    if (self.ignore.length)
      all = all.filter(function(m) {
        return !isIgnored(self, m)
      });

    self.found = all;
  }

  function mark (self, p) {
    var abs = makeAbs(self, p);
    var c = self.cache[abs];
    var m = p;
    if (c) {
      var isDir = c === 'DIR' || Array.isArray(c);
      var slash = p.slice(-1) === '/';

      if (isDir && !slash)
        m += '/';
      else if (!isDir && slash)
        m = m.slice(0, -1);

      if (m !== p) {
        var mabs = makeAbs(self, m);
        self.statCache[mabs] = self.statCache[abs];
        self.cache[mabs] = self.cache[abs];
      }
    }

    return m
  }

  // lotta situps...
  function makeAbs (self, f) {
    var abs = f;
    if (f.charAt(0) === '/') {
      abs = pathModule.join(self.root, f);
    } else if (pathIsAbsolute(f) || f === '') {
      abs = f;
    } else if (self.changedCwd) {
      abs = pathModule.resolve(self.cwd, f);
    } else {
      abs = pathModule.resolve(f);
    }

    if (process.platform === 'win32')
      abs = abs.replace(/\\/g, '/');

    return abs
  }


  // Return true, if pattern ends with globstar '**', for the accompanying parent directory.
  // Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents
  function isIgnored (self, path) {
    if (!self.ignore.length)
      return false

    return self.ignore.some(function(item) {
      return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path))
    })
  }

  function childrenIgnored (self, path) {
    if (!self.ignore.length)
      return false

    return self.ignore.some(function(item) {
      return !!(item.gmatcher && item.gmatcher.match(path))
    })
  }

  var common = {
  	alphasort: alphasort_1,
  	alphasorti: alphasorti_1,
  	setopts: setopts_1,
  	ownProp: ownProp_1,
  	makeAbs: makeAbs_1,
  	finish: finish_1,
  	mark: mark_1,
  	isIgnored: isIgnored_1,
  	childrenIgnored: childrenIgnored_1
  };

  var require$$1$1 = ( util$1 && util ) || util$1;

  var assert$2 = ( assert$1 && assert ) || assert$1;

  var sync = globSync;
  globSync.GlobSync = GlobSync;
  var setopts$1 = common.setopts;
  var ownProp$1 = common.ownProp;
  var childrenIgnored$1 = common.childrenIgnored;
  var isIgnored$1 = common.isIgnored;

  function globSync (pattern, options) {
    if (typeof options === 'function' || arguments.length === 3)
      throw new TypeError('callback provided to sync glob\n'+
                          'See: https://github.com/isaacs/node-glob/issues/167')

    return new GlobSync(pattern, options).found
  }

  function GlobSync (pattern, options) {
    if (!pattern)
      throw new Error('must provide pattern')

    if (typeof options === 'function' || arguments.length === 3)
      throw new TypeError('callback provided to sync glob\n'+
                          'See: https://github.com/isaacs/node-glob/issues/167')

    if (!(this instanceof GlobSync))
      return new GlobSync(pattern, options)

    setopts$1(this, pattern, options);

    if (this.noprocess)
      return this

    var n = this.minimatch.set.length;
    this.matches = new Array(n);
    for (var i = 0; i < n; i ++) {
      this._process(this.minimatch.set[i], i, false);
    }
    this._finish();
  }

  GlobSync.prototype._finish = function () {
    assert$2(this instanceof GlobSync);
    if (this.realpath) {
      var self = this;
      this.matches.forEach(function (matchset, index) {
        var set = self.matches[index] = Object.create(null);
        for (var p in matchset) {
          try {
            p = self._makeAbs(p);
            var real = fs_realpath.realpathSync(p, self.realpathCache);
            set[real] = true;
          } catch (er) {
            if (er.syscall === 'stat')
              set[self._makeAbs(p)] = true;
            else
              throw er
          }
        }
      });
    }
    common.finish(this);
  };


  GlobSync.prototype._process = function (pattern, index, inGlobStar) {
    assert$2(this instanceof GlobSync);

    // Get the first [n] parts of pattern that are all strings.
    var n = 0;
    while (typeof pattern[n] === 'string') {
      n ++;
    }
    // now n is the index of the first one that is *not* a string.

    // See if there's anything else
    var prefix;
    switch (n) {
      // if not, then this is rather simple
      case pattern.length:
        this._processSimple(pattern.join('/'), index);
        return

      case 0:
        // pattern *starts* with some non-trivial item.
        // going to readdir(cwd), but not include the prefix in matches.
        prefix = null;
        break

      default:
        // pattern has some string bits in the front.
        // whatever it starts with, whether that's 'absolute' like /foo/bar,
        // or 'relative' like '../baz'
        prefix = pattern.slice(0, n).join('/');
        break
    }

    var remain = pattern.slice(n);

    // get the list of entries.
    var read;
    if (prefix === null)
      read = '.';
    else if (pathIsAbsolute(prefix) || pathIsAbsolute(pattern.join('/'))) {
      if (!prefix || !pathIsAbsolute(prefix))
        prefix = '/' + prefix;
      read = prefix;
    } else
      read = prefix;

    var abs = this._makeAbs(read);

    //if ignored, skip processing
    if (childrenIgnored$1(this, read))
      return

    var isGlobStar = remain[0] === minimatch_1.GLOBSTAR;
    if (isGlobStar)
      this._processGlobStar(prefix, read, abs, remain, index, inGlobStar);
    else
      this._processReaddir(prefix, read, abs, remain, index, inGlobStar);
  };


  GlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {
    var entries = this._readdir(abs, inGlobStar);

    // if the abs isn't a dir, then nothing can match!
    if (!entries)
      return

    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = remain[0];
    var negate = !!this.minimatch.negate;
    var rawGlob = pn._glob;
    var dotOk = this.dot || rawGlob.charAt(0) === '.';

    var matchedEntries = [];
    for (var i = 0; i < entries.length; i++) {
      var e = entries[i];
      if (e.charAt(0) !== '.' || dotOk) {
        var m;
        if (negate && !prefix) {
          m = !e.match(pn);
        } else {
          m = e.match(pn);
        }
        if (m)
          matchedEntries.push(e);
      }
    }

    var len = matchedEntries.length;
    // If there are no matched entries, then nothing matches.
    if (len === 0)
      return

    // if this is the last remaining pattern bit, then no need for
    // an additional stat *unless* the user has specified mark or
    // stat explicitly.  We know they exist, since readdir returned
    // them.

    if (remain.length === 1 && !this.mark && !this.stat) {
      if (!this.matches[index])
        this.matches[index] = Object.create(null);

      for (var i = 0; i < len; i ++) {
        var e = matchedEntries[i];
        if (prefix) {
          if (prefix.slice(-1) !== '/')
            e = prefix + '/' + e;
          else
            e = prefix + e;
        }

        if (e.charAt(0) === '/' && !this.nomount) {
          e = pathModule.join(this.root, e);
        }
        this._emitMatch(index, e);
      }
      // This was the last one, and no stats were needed
      return
    }

    // now test all matched entries as stand-ins for that part
    // of the pattern.
    remain.shift();
    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i];
      var newPattern;
      if (prefix)
        newPattern = [prefix, e];
      else
        newPattern = [e];
      this._process(newPattern.concat(remain), index, inGlobStar);
    }
  };


  GlobSync.prototype._emitMatch = function (index, e) {
    if (isIgnored$1(this, e))
      return

    var abs = this._makeAbs(e);

    if (this.mark)
      e = this._mark(e);

    if (this.absolute) {
      e = abs;
    }

    if (this.matches[index][e])
      return

    if (this.nodir) {
      var c = this.cache[abs];
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true;

    if (this.stat)
      this._stat(e);
  };


  GlobSync.prototype._readdirInGlobStar = function (abs) {
    // follow all symlinked directories forever
    // just proceed as if this is a non-globstar situation
    if (this.follow)
      return this._readdir(abs, false)

    var entries;
    var lstat;
    try {
      lstat = fs.lstatSync(abs);
    } catch (er) {
      if (er.code === 'ENOENT') {
        // lstat failed, doesn't exist
        return null
      }
    }

    var isSym = lstat && lstat.isSymbolicLink();
    this.symlinks[abs] = isSym;

    // If it's not a symlink or a dir, then it's definitely a regular file.
    // don't bother doing a readdir in that case.
    if (!isSym && lstat && !lstat.isDirectory())
      this.cache[abs] = 'FILE';
    else
      entries = this._readdir(abs, false);

    return entries
  };

  GlobSync.prototype._readdir = function (abs, inGlobStar) {

    if (inGlobStar && !ownProp$1(this.symlinks, abs))
      return this._readdirInGlobStar(abs)

    if (ownProp$1(this.cache, abs)) {
      var c = this.cache[abs];
      if (!c || c === 'FILE')
        return null

      if (Array.isArray(c))
        return c
    }

    try {
      return this._readdirEntries(abs, fs.readdirSync(abs))
    } catch (er) {
      this._readdirError(abs, er);
      return null
    }
  };

  GlobSync.prototype._readdirEntries = function (abs, entries) {
    // if we haven't asked to stat everything, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.
    if (!this.mark && !this.stat) {
      for (var i = 0; i < entries.length; i ++) {
        var e = entries[i];
        if (abs === '/')
          e = abs + e;
        else
          e = abs + '/' + e;
        this.cache[e] = true;
      }
    }

    this.cache[abs] = entries;

    // mark and cache dir-ness
    return entries
  };

  GlobSync.prototype._readdirError = function (f, er) {
    // handle errors, and cache the information
    switch (er.code) {
      case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
      case 'ENOTDIR': // totally normal. means it *does* exist.
        var abs = this._makeAbs(f);
        this.cache[abs] = 'FILE';
        if (abs === this.cwdAbs) {
          var error = new Error(er.code + ' invalid cwd ' + this.cwd);
          error.path = this.cwd;
          error.code = er.code;
          throw error
        }
        break

      case 'ENOENT': // not terribly unusual
      case 'ELOOP':
      case 'ENAMETOOLONG':
      case 'UNKNOWN':
        this.cache[this._makeAbs(f)] = false;
        break

      default: // some unusual error.  Treat as failure.
        this.cache[this._makeAbs(f)] = false;
        if (this.strict)
          throw er
        if (!this.silent)
          console.error('glob error', er);
        break
    }
  };

  GlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {

    var entries = this._readdir(abs, inGlobStar);

    // no entries means not a dir, so it can never have matches
    // foo.txt/** doesn't match foo.txt
    if (!entries)
      return

    // test without the globstar, and with every child both below
    // and replacing the globstar.
    var remainWithoutGlobStar = remain.slice(1);
    var gspref = prefix ? [ prefix ] : [];
    var noGlobStar = gspref.concat(remainWithoutGlobStar);

    // the noGlobStar pattern exits the inGlobStar state
    this._process(noGlobStar, index, false);

    var len = entries.length;
    var isSym = this.symlinks[abs];

    // If it's a symlink, and we're in a globstar, then stop
    if (isSym && inGlobStar)
      return

    for (var i = 0; i < len; i++) {
      var e = entries[i];
      if (e.charAt(0) === '.' && !this.dot)
        continue

      // these two cases enter the inGlobStar state
      var instead = gspref.concat(entries[i], remainWithoutGlobStar);
      this._process(instead, index, true);

      var below = gspref.concat(entries[i], remain);
      this._process(below, index, true);
    }
  };

  GlobSync.prototype._processSimple = function (prefix, index) {
    // XXX review this.  Shouldn't it be doing the mounting etc
    // before doing stat?  kinda weird?
    var exists = this._stat(prefix);

    if (!this.matches[index])
      this.matches[index] = Object.create(null);

    // If it doesn't exist, then just mark the lack of results
    if (!exists)
      return

    if (prefix && pathIsAbsolute(prefix) && !this.nomount) {
      var trail = /[\/\\]$/.test(prefix);
      if (prefix.charAt(0) === '/') {
        prefix = pathModule.join(this.root, prefix);
      } else {
        prefix = pathModule.resolve(this.root, prefix);
        if (trail)
          prefix += '/';
      }
    }

    if (process.platform === 'win32')
      prefix = prefix.replace(/\\/g, '/');

    // Mark this as a match
    this._emitMatch(index, prefix);
  };

  // Returns either 'DIR', 'FILE', or false
  GlobSync.prototype._stat = function (f) {
    var abs = this._makeAbs(f);
    var needDir = f.slice(-1) === '/';

    if (f.length > this.maxLength)
      return false

    if (!this.stat && ownProp$1(this.cache, abs)) {
      var c = this.cache[abs];

      if (Array.isArray(c))
        c = 'DIR';

      // It exists, but maybe not how we need it
      if (!needDir || c === 'DIR')
        return c

      if (needDir && c === 'FILE')
        return false

      // otherwise we have to stat, because maybe c=true
      // if we know it exists, but not what it is.
    }
    var stat = this.statCache[abs];
    if (!stat) {
      var lstat;
      try {
        lstat = fs.lstatSync(abs);
      } catch (er) {
        if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
          this.statCache[abs] = false;
          return false
        }
      }

      if (lstat && lstat.isSymbolicLink()) {
        try {
          stat = fs.statSync(abs);
        } catch (er) {
          stat = lstat;
        }
      } else {
        stat = lstat;
      }
    }

    this.statCache[abs] = stat;

    var c = true;
    if (stat)
      c = stat.isDirectory() ? 'DIR' : 'FILE';

    this.cache[abs] = this.cache[abs] || c;

    if (needDir && c === 'FILE')
      return false

    return c
  };

  GlobSync.prototype._mark = function (p) {
    return common.mark(this, p)
  };

  GlobSync.prototype._makeAbs = function (f) {
    return common.makeAbs(this, f)
  };

  // Returns a wrapper function that returns a wrapped callback
  // The wrapper function should do some stuff, and return a
  // presumably different callback function.
  // This makes sure that own properties are retained, so that
  // decorations and such are not lost along the way.
  var wrappy_1 = wrappy;
  function wrappy (fn, cb) {
    if (fn && cb) return wrappy(fn)(cb)

    if (typeof fn !== 'function')
      throw new TypeError('need wrapper function')

    Object.keys(fn).forEach(function (k) {
      wrapper[k] = fn[k];
    });

    return wrapper

    function wrapper() {
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }
      var ret = fn.apply(this, args);
      var cb = args[args.length-1];
      if (typeof ret === 'function' && ret !== cb) {
        Object.keys(cb).forEach(function (k) {
          ret[k] = cb[k];
        });
      }
      return ret
    }
  }

  var once_1 = wrappy_1(once$1);
  var strict = wrappy_1(onceStrict);

  once$1.proto = once$1(function () {
    Object.defineProperty(Function.prototype, 'once', {
      value: function () {
        return once$1(this)
      },
      configurable: true
    });

    Object.defineProperty(Function.prototype, 'onceStrict', {
      value: function () {
        return onceStrict(this)
      },
      configurable: true
    });
  });

  function once$1 (fn) {
    var f = function () {
      if (f.called) return f.value
      f.called = true;
      return f.value = fn.apply(this, arguments)
    };
    f.called = false;
    return f
  }

  function onceStrict (fn) {
    var f = function () {
      if (f.called)
        throw new Error(f.onceError)
      f.called = true;
      return f.value = fn.apply(this, arguments)
    };
    var name = fn.name || 'Function wrapped with `once`';
    f.onceError = name + " shouldn't be called more than once";
    f.called = false;
    return f
  }
  once_1.strict = strict;

  var reqs = Object.create(null);


  var inflight_1 = wrappy_1(inflight);

  function inflight (key, cb) {
    if (reqs[key]) {
      reqs[key].push(cb);
      return null
    } else {
      reqs[key] = [cb];
      return makeres(key)
    }
  }

  function makeres (key) {
    return once_1(function RES () {
      var cbs = reqs[key];
      var len = cbs.length;
      var args = slice(arguments);

      // XXX It's somewhat ambiguous whether a new callback added in this
      // pass should be queued for later execution if something in the
      // list of callbacks throws, or if it should just be discarded.
      // However, it's such an edge case that it hardly matters, and either
      // choice is likely as surprising as the other.
      // As it happens, we do go ahead and schedule it for later execution.
      try {
        for (var i = 0; i < len; i++) {
          cbs[i].apply(null, args);
        }
      } finally {
        if (cbs.length > len) {
          // added more in the interim.
          // de-zalgo, just in case, but don't call again.
          cbs.splice(0, len);
          process.nextTick(function () {
            RES.apply(null, args);
          });
        } else {
          delete reqs[key];
        }
      }
    })
  }

  function slice (args) {
    var length = args.length;
    var array = [];

    for (var i = 0; i < length; i++) array[i] = args[i];
    return array
  }

  var require$$0$1 = ( events && EventEmitter ) || events;

  // Approach:
  //
  // 1. Get the minimatch set
  // 2. For each pattern in the set, PROCESS(pattern, false)
  // 3. Store matches per-set, then uniq them
  //
  // PROCESS(pattern, inGlobStar)
  // Get the first [n] items from pattern that are all strings
  // Join these together.  This is PREFIX.
  //   If there is no more remaining, then stat(PREFIX) and
  //   add to matches if it succeeds.  END.
  //
  // If inGlobStar and PREFIX is symlink and points to dir
  //   set ENTRIES = []
  // else readdir(PREFIX) as ENTRIES
  //   If fail, END
  //
  // with ENTRIES
  //   If pattern[n] is GLOBSTAR
  //     // handle the case where the globstar match is empty
  //     // by pruning it out, and testing the resulting pattern
  //     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
  //     // handle other cases.
  //     for ENTRY in ENTRIES (not dotfiles)
  //       // attach globstar + tail onto the entry
  //       // Mark that this entry is a globstar match
  //       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
  //
  //   else // not globstar
  //     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
  //       Test ENTRY against pattern[n]
  //       If fails, continue
  //       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
  //
  // Caveat:
  //   Cache all stats and readdirs results to minimize syscall.  Since all
  //   we ever care about is existence and directory-ness, we can just keep
  //   `true` for files, and [children,...] for directories, or `false` for
  //   things that don't exist.

  var glob_1 = glob;

  var EE = require$$0$1.EventEmitter;
  var setopts$2 = common.setopts;
  var ownProp$2 = common.ownProp;


  var childrenIgnored$2 = common.childrenIgnored;
  var isIgnored$2 = common.isIgnored;



  function glob (pattern, options, cb) {
    if (typeof options === 'function') cb = options, options = {};
    if (!options) options = {};

    if (options.sync) {
      if (cb)
        throw new TypeError('callback provided to sync glob')
      return sync(pattern, options)
    }

    return new Glob$1(pattern, options, cb)
  }

  glob.sync = sync;
  var GlobSync$1 = glob.GlobSync = sync.GlobSync;

  // old api surface
  glob.glob = glob;

  function extend (origin, add) {
    if (add === null || typeof add !== 'object') {
      return origin
    }

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin
  }

  glob.hasMagic = function (pattern, options_) {
    var options = extend({}, options_);
    options.noprocess = true;

    var g = new Glob$1(pattern, options);
    var set = g.minimatch.set;

    if (!pattern)
      return false

    if (set.length > 1)
      return true

    for (var j = 0; j < set[0].length; j++) {
      if (typeof set[0][j] !== 'string')
        return true
    }

    return false
  };

  glob.Glob = Glob$1;
  inherits_browser$1(Glob$1, EE);
  function Glob$1 (pattern, options, cb) {
    if (typeof options === 'function') {
      cb = options;
      options = null;
    }

    if (options && options.sync) {
      if (cb)
        throw new TypeError('callback provided to sync glob')
      return new GlobSync$1(pattern, options)
    }

    if (!(this instanceof Glob$1))
      return new Glob$1(pattern, options, cb)

    setopts$2(this, pattern, options);
    this._didRealPath = false;

    // process each pattern in the minimatch set
    var n = this.minimatch.set.length;

    // The matches are stored as {<filename>: true,...} so that
    // duplicates are automagically pruned.
    // Later, we do an Object.keys() on these.
    // Keep them as a list so we can fill in when nonull is set.
    this.matches = new Array(n);

    if (typeof cb === 'function') {
      cb = once_1(cb);
      this.on('error', cb);
      this.on('end', function (matches) {
        cb(null, matches);
      });
    }

    var self = this;
    this._processing = 0;

    this._emitQueue = [];
    this._processQueue = [];
    this.paused = false;

    if (this.noprocess)
      return this

    if (n === 0)
      return done()

    var sync$$1 = true;
    for (var i = 0; i < n; i ++) {
      this._process(this.minimatch.set[i], i, false, done);
    }
    sync$$1 = false;

    function done () {
      --self._processing;
      if (self._processing <= 0) {
        if (sync$$1) {
          process.nextTick(function () {
            self._finish();
          });
        } else {
          self._finish();
        }
      }
    }
  }

  Glob$1.prototype._finish = function () {
    assert$2(this instanceof Glob$1);
    if (this.aborted)
      return

    if (this.realpath && !this._didRealpath)
      return this._realpath()

    common.finish(this);
    this.emit('end', this.found);
  };

  Glob$1.prototype._realpath = function () {
    if (this._didRealpath)
      return

    this._didRealpath = true;

    var n = this.matches.length;
    if (n === 0)
      return this._finish()

    var self = this;
    for (var i = 0; i < this.matches.length; i++)
      this._realpathSet(i, next);

    function next () {
      if (--n === 0)
        self._finish();
    }
  };

  Glob$1.prototype._realpathSet = function (index, cb) {
    var matchset = this.matches[index];
    if (!matchset)
      return cb()

    var found = Object.keys(matchset);
    var self = this;
    var n = found.length;

    if (n === 0)
      return cb()

    var set = this.matches[index] = Object.create(null);
    found.forEach(function (p, i) {
      // If there's a problem with the stat, then it means that
      // one or more of the links in the realpath couldn't be
      // resolved.  just return the abs value in that case.
      p = self._makeAbs(p);
      fs_realpath.realpath(p, self.realpathCache, function (er, real) {
        if (!er)
          set[real] = true;
        else if (er.syscall === 'stat')
          set[p] = true;
        else
          self.emit('error', er); // srsly wtf right here

        if (--n === 0) {
          self.matches[index] = set;
          cb();
        }
      });
    });
  };

  Glob$1.prototype._mark = function (p) {
    return common.mark(this, p)
  };

  Glob$1.prototype._makeAbs = function (f) {
    return common.makeAbs(this, f)
  };

  Glob$1.prototype.abort = function () {
    this.aborted = true;
    this.emit('abort');
  };

  Glob$1.prototype.pause = function () {
    if (!this.paused) {
      this.paused = true;
      this.emit('pause');
    }
  };

  Glob$1.prototype.resume = function () {
    if (this.paused) {
      this.emit('resume');
      this.paused = false;
      if (this._emitQueue.length) {
        var eq = this._emitQueue.slice(0);
        this._emitQueue.length = 0;
        for (var i = 0; i < eq.length; i ++) {
          var e = eq[i];
          this._emitMatch(e[0], e[1]);
        }
      }
      if (this._processQueue.length) {
        var pq = this._processQueue.slice(0);
        this._processQueue.length = 0;
        for (var i = 0; i < pq.length; i ++) {
          var p = pq[i];
          this._processing--;
          this._process(p[0], p[1], p[2], p[3]);
        }
      }
    }
  };

  Glob$1.prototype._process = function (pattern, index, inGlobStar, cb) {
    assert$2(this instanceof Glob$1);
    assert$2(typeof cb === 'function');

    if (this.aborted)
      return

    this._processing++;
    if (this.paused) {
      this._processQueue.push([pattern, index, inGlobStar, cb]);
      return
    }

    //console.error('PROCESS %d', this._processing, pattern)

    // Get the first [n] parts of pattern that are all strings.
    var n = 0;
    while (typeof pattern[n] === 'string') {
      n ++;
    }
    // now n is the index of the first one that is *not* a string.

    // see if there's anything else
    var prefix;
    switch (n) {
      // if not, then this is rather simple
      case pattern.length:
        this._processSimple(pattern.join('/'), index, cb);
        return

      case 0:
        // pattern *starts* with some non-trivial item.
        // going to readdir(cwd), but not include the prefix in matches.
        prefix = null;
        break

      default:
        // pattern has some string bits in the front.
        // whatever it starts with, whether that's 'absolute' like /foo/bar,
        // or 'relative' like '../baz'
        prefix = pattern.slice(0, n).join('/');
        break
    }

    var remain = pattern.slice(n);

    // get the list of entries.
    var read;
    if (prefix === null)
      read = '.';
    else if (pathIsAbsolute(prefix) || pathIsAbsolute(pattern.join('/'))) {
      if (!prefix || !pathIsAbsolute(prefix))
        prefix = '/' + prefix;
      read = prefix;
    } else
      read = prefix;

    var abs = this._makeAbs(read);

    //if ignored, skip _processing
    if (childrenIgnored$2(this, read))
      return cb()

    var isGlobStar = remain[0] === minimatch_1.GLOBSTAR;
    if (isGlobStar)
      this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb);
    else
      this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb);
  };

  Glob$1.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
    var self = this;
    this._readdir(abs, inGlobStar, function (er, entries) {
      return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
    });
  };

  Glob$1.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

    // if the abs isn't a dir, then nothing can match!
    if (!entries)
      return cb()

    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
    var pn = remain[0];
    var negate = !!this.minimatch.negate;
    var rawGlob = pn._glob;
    var dotOk = this.dot || rawGlob.charAt(0) === '.';

    var matchedEntries = [];
    for (var i = 0; i < entries.length; i++) {
      var e = entries[i];
      if (e.charAt(0) !== '.' || dotOk) {
        var m;
        if (negate && !prefix) {
          m = !e.match(pn);
        } else {
          m = e.match(pn);
        }
        if (m)
          matchedEntries.push(e);
      }
    }

    //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

    var len = matchedEntries.length;
    // If there are no matched entries, then nothing matches.
    if (len === 0)
      return cb()

    // if this is the last remaining pattern bit, then no need for
    // an additional stat *unless* the user has specified mark or
    // stat explicitly.  We know they exist, since readdir returned
    // them.

    if (remain.length === 1 && !this.mark && !this.stat) {
      if (!this.matches[index])
        this.matches[index] = Object.create(null);

      for (var i = 0; i < len; i ++) {
        var e = matchedEntries[i];
        if (prefix) {
          if (prefix !== '/')
            e = prefix + '/' + e;
          else
            e = prefix + e;
        }

        if (e.charAt(0) === '/' && !this.nomount) {
          e = pathModule.join(this.root, e);
        }
        this._emitMatch(index, e);
      }
      // This was the last one, and no stats were needed
      return cb()
    }

    // now test all matched entries as stand-ins for that part
    // of the pattern.
    remain.shift();
    for (var i = 0; i < len; i ++) {
      var e = matchedEntries[i];
      if (prefix) {
        if (prefix !== '/')
          e = prefix + '/' + e;
        else
          e = prefix + e;
      }
      this._process([e].concat(remain), index, inGlobStar, cb);
    }
    cb();
  };

  Glob$1.prototype._emitMatch = function (index, e) {
    if (this.aborted)
      return

    if (isIgnored$2(this, e))
      return

    if (this.paused) {
      this._emitQueue.push([index, e]);
      return
    }

    var abs = pathIsAbsolute(e) ? e : this._makeAbs(e);

    if (this.mark)
      e = this._mark(e);

    if (this.absolute)
      e = abs;

    if (this.matches[index][e])
      return

    if (this.nodir) {
      var c = this.cache[abs];
      if (c === 'DIR' || Array.isArray(c))
        return
    }

    this.matches[index][e] = true;

    var st = this.statCache[abs];
    if (st)
      this.emit('stat', e, st);

    this.emit('match', e);
  };

  Glob$1.prototype._readdirInGlobStar = function (abs, cb) {
    if (this.aborted)
      return

    // follow all symlinked directories forever
    // just proceed as if this is a non-globstar situation
    if (this.follow)
      return this._readdir(abs, false, cb)

    var lstatkey = 'lstat\0' + abs;
    var self = this;
    var lstatcb = inflight_1(lstatkey, lstatcb_);

    if (lstatcb)
      fs.lstat(abs, lstatcb);

    function lstatcb_ (er, lstat) {
      if (er && er.code === 'ENOENT')
        return cb()

      var isSym = lstat && lstat.isSymbolicLink();
      self.symlinks[abs] = isSym;

      // If it's not a symlink or a dir, then it's definitely a regular file.
      // don't bother doing a readdir in that case.
      if (!isSym && lstat && !lstat.isDirectory()) {
        self.cache[abs] = 'FILE';
        cb();
      } else
        self._readdir(abs, false, cb);
    }
  };

  Glob$1.prototype._readdir = function (abs, inGlobStar, cb) {
    if (this.aborted)
      return

    cb = inflight_1('readdir\0'+abs+'\0'+inGlobStar, cb);
    if (!cb)
      return

    //console.error('RD %j %j', +inGlobStar, abs)
    if (inGlobStar && !ownProp$2(this.symlinks, abs))
      return this._readdirInGlobStar(abs, cb)

    if (ownProp$2(this.cache, abs)) {
      var c = this.cache[abs];
      if (!c || c === 'FILE')
        return cb()

      if (Array.isArray(c))
        return cb(null, c)
    }
    fs.readdir(abs, readdirCb(this, abs, cb));
  };

  function readdirCb (self, abs, cb) {
    return function (er, entries) {
      if (er)
        self._readdirError(abs, er, cb);
      else
        self._readdirEntries(abs, entries, cb);
    }
  }

  Glob$1.prototype._readdirEntries = function (abs, entries, cb) {
    if (this.aborted)
      return

    // if we haven't asked to stat everything, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.
    if (!this.mark && !this.stat) {
      for (var i = 0; i < entries.length; i ++) {
        var e = entries[i];
        if (abs === '/')
          e = abs + e;
        else
          e = abs + '/' + e;
        this.cache[e] = true;
      }
    }

    this.cache[abs] = entries;
    return cb(null, entries)
  };

  Glob$1.prototype._readdirError = function (f, er, cb) {
    if (this.aborted)
      return

    // handle errors, and cache the information
    switch (er.code) {
      case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
      case 'ENOTDIR': // totally normal. means it *does* exist.
        var abs = this._makeAbs(f);
        this.cache[abs] = 'FILE';
        if (abs === this.cwdAbs) {
          var error = new Error(er.code + ' invalid cwd ' + this.cwd);
          error.path = this.cwd;
          error.code = er.code;
          this.emit('error', error);
          this.abort();
        }
        break

      case 'ENOENT': // not terribly unusual
      case 'ELOOP':
      case 'ENAMETOOLONG':
      case 'UNKNOWN':
        this.cache[this._makeAbs(f)] = false;
        break

      default: // some unusual error.  Treat as failure.
        this.cache[this._makeAbs(f)] = false;
        if (this.strict) {
          this.emit('error', er);
          // If the error is handled, then we abort
          // if not, we threw out of here
          this.abort();
        }
        if (!this.silent)
          console.error('glob error', er);
        break
    }

    return cb()
  };

  Glob$1.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
    var self = this;
    this._readdir(abs, inGlobStar, function (er, entries) {
      self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
    });
  };


  Glob$1.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
    //console.error('pgs2', prefix, remain[0], entries)

    // no entries means not a dir, so it can never have matches
    // foo.txt/** doesn't match foo.txt
    if (!entries)
      return cb()

    // test without the globstar, and with every child both below
    // and replacing the globstar.
    var remainWithoutGlobStar = remain.slice(1);
    var gspref = prefix ? [ prefix ] : [];
    var noGlobStar = gspref.concat(remainWithoutGlobStar);

    // the noGlobStar pattern exits the inGlobStar state
    this._process(noGlobStar, index, false, cb);

    var isSym = this.symlinks[abs];
    var len = entries.length;

    // If it's a symlink, and we're in a globstar, then stop
    if (isSym && inGlobStar)
      return cb()

    for (var i = 0; i < len; i++) {
      var e = entries[i];
      if (e.charAt(0) === '.' && !this.dot)
        continue

      // these two cases enter the inGlobStar state
      var instead = gspref.concat(entries[i], remainWithoutGlobStar);
      this._process(instead, index, true, cb);

      var below = gspref.concat(entries[i], remain);
      this._process(below, index, true, cb);
    }

    cb();
  };

  Glob$1.prototype._processSimple = function (prefix, index, cb) {
    // XXX review this.  Shouldn't it be doing the mounting etc
    // before doing stat?  kinda weird?
    var self = this;
    this._stat(prefix, function (er, exists) {
      self._processSimple2(prefix, index, er, exists, cb);
    });
  };
  Glob$1.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

    //console.error('ps2', prefix, exists)

    if (!this.matches[index])
      this.matches[index] = Object.create(null);

    // If it doesn't exist, then just mark the lack of results
    if (!exists)
      return cb()

    if (prefix && pathIsAbsolute(prefix) && !this.nomount) {
      var trail = /[\/\\]$/.test(prefix);
      if (prefix.charAt(0) === '/') {
        prefix = pathModule.join(this.root, prefix);
      } else {
        prefix = pathModule.resolve(this.root, prefix);
        if (trail)
          prefix += '/';
      }
    }

    if (process.platform === 'win32')
      prefix = prefix.replace(/\\/g, '/');

    // Mark this as a match
    this._emitMatch(index, prefix);
    cb();
  };

  // Returns either 'DIR', 'FILE', or false
  Glob$1.prototype._stat = function (f, cb) {
    var abs = this._makeAbs(f);
    var needDir = f.slice(-1) === '/';

    if (f.length > this.maxLength)
      return cb()

    if (!this.stat && ownProp$2(this.cache, abs)) {
      var c = this.cache[abs];

      if (Array.isArray(c))
        c = 'DIR';

      // It exists, but maybe not how we need it
      if (!needDir || c === 'DIR')
        return cb(null, c)

      if (needDir && c === 'FILE')
        return cb()

      // otherwise we have to stat, because maybe c=true
      // if we know it exists, but not what it is.
    }
    var stat = this.statCache[abs];
    if (stat !== undefined) {
      if (stat === false)
        return cb(null, stat)
      else {
        var type = stat.isDirectory() ? 'DIR' : 'FILE';
        if (needDir && type === 'FILE')
          return cb()
        else
          return cb(null, type, stat)
      }
    }

    var self = this;
    var statcb = inflight_1('stat\0' + abs, lstatcb_);
    if (statcb)
      fs.lstat(abs, statcb);

    function lstatcb_ (er, lstat) {
      if (lstat && lstat.isSymbolicLink()) {
        // If it's a symlink, then treat it as the target, unless
        // the target does not exist, then treat it as a file.
        return fs.stat(abs, function (er, stat) {
          if (er)
            self._stat2(f, abs, null, lstat, cb);
          else
            self._stat2(f, abs, er, stat, cb);
        })
      } else {
        self._stat2(f, abs, er, lstat, cb);
      }
    }
  };

  Glob$1.prototype._stat2 = function (f, abs, er, stat, cb) {
    if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
      this.statCache[abs] = false;
      return cb()
    }

    var needDir = f.slice(-1) === '/';
    this.statCache[abs] = stat;

    if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
      return cb(null, false, stat)

    var c = true;
    if (stat)
      c = stat.isDirectory() ? 'DIR' : 'FILE';
    this.cache[abs] = this.cache[abs] || c;

    if (needDir && c === 'FILE')
      return cb()

    return cb(null, c, stat)
  };

  var rimraf_1 = rimraf;
  rimraf.sync = rimrafSync;





  var _0666 = parseInt('666', 8);

  var defaultGlobOpts = {
    nosort: true,
    silent: true
  };

  // for EMFILE handling
  var timeout = 0;

  var isWindows$1 = (process.platform === "win32");

  function defaults (options) {
    var methods = [
      'unlink',
      'chmod',
      'stat',
      'lstat',
      'rmdir',
      'readdir'
    ];
    methods.forEach(function(m) {
      options[m] = options[m] || fs[m];
      m = m + 'Sync';
      options[m] = options[m] || fs[m];
    });

    options.maxBusyTries = options.maxBusyTries || 3;
    options.emfileWait = options.emfileWait || 1000;
    if (options.glob === false) {
      options.disableGlob = true;
    }
    options.disableGlob = options.disableGlob || false;
    options.glob = options.glob || defaultGlobOpts;
  }

  function rimraf (p, options, cb) {
    if (typeof options === 'function') {
      cb = options;
      options = {};
    }

    assert$2(p, 'rimraf: missing path');
    assert$2.equal(typeof p, 'string', 'rimraf: path should be a string');
    assert$2.equal(typeof cb, 'function', 'rimraf: callback function required');
    assert$2(options, 'rimraf: invalid options argument provided');
    assert$2.equal(typeof options, 'object', 'rimraf: options should be object');

    defaults(options);

    var busyTries = 0;
    var errState = null;
    var n = 0;

    if (options.disableGlob || !glob_1.hasMagic(p))
      return afterGlob(null, [p])

    options.lstat(p, function (er, stat) {
      if (!er)
        return afterGlob(null, [p])

      glob_1(p, options.glob, afterGlob);
    });

    function next (er) {
      errState = errState || er;
      if (--n === 0)
        cb(errState);
    }

    function afterGlob (er, results) {
      if (er)
        return cb(er)

      n = results.length;
      if (n === 0)
        return cb()

      results.forEach(function (p) {
        rimraf_(p, options, function CB (er) {
          if (er) {
            if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") &&
                busyTries < options.maxBusyTries) {
              busyTries ++;
              var time = busyTries * 100;
              // try again, with the same exact callback as this one.
              return setTimeout(function () {
                rimraf_(p, options, CB);
              }, time)
            }

            // this one won't happen if graceful-fs is used.
            if (er.code === "EMFILE" && timeout < options.emfileWait) {
              return setTimeout(function () {
                rimraf_(p, options, CB);
              }, timeout ++)
            }

            // already gone
            if (er.code === "ENOENT") er = null;
          }

          timeout = 0;
          next(er);
        });
      });
    }
  }

  // Two possible strategies.
  // 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
  // 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
  //
  // Both result in an extra syscall when you guess wrong.  However, there
  // are likely far more normal files in the world than directories.  This
  // is based on the assumption that a the average number of files per
  // directory is >= 1.
  //
  // If anyone ever complains about this, then I guess the strategy could
  // be made configurable somehow.  But until then, YAGNI.
  function rimraf_ (p, options, cb) {
    assert$2(p);
    assert$2(options);
    assert$2(typeof cb === 'function');

    // sunos lets the root user unlink directories, which is... weird.
    // so we have to lstat here and make sure it's not a dir.
    options.lstat(p, function (er, st) {
      if (er && er.code === "ENOENT")
        return cb(null)

      // Windows can EPERM on stat.  Life is suffering.
      if (er && er.code === "EPERM" && isWindows$1)
        fixWinEPERM(p, options, er, cb);

      if (st && st.isDirectory())
        return rmdir(p, options, er, cb)

      options.unlink(p, function (er) {
        if (er) {
          if (er.code === "ENOENT")
            return cb(null)
          if (er.code === "EPERM")
            return (isWindows$1)
              ? fixWinEPERM(p, options, er, cb)
              : rmdir(p, options, er, cb)
          if (er.code === "EISDIR")
            return rmdir(p, options, er, cb)
        }
        return cb(er)
      });
    });
  }

  function fixWinEPERM (p, options, er, cb) {
    assert$2(p);
    assert$2(options);
    assert$2(typeof cb === 'function');
    if (er)
      assert$2(er instanceof Error);

    options.chmod(p, _0666, function (er2) {
      if (er2)
        cb(er2.code === "ENOENT" ? null : er);
      else
        options.stat(p, function(er3, stats) {
          if (er3)
            cb(er3.code === "ENOENT" ? null : er);
          else if (stats.isDirectory())
            rmdir(p, options, er, cb);
          else
            options.unlink(p, cb);
        });
    });
  }

  function fixWinEPERMSync (p, options, er) {
    assert$2(p);
    assert$2(options);
    if (er)
      assert$2(er instanceof Error);

    try {
      options.chmodSync(p, _0666);
    } catch (er2) {
      if (er2.code === "ENOENT")
        return
      else
        throw er
    }

    try {
      var stats = options.statSync(p);
    } catch (er3) {
      if (er3.code === "ENOENT")
        return
      else
        throw er
    }

    if (stats.isDirectory())
      rmdirSync(p, options, er);
    else
      options.unlinkSync(p);
  }

  function rmdir (p, options, originalEr, cb) {
    assert$2(p);
    assert$2(options);
    if (originalEr)
      assert$2(originalEr instanceof Error);
    assert$2(typeof cb === 'function');

    // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
    // if we guessed wrong, and it's not a directory, then
    // raise the original error.
    options.rmdir(p, function (er) {
      if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
        rmkids(p, options, cb);
      else if (er && er.code === "ENOTDIR")
        cb(originalEr);
      else
        cb(er);
    });
  }

  function rmkids(p, options, cb) {
    assert$2(p);
    assert$2(options);
    assert$2(typeof cb === 'function');

    options.readdir(p, function (er, files) {
      if (er)
        return cb(er)
      var n = files.length;
      if (n === 0)
        return options.rmdir(p, cb)
      var errState;
      files.forEach(function (f) {
        rimraf(pathModule.join(p, f), options, function (er) {
          if (errState)
            return
          if (er)
            return cb(errState = er)
          if (--n === 0)
            options.rmdir(p, cb);
        });
      });
    });
  }

  // this looks simpler, and is strictly *faster*, but will
  // tie up the JavaScript thread and fail on excessively
  // deep directory trees.
  function rimrafSync (p, options) {
    options = options || {};
    defaults(options);

    assert$2(p, 'rimraf: missing path');
    assert$2.equal(typeof p, 'string', 'rimraf: path should be a string');
    assert$2(options, 'rimraf: missing options');
    assert$2.equal(typeof options, 'object', 'rimraf: options should be object');

    var results;

    if (options.disableGlob || !glob_1.hasMagic(p)) {
      results = [p];
    } else {
      try {
        options.lstatSync(p);
        results = [p];
      } catch (er) {
        results = glob_1.sync(p, options.glob);
      }
    }

    if (!results.length)
      return

    for (var i = 0; i < results.length; i++) {
      var p = results[i];

      try {
        var st = options.lstatSync(p);
      } catch (er) {
        if (er.code === "ENOENT")
          return

        // Windows can EPERM on stat.  Life is suffering.
        if (er.code === "EPERM" && isWindows$1)
          fixWinEPERMSync(p, options, er);
      }

      try {
        // sunos lets the root user unlink directories, which is... weird.
        if (st && st.isDirectory())
          rmdirSync(p, options, null);
        else
          options.unlinkSync(p);
      } catch (er) {
        if (er.code === "ENOENT")
          return
        if (er.code === "EPERM")
          return isWindows$1 ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
        if (er.code !== "EISDIR")
          throw er

        rmdirSync(p, options, er);
      }
    }
  }

  function rmdirSync (p, options, originalEr) {
    assert$2(p);
    assert$2(options);
    if (originalEr)
      assert$2(originalEr instanceof Error);

    try {
      options.rmdirSync(p);
    } catch (er) {
      if (er.code === "ENOENT")
        return
      if (er.code === "ENOTDIR")
        throw originalEr
      if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
        rmkidsSync(p, options);
    }
  }

  function rmkidsSync (p, options) {
    assert$2(p);
    assert$2(options);
    options.readdirSync(p).forEach(function (f) {
      rimrafSync(pathModule.join(p, f), options);
    });

    // We only end up here once we got ENOTEMPTY at least once, and
    // at this point, we are guaranteed to have removed all the kids.
    // So, we know that it won't be ENOENT or ENOTDIR or anything else.
    // try really hard to delete stuff on windows, because it has a
    // PROFOUNDLY annoying habit of not closing handles promptly when
    // files are deleted, resulting in spurious ENOTEMPTY errors.
    var retries = isWindows$1 ? 100 : 1;
    var i = 0;
    do {
      var threw = true;
      try {
        var ret = options.rmdirSync(p, options);
        threw = false;
        return ret
      } finally {
        if (++i < retries && threw)
          continue
      }
    } while (true)
  }

  var napi = createCommonjsModule(function (module, exports) {




  module.exports = exports;

  var versionArray = process.version
  	.substr(1)
  	.replace(/-.*$/, '')
  	.split('.')
  	.map(function(item) {
  		return +item;
  	});

  var napi_multiple_commands = [
  	'build',
  	'clean',
  	'configure',
  	'package',
  	'publish',
  	'reveal',
  	'testbinary',
  	'testpackage',
  	'unpublish'
  ];

  var napi_build_version_tag = 'napi_build_version=';

  module.exports.get_napi_version = function() {
  	// returns the non-zero numeric napi version or undefined if napi is not supported.
  	var version = process.versions.napi; // can be undefined
  	if (!version) { // this code should never need to be updated
  		if (versionArray[0] === 9 && versionArray[1] >= 3) version = 2; // 9.3.0+
  		else if (versionArray[0] === 8) version = 1; // 8.0.0+
  	}
  	return version;
  };

  module.exports.get_napi_version_as_string = function() {
  	// returns the napi version as a string or an empty string if napi is not supported.
  	var version = module.exports.get_napi_version();
  	return version ? ''+version : '';
  };

  module.exports.validate_package_json = function(package_json) { // return err
  	var binary = package_json.binary;
  	var module_path_ok = binary.module_path && binary.module_path.indexOf('{napi_build_version}') !== -1;
  	var remote_path_ok = binary.remote_path && binary.remote_path.indexOf('{napi_build_version}') !== -1;
  	var package_name_ok = binary.package_name && binary.package_name.indexOf('{napi_build_version}') !== -1;
  	var napi_build_versions = module.exports.get_napi_build_versions(package_json);

  	if (napi_build_versions) {
  		napi_build_versions.forEach(function(napi_build_version){
  			if (!(parseInt(napi_build_version,10) === napi_build_version && napi_build_version > 0)) {
  				throw new Error("All values specified in napi_versions must be positive integers.");
  			}
  		});
  	}

  	if (napi_build_versions && (!module_path_ok || (!remote_path_ok && !package_name_ok))) {
  		throw new Error("When napi_versions is specified; module_path and either remote_path or " +
  			"package_name must contain the substitution string '{napi_build_version}`.");
  	}

  	if ((module_path_ok || remote_path_ok || package_name_ok) && !napi_build_versions) {
  		throw new Error("When the substitution string '{napi_build_version}` is specified in " +
  			"module_path, remote_path, or package_name; napi_versions must also be specified.");
  	}

  	if (napi_build_versions && !module.exports.get_best_napi_build_version(package_json)) {
  		throw new Error(
  			'The N-API version of this Node instance is ' + module.exports.get_napi_version() + '. ' +
  			'This module supports N-API version(s) ' + module.exports.get_napi_build_versions(package_json) + '. ' +
  			'This Node instance cannot run this module.');
  	}

  };

  module.exports.expand_commands = function(package_json, commands) {
  	var expanded_commands = [];
  	var napi_build_versions = module.exports.get_napi_build_versions(package_json);
  	commands.forEach(function(command){
  		if (napi_build_versions && command.name === 'install') {
  			var napi_build_version = module.exports.get_best_napi_build_version(package_json);
  			var args = napi_build_version ? [ napi_build_version_tag+napi_build_version ] : [ ];
  			expanded_commands.push ({ name: command.name, args: args });
  		} else if (napi_build_versions && napi_multiple_commands.includes(command.name)) {
  			napi_build_versions.forEach(function(napi_build_version){
  				var args = command.args.slice();
  				args.push (napi_build_version_tag+napi_build_version);
  				expanded_commands.push ({ name: command.name, args: args });
  			});
  		} else {
  			expanded_commands.push (command);
  		}
  	});
  	return expanded_commands;
  };

  module.exports.get_napi_build_versions = function(package_json) {
  	var napi_build_versions = [];
  	if (package_json.binary && package_json.binary.napi_versions) { // remove duplicates
  		package_json.binary.napi_versions.forEach(function(napi_version) {
  			if (!napi_build_versions.includes(napi_version)) napi_build_versions.push(napi_version);
  		});
  	}
  	return napi_build_versions.length ? napi_build_versions : undefined;
  };

  module.exports.get_command_arg = function(napi_build_version) {
  	return napi_build_version_tag + napi_build_version;
  };

  module.exports.get_napi_build_version_from_command_args = function(command_args) {
  	for (var i = 0; i < command_args.length; i++) {
  		var arg = command_args[i];
  		if (arg.indexOf(napi_build_version_tag) === 0) {
  			return parseInt(arg.substr(napi_build_version_tag.length),10);
  		}
  	}
  	return undefined;
  };

  module.exports.swap_build_dir_out = function(napi_build_version) {
  	if (napi_build_version) {
  		rimraf_1.sync(module.exports.get_build_dir(napi_build_version));
  		fs.renameSync('build', module.exports.get_build_dir(napi_build_version));
  	}
  };

  module.exports.swap_build_dir_in = function(napi_build_version) {
  	if (napi_build_version) {
  		rimraf_1.sync('build');
  		fs.renameSync(module.exports.get_build_dir(napi_build_version), 'build');
  	}
  };

  module.exports.get_build_dir = function(napi_build_version) {
  	return 'build-tmp-napi-v'+napi_build_version;
  };

  module.exports.get_best_napi_build_version = function(package_json) {
  	var best_napi_build_version = 0;
  	var napi_build_versions = module.exports.get_napi_build_versions (package_json);
  	if (napi_build_versions) {
  		var our_napi_version = module.exports.get_napi_version();
  		napi_build_versions.forEach(function(napi_build_version){
  			if (napi_build_version > best_napi_build_version &&
  				napi_build_version <= our_napi_version) {
  				best_napi_build_version = napi_build_version;
  			}
  		});
  	}
  	return best_napi_build_version === 0 ? undefined : best_napi_build_version;
  };
  });
  var napi_1 = napi.get_napi_version;
  var napi_2 = napi.get_napi_version_as_string;
  var napi_3 = napi.validate_package_json;
  var napi_4 = napi.expand_commands;
  var napi_5 = napi.get_napi_build_versions;
  var napi_6 = napi.get_command_arg;
  var napi_7 = napi.get_napi_build_version_from_command_args;
  var napi_8 = napi.swap_build_dir_out;
  var napi_9 = napi.swap_build_dir_in;
  var napi_10 = napi.get_build_dir;
  var napi_11 = napi.get_best_napi_build_version;

  var abi_crosswalk = {
  	"0.1.14": {
  	node_abi: null,
  	v8: "1.3"
  },
  	"0.1.15": {
  	node_abi: null,
  	v8: "1.3"
  },
  	"0.1.16": {
  	node_abi: null,
  	v8: "1.3"
  },
  	"0.1.17": {
  	node_abi: null,
  	v8: "1.3"
  },
  	"0.1.18": {
  	node_abi: null,
  	v8: "1.3"
  },
  	"0.1.19": {
  	node_abi: null,
  	v8: "2.0"
  },
  	"0.1.20": {
  	node_abi: null,
  	v8: "2.0"
  },
  	"0.1.21": {
  	node_abi: null,
  	v8: "2.0"
  },
  	"0.1.22": {
  	node_abi: null,
  	v8: "2.0"
  },
  	"0.1.23": {
  	node_abi: null,
  	v8: "2.0"
  },
  	"0.1.24": {
  	node_abi: null,
  	v8: "2.0"
  },
  	"0.1.25": {
  	node_abi: null,
  	v8: "2.0"
  },
  	"0.1.26": {
  	node_abi: null,
  	v8: "2.0"
  },
  	"0.1.27": {
  	node_abi: null,
  	v8: "2.1"
  },
  	"0.1.28": {
  	node_abi: null,
  	v8: "2.1"
  },
  	"0.1.29": {
  	node_abi: null,
  	v8: "2.1"
  },
  	"0.1.30": {
  	node_abi: null,
  	v8: "2.1"
  },
  	"0.1.31": {
  	node_abi: null,
  	v8: "2.1"
  },
  	"0.1.32": {
  	node_abi: null,
  	v8: "2.1"
  },
  	"0.1.33": {
  	node_abi: null,
  	v8: "2.1"
  },
  	"0.1.90": {
  	node_abi: null,
  	v8: "2.2"
  },
  	"0.1.91": {
  	node_abi: null,
  	v8: "2.2"
  },
  	"0.1.92": {
  	node_abi: null,
  	v8: "2.2"
  },
  	"0.1.93": {
  	node_abi: null,
  	v8: "2.2"
  },
  	"0.1.94": {
  	node_abi: null,
  	v8: "2.2"
  },
  	"0.1.95": {
  	node_abi: null,
  	v8: "2.2"
  },
  	"0.1.96": {
  	node_abi: null,
  	v8: "2.2"
  },
  	"0.1.97": {
  	node_abi: null,
  	v8: "2.2"
  },
  	"0.1.98": {
  	node_abi: null,
  	v8: "2.2"
  },
  	"0.1.99": {
  	node_abi: null,
  	v8: "2.2"
  },
  	"0.1.100": {
  	node_abi: null,
  	v8: "2.2"
  },
  	"0.1.101": {
  	node_abi: null,
  	v8: "2.3"
  },
  	"0.1.102": {
  	node_abi: null,
  	v8: "2.3"
  },
  	"0.1.103": {
  	node_abi: null,
  	v8: "2.3"
  },
  	"0.1.104": {
  	node_abi: null,
  	v8: "2.3"
  },
  	"0.2.0": {
  	node_abi: 1,
  	v8: "2.3"
  },
  	"0.2.1": {
  	node_abi: 1,
  	v8: "2.3"
  },
  	"0.2.2": {
  	node_abi: 1,
  	v8: "2.3"
  },
  	"0.2.3": {
  	node_abi: 1,
  	v8: "2.3"
  },
  	"0.2.4": {
  	node_abi: 1,
  	v8: "2.3"
  },
  	"0.2.5": {
  	node_abi: 1,
  	v8: "2.3"
  },
  	"0.2.6": {
  	node_abi: 1,
  	v8: "2.3"
  },
  	"0.3.0": {
  	node_abi: 1,
  	v8: "2.5"
  },
  	"0.3.1": {
  	node_abi: 1,
  	v8: "2.5"
  },
  	"0.3.2": {
  	node_abi: 1,
  	v8: "3.0"
  },
  	"0.3.3": {
  	node_abi: 1,
  	v8: "3.0"
  },
  	"0.3.4": {
  	node_abi: 1,
  	v8: "3.0"
  },
  	"0.3.5": {
  	node_abi: 1,
  	v8: "3.0"
  },
  	"0.3.6": {
  	node_abi: 1,
  	v8: "3.0"
  },
  	"0.3.7": {
  	node_abi: 1,
  	v8: "3.0"
  },
  	"0.3.8": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.4.0": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.4.1": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.4.2": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.4.3": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.4.4": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.4.5": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.4.6": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.4.7": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.4.8": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.4.9": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.4.10": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.4.11": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.4.12": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.5.0": {
  	node_abi: 1,
  	v8: "3.1"
  },
  	"0.5.1": {
  	node_abi: 1,
  	v8: "3.4"
  },
  	"0.5.2": {
  	node_abi: 1,
  	v8: "3.4"
  },
  	"0.5.3": {
  	node_abi: 1,
  	v8: "3.4"
  },
  	"0.5.4": {
  	node_abi: 1,
  	v8: "3.5"
  },
  	"0.5.5": {
  	node_abi: 1,
  	v8: "3.5"
  },
  	"0.5.6": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.5.7": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.5.8": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.5.9": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.5.10": {
  	node_abi: 1,
  	v8: "3.7"
  },
  	"0.6.0": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.1": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.2": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.3": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.4": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.5": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.6": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.7": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.8": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.9": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.10": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.11": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.12": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.13": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.14": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.15": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.16": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.17": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.18": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.19": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.20": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.6.21": {
  	node_abi: 1,
  	v8: "3.6"
  },
  	"0.7.0": {
  	node_abi: 1,
  	v8: "3.8"
  },
  	"0.7.1": {
  	node_abi: 1,
  	v8: "3.8"
  },
  	"0.7.2": {
  	node_abi: 1,
  	v8: "3.8"
  },
  	"0.7.3": {
  	node_abi: 1,
  	v8: "3.9"
  },
  	"0.7.4": {
  	node_abi: 1,
  	v8: "3.9"
  },
  	"0.7.5": {
  	node_abi: 1,
  	v8: "3.9"
  },
  	"0.7.6": {
  	node_abi: 1,
  	v8: "3.9"
  },
  	"0.7.7": {
  	node_abi: 1,
  	v8: "3.9"
  },
  	"0.7.8": {
  	node_abi: 1,
  	v8: "3.9"
  },
  	"0.7.9": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.7.10": {
  	node_abi: 1,
  	v8: "3.9"
  },
  	"0.7.11": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.7.12": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.0": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.1": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.2": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.3": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.4": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.5": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.6": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.7": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.8": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.9": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.10": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.11": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.12": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.13": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.14": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.15": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.16": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.17": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.18": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.19": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.20": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.21": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.22": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.23": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.24": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.25": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.26": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.27": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.8.28": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.9.0": {
  	node_abi: 1,
  	v8: "3.11"
  },
  	"0.9.1": {
  	node_abi: 10,
  	v8: "3.11"
  },
  	"0.9.2": {
  	node_abi: 10,
  	v8: "3.11"
  },
  	"0.9.3": {
  	node_abi: 10,
  	v8: "3.13"
  },
  	"0.9.4": {
  	node_abi: 10,
  	v8: "3.13"
  },
  	"0.9.5": {
  	node_abi: 10,
  	v8: "3.13"
  },
  	"0.9.6": {
  	node_abi: 10,
  	v8: "3.15"
  },
  	"0.9.7": {
  	node_abi: 10,
  	v8: "3.15"
  },
  	"0.9.8": {
  	node_abi: 10,
  	v8: "3.15"
  },
  	"0.9.9": {
  	node_abi: 11,
  	v8: "3.15"
  },
  	"0.9.10": {
  	node_abi: 11,
  	v8: "3.15"
  },
  	"0.9.11": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.9.12": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.0": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.1": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.2": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.3": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.4": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.5": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.6": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.7": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.8": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.9": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.10": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.11": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.12": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.13": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.14": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.15": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.16": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.17": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.18": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.19": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.20": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.21": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.22": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.23": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.24": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.25": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.26": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.27": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.28": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.29": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.30": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.31": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.32": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.33": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.34": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.35": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.36": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.37": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.38": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.39": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.40": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.41": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.42": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.43": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.44": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.45": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.46": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.47": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.10.48": {
  	node_abi: 11,
  	v8: "3.14"
  },
  	"0.11.0": {
  	node_abi: 12,
  	v8: "3.17"
  },
  	"0.11.1": {
  	node_abi: 12,
  	v8: "3.18"
  },
  	"0.11.2": {
  	node_abi: 12,
  	v8: "3.19"
  },
  	"0.11.3": {
  	node_abi: 12,
  	v8: "3.19"
  },
  	"0.11.4": {
  	node_abi: 12,
  	v8: "3.20"
  },
  	"0.11.5": {
  	node_abi: 12,
  	v8: "3.20"
  },
  	"0.11.6": {
  	node_abi: 12,
  	v8: "3.20"
  },
  	"0.11.7": {
  	node_abi: 12,
  	v8: "3.20"
  },
  	"0.11.8": {
  	node_abi: 13,
  	v8: "3.21"
  },
  	"0.11.9": {
  	node_abi: 13,
  	v8: "3.22"
  },
  	"0.11.10": {
  	node_abi: 13,
  	v8: "3.22"
  },
  	"0.11.11": {
  	node_abi: 14,
  	v8: "3.22"
  },
  	"0.11.12": {
  	node_abi: 14,
  	v8: "3.22"
  },
  	"0.11.13": {
  	node_abi: 14,
  	v8: "3.25"
  },
  	"0.11.14": {
  	node_abi: 14,
  	v8: "3.26"
  },
  	"0.11.15": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.11.16": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.0": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.1": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.2": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.3": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.4": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.5": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.6": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.7": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.8": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.9": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.10": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.11": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.12": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.13": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.14": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.15": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.16": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.17": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"0.12.18": {
  	node_abi: 14,
  	v8: "3.28"
  },
  	"1.0.0": {
  	node_abi: 42,
  	v8: "3.31"
  },
  	"1.0.1": {
  	node_abi: 42,
  	v8: "3.31"
  },
  	"1.0.2": {
  	node_abi: 42,
  	v8: "3.31"
  },
  	"1.0.3": {
  	node_abi: 42,
  	v8: "4.1"
  },
  	"1.0.4": {
  	node_abi: 42,
  	v8: "4.1"
  },
  	"1.1.0": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.2.0": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.3.0": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.4.1": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.4.2": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.4.3": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.5.0": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.5.1": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.6.0": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.6.1": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.6.2": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.6.3": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.6.4": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.7.1": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.8.1": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.8.2": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.8.3": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"1.8.4": {
  	node_abi: 43,
  	v8: "4.1"
  },
  	"2.0.0": {
  	node_abi: 44,
  	v8: "4.2"
  },
  	"2.0.1": {
  	node_abi: 44,
  	v8: "4.2"
  },
  	"2.0.2": {
  	node_abi: 44,
  	v8: "4.2"
  },
  	"2.1.0": {
  	node_abi: 44,
  	v8: "4.2"
  },
  	"2.2.0": {
  	node_abi: 44,
  	v8: "4.2"
  },
  	"2.2.1": {
  	node_abi: 44,
  	v8: "4.2"
  },
  	"2.3.0": {
  	node_abi: 44,
  	v8: "4.2"
  },
  	"2.3.1": {
  	node_abi: 44,
  	v8: "4.2"
  },
  	"2.3.2": {
  	node_abi: 44,
  	v8: "4.2"
  },
  	"2.3.3": {
  	node_abi: 44,
  	v8: "4.2"
  },
  	"2.3.4": {
  	node_abi: 44,
  	v8: "4.2"
  },
  	"2.4.0": {
  	node_abi: 44,
  	v8: "4.2"
  },
  	"2.5.0": {
  	node_abi: 44,
  	v8: "4.2"
  },
  	"3.0.0": {
  	node_abi: 45,
  	v8: "4.4"
  },
  	"3.1.0": {
  	node_abi: 45,
  	v8: "4.4"
  },
  	"3.2.0": {
  	node_abi: 45,
  	v8: "4.4"
  },
  	"3.3.0": {
  	node_abi: 45,
  	v8: "4.4"
  },
  	"3.3.1": {
  	node_abi: 45,
  	v8: "4.4"
  },
  	"4.0.0": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.1.0": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.1.1": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.1.2": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.2.0": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.2.1": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.2.2": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.2.3": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.2.4": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.2.5": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.2.6": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.3.0": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.3.1": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.3.2": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.4.0": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.4.1": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.4.2": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.4.3": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.4.4": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.4.5": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.4.6": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.4.7": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.5.0": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.6.0": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.6.1": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.6.2": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.7.0": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.7.1": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.7.2": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.7.3": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.8.0": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.8.1": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.8.2": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.8.3": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.8.4": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.8.5": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.8.6": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.8.7": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.9.0": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"4.9.1": {
  	node_abi: 46,
  	v8: "4.5"
  },
  	"5.0.0": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.1.0": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.1.1": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.2.0": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.3.0": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.4.0": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.4.1": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.5.0": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.6.0": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.7.0": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.7.1": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.8.0": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.9.0": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.9.1": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.10.0": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.10.1": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.11.0": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.11.1": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"5.12.0": {
  	node_abi: 47,
  	v8: "4.6"
  },
  	"6.0.0": {
  	node_abi: 48,
  	v8: "5.0"
  },
  	"6.1.0": {
  	node_abi: 48,
  	v8: "5.0"
  },
  	"6.2.0": {
  	node_abi: 48,
  	v8: "5.0"
  },
  	"6.2.1": {
  	node_abi: 48,
  	v8: "5.0"
  },
  	"6.2.2": {
  	node_abi: 48,
  	v8: "5.0"
  },
  	"6.3.0": {
  	node_abi: 48,
  	v8: "5.0"
  },
  	"6.3.1": {
  	node_abi: 48,
  	v8: "5.0"
  },
  	"6.4.0": {
  	node_abi: 48,
  	v8: "5.0"
  },
  	"6.5.0": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.6.0": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.7.0": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.8.0": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.8.1": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.9.0": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.9.1": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.9.2": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.9.3": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.9.4": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.9.5": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.10.0": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.10.1": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.10.2": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.10.3": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.11.0": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.11.1": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.11.2": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.11.3": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.11.4": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.11.5": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.12.0": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.12.1": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.12.2": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.12.3": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.13.0": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.13.1": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.14.0": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.14.1": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.14.2": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"6.14.3": {
  	node_abi: 48,
  	v8: "5.1"
  },
  	"7.0.0": {
  	node_abi: 51,
  	v8: "5.4"
  },
  	"7.1.0": {
  	node_abi: 51,
  	v8: "5.4"
  },
  	"7.2.0": {
  	node_abi: 51,
  	v8: "5.4"
  },
  	"7.2.1": {
  	node_abi: 51,
  	v8: "5.4"
  },
  	"7.3.0": {
  	node_abi: 51,
  	v8: "5.4"
  },
  	"7.4.0": {
  	node_abi: 51,
  	v8: "5.4"
  },
  	"7.5.0": {
  	node_abi: 51,
  	v8: "5.4"
  },
  	"7.6.0": {
  	node_abi: 51,
  	v8: "5.5"
  },
  	"7.7.0": {
  	node_abi: 51,
  	v8: "5.5"
  },
  	"7.7.1": {
  	node_abi: 51,
  	v8: "5.5"
  },
  	"7.7.2": {
  	node_abi: 51,
  	v8: "5.5"
  },
  	"7.7.3": {
  	node_abi: 51,
  	v8: "5.5"
  },
  	"7.7.4": {
  	node_abi: 51,
  	v8: "5.5"
  },
  	"7.8.0": {
  	node_abi: 51,
  	v8: "5.5"
  },
  	"7.9.0": {
  	node_abi: 51,
  	v8: "5.5"
  },
  	"7.10.0": {
  	node_abi: 51,
  	v8: "5.5"
  },
  	"7.10.1": {
  	node_abi: 51,
  	v8: "5.5"
  },
  	"8.0.0": {
  	node_abi: 57,
  	v8: "5.8"
  },
  	"8.1.0": {
  	node_abi: 57,
  	v8: "5.8"
  },
  	"8.1.1": {
  	node_abi: 57,
  	v8: "5.8"
  },
  	"8.1.2": {
  	node_abi: 57,
  	v8: "5.8"
  },
  	"8.1.3": {
  	node_abi: 57,
  	v8: "5.8"
  },
  	"8.1.4": {
  	node_abi: 57,
  	v8: "5.8"
  },
  	"8.2.0": {
  	node_abi: 57,
  	v8: "5.8"
  },
  	"8.2.1": {
  	node_abi: 57,
  	v8: "5.8"
  },
  	"8.3.0": {
  	node_abi: 57,
  	v8: "6.0"
  },
  	"8.4.0": {
  	node_abi: 57,
  	v8: "6.0"
  },
  	"8.5.0": {
  	node_abi: 57,
  	v8: "6.0"
  },
  	"8.6.0": {
  	node_abi: 57,
  	v8: "6.0"
  },
  	"8.7.0": {
  	node_abi: 57,
  	v8: "6.1"
  },
  	"8.8.0": {
  	node_abi: 57,
  	v8: "6.1"
  },
  	"8.8.1": {
  	node_abi: 57,
  	v8: "6.1"
  },
  	"8.9.0": {
  	node_abi: 57,
  	v8: "6.1"
  },
  	"8.9.1": {
  	node_abi: 57,
  	v8: "6.1"
  },
  	"8.9.2": {
  	node_abi: 57,
  	v8: "6.1"
  },
  	"8.9.3": {
  	node_abi: 57,
  	v8: "6.1"
  },
  	"8.9.4": {
  	node_abi: 57,
  	v8: "6.1"
  },
  	"8.10.0": {
  	node_abi: 57,
  	v8: "6.2"
  },
  	"8.11.0": {
  	node_abi: 57,
  	v8: "6.2"
  },
  	"8.11.1": {
  	node_abi: 57,
  	v8: "6.2"
  },
  	"8.11.2": {
  	node_abi: 57,
  	v8: "6.2"
  },
  	"8.11.3": {
  	node_abi: 57,
  	v8: "6.2"
  },
  	"9.0.0": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.1.0": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.2.0": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.2.1": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.3.0": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.4.0": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.5.0": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.6.0": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.6.1": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.7.0": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.7.1": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.8.0": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.9.0": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.10.0": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.10.1": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.11.0": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.11.1": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"9.11.2": {
  	node_abi: 59,
  	v8: "6.2"
  },
  	"10.0.0": {
  	node_abi: 64,
  	v8: "6.6"
  },
  	"10.1.0": {
  	node_abi: 64,
  	v8: "6.6"
  },
  	"10.2.0": {
  	node_abi: 64,
  	v8: "6.6"
  },
  	"10.2.1": {
  	node_abi: 64,
  	v8: "6.6"
  },
  	"10.3.0": {
  	node_abi: 64,
  	v8: "6.6"
  },
  	"10.4.0": {
  	node_abi: 64,
  	v8: "6.7"
  },
  	"10.4.1": {
  	node_abi: 64,
  	v8: "6.7"
  },
  	"10.5.0": {
  	node_abi: 64,
  	v8: "6.7"
  },
  	"10.6.0": {
  	node_abi: 64,
  	v8: "6.7"
  }
  };

  var abi_crosswalk$1 = /*#__PURE__*/Object.freeze({
    default: abi_crosswalk
  });

  var require$$0$2 = ( abi_crosswalk$1 && abi_crosswalk ) || abi_crosswalk$1;

  var versioning = createCommonjsModule(function (module, exports) {

  module.exports = exports;







  var abi_crosswalk;

  // This is used for unit testing to provide a fake
  // ABI crosswalk that emulates one that is not updated
  // for the current version
  if (process.env.NODE_PRE_GYP_ABI_CROSSWALK) {
      abi_crosswalk = commonjsRequire(process.env.NODE_PRE_GYP_ABI_CROSSWALK);
  } else {
      abi_crosswalk = require$$0$2;
  }

  var major_versions = {};
  Object.keys(abi_crosswalk).forEach(function(v) {
      var major = v.split('.')[0];
      if (!major_versions[major]) {
          major_versions[major] = v;
      }
  });

  function get_electron_abi(runtime, target_version) {
      if (!runtime) {
          throw new Error("get_electron_abi requires valid runtime arg");
      }
      if (typeof target_version === 'undefined') {
          // erroneous CLI call
          throw new Error("Empty target version is not supported if electron is the target.");
      }
      // Electron guarantees that patch version update won't break native modules.
      var sem_ver = semver.parse(target_version);
      return runtime + '-v' + sem_ver.major + '.' + sem_ver.minor;
  }
  module.exports.get_electron_abi = get_electron_abi;

  function get_node_webkit_abi(runtime, target_version) {
      if (!runtime) {
          throw new Error("get_node_webkit_abi requires valid runtime arg");
      }
      if (typeof target_version === 'undefined') {
          // erroneous CLI call
          throw new Error("Empty target version is not supported if node-webkit is the target.");
      }
      return runtime + '-v' + target_version;
  }
  module.exports.get_node_webkit_abi = get_node_webkit_abi;

  function get_node_abi(runtime, versions) {
      if (!runtime) {
          throw new Error("get_node_abi requires valid runtime arg");
      }
      if (!versions) {
          throw new Error("get_node_abi requires valid process.versions object");
      }
      var sem_ver = semver.parse(versions.node);
      if (sem_ver.major === 0 && sem_ver.minor % 2) { // odd series
          // https://github.com/mapbox/node-pre-gyp/issues/124
          return runtime+'-v'+versions.node;
      } else {
          // process.versions.modules added in >= v0.10.4 and v0.11.7
          // https://github.com/joyent/node/commit/ccabd4a6fa8a6eb79d29bc3bbe9fe2b6531c2d8e
          return versions.modules ? runtime+'-v' + (+versions.modules) :
              'v8-' + versions.v8.split('.').slice(0,2).join('.');
      }
  }
  module.exports.get_node_abi = get_node_abi;

  function get_runtime_abi(runtime, target_version) {
      if (!runtime) {
          throw new Error("get_runtime_abi requires valid runtime arg");
      }
      if (runtime === 'node-webkit') {
          return get_node_webkit_abi(runtime, target_version || process.versions['node-webkit']);
      } else if (runtime === 'electron') {
          return get_electron_abi(runtime, target_version || process.versions.electron);
      } else {
          if (runtime != 'node') {
              throw new Error("Unknown Runtime: '" + runtime + "'");
          }
          if (!target_version) {
              return get_node_abi(runtime,process.versions);
          } else {
              var cross_obj;
              // abi_crosswalk generated with ./scripts/abi_crosswalk.js
              if (abi_crosswalk[target_version]) {
                  cross_obj = abi_crosswalk[target_version];
              } else {
                  var target_parts = target_version.split('.').map(function(i) { return +i; });
                  if (target_parts.length != 3) { // parse failed
                      throw new Error("Unknown target version: " + target_version);
                  }
                  /*
                      The below code tries to infer the last known ABI compatible version
                      that we have recorded in the abi_crosswalk.json when an exact match
                      is not possible. The reasons for this to exist are complicated:

                         - We support passing --target to be able to allow developers to package binaries for versions of node
                           that are not the same one as they are running. This might also be used in combination with the
                           --target_arch or --target_platform flags to also package binaries for alternative platforms
                         - When --target is passed we can't therefore determine the ABI (process.versions.modules) from the node
                           version that is running in memory
                         - So, therefore node-pre-gyp keeps an "ABI crosswalk" (lib/util/abi_crosswalk.json) to be able to look
                           this info up for all versions
                         - But we cannot easily predict what the future ABI will be for released versions
                         - And node-pre-gyp needs to be a `bundledDependency` in apps that depend on it in order to work correctly
                           by being fully available at install time.
                         - So, the speed of node releases and the bundled nature of node-pre-gyp mean that a new node-pre-gyp release
                           need to happen for every node.js/io.js/node-webkit/nw.js/atom-shell/etc release that might come online if
                           you want the `--target` flag to keep working for the latest version
                         - Which is impractical ^^
                         - Hence the below code guesses about future ABI to make the need to update node-pre-gyp less demanding.

                      In practice then you can have a dependency of your app like `node-sqlite3` that bundles a `node-pre-gyp` that
                      only knows about node v0.10.33 in the `abi_crosswalk.json` but target node v0.10.34 (which is assumed to be
                      ABI compatible with v0.10.33).

                      TODO: use semver module instead of custom version parsing
                  */
                  var major = target_parts[0];
                  var minor = target_parts[1];
                  var patch = target_parts[2];
                  // io.js: yeah if node.js ever releases 1.x this will break
                  // but that is unlikely to happen: https://github.com/iojs/io.js/pull/253#issuecomment-69432616
                  if (major === 1) {
                      // look for last release that is the same major version
                      // e.g. we assume io.js 1.x is ABI compatible with >= 1.0.0
                      while (true) {
                          if (minor > 0) --minor;
                          if (patch > 0) --patch;
                          var new_iojs_target = '' + major + '.' + minor + '.' + patch;
                          if (abi_crosswalk[new_iojs_target]) {
                              cross_obj = abi_crosswalk[new_iojs_target];
                              console.log('Warning: node-pre-gyp could not find exact match for ' + target_version);
                              console.log('Warning: but node-pre-gyp successfully choose ' + new_iojs_target + ' as ABI compatible target');
                              break;
                          }
                          if (minor === 0 && patch === 0) {
                              break;
                          }
                      }
                  } else if (major >= 2) {
                      // look for last release that is the same major version
                      if (major_versions[major]) {
                          cross_obj = abi_crosswalk[major_versions[major]];
                          console.log('Warning: node-pre-gyp could not find exact match for ' + target_version);
                          console.log('Warning: but node-pre-gyp successfully choose ' + major_versions[major] + ' as ABI compatible target');
                      }
                  } else if (major === 0) { // node.js
                      if (target_parts[1] % 2 === 0) { // for stable/even node.js series
                          // look for the last release that is the same minor release
                          // e.g. we assume node 0.10.x is ABI compatible with >= 0.10.0
                          while (--patch > 0) {
                              var new_node_target = '' + major + '.' + minor + '.' + patch;
                              if (abi_crosswalk[new_node_target]) {
                                  cross_obj = abi_crosswalk[new_node_target];
                                  console.log('Warning: node-pre-gyp could not find exact match for ' + target_version);
                                  console.log('Warning: but node-pre-gyp successfully choose ' + new_node_target + ' as ABI compatible target');
                                  break;
                              }
                          }
                      }
                  }
              }
              if (!cross_obj) {
                  throw new Error("Unsupported target version: " + target_version);
              }
              // emulate process.versions
              var versions_obj = {
                  node: target_version,
                  v8: cross_obj.v8+'.0',
                  // abi_crosswalk uses 1 for node versions lacking process.versions.modules
                  // process.versions.modules added in >= v0.10.4 and v0.11.7
                  modules: cross_obj.node_abi > 1 ? cross_obj.node_abi : undefined
              };
              return get_node_abi(runtime, versions_obj);
          }
      }
  }
  module.exports.get_runtime_abi = get_runtime_abi;

  var required_parameters = [
      'module_name',
      'module_path',
      'host'
  ];

  function validate_config(package_json) {
      var msg = package_json.name + ' package.json is not node-pre-gyp ready:\n';
      var missing = [];
      if (!package_json.main) {
          missing.push('main');
      }
      if (!package_json.version) {
          missing.push('version');
      }
      if (!package_json.name) {
          missing.push('name');
      }
      if (!package_json.binary) {
          missing.push('binary');
      }
      var o = package_json.binary;
      required_parameters.forEach(function(p) {
          if (missing.indexOf('binary') > -1) {
              missing.pop('binary');
          }
          if (!o || o[p] === undefined || o[p] === "") {
              missing.push('binary.' + p);
          }
      });
      if (missing.length >= 1) {
          throw new Error(msg+"package.json must declare these properties: \n" + missing.join('\n'));
      }
      if (o) {
          // enforce https over http
          var protocol = url.parse(o.host).protocol;
          if (protocol === 'http:') {
              throw new Error("'host' protocol ("+protocol+") is invalid - only 'https:' is accepted");
          }
      }
      napi.validate_package_json(package_json);
  }

  module.exports.validate_config = validate_config;

  function eval_template(template,opts) {
      Object.keys(opts).forEach(function(key) {
          var pattern = '{'+key+'}';
          while (template.indexOf(pattern) > -1) {
              template = template.replace(pattern,opts[key]);
          }
      });
      return template;
  }

  // url.resolve needs single trailing slash
  // to behave correctly, otherwise a double slash
  // may end up in the url which breaks requests
  // and a lacking slash may not lead to proper joining
  function fix_slashes(pathname) {
      if (pathname.slice(-1) != '/') {
          return pathname + '/';
      }
      return pathname;
  }

  // remove double slashes
  // note: path.normalize will not work because
  // it will convert forward to back slashes
  function drop_double_slashes(pathname) {
      return pathname.replace(/\/\//g,'/');
  }

  function get_process_runtime(versions) {
      var runtime = 'node';
      if (versions['node-webkit']) {
          runtime = 'node-webkit';
      } else if (versions.electron) {
          runtime = 'electron';
      }
      return runtime;
  }

  module.exports.get_process_runtime = get_process_runtime;

  var default_package_name = '{module_name}-v{version}-{node_abi}-{platform}-{arch}.tar.gz';
  var default_remote_path = '';

  module.exports.evaluate = function(package_json,options,napi_build_version) {
      options = options || {};
      validate_config(package_json);
      var v = package_json.version;
      var module_version = semver.parse(v);
      var runtime = options.runtime || get_process_runtime(process.versions);
      var opts = {
          name: package_json.name,
          configuration: Boolean(options.debug) ? 'Debug' : 'Release',
          debug: options.debug,
          module_name: package_json.binary.module_name,
          version: module_version.version,
          prerelease: module_version.prerelease.length ? module_version.prerelease.join('.') : '',
          build: module_version.build.length ? module_version.build.join('.') : '',
          major: module_version.major,
          minor: module_version.minor,
          patch: module_version.patch,
          runtime: runtime,
          node_abi: get_runtime_abi(runtime,options.target),
          node_abi_napi: napi.get_napi_version() ? 'napi' : get_runtime_abi(runtime,options.target),
          napi_version: napi.get_napi_version(), // non-zero numeric, undefined if unsupported
          napi_build_version: napi_build_version, // undefined if not specified
          target: options.target || '',
          platform: options.target_platform || process.platform,
          target_platform: options.target_platform || process.platform,
          arch: options.target_arch || process.arch,
          target_arch: options.target_arch || process.arch,
          libc: options.target_libc || detectLibc.family || 'unknown',
          module_main: package_json.main,
          toolset : options.toolset || '' // address https://github.com/mapbox/node-pre-gyp/issues/119
      };
      // support host mirror with npm config `--{module_name}_binary_host_mirror`
      // e.g.: https://github.com/node-inspector/v8-profiler/blob/master/package.json#L25
      // > npm install v8-profiler --profiler_binary_host_mirror=https://npm.taobao.org/mirrors/node-inspector/
      var host = process.env['npm_config_' + opts.module_name + '_binary_host_mirror'] || package_json.binary.host;
      opts.host = fix_slashes(eval_template(host,opts));
      opts.module_path = eval_template(package_json.binary.module_path,opts);
      // now we resolve the module_path to ensure it is absolute so that binding.gyp variables work predictably
      if (options.module_root) {
          // resolve relative to known module root: works for pre-binding require
          opts.module_path = pathModule.join(options.module_root,opts.module_path);
      } else {
          // resolve relative to current working directory: works for node-pre-gyp commands
          opts.module_path = pathModule.resolve(opts.module_path);
      }
      opts.module = pathModule.join(opts.module_path,opts.module_name + '.node');
      opts.remote_path = package_json.binary.remote_path ? drop_double_slashes(fix_slashes(eval_template(package_json.binary.remote_path,opts))) : default_remote_path;
      var package_name = package_json.binary.package_name ? package_json.binary.package_name : default_package_name;
      opts.package_name = eval_template(package_name,opts);
      opts.staged_tarball = pathModule.join('build/stage',opts.remote_path,opts.package_name);
      opts.hosted_path = url.resolve(opts.host,opts.remote_path);
      opts.hosted_tarball = url.resolve(opts.hosted_path,opts.package_name);
      return opts;
  };
  });
  var versioning_1 = versioning.get_electron_abi;
  var versioning_2 = versioning.get_node_webkit_abi;
  var versioning_3 = versioning.get_node_abi;
  var versioning_4 = versioning.get_runtime_abi;
  var versioning_5 = versioning.validate_config;
  var versioning_6 = versioning.get_process_runtime;
  var versioning_7 = versioning.evaluate;

  var preBinding = createCommonjsModule(function (module, exports) {



  var existsSync = fs.existsSync || pathModule.existsSync;
  var path = pathModule;

  module.exports = exports;

  exports.usage = 'Finds the require path for the node-pre-gyp installed module';

  exports.validate = function(package_json) {
      versioning.validate_config(package_json);
  };

  exports.find = function(package_json_path,opts) {
     if (!existsSync(package_json_path)) {
          throw new Error("package.json does not exist at " + package_json_path);
     }
     var package_json = commonjsRequire(package_json_path);
     versioning.validate_config(package_json);
     var napi_build_version;
     if (napi.get_napi_build_versions (package_json)) {
         napi_build_version = napi.get_best_napi_build_version(package_json);
     }
     opts = opts || {};
     if (!opts.module_root) opts.module_root = path.dirname(package_json_path);
     var meta = versioning.evaluate(package_json,opts,napi_build_version);
     return meta.module;
  };
  });
  var preBinding_1 = preBinding.usage;
  var preBinding_2 = preBinding.validate;
  var preBinding_3 = preBinding.find;

  var binding_path =
      preBinding.find(pathModule.resolve(pathModule.join(__dirname, '../package.json')));
  var binding$1;
  try {
    binding$1 = commonjsRequire(binding_path);
  } catch (e) {
    let fs$$1 = fs;
    let searchPath = pathModule.dirname(pathModule.dirname(binding_path));
    let searchName = pathModule.basename(pathModule.dirname(binding_path));
    let foundNames;
    try {
      foundNames = fs$$1.readdirSync(searchPath);
    } catch (readDirError) {
      let message = `The gRPC binary module was not installed. This may be fixed by running "npm rebuild"
Original error: ${e.message}`;
      let error = new Error(message);
      error.code = e.code;
      throw error;
    }
    if (foundNames.indexOf(searchName) === -1) {
      let message = `Failed to load gRPC binary module because it was not installed for the current system
Expected directory: ${searchName}
Found: [${foundNames.join(', ')}]
This problem can often be fixed by running "npm rebuild" on the current system
Original error: ${e.message}`;
      let error = new Error(message);
      error.code = e.code;
      throw error;
    } else {
      throw e;
    }
  }

  var grpc_extension = binding$1;

  /**
   * Class for storing metadata. Keys are normalized to lowercase ASCII.
   * @memberof grpc
   * @constructor
   * @example
   * var metadata = new metadata_module.Metadata();
   * metadata.set('key1', 'value1');
   * metadata.add('key1', 'value2');
   * metadata.get('key1') // returns ['value1', 'value2']
   */
  function Metadata() {
    this._internal_repr = {};
  }

  function normalizeKey(key) {
    key = key.toLowerCase();
    if (grpc_extension.metadataKeyIsLegal(key)) {
      return key;
    } else {
      throw new Error('Metadata key"' + key + '" contains illegal characters');
    }
  }

  function validate(key, value) {
    if (grpc_extension.metadataKeyIsBinary(key)) {
      if (!(value instanceof Buffer)) {
        throw new Error('keys that end with \'-bin\' must have Buffer values');
      }
    } else {
      if (!lodash.isString(value)) {
        throw new Error(
            'keys that don\'t end with \'-bin\' must have String values');
      }
      if (!grpc_extension.metadataNonbinValueIsLegal(value)) {
        throw new Error('Metadata string value "' + value +
                        '" contains illegal characters');
      }
    }
  }

  /**
   * Sets the given value for the given key, replacing any other values associated
   * with that key. Normalizes the key.
   * @param {String} key The key to set
   * @param {String|Buffer} value The value to set. Must be a buffer if and only
   *     if the normalized key ends with '-bin'
   */
  Metadata.prototype.set = function(key, value) {
    key = normalizeKey(key);
    validate(key, value);
    this._internal_repr[key] = [value];
  };

  /**
   * Adds the given value for the given key. Normalizes the key.
   * @param {String} key The key to add to.
   * @param {String|Buffer} value The value to add. Must be a buffer if and only
   *     if the normalized key ends with '-bin'
   */
  Metadata.prototype.add = function(key, value) {
    key = normalizeKey(key);
    validate(key, value);
    if (!this._internal_repr[key]) {
      this._internal_repr[key] = [];
    }
    this._internal_repr[key].push(value);
  };

  /**
   * Remove the given key and any associated values. Normalizes the key.
   * @param {String} key The key to remove
   */
  Metadata.prototype.remove = function(key) {
    key = normalizeKey(key);
    if (Object.prototype.hasOwnProperty.call(this._internal_repr, key)) {
      delete this._internal_repr[key];
    }
  };

  /**
   * Gets a list of all values associated with the key. Normalizes the key.
   * @param {String} key The key to get
   * @return {Array.<String|Buffer>} The values associated with that key
   */
  Metadata.prototype.get = function(key) {
    key = normalizeKey(key);
    if (Object.prototype.hasOwnProperty.call(this._internal_repr, key)) {
      return this._internal_repr[key];
    } else {
      return [];
    }
  };

  /**
   * Get a map of each key to a single associated value. This reflects the most
   * common way that people will want to see metadata.
   * @return {Object.<String,String|Buffer>} A key/value mapping of the metadata
   */
  Metadata.prototype.getMap = function() {
    var result = {};
    lodash.forOwn(this._internal_repr, function(values, key) {
      if(values.length > 0) {
        result[key] = values[0];
      }
    });
    return result;
  };

  /**
   * Clone the metadata object.
   * @return {grpc.Metadata} The new cloned object
   */
  Metadata.prototype.clone = function() {
    var copy = new Metadata();
    lodash.forOwn(this._internal_repr, function(value, key) {
      copy._internal_repr[key] = lodash.clone(value);
    });
    return copy;
  };

  /**
   * Gets the metadata in the format used by interal code. Intended for internal
   * use only. API stability is not guaranteed.
   * @private
   * @return {Object.<String, Array.<String|Buffer>>} The metadata
   */
  Metadata.prototype._getCoreRepresentation = function() {
    return this._internal_repr;
  };

  /**
   * Creates a Metadata object from a metadata map in the internal format.
   * Intended for internal use only. API stability is not guaranteed.
   * @private
   * @param {Object.<String, Array.<String|Buffer>>} The metadata
   * @return {Metadata} The new Metadata object
   */
  Metadata._fromCoreRepresentation = function(metadata) {
    var newMetadata = new Metadata();
    if (metadata) {
      lodash.forOwn(metadata, function(value, key) {
        newMetadata._internal_repr[key] = lodash.clone(value);
      });
    }
    return newMetadata;
  };

  var metadata = Metadata;

  /**
   * @license
   * Copyright 2017 gRPC authors.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   */

  /* The comments about status codes are copied verbatim (with some formatting
   * modifications) from include/grpc/impl/codegen/status.h, for the purpose of
   * including them in generated documentation.
   */
  /**
   * Enum of status codes that gRPC can return
   * @memberof grpc
   * @alias grpc.status
   * @readonly
   * @enum {number}
   */
  var status = {
    /** Not an error; returned on success */
    OK: 0,
    /** The operation was cancelled (typically by the caller). */
    CANCELLED: 1,
    /**
     * Unknown error.  An example of where this error may be returned is
     * if a status value received from another address space belongs to
     * an error-space that is not known in this address space.  Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     */
    UNKNOWN: 2,
    /**
     * Client specified an invalid argument.  Note that this differs
     * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     */
    INVALID_ARGUMENT: 3,
    /**
     * Deadline expired before operation could complete.  For operations
     * that change the state of the system, this error may be returned
     * even if the operation has completed successfully.  For example, a
     * successful response from a server could have been delayed long
     * enough for the deadline to expire.
     */
    DEADLINE_EXCEEDED: 4,
    /** Some requested entity (e.g., file or directory) was not found. */
    NOT_FOUND: 5,
    /**
     * Some entity that we attempted to create (e.g., file or directory)
     * already exists.
     */
    ALREADY_EXISTS: 6,
    /**
     * The caller does not have permission to execute the specified
     * operation.  PERMISSION_DENIED must not be used for rejections
     * caused by exhausting some resource (use RESOURCE_EXHAUSTED
     * instead for those errors).  PERMISSION_DENIED must not be
     * used if the caller can not be identified (use UNAUTHENTICATED
     * instead for those errors).
     */
    PERMISSION_DENIED: 7,
    /**
     * Some resource has been exhausted, perhaps a per-user quota, or
     * perhaps the entire file system is out of space.
     */
    RESOURCE_EXHAUSTED: 8,
    /**
     * Operation was rejected because the system is not in a state
     * required for the operation's execution.  For example, directory
     * to be deleted may be non-empty, an rmdir operation is applied to
     * a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
     *
     *  - Use UNAVAILABLE if the client can retry just the failing call.
     *  - Use ABORTED if the client should retry at a higher-level
     *    (e.g., restarting a read-modify-write sequence).
     *  - Use FAILED_PRECONDITION if the client should not retry until
     *    the system state has been explicitly fixed.  E.g., if an "rmdir"
     *    fails because the directory is non-empty, FAILED_PRECONDITION
     *    should be returned since the client should not retry unless
     *    they have first fixed up the directory by deleting files from it.
     *  - Use FAILED_PRECONDITION if the client performs conditional
     *    REST Get/Update/Delete on a resource and the resource on the
     *    server does not match the condition. E.g., conflicting
     *    read-modify-write on the same resource.
     */
    FAILED_PRECONDITION: 9,
    /**
     * The operation was aborted, typically due to a concurrency issue
     * like sequencer check failures, transaction aborts, etc.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION,
     * ABORTED, and UNAVAILABLE.
     */
    ABORTED: 10,
    /**
     * Operation was attempted past the valid range.  E.g., seeking or
     * reading past end of file.
     *
     * Unlike INVALID_ARGUMENT, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate INVALID_ARGUMENT if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OUT_OF_RANGE if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FAILED_PRECONDITION and
     * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OUT_OF_RANGE error to detect when
     * they are done.
     */
    OUT_OF_RANGE: 11,
    /** Operation is not implemented or not supported/enabled in this service. */
    UNIMPLEMENTED: 12,
    /**
     * Internal errors.  Means some invariants expected by underlying
     * system has been broken.  If you see one of these errors,
     * something is very broken.
     */
    INTERNAL: 13,
    /**
     * The service is currently unavailable.  This is a most likely a
     * transient condition and may be corrected by retrying with
     * a backoff.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION,
     * ABORTED, and UNAVAILABLE.
     */
    UNAVAILABLE: 14,
    /** Unrecoverable data loss or corruption. */
    DATA_LOSS: 15,
    /**
     * The request does not have valid authentication credentials for the
     * operation.
     */
    UNAUTHENTICATED: 16
  };

  /* The comments about propagation bit flags are copied from
   * include/grpc/impl/codegen/propagation_bits.h for the purpose of including
   * them in generated documentation.
   */
  /**
   * Propagation flags: these can be bitwise or-ed to form the propagation option
   * for calls.
   *
   * Users are encouraged to write propagation masks as deltas from the default.
   * i.e. write `grpc.propagate.DEFAULTS & ~grpc.propagate.DEADLINE` to disable
   * deadline propagation.
   * @memberof grpc
   * @alias grpc.propagate
   * @enum {number}
   */
  var propagate = {
    DEADLINE: 1,
    CENSUS_STATS_CONTEXT: 2,
    CENSUS_TRACING_CONTEXT: 4,
    CANCELLATION: 8,
    DEFAULTS: 65535
  };

  /* Many of the following comments are copied from
   * include/grpc/impl/codegen/grpc_types.h
   */
  /**
   * Call error constants. Call errors almost always indicate bugs in the gRPC
   * library, and these error codes are mainly useful for finding those bugs.
   * @memberof grpc
   * @readonly
   * @enum {number}
   */
  const callError = {
    OK: 0,
    ERROR: 1,
    NOT_ON_SERVER: 2,
    NOT_ON_CLIENT: 3,
    ALREADY_INVOKED: 5,
    NOT_INVOKED: 6,
    ALREADY_FINISHED: 7,
    TOO_MANY_OPERATIONS: 8,
    INVALID_FLAGS: 9,
    INVALID_METADATA: 10,
    INVALID_MESSAGE: 11,
    NOT_SERVER_COMPLETION_QUEUE: 12,
    BATCH_TOO_BIG: 13,
    PAYLOAD_TYPE_MISMATCH: 14
  };

  var callError_1 = callError;

  /**
   * Write flags: these can be bitwise or-ed to form write options that modify
   * how data is written.
   * @memberof grpc
   * @alias grpc.writeFlags
   * @readonly
   * @enum {number}
   */
  var writeFlags = {
    /**
     * Hint that the write may be buffered and need not go out on the wire
     * immediately. GRPC is free to buffer the message until the next non-buffered
     * write, or until writes_done, but it need not buffer completely or at all.
     */
    BUFFER_HINT: 1,
    /**
     * Force compression to be disabled for a particular write
     */
    NO_COMPRESS: 2
  };

  /**
   * @memberof grpc
   * @alias grpc.logVerbosity
   * @readonly
   * @enum {number}
   */
  var logVerbosity = {
    DEBUG: 0,
    INFO: 1,
    ERROR: 2
  };

  /**
   * Method types: the supported RPC types
   * @memberof grpc
   * @alias grpc.methodTypes
   * @readonly
   * @enum {number}
   */
  var methodTypes = {
    UNARY: 0,
    CLIENT_STREAMING: 1,
    SERVER_STREAMING: 2,
    BIDI_STREAMING: 3
  };

  var constants = {
  	status: status,
  	propagate: propagate,
  	callError: callError_1,
  	writeFlags: writeFlags,
  	logVerbosity: logVerbosity,
  	methodTypes: methodTypes
  };

  var common$1 = createCommonjsModule(function (module, exports) {




  /**
   * Wrap a function to pass null-like values through without calling it. If no
   * function is given, just uses the identity.
   * @private
   * @param {?function} func The function to wrap
   * @return {function} The wrapped function
   */
  exports.wrapIgnoreNull = function wrapIgnoreNull(func) {
    if (!func) {
      return lodash.identity;
    }
    return function(arg) {
      if (arg === null || arg === undefined) {
        return null;
      }
      return func(arg);
    };
  };

  /**
   * The logger object for the gRPC module. Defaults to console.
   * @private
   */
  exports.logger = console;

  /**
   * The current logging verbosity. 0 corresponds to logging everything
   * @private
   */
  exports.logVerbosity = 0;

  /**
   * Log a message if the severity is at least as high as the current verbosity
   * @private
   * @param {Number} severity A value of the grpc.logVerbosity map
   * @param {String} message The message to log
   */
  exports.log = function log(severity, message) {
    if (severity >= exports.logVerbosity) {
      exports.logger.error(message);
    }
  };

  /**
   * Default options for loading proto files into gRPC
   * @alias grpc~defaultLoadOptions
   */
  exports.defaultGrpcOptions = {
    convertFieldsToCamelCase: false,
    binaryAsBase64: false,
    longsAsStrings: true,
    enumsAsStrings: true,
    deprecatedArgumentOrder: false
  };

  /**
   * Create an Error object from a status object
   * @param {grpc~StatusObject} status The status object
   * @return {Error} The resulting Error
   */
  exports.createStatusError = function(status) {
    let statusName = lodash.invert(constants.status)[status.code];
    let message = `${status.code} ${statusName}: ${status.details}`;
    let error = new Error(message);
    error.code = status.code;
    error.metadata = status.metadata;
    error.details = status.details;
    return error;
  };

  /**
   * Get a method's type from its definition
   * @param {grpc~MethodDefinition} method_definition
   * @return {number}
   */
  exports.getMethodType = function(method_definition) {
    if (method_definition.requestStream) {
      if (method_definition.responseStream) {
        return constants.methodTypes.BIDI_STREAMING;
      } else {
        return constants.methodTypes.CLIENT_STREAMING;
      }
    } else {
      if (method_definition.responseStream) {
        return constants.methodTypes.SERVER_STREAMING;
      } else {
        return constants.methodTypes.UNARY;
      }
    }
  };

  // JSDoc definitions that are used in multiple other modules

  /**
   * Represents the status of a completed request. If `code` is
   * {@link grpc.status}.OK, then the request has completed successfully.
   * Otherwise, the request has failed, `details` will contain a description of
   * the error. Either way, `metadata` contains the trailing response metadata
   * sent by the server when it finishes processing the call.
   * @typedef {object} grpc~StatusObject
   * @property {number} code The error code, a key of {@link grpc.status}
   * @property {string} details Human-readable description of the status
   * @property {grpc.Metadata} metadata Trailing metadata sent with the status,
   *     if applicable
   */

  /**
   * Describes how a request has failed. The member `message` will be the same as
   * `details` in {@link grpc~StatusObject}, and `code` and `metadata` are the
   * same as in that object.
   * @typedef {Error} grpc~ServiceError
   * @property {number} code The error code, a key of {@link grpc.status} that is
   *     not `grpc.status.OK`
   * @property {grpc.Metadata} metadata Trailing metadata sent with the status,
   *     if applicable
   */

  /**
   * The EventEmitter class in the event standard module
   * @external EventEmitter
   * @see https://nodejs.org/api/events.html#events_class_eventemitter
   */

  /**
   * The Readable class in the stream standard module
   * @external Readable
   * @see https://nodejs.org/api/stream.html#stream_readable_streams
   */

  /**
   * The Writable class in the stream standard module
   * @external Writable
   * @see https://nodejs.org/api/stream.html#stream_writable_streams
   */

  /**
   * The Duplex class in the stream standard module
   * @external Duplex
   * @see https://nodejs.org/api/stream.html#stream_class_stream_duplex
   */

  /**
   * A serialization function
   * @callback grpc~serialize
   * @param {*} value The value to serialize
   * @return {Buffer} The value serialized as a byte sequence
   */

  /**
   * A deserialization function
   * @callback grpc~deserialize
   * @param {Buffer} data The byte sequence to deserialize
   * @return {*} The data deserialized as a value
   */

  /**
   * The deadline of an operation. If it is a date, the deadline is reached at
   * the date and time specified. If it is a finite number, it is treated as
   * a number of milliseconds since the Unix Epoch. If it is Infinity, the
   * deadline will never be reached. If it is -Infinity, the deadline has already
   * passed.
   * @typedef {(number|Date)} grpc~Deadline
   */

  /**
   * An object that completely defines a service method signature.
   * @typedef {Object} grpc~MethodDefinition
   * @property {string} path The method's URL path
   * @property {boolean} requestStream Indicates whether the method accepts
   *     a stream of requests
   * @property {boolean} responseStream Indicates whether the method returns
   *     a stream of responses
   * @property {grpc~serialize} requestSerialize Serialization
   *     function for request values
   * @property {grpc~serialize} responseSerialize Serialization
   *     function for response values
   * @property {grpc~deserialize} requestDeserialize Deserialization
   *     function for request data
   * @property {grpc~deserialize} responseDeserialize Deserialization
   *     function for repsonse data
   */

  /**
   * @function MetadataListener
   * @param {grpc.Metadata} metadata The response metadata.
   * @param {function} next Passes metadata to the next interceptor.
   */

  /**
   * @function MessageListener
   * @param {jspb.Message} message The response message.
   * @param {function} next Passes a message to the next interceptor.
   */

  /**
   * @function StatusListener
   * @param {grpc~StatusObject} status The response status.
   * @param {function} next Passes a status to the next interceptor.
   */

  /**
   * A set of interceptor functions triggered by responses
   * @typedef {object} grpc~Listener
   * @property {MetadataListener=} onReceiveMetadata A function triggered by
   *     response metadata.
   * @property {MessageListener=} onReceiveMessage A function triggered by a
   *     response message.
   * @property {StatusListener=} onReceiveStatus A function triggered by a
   *     response status.
   */

  /**
   * @function MetadataRequester
   * @param {grpc.Metadata} metadata The request metadata.
   * @param {grpc~Listener} listener A listener wired to the previous layers
   *     in the interceptor stack.
   * @param {function} next Passes metadata and a listener to the next
   *      interceptor.
   */

  /**
   * @function MessageRequester
   * @param {jspb.Message} message The request message.
   * @param {function} next Passes a message to the next interceptor.
   */

  /**
   * @function CloseRequester
   * @param {function} next Calls the next interceptor.
   */

  /**
   * @function CancelRequester
   * @param {function} next Calls the next interceptor.
   */

  /**
   * @function GetPeerRequester
   * @param {function} next Calls the next interceptor.
   * @return {string}
   */

  /**
   * @typedef {object} grpc~Requester
   * @param {MetadataRequester=} start A function triggered when the call begins.
   * @param {MessageRequester=} sendMessage A function triggered by the request
   *     message.
   * @param {CloseRequester=} halfClose A function triggered when the client
   *     closes the call.
   * @param {CancelRequester=} cancel A function triggered when the call is
   *     cancelled.
   * @param {GetPeerRequester=} getPeer A function triggered when the endpoint is
   *     requested.
   */

  /**
   * An object that completely defines a service.
   * @typedef {Object.<string, grpc~MethodDefinition>} grpc~ServiceDefinition
   */

  /**
   * An object that defines a package hierarchy with multiple services
   * @typedef {Object.<string, grpc~ServiceDefinition>} grpc~PackageDefinition
   */

  /**
   * A function for dynamically assigning an interceptor to a call.
   * @function InterceptorProvider
   * @param {grpc~MethodDefinition} method_definition The method to provide
   *     an interceptor for.
   * @return {Interceptor|null} The interceptor to provide or nothing
   */

  /**
   * A function which can modify call options and produce methods to intercept
   * RPC operations.
   * @function Interceptor
   * @param {object} options The grpc call options
   * @param {NextCall} nextCall
   * @return {InterceptingCall}
   */

  /**
   * A function which produces the next InterceptingCall.
   * @function NextCall
   * @param {object} options The grpc call options
   * @return {InterceptingCall|null}
   */
  });
  var common_1 = common$1.wrapIgnoreNull;
  var common_2 = common$1.logger;
  var common_3 = common$1.logVerbosity;
  var common_4 = common$1.log;
  var common_5 = common$1.defaultGrpcOptions;
  var common_6 = common$1.createStatusError;
  var common_7 = common$1.getMethodType;

  var methodTypes$1 = constants.methodTypes;
  var EventEmitter$1 = require$$0$1.EventEmitter;

  /**
   * A custom error thrown when interceptor configuration fails.
   * @param {string} message The error message
   * @param {object=} extra
   * @constructor
   */
  var InterceptorConfigurationError =
    function InterceptorConfigurationError(message, extra) {
      Error.captureStackTrace(this, this.constructor);
      this.name = this.constructor.name;
      this.message = message;
      this.extra = extra;
    };

  require$$1$1.inherits(InterceptorConfigurationError, Error);

  /**
   * A builder for gRPC status objects.
   * @constructor
   */
  function StatusBuilder() {
    this.code = null;
    this.details = null;
    this.metadata = null;
  }

  /**
   * Adds a status code to the builder.
   * @param {number} code The status code.
   * @return {StatusBuilder}
   */
  StatusBuilder.prototype.withCode = function(code) {
    this.code = code;
    return this;
  };

  /**
   * Adds details to the builder.
   * @param {string} details A status message.
   * @return {StatusBuilder}
   */
  StatusBuilder.prototype.withDetails = function(details) {
    this.details = details;
    return this;
  };

  /**
   * Adds metadata to the builder.
   * @param {Metadata} metadata The gRPC status metadata.
   * @return {StatusBuilder}
   */
  StatusBuilder.prototype.withMetadata = function(metadata$$1) {
    this.metadata = metadata$$1;
    return this;
  };

  /**
   * Builds the status object.
   * @return {grpc~StatusObject} A gRPC status.
   */
  StatusBuilder.prototype.build = function() {
    var status = {};
    if (this.code !== undefined) {
      status.code = this.code;
    }
    if (this.details) {
      status.details = this.details;
    }
    if (this.metadata) {
      status.metadata = this.metadata;
    }
    return status;
  };

  /**
   * A builder for listener interceptors.
   * @constructor
   */
  function ListenerBuilder() {
    this.metadata = null;
    this.message = null;
    this.status = null;
  }

  /**
   * Adds an onReceiveMetadata method to the builder.
   * @param {MetadataListener} on_receive_metadata A listener method for
   * receiving metadata.
   * @return {ListenerBuilder}
   */
  ListenerBuilder.prototype.withOnReceiveMetadata =
    function(on_receive_metadata) {
      this.metadata = on_receive_metadata;
      return this;
    };

  /**
   * Adds an onReceiveMessage method to the builder.
   * @param {MessageListener} on_receive_message A listener method for receiving
   * messages.
   * @return {ListenerBuilder}
   */
  ListenerBuilder.prototype.withOnReceiveMessage = function(on_receive_message) {
    this.message = on_receive_message;
    return this;
  };

  /**
   * Adds an onReceiveStatus method to the builder.
   * @param {StatusListener} on_receive_status A listener method for receiving
   * status.
   * @return {ListenerBuilder}
   */
  ListenerBuilder.prototype.withOnReceiveStatus = function(on_receive_status) {
    this.status = on_receive_status;
    return this;
  };

  /**
   * Builds the call listener.
   * @return {grpc~Listener}
   */
  ListenerBuilder.prototype.build = function() {
    var self = this;
    var listener = {};
    listener.onReceiveMetadata = self.metadata;
    listener.onReceiveMessage = self.message;
    listener.onReceiveStatus = self.status;
    return listener;
  };

  /**
   * A builder for the outbound methods of an interceptor.
   * @constructor
   */
  function RequesterBuilder() {
    this.start = null;
    this.message = null;
    this.half_close = null;
    this.cancel = null;
  }

  /**
   * Add a metadata requester to the builder.
   * @param {MetadataRequester} start A requester method for handling metadata.
   * @return {RequesterBuilder}
   */
  RequesterBuilder.prototype.withStart = function(start) {
    this.start = start;
    return this;
  };

  /**
   * Add a message requester to the builder.
   * @param {MessageRequester} send_message A requester method for handling
   * messages.
   * @return {RequesterBuilder}
   */
  RequesterBuilder.prototype.withSendMessage = function(send_message) {
    this.message = send_message;
    return this;
  };

  /**
   * Add a close requester to the builder.
   * @param {CloseRequester} half_close A requester method for handling client
   * close.
   * @return {RequesterBuilder}
   */
  RequesterBuilder.prototype.withHalfClose = function(half_close) {
    this.half_close = half_close;
    return this;
  };

  /**
   * Add a cancel requester to the builder.
   * @param {CancelRequester} cancel A requester method for handling `cancel`
   * @return {RequesterBuilder}
   */
  RequesterBuilder.prototype.withCancel = function(cancel) {
    this.cancel = cancel;
    return this;
  };

  /**
   * Builds the requester's interceptor methods.
   * @return {grpc~Requester}
   */
  RequesterBuilder.prototype.build = function() {
    var requester = {};
    requester.start = this.start;
    requester.sendMessage = this.message;
    requester.halfClose = this.half_close;
    requester.cancel = this.cancel;
    return requester;
  };

  /**
   * Transforms a list of interceptor providers into interceptors.
   * @param {InterceptorProvider[]} providers
   * @param {grpc~MethodDefinition} method_definition
   * @return {null|Interceptor[]}
   */
  var resolveInterceptorProviders = function(providers, method_definition) {
    if (!lodash.isArray(providers)) {
      return null;
    }
    var interceptors = [];
    for (var i = 0; i < providers.length; i++) {
      var provider = providers[i];
      var interceptor = provider(method_definition);
      if (interceptor) {
        interceptors.push(interceptor);
      }
    }
    return interceptors;
  };

  /**
   * A chainable gRPC call proxy which will delegate to an optional requester
   * object. By default, interceptor methods will chain to next_call. If a
   * requester is provided which implements an interceptor method, that
   * requester method will be executed as part of the chain.
   * @param {InterceptingCall|null} next_call The next call in the chain
   * @param {grpc~Requester=} requester Interceptor methods to handle request
   * operations.
   * @constructor
   */
  function InterceptingCall(next_call, requester) {
    this.next_call = next_call;
    this.requester = requester;
  }

  /**
   * Get the next method in the chain or a no-op function if we are at the end
   * of the chain
   * @param {string} method_name
   * @return {function} The next method in the chain
   * @private
   */
  InterceptingCall.prototype._getNextCall = function(method_name) {
    return this.next_call ?
      this.next_call[method_name].bind(this.next_call) :
      function(){};
  };

  /**
   * Call the next method in the chain. This will either be on the next
   * InterceptingCall (next_call), or the requester if the requester
   * implements the method.
   * @param {string} method_name The name of the interceptor method
   * @param {array=} args Payload arguments for the operation
   * @param {function=} next The next InterceptingCall's method
   * @return {null}
   * @private
   */
  InterceptingCall.prototype._callNext = function(method_name, args, next) {
    var args_array = args || [];
    var next_call = next ? next : this._getNextCall(method_name);
    if (this.requester && this.requester[method_name]) {
      // Avoid using expensive `apply` calls
      var num_args = args_array.length;
      switch (num_args) {
        case 0:
          return this.requester[method_name](next_call);
        case 1:
          return this.requester[method_name](args_array[0], next_call);
        case 2:
          return this.requester[method_name](args_array[0], args_array[1],
                                             next_call);
      }
    } else {
      return next_call(args_array[0], args_array[1]);
    }
  };

  /**
   * Starts a call through the outbound interceptor chain and adds an element to
   * the reciprocal inbound listener chain.
   * @param {grpc.Metadata} metadata The outgoing metadata.
   * @param {grpc~Listener} listener An intercepting listener for inbound
   * operations.
   */
  InterceptingCall.prototype.start = function(metadata$$1, listener) {
    var self = this;

    // If the listener provided is an InterceptingListener, use it. Otherwise, we
    // must be at the end of the listener chain, and any listener operations
    // should be terminated in an EndListener.
    var next_listener = _getInterceptingListener(listener, new EndListener());

    // Build the next method in the interceptor chain
    var next = function(metadata$$1, current_listener) {
      // If there is a next call in the chain, run it. Otherwise do nothing.
      if (self.next_call) {
        // Wire together any listener provided with the next listener
        var listener = _getInterceptingListener(current_listener, next_listener);
        self.next_call.start(metadata$$1, listener);
      }
    };
    this._callNext('start', [metadata$$1, next_listener], next);
  };

  /**
   * Pass a message through the interceptor chain.
   * @param {jspb.Message} message
   */
  InterceptingCall.prototype.sendMessage = function(message) {
    this._callNext('sendMessage', [message]);
  };

  /**
   * Run a close operation through the interceptor chain
   */
  InterceptingCall.prototype.halfClose = function() {
    this._callNext('halfClose');
  };

  /**
   * Run a cancel operation through the interceptor chain
   */
  InterceptingCall.prototype.cancel = function() {
    this._callNext('cancel');
  };

  /**
   * Run a cancelWithStatus operation through the interceptor chain.
   * @param {grpc~StatusObject} status
   * @param {string} message
   */
  InterceptingCall.prototype.cancelWithStatus = function(status, message) {
    this._callNext('cancelWithStatus', [status, message]);
  };

  /**
   * Pass a getPeer call down to the base gRPC call (should not be intercepted)
   * @return {object}
   */
  InterceptingCall.prototype.getPeer = function() {
    return this._callNext('getPeer');
  };

  /**
   * For streaming calls, we need to transparently pass the stream's context
   * through the interceptor chain. Passes the context between InterceptingCalls
   * but hides it from any requester implementations.
   * @param {object} context Carries objects needed for streaming operations.
   * @param {jspb.Message} message The message to send.
   */
  InterceptingCall.prototype.sendMessageWithContext = function(context, message) {
    var next = this.next_call ?
      this.next_call.sendMessageWithContext.bind(this.next_call, context) :
      context;
    this._callNext('sendMessage', [message], next);
  };

  /**
   * For receiving streaming messages, we need to seed the base interceptor with
   * the streaming context to create a RECV_MESSAGE batch.
   * @param {object} context Carries objects needed for streaming operations
   */
  InterceptingCall.prototype.recvMessageWithContext = function(context) {
    this._callNext('recvMessageWithContext', [context]);
  };

  /**
   * A chain-able listener object which will delegate to a custom listener when
   * appropriate.
   * @param {InterceptingListener|null} next_listener The next
   * InterceptingListener in the chain
   * @param {grpc~Listener=} delegate A custom listener object which may implement
   * specific operations
   * @constructor
   */
  function InterceptingListener(next_listener, delegate) {
    this.delegate = delegate || {};
    this.next_listener = next_listener;
  }

  /**
   * Get the next method in the chain or a no-op function if we are at the end
   * of the chain.
   * @param {string} method_name The name of the listener method.
   * @return {function} The next method in the chain
   * @private
   */
  InterceptingListener.prototype._getNextListener = function(method_name) {
    return this.next_listener ?
      this.next_listener[method_name].bind(this.next_listener) :
      function(){};
  };

  /**
   * Call the next method in the chain. This will either be on the next
   * InterceptingListener (next_listener), or the requester if the requester
   * implements the method.
   * @param {string} method_name The name of the interceptor method
   * @param {array=} args Payload arguments for the operation
   * @param {function=} next The next InterceptingListener's method
   * @return {null}
   * @private
   */
  InterceptingListener.prototype._callNext = function(method_name, args, next) {
    var args_array = args || [];
    var next_listener = next ? next : this._getNextListener(method_name);
    if (this.delegate && this.delegate[method_name]) {
      // Avoid using expensive `apply` calls
      var num_args = args_array.length;
      switch (num_args) {
        case 0:
          return this.delegate[method_name](next_listener);
        case 1:
          return this.delegate[method_name](args_array[0], next_listener);
        case 2:
          return this.delegate[method_name](args_array[0], args_array[1],
                                            next_listener);
      }
    } else {
      return next_listener(args_array[0], args_array[1]);
    }
  };
  /**
   * Inbound metadata receiver.
   * @param {Metadata} metadata
   */
  InterceptingListener.prototype.onReceiveMetadata = function(metadata$$1) {
    this._callNext('onReceiveMetadata', [metadata$$1]);
  };

  /**
   * Inbound message receiver.
   * @param {jspb.Message} message
   */
  InterceptingListener.prototype.onReceiveMessage = function(message) {
    this._callNext('onReceiveMessage', [message]);
  };

  /**
   * When intercepting streaming message, we need to pass the streaming context
   * transparently along the chain. Hides the context from the delegate listener
   * methods.
   * @param {object} context Carries objects needed for streaming operations.
   * @param {jspb.Message} message The message received.
   */
  InterceptingListener.prototype.recvMessageWithContext = function(context,
                                                                   message) {
    var fallback = this.next_listener.recvMessageWithContext;
    var next_method = this.next_listener ?
      fallback.bind(this.next_listener, context) :
      context;
    if (this.delegate.onReceiveMessage) {
      this.delegate.onReceiveMessage(message, next_method, context);
    } else {
      next_method(message);
    }
  };

  /**
   * Inbound status receiver.
   * @param {grpc~StatusObject} status
   */
  InterceptingListener.prototype.onReceiveStatus = function(status) {
    this._callNext('onReceiveStatus', [status]);
  };

  /**
   * A dead-end listener used to terminate a call chain. Used when an interceptor
   * creates a branch chain, when the branch returns the listener chain will
   * terminate here.
   * @constructor
   */
  function EndListener() {}
  EndListener.prototype.onReceiveMetadata = function(){};
  EndListener.prototype.onReceiveMessage = function(){};
  EndListener.prototype.onReceiveStatus = function(){};
  EndListener.prototype.recvMessageWithContext = function(){};

  /**
   * Get a call object built with the provided options.
   * @param {grpc.Channel} channel
   * @param {string} path
   * @param {grpc.Client~CallOptions=} options Options object.
   */
  function getCall(channel, path, options) {
    var deadline;
    var host;
    var parent;
    var propagate_flags;
    var credentials;
    if (options) {
      deadline = options.deadline;
      host = options.host;
      parent = lodash.get(options, 'parent.call');
      propagate_flags = options.propagate_flags;
      credentials = options.credentials;
    }
    if (deadline === undefined) {
      deadline = Infinity;
    }
    var call = new grpc_extension.Call(channel, path, deadline, host,
                             parent, propagate_flags);
    if (credentials) {
      call.setCredentials(credentials);
    }
    return call;
  }

  var OP_DEPENDENCIES = {
    [grpc_extension.opType.SEND_MESSAGE]: [grpc_extension.opType.SEND_INITIAL_METADATA],
    [grpc_extension.opType.SEND_CLOSE_FROM_CLIENT]: [grpc_extension.opType.SEND_MESSAGE],
    [grpc_extension.opType.RECV_MESSAGE]: [grpc_extension.opType.SEND_INITIAL_METADATA]
  };

  /**
   * Produces a callback triggered by streaming response messages.
   * @private
   * @param {EventEmitter} emitter
   * @param {grpc.internal~Call} call
   * @param {function} get_listener Returns a grpc~Listener.
   * @param {grpc~deserialize} deserialize
   * @return {Function}
   */
  function _getStreamReadCallback(emitter, call, get_listener, deserialize) {
    return function (err, response) {
      if (err) {
        // Something has gone wrong. Stop reading and wait for status
        emitter.finished = true;
        emitter._readsDone();
        return;
      }
      var data = response.read;
      var deserialized;
      try {
        deserialized = deserialize(data);
      } catch (e) {
        emitter._readsDone({
          code: constants.status.INTERNAL,
          details: 'Failed to parse server response'
        });
        return;
      }
      if (data === null) {
        emitter._readsDone();
        return;
      }
      var listener = get_listener();
      var context = {
        call: call,
        listener: listener
      };
      listener.recvMessageWithContext(context, deserialized);
    };
  }

  /**
   * Tests whether a batch can be started.
   * @private
   * @param {number[]} batch_ops The operations in the batch we are checking.
   * @param {number[]} completed_ops Previously completed operations.
   * @return {boolean}
   */
  function _areBatchRequirementsMet(batch_ops, completed_ops) {
    var dependencies = lodash.flatMap(batch_ops, function(op) {
      return OP_DEPENDENCIES[op] || [];
    });
    for (var i = 0; i < dependencies.length; i++) {
      var required_dep = dependencies[i];
      if (batch_ops.indexOf(required_dep) === -1 &&
          completed_ops.indexOf(required_dep) === -1) {
        return false;
      }
    }
    return true;
  }

  /**
   * Enforces the order of operations for synchronous requests. If a batch's
   * operations cannot be started because required operations have not started
   * yet, the batch is deferred until requirements are met.
   * @private
   * @param {grpc.Client~Call} call
   * @param {object} batch
   * @param {object} batch_state
   * @param {number[]} [batch_state.completed_ops] The ops already sent.
   * @param {object} [batch_state.deferred_batches] Batches to be sent after
   *     their dependencies are fulfilled.
   * @param {function} callback
   * @return {object}
   */
  function _startBatchIfReady(call, batch, batch_state, callback) {
    var completed_ops = batch_state.completed_ops;
    var deferred_batches = batch_state.deferred_batches;
    var batch_ops = lodash.map(lodash.keys(batch), Number);
    if (_areBatchRequirementsMet(batch_ops, completed_ops)) {
      // Dependencies are met, start the batch and any deferred batches whose
      // dependencies are met as a result.
      call.startBatch(batch, callback);
      completed_ops = lodash.union(completed_ops, batch_ops);
      deferred_batches = lodash.flatMap(deferred_batches, function(deferred_batch) {
        var deferred_batch_ops = lodash.map(lodash.keys(deferred_batch), Number);
        if (_areBatchRequirementsMet(deferred_batch_ops, completed_ops)) {
          call.startBatch(deferred_batch.batch, deferred_batch.callback);
          return [];
        }
        return [deferred_batch];
      });
    } else {
      // Dependencies are not met, defer the batch
      deferred_batches = deferred_batches.concat({
        batch: batch,
        callback: callback
      });
    }
    return {
      completed_ops: completed_ops,
      deferred_batches: deferred_batches
    };
  }

  /**
   * Produces an interceptor which will start gRPC batches for unary calls.
   * @private
   * @param {grpc~MethodDefinition} method_definition
   * @param {grpc.Channel} channel
   * @param {EventEmitter} emitter
   * @param {function} callback
   * @return {Interceptor}
   */
  function _getUnaryInterceptor(method_definition, channel, emitter, callback) {
    var serialize = method_definition.requestSerialize;
    var deserialize = method_definition.responseDeserialize;
    return function (options) {
      var call = getCall(channel, method_definition.path, options);
      var first_listener;
      var final_requester = {};
      var batch_state = {
        completed_ops: [],
        deferred_batches: []
      };
      final_requester.start = function (metadata$$1, listener) {
        var batch = {
          [grpc_extension.opType.SEND_INITIAL_METADATA]:
            metadata$$1._getCoreRepresentation(),
        };
        first_listener = listener;
        batch_state = _startBatchIfReady(call, batch, batch_state,
                                         function() {});
      };
      final_requester.sendMessage = function (message) {
        var batch = {
          [grpc_extension.opType.SEND_MESSAGE]: serialize(message),
        };
        batch_state = _startBatchIfReady(call, batch, batch_state,
                                           function() {});
      };
      final_requester.halfClose = function () {
        var batch = {
          [grpc_extension.opType.SEND_CLOSE_FROM_CLIENT]: true,
          [grpc_extension.opType.RECV_INITIAL_METADATA]: true,
          [grpc_extension.opType.RECV_MESSAGE]: true,
          [grpc_extension.opType.RECV_STATUS_ON_CLIENT]: true
        };
        var callback = function (err, response) {
          response.status.metadata = metadata._fromCoreRepresentation(
            response.status.metadata);
          var status = response.status;
          var deserialized;
          if (status.code === constants.status.OK) {
            if (err) {
              // Got a batch error, but OK status. Something went wrong
              callback(err);
              return;
            } else {
              try {
                deserialized = deserialize(response.read);
              } catch (e) {
                /* Change status to indicate bad server response. This
                 * will result in passing an error to the callback */
                status = {
                  code: constants.status.INTERNAL,
                  details: 'Failed to parse server response'
                };
              }
            }
          }
          response.metadata =
            metadata._fromCoreRepresentation(response.metadata);
          first_listener.onReceiveMetadata(response.metadata);
          first_listener.onReceiveMessage(deserialized);
          first_listener.onReceiveStatus(status);
        };
        batch_state = _startBatchIfReady(call, batch, batch_state, callback);
      };
      final_requester.cancel = function () {
        call.cancel();
      };
      final_requester.getPeer = function () {
        return call.getPeer();
      };
      return new InterceptingCall(null, final_requester);
    };
  }

  /**
   * Produces an interceptor which will start gRPC batches for client streaming
   * calls.
   * @private
   * @param {grpc~MethodDefinition} method_definition
   * @param {grpc.Channel} channel
   * @param {EventEmitter} emitter
   * @param {function} callback
   * @return {Interceptor}
   */
  function _getClientStreamingInterceptor(method_definition, channel, emitter,
    callback) {
    var serialize = common$1.wrapIgnoreNull(method_definition.requestSerialize);
    var deserialize = method_definition.responseDeserialize;
    return function (options) {
      var call = getCall(channel, method_definition.path, options);
      var final_requester = {};
      final_requester.start = function (metadata$$1, listener) {
        var metadata_batch = {
          [grpc_extension.opType.SEND_INITIAL_METADATA]: metadata$$1._getCoreRepresentation(),
          [grpc_extension.opType.RECV_INITIAL_METADATA]: true
        };
        call.startBatch(metadata_batch, function (err, response) {
          if (err) {
            // The call has stopped for some reason. A non-OK status will arrive
            // in the other batch.
            return;
          }
          response.metadata = metadata._fromCoreRepresentation(response.metadata);
          listener.onReceiveMetadata(response.metadata);
        });
        var recv_batch = {};
        recv_batch[grpc_extension.opType.RECV_MESSAGE] = true;
        recv_batch[grpc_extension.opType.RECV_STATUS_ON_CLIENT] = true;
        call.startBatch(recv_batch, function (err, response) {
          response.status.metadata = metadata._fromCoreRepresentation(
            response.status.metadata);
          var status = response.status;
          var deserialized;
          if (status.code === constants.status.OK) {
            if (err) {
              // Got a batch error, but OK status. Something went wrong
              callback(err);
              return;
            } else {
              try {
                deserialized = deserialize(response.read);
              } catch (e) {
                /* Change status to indicate bad server response. This will result
                 * in passing an error to the callback */
                status = {
                  code: constants.status.INTERNAL,
                  details: 'Failed to parse server response'
                };
              }
            }
          }
          listener.onReceiveMessage(deserialized);
          listener.onReceiveStatus(status);
        });
      };
      final_requester.sendMessage = function (chunk, context) {
        var message;
        var callback = (context && context.callback) ?
          context.callback :
          function () { };
        var encoding = (context && context.encoding) ?
          context.encoding :
          '';
        try {
          message = serialize(chunk);
        } catch (e) {
          /* Sending this error to the server and emitting it immediately on the
             client may put the call in a slightly weird state on the client side,
             but passing an object that causes a serialization failure is a misuse
             of the API anyway, so that's OK. The primary purpose here is to give
             the programmer a useful error and to stop the stream properly */
          call.cancelWithStatus(constants.status.INTERNAL,
            'Serialization failure');
          callback(e);
          return;
        }
        if (lodash.isFinite(encoding)) {
          /* Attach the encoding if it is a finite number. This is the closest we
           * can get to checking that it is valid flags */
          message.grpcWriteFlags = encoding;
        }
        var batch = {
          [grpc_extension.opType.SEND_MESSAGE]: message
        };
        call.startBatch(batch, function (err, event) {
          callback(err, event);
        });
      };
      final_requester.halfClose = function () {
        var batch = {
          [grpc_extension.opType.SEND_CLOSE_FROM_CLIENT]: true
        };
        call.startBatch(batch, function () { });
      };
      final_requester.cancel = function () {
        call.cancel();
      };
      final_requester.getPeer = function() {
        return call.getPeer();
      };
      return new InterceptingCall(null, final_requester);
    };
  }

  /**
   * Produces an interceptor which will start gRPC batches for server streaming
   * calls.
   * @private
   * @param {grpc~MethodDefinition} method_definition
   * @param {grpc.Channel} channel
   * @param {EventEmitter} emitter
   * @return {Interceptor}
   */
  function _getServerStreamingInterceptor(method_definition, channel, emitter) {
    var deserialize = common$1.wrapIgnoreNull(
      method_definition.responseDeserialize);
    var serialize = method_definition.requestSerialize;
    return function (options) {
      var batch_state = {
        completed_ops: [],
        deferred_batches: []
      };
      var call = getCall(channel, method_definition.path, options);
      var final_requester = {};
      var first_listener;
      var get_listener = function() {
        return first_listener;
      };
      final_requester.start = function(metadata$$1, listener) {
        first_listener = listener;
        metadata$$1 = metadata$$1.clone();
        var metadata_batch = {
          [grpc_extension.opType.SEND_INITIAL_METADATA]: metadata$$1._getCoreRepresentation(),
          [grpc_extension.opType.RECV_INITIAL_METADATA]: true
        };
        var callback = function(err, response) {
          if (err) {
            // The call has stopped for some reason. A non-OK status will arrive
            // in the other batch.
            return;
          }
          first_listener.onReceiveMetadata(
            metadata._fromCoreRepresentation(response.metadata));
        };
        batch_state = _startBatchIfReady(call, metadata_batch, batch_state,
                                         callback);
        var status_batch = {
          [grpc_extension.opType.RECV_STATUS_ON_CLIENT]: true
        };
        call.startBatch(status_batch, function(err, response) {
          if (err) {
            emitter.emit('error', err);
            return;
          }
          response.status.metadata = metadata._fromCoreRepresentation(
            response.status.metadata);
          first_listener.onReceiveStatus(response.status);
        });
      };
      final_requester.sendMessage = function(argument) {
        var message = serialize(argument);
        if (options) {
          message.grpcWriteFlags = options.flags;
        }
        var send_batch = {
          [grpc_extension.opType.SEND_MESSAGE]: message
        };
        var callback = function(err, response) {
          if (err) {
            // The call has stopped for some reason. A non-OK status will arrive
            // in the other batch.
            return;
          }
        };
        batch_state = _startBatchIfReady(call, send_batch, batch_state, callback);
      };
      final_requester.halfClose = function() {
        var batch = {
          [grpc_extension.opType.SEND_CLOSE_FROM_CLIENT]: true
        };
        batch_state = _startBatchIfReady(call, batch, batch_state, function() {});
      };
      final_requester.recvMessageWithContext = function(context) {
        var recv_batch = {
          [grpc_extension.opType.RECV_MESSAGE]: true
        };
        var callback = _getStreamReadCallback(emitter, call,
          get_listener, deserialize);
        batch_state = _startBatchIfReady(call, recv_batch, batch_state, callback);
      };
      final_requester.cancel = function() {
        call.cancel();
      };
      final_requester.getPeer = function() {
        return call.getPeer();
      };
      return new InterceptingCall(null, final_requester);
    };
  }

  /**
   * Produces an interceptor which will start gRPC batches for bi-directional
   * calls.
   * @private
   * @param {grpc~MethodDefinition} method_definition
   * @param {grpc.Channel} channel
   * @param {EventEmitter} emitter
   * @return {Interceptor}
   */
  function _getBidiStreamingInterceptor(method_definition, channel, emitter) {
    var serialize = common$1.wrapIgnoreNull(method_definition.requestSerialize);
    var deserialize = common$1.wrapIgnoreNull(
      method_definition.responseDeserialize);
    return function (options) {
      var first_listener;
      var get_listener = function() {
        return first_listener;
      };
      var call = getCall(channel, method_definition.path, options);
      var final_requester = {};
      final_requester.start = function (metadata$$1, listener) {
        var metadata_batch = {
          [grpc_extension.opType.SEND_INITIAL_METADATA]: metadata$$1._getCoreRepresentation(),
          [grpc_extension.opType.RECV_INITIAL_METADATA]: true
        };
        first_listener = listener;
        call.startBatch(metadata_batch, function (err, response) {
          if (err) {
            // The call has stopped for some reason. A non-OK status will arrive
            // in the other batch.
            return;
          }
          response.metadata = metadata._fromCoreRepresentation(response.metadata);
          listener.onReceiveMetadata(response.metadata);
        });
        var recv_batch = {};
        recv_batch[grpc_extension.opType.RECV_STATUS_ON_CLIENT] = true;
        call.startBatch(recv_batch, function (err, response) {
          var status = response.status;
          if (status.code === constants.status.OK) {
            if (err) {
              emitter.emit('error', err);
              return;
            }
          }
          response.status.metadata = metadata._fromCoreRepresentation(
            response.status.metadata);
          listener.onReceiveStatus(status);
        });
      };
      final_requester.sendMessage = function (chunk, context) {
        var message;
        var callback = (context && context.callback) ?
          context.callback :
          function() {};
        var encoding = (context && context.encoding) ?
          context.encoding :
          '';
        try {
          message = serialize(chunk);
        } catch (e) {
          /* Sending this error to the server and emitting it immediately on the
             client may put the call in a slightly weird state on the client side,
             but passing an object that causes a serialization failure is a misuse
             of the API anyway, so that's OK. The primary purpose here is to give
             the programmer a useful error and to stop the stream properly */
          call.cancelWithStatus(constants.status.INTERNAL,
            'Serialization failure');
          callback(e);
          return;
        }
        if (lodash.isFinite(encoding)) {
          /* Attach the encoding if it is a finite number. This is the closest we
           * can get to checking that it is valid flags */
          message.grpcWriteFlags = encoding;
        }
        var batch = {
          [grpc_extension.opType.SEND_MESSAGE]: message
        };
        call.startBatch(batch, function (err, event) {
          callback(err, event);
        });
      };
      final_requester.halfClose = function () {
        var batch = {
          [grpc_extension.opType.SEND_CLOSE_FROM_CLIENT]: true
        };
        call.startBatch(batch, function () { });
      };
      final_requester.recvMessageWithContext = function(context) {
        var recv_batch = {
          [grpc_extension.opType.RECV_MESSAGE]: true
        };
        call.startBatch(recv_batch, _getStreamReadCallback(emitter, call,
          get_listener, deserialize));
      };
      final_requester.cancel = function() {
        call.cancel();
      };
      final_requester.getPeer = function() {
        return call.getPeer();
      };
      return new InterceptingCall(null, final_requester);
    };
  }

  /**
   * Produces a listener for responding to callers of unary RPCs.
   * @private
   * @param {grpc~MethodDefinition} method_definition
   * @param {EventEmitter} emitter
   * @param {function} callback
   * @return {grpc~Listener}
   */
  function _getUnaryListener(method_definition, emitter, callback) {
    var resultMessage;
    return {
      onReceiveMetadata: function (metadata$$1) {
        emitter.emit('metadata', metadata$$1);
      },
      onReceiveMessage: function (message) {
        resultMessage = message;
      },
      onReceiveStatus: function (status) {
        if (status.code !== constants.status.OK) {
          var error = common$1.createStatusError(status);
          callback(error);
        } else {
          callback(null, resultMessage);
        }
        emitter.emit('status', status);
      }
    };
  }

  /**
   * Produces a listener for responding to callers of client streaming RPCs.
   * @private
   * @param {grpc~MethodDefinition} method_definition
   * @param {EventEmitter} emitter
   * @param {function} callback
   * @return {grpc~Listener}
   */
  function _getClientStreamingListener(method_definition, emitter, callback) {
    var resultMessage;
    return {
      onReceiveMetadata: function (metadata$$1) {
        emitter.emit('metadata', metadata$$1);
      },
      onReceiveMessage: function (message) {
        resultMessage = message;
      },
      onReceiveStatus: function (status) {
        if (status.code !== constants.status.OK) {
          var error = common$1.createStatusError(status);
          callback(error);
        } else {
          callback(null, resultMessage);
        }
        emitter.emit('status', status);
      }
    };
  }

  /**
   * Produces a listener for responding to callers of server streaming RPCs.
   * @private
   * @param {grpc~MethodDefinition} method_definition
   * @param {EventEmitter} emitter
   * @return {grpc~Listener}
   */
  function _getServerStreamingListener(method_definition, emitter) {
    var deserialize = common$1.wrapIgnoreNull(
      method_definition.responseDeserialize);
    return {
      onReceiveMetadata: function (metadata$$1) {
        emitter.emit('metadata', metadata$$1);
      },
      onReceiveMessage: function(message, next, context) {
        if (emitter.push(message) && message !== null) {
          var call = context.call;
          var get_listener = function() {
            return context.listener;
          };
          var read_batch = {};
          read_batch[grpc_extension.opType.RECV_MESSAGE] = true;
          call.startBatch(read_batch, _getStreamReadCallback(emitter, call,
            get_listener, deserialize));
        } else {
          emitter.reading = false;
        }
      },
      onReceiveStatus: function (status) {
        emitter._receiveStatus(status);
      }
    };
  }

  /**
   * Produces a listener for responding to callers of bi-directional RPCs.
   * @private
   * @param {grpc~MethodDefinition} method_definition
   * @param {EventEmitter} emitter
   * @return {grpc~Listener}
   */
  function _getBidiStreamingListener(method_definition, emitter) {
    var deserialize = common$1.wrapIgnoreNull(
      method_definition.responseDeserialize);
    return {
      onReceiveMetadata: function (metadata$$1) {
        emitter.emit('metadata', metadata$$1);
      },
      onReceiveMessage: function(message, next, context) {
        if (emitter.push(message) && message !== null) {
          var call = context.call;
          var get_listener = function() {
            return context.listener;
          };
          var read_batch = {};
          read_batch[grpc_extension.opType.RECV_MESSAGE] = true;
          call.startBatch(read_batch, _getStreamReadCallback(emitter, call,
            get_listener, deserialize));
        } else {
          emitter.reading = false;
        }
      },
      onReceiveStatus: function (status) {
        emitter._receiveStatus(status);
      }
    };
  }

  var interceptorGenerators = {
    [methodTypes$1.UNARY]: _getUnaryInterceptor,
    [methodTypes$1.CLIENT_STREAMING]: _getClientStreamingInterceptor,
    [methodTypes$1.SERVER_STREAMING]: _getServerStreamingInterceptor,
    [methodTypes$1.BIDI_STREAMING]: _getBidiStreamingInterceptor
  };

  var listenerGenerators = {
    [methodTypes$1.UNARY]: _getUnaryListener,
    [methodTypes$1.CLIENT_STREAMING]: _getClientStreamingListener,
    [methodTypes$1.SERVER_STREAMING]: _getServerStreamingListener,
    [methodTypes$1.BIDI_STREAMING]: _getBidiStreamingListener
  };

  /**
   * Creates the last listener in an interceptor stack.
   * @param {grpc~MethodDefinition} method_definition
   * @param {EventEmitter} emitter
   * @param {function=} callback
   * @return {grpc~Listener}
   */
  function getLastListener(method_definition, emitter, callback) {
    if (emitter instanceof Function) {
      callback = emitter;
      callback = function() {};
    }
    if (!(callback instanceof Function)) {
      callback = function() {};
    }
    if (!((emitter instanceof EventEmitter$1) &&
         (callback instanceof Function))) {
      throw new Error('Argument mismatch in getLastListener');
    }
    var method_type = common$1.getMethodType(method_definition);
    var generator = listenerGenerators[method_type];
    return generator(method_definition, emitter, callback);
  }

  /**
   *
   * @param {grpc~MethodDefinition} method_definition
   * @param {grpc.Client~CallOptions} options
   * @param {Interceptor[]} interceptors
   * @param {grpc.Channel} channel
   * @param {function|EventEmitter} responder
   */
  function getInterceptingCall(method_definition, options,
                               interceptors, channel, responder) {
    var last_interceptor = _getLastInterceptor(method_definition, channel,
                                              responder);
    var all_interceptors = interceptors.concat(last_interceptor);
    return _buildChain(all_interceptors, options);
  }

  /**
   * Creates the last interceptor in an interceptor stack.
   * @private
   * @param {grpc~MethodDefinition} method_definition
   * @param {grpc.Channel} channel
   * @param {function|EventEmitter} responder
   * @return {Interceptor}
   */
  function _getLastInterceptor(method_definition, channel, responder) {
    var callback = (responder instanceof Function) ? responder : function() {};
    var emitter = (responder instanceof EventEmitter$1) ? responder :
                                                        new EventEmitter$1();
    var method_type = common$1.getMethodType(method_definition);
    var generator = interceptorGenerators[method_type];
    return generator(method_definition, channel, emitter, callback);
  }

  /**
   * Chain a list of interceptors together and return the first InterceptingCall.
   * @private
   * @param {Interceptor[]} interceptors An interceptor stack.
   * @param {grpc.Client~CallOptions} options Call options.
   * @return {InterceptingCall}
   */
  function _buildChain(interceptors, options) {
    var next = function(interceptors) {
      if (interceptors.length === 0) {
        return function (options) {};
      }
      var head_interceptor = interceptors[0];
      var rest_interceptors = interceptors.slice(1);
      return function (options) {
        return head_interceptor(options, next(rest_interceptors));
      };
    };
    var chain = next(interceptors)(options);
    return new InterceptingCall(chain);
  }

  /**
   * Wraps a plain listener object in an InterceptingListener if it isn't an
   * InterceptingListener already.
   * @param {InterceptingListener|object|null} current_listener
   * @param {InterceptingListener|EndListener} next_listener
   * @return {InterceptingListener|null}
   * @private
   */
  function _getInterceptingListener(current_listener, next_listener) {
    if (!_isInterceptingListener(current_listener)) {
      return new InterceptingListener(next_listener, current_listener);
    }
    return current_listener;
  }

  /**
   * Test if the listener exists and is an InterceptingListener.
   * @param listener
   * @return {boolean}
   * @private
   */
  function _isInterceptingListener(listener) {
    return listener && listener.constructor.name === 'InterceptingListener';
  }

  var resolveInterceptorProviders_1 = resolveInterceptorProviders;

  var InterceptingCall_1 = InterceptingCall;
  var ListenerBuilder_1 = ListenerBuilder;
  var RequesterBuilder_1 = RequesterBuilder;
  var StatusBuilder_1 = StatusBuilder;

  var InterceptorConfigurationError_1 = InterceptorConfigurationError;

  var getInterceptingCall_1 = getInterceptingCall;
  var getLastListener_1 = getLastListener;

  var client_interceptors = {
  	resolveInterceptorProviders: resolveInterceptorProviders_1,
  	InterceptingCall: InterceptingCall_1,
  	ListenerBuilder: ListenerBuilder_1,
  	RequesterBuilder: RequesterBuilder_1,
  	StatusBuilder: StatusBuilder_1,
  	InterceptorConfigurationError: InterceptorConfigurationError_1,
  	getInterceptingCall: getInterceptingCall_1,
  	getLastListener: getLastListener_1
  };

  var _from = "grpc@^1.13.1";
  var _id = "grpc@1.13.1";
  var _inBundle = false;
  var _integrity = "sha512-yl0xChnlUISTefOPU2NQ1cYPh5m/DTatEUV6jdRyQPE9NCrtPq7Gn6J2alMTglN7ufYbJapOd00dvhGurHH6HQ==";
  var _location = "/grpc";
  var _phantomChildren = {
  };
  var _requested = {
  	type: "range",
  	registry: true,
  	raw: "grpc@^1.13.1",
  	name: "grpc",
  	escapedName: "grpc",
  	rawSpec: "^1.13.1",
  	saveSpec: null,
  	fetchSpec: "^1.13.1"
  };
  var _requiredBy = [
  	"/"
  ];
  var _resolved = "https://registry.npmjs.org/grpc/-/grpc-1.13.1.tgz";
  var _shasum = "9b5c49d4e56309b6e3bd631f8948b7b298d88790";
  var _spec = "grpc@^1.13.1";
  var _where = "/Users/paulgrau/projects/aergo/herajs";
  var author = {
  	name: "Google Inc."
  };
  var binary = {
  	module_name: "grpc_node",
  	module_path: "src/node/extension_binary/{node_abi}-{platform}-{arch}-{libc}",
  	host: "https://storage.googleapis.com/",
  	remote_path: "grpc-precompiled-binaries/node/{name}/v{version}",
  	package_name: "{node_abi}-{platform}-{arch}-{libc}.tar.gz"
  };
  var bugs = {
  	url: "https://github.com/grpc/grpc-node/issues"
  };
  var bundleDependencies = [
  	"node-pre-gyp"
  ];
  var contributors = [
  	{
  		name: "Michael Lumish",
  		email: "mlumish@google.com"
  	}
  ];
  var dependencies = {
  	lodash: "^4.17.5",
  	nan: "^2.0.0",
  	"node-pre-gyp": "^0.10.0",
  	protobufjs: "^5.0.3"
  };
  var deprecated = false;
  var description = "gRPC Library for Node";
  var devDependencies = {
  	async: "^2.0.1",
  	"body-parser": "^1.15.2",
  	"electron-mocha": "^3.1.1",
  	express: "^4.14.0",
  	"google-auth-library": "^0.9.2",
  	"google-protobuf": "^3.0.0",
  	istanbul: "^0.4.4",
  	lodash: "^4.17.4",
  	minimist: "^1.1.0",
  	"poisson-process": "^0.2.1"
  };
  var directories = {
  	lib: "src"
  };
  var engines = {
  	node: ">=4"
  };
  var files = [
  	"LICENSE",
  	"README.md",
  	"deps/grpc/etc/",
  	"index.js",
  	"index.d.ts",
  	"src/*.js",
  	"ext/*.{cc,h}",
  	"deps/grpc/include/grpc/**/*.h",
  	"deps/grpc/src/core/**/*.{c,cc,h}",
  	"deps/grpc/src/boringssl/*.{c,cc,h}",
  	"deps/grpc/third_party/nanopb/*.{c,cc,h}",
  	"deps/grpc/third_party/zlib/**/*.{c,cc,h}",
  	"deps/grpc/third_party/boringssl/crypto/**/*.{c,cc,h}",
  	"deps/grpc/third_party/boringssl/include/**/*.{c,cc,h}",
  	"deps/grpc/third_party/boringssl/ssl/**/*.{c,cc,h}",
  	"deps/grpc/third_party/boringssl/third_party/**/*.{c,h}",
  	"deps/grpc/third_party/abseil-cpp/absl/**/*.{h,hh}",
  	"binding.gyp"
  ];
  var homepage = "https://grpc.io/";
  var jshintConfig = {
  	bitwise: true,
  	curly: true,
  	eqeqeq: true,
  	esnext: true,
  	freeze: true,
  	immed: true,
  	indent: 2,
  	latedef: "nofunc",
  	maxlen: 80,
  	mocha: true,
  	newcap: true,
  	node: true,
  	noarg: true,
  	quotmark: "single",
  	strict: true,
  	trailing: true,
  	undef: true,
  	unused: "vars"
  };
  var license = "Apache-2.0";
  var main = "index.js";
  var name = "grpc";
  var repository = {
  	type: "git",
  	url: "git+https://github.com/grpc/grpc-node.git"
  };
  var scripts = {
  	build: "node-pre-gyp build",
  	coverage: "istanbul cover ./node_modules/.bin/_mocha test",
  	"electron-build": "node-pre-gyp configure build --runtime=electron --disturl=https://atom.io/download/atom-shell",
  	install: "node-pre-gyp install --fallback-to-build --library=static_library",
  	prepack: "git submodule update --init --recursive && npm install"
  };
  var typings = "index.d.ts";
  var version$3 = "1.13.1";
  var _package = {
  	_from: _from,
  	_id: _id,
  	_inBundle: _inBundle,
  	_integrity: _integrity,
  	_location: _location,
  	_phantomChildren: _phantomChildren,
  	_requested: _requested,
  	_requiredBy: _requiredBy,
  	_resolved: _resolved,
  	_shasum: _shasum,
  	_spec: _spec,
  	_where: _where,
  	author: author,
  	binary: binary,
  	bugs: bugs,
  	bundleDependencies: bundleDependencies,
  	contributors: contributors,
  	dependencies: dependencies,
  	deprecated: deprecated,
  	description: description,
  	devDependencies: devDependencies,
  	directories: directories,
  	engines: engines,
  	files: files,
  	homepage: homepage,
  	jshintConfig: jshintConfig,
  	license: license,
  	main: main,
  	name: name,
  	repository: repository,
  	scripts: scripts,
  	typings: typings,
  	version: version$3
  };

  var _package$1 = /*#__PURE__*/Object.freeze({
    _from: _from,
    _id: _id,
    _inBundle: _inBundle,
    _integrity: _integrity,
    _location: _location,
    _phantomChildren: _phantomChildren,
    _requested: _requested,
    _requiredBy: _requiredBy,
    _resolved: _resolved,
    _shasum: _shasum,
    _spec: _spec,
    _where: _where,
    author: author,
    binary: binary,
    bugs: bugs,
    bundleDependencies: bundleDependencies,
    contributors: contributors,
    dependencies: dependencies,
    deprecated: deprecated,
    description: description,
    devDependencies: devDependencies,
    directories: directories,
    engines: engines,
    files: files,
    homepage: homepage,
    jshintConfig: jshintConfig,
    license: license,
    main: main,
    name: name,
    repository: repository,
    scripts: scripts,
    typings: typings,
    version: version$3,
    default: _package
  });

  var require$$1$2 = ( _package$1 && _package ) || _package$1;

  var EventEmitter$2 = require$$0$1.EventEmitter;



  var Readable$1 = require$$1.Readable;
  var Writable$1 = require$$1.Writable;
  var Duplex$1 = require$$1.Duplex;
  var methodTypes$2 = constants.methodTypes;

  var version$4 = require$$1$2.version;

  /**
   * Initial response metadata sent by the server when it starts processing the
   * call
   * @event grpc~ClientUnaryCall#metadata
   * @type {grpc.Metadata}
   */

  /**
   * Status of the call when it has completed.
   * @event grpc~ClientUnaryCall#status
   * @type grpc~StatusObject
   */

  require$$1$1.inherits(ClientUnaryCall, EventEmitter$2);

  /**
   * An EventEmitter. Used for unary calls.
   * @constructor grpc~ClientUnaryCall
   * @extends external:EventEmitter
   * @param {grpc.internal~Call} call The call object associated with the request
   */
  function ClientUnaryCall(call) {
    EventEmitter$2.call(this);
    this.call = call;
  }

  require$$1$1.inherits(ClientWritableStream, Writable$1);

  /**
   * A stream that the client can write to. Used for calls that are streaming from
   * the client side.
   * @constructor grpc~ClientWritableStream
   * @extends external:Writable
   * @borrows grpc~ClientUnaryCall#cancel as grpc~ClientWritableStream#cancel
   * @borrows grpc~ClientUnaryCall#getPeer as grpc~ClientWritableStream#getPeer
   * @borrows grpc~ClientUnaryCall#event:metadata as
   *     grpc~ClientWritableStream#metadata
   * @borrows grpc~ClientUnaryCall#event:status as
   *     grpc~ClientWritableStream#status
   * @param {InterceptingCall} call Exposes gRPC request operations, processed by
   *     an interceptor stack.
   */
  function ClientWritableStream(call) {
    Writable$1.call(this, {objectMode: true});
    this.call = call;
    var self = this;
    this.on('finish', function() {
      self.call.halfClose();
    });
  }

  /**
   * Write a message to the request stream. If serializing the argument fails,
   * the call will be cancelled and the stream will end with an error.
   * @name grpc~ClientWritableStream#write
   * @kind function
   * @override
   * @param {*} message The message to write. Must be a valid argument to the
   *     serialize function of the corresponding method
   * @param {grpc.writeFlags} flags Flags to modify how the message is written
   * @param {Function} callback Callback for when this chunk of data is flushed
   * @return {boolean} As defined for [Writable]{@link external:Writable}
   */

  /**
   * Attempt to write the given chunk. Calls the callback when done. This is an
   * implementation of a method needed for implementing stream.Writable.
   * @private
   * @param {*} chunk The chunk to write
   * @param {grpc.writeFlags} encoding Used to pass write flags
   * @param {function(Error=)} callback Called when the write is complete
   */
  function _write(chunk, encoding, callback) {
    /* jshint validthis: true */
    var self = this;
    if (this.writeFailed) {
      /* Once a write fails, just call the callback immediately to let the caller
         flush any pending writes. */
      setImmediate(callback);
      return;
    }
    var outerCallback = function(err, event) {
      if (err) {
        /* Assume that the call is complete and that writing failed because a
           status was received. In that case, set a flag to discard all future
           writes */
        self.writeFailed = true;
      }
      callback();
    };
    var context = {
      encoding: encoding,
      callback: outerCallback
    };
    this.call.sendMessageWithContext(context, chunk);
  }

  ClientWritableStream.prototype._write = _write;

  require$$1$1.inherits(ClientReadableStream, Readable$1);

  /**
   * A stream that the client can read from. Used for calls that are streaming
   * from the server side.
   * @constructor grpc~ClientReadableStream
   * @extends external:Readable
   * @borrows grpc~ClientUnaryCall#cancel as grpc~ClientReadableStream#cancel
   * @borrows grpc~ClientUnaryCall#getPeer as grpc~ClientReadableStream#getPeer
   * @borrows grpc~ClientUnaryCall#event:metadata as
   *     grpc~ClientReadableStream#metadata
   * @borrows grpc~ClientUnaryCall#event:status as
   *     grpc~ClientReadableStream#status
   * @param {InterceptingCall} call Exposes gRPC request operations, processed by
   *     an interceptor stack.
   */
  function ClientReadableStream(call) {
    Readable$1.call(this, {objectMode: true});
    this.call = call;
    this.finished = false;
    this.reading = false;
    /* Status generated from reading messages from the server. Overrides the
     * status from the server if not OK */
    this.read_status = null;
    /* Status received from the server. */
    this.received_status = null;
  }

  /**
   * Called when all messages from the server have been processed. The status
   * parameter indicates that the call should end with that status. status
   * defaults to OK if not provided.
   * @param {Object!} status The status that the call should end with
   * @private
   */
  function _readsDone(status) {
    /* jshint validthis: true */
    if (!status) {
      status = {code: constants.status.OK, details: 'OK'};
    }
    if (status.code !== constants.status.OK) {
      this.call.cancelWithStatus(status.code, status.details);
    }
    this.finished = true;
    this.read_status = status;
    this._emitStatusIfDone();
  }

  ClientReadableStream.prototype._readsDone = _readsDone;

  /**
   * Called to indicate that we have received a status from the server.
   * @private
   */
  function _receiveStatus(status) {
    /* jshint validthis: true */
    this.received_status = status;
    this._emitStatusIfDone();
  }

  ClientReadableStream.prototype._receiveStatus = _receiveStatus;

  /**
   * If we have both processed all incoming messages and received the status from
   * the server, emit the status. Otherwise, do nothing.
   * @private
   */
  function _emitStatusIfDone() {
    /* jshint validthis: true */
    var status;
    if (this.read_status && this.received_status) {
      if (this.read_status.code !== constants.status.OK) {
        status = this.read_status;
      } else {
        status = this.received_status;
      }
      if (status.code === constants.status.OK) {
        this.push(null);
      } else {
        var error = common$1.createStatusError(status);
        this.emit('error', error);
      }
      this.emit('status', status);
    }
  }

  ClientReadableStream.prototype._emitStatusIfDone = _emitStatusIfDone;

  /**
   * Read the next object from the stream.
   * @private
   * @param {*} size Ignored because we use objectMode=true
   */
  function _read(size) {
    /* jshint validthis: true */
    if (this.finished) {
      this.push(null);
    } else {
      if (!this.reading) {
        this.reading = true;
        var context = {
          stream: this
        };
        this.call.recvMessageWithContext(context);
      }
    }
  }

  ClientReadableStream.prototype._read = _read;

  require$$1$1.inherits(ClientDuplexStream, Duplex$1);

  /**
   * A stream that the client can read from or write to. Used for calls with
   * duplex streaming.
   * @constructor grpc~ClientDuplexStream
   * @extends external:Duplex
   * @borrows grpc~ClientUnaryCall#cancel as grpc~ClientDuplexStream#cancel
   * @borrows grpc~ClientUnaryCall#getPeer as grpc~ClientDuplexStream#getPeer
   * @borrows grpc~ClientWritableStream#write as grpc~ClientDuplexStream#write
   * @borrows grpc~ClientUnaryCall#event:metadata as
   *     grpc~ClientDuplexStream#metadata
   * @borrows grpc~ClientUnaryCall#event:status as
   *     grpc~ClientDuplexStream#status
   * @param {InterceptingCall} call Exposes gRPC request operations, processed by
   *     an interceptor stack.
   */
  function ClientDuplexStream(call) {
    Duplex$1.call(this, {objectMode: true});
    this.call = call;
    /* Status generated from reading messages from the server. Overrides the
     * status from the server if not OK */
    this.read_status = null;
    /* Status received from the server. */
    this.received_status = null;
    var self = this;
    this.on('finish', function() {
      self.call.halfClose();
    });
  }

  ClientDuplexStream.prototype._readsDone = _readsDone;
  ClientDuplexStream.prototype._receiveStatus = _receiveStatus;
  ClientDuplexStream.prototype._emitStatusIfDone = _emitStatusIfDone;
  ClientDuplexStream.prototype._read = _read;
  ClientDuplexStream.prototype._write = _write;

  /**
   * Cancel the ongoing call. Results in the call ending with a CANCELLED status,
   * unless it has already ended with some other status.
   * @alias grpc~ClientUnaryCall#cancel
   */
  function cancel() {
    /* jshint validthis: true */
    this.call.cancel();
  }

  ClientUnaryCall.prototype.cancel = cancel;
  ClientReadableStream.prototype.cancel = cancel;
  ClientWritableStream.prototype.cancel = cancel;
  ClientDuplexStream.prototype.cancel = cancel;

  /**
   * Get the endpoint this call/stream is connected to.
   * @return {string} The URI of the endpoint
   * @alias grpc~ClientUnaryCall#getPeer
   */
  function getPeer() {
    /* jshint validthis: true */
    return this.call.getPeer();
  }

  ClientUnaryCall.prototype.getPeer = getPeer;
  ClientReadableStream.prototype.getPeer = getPeer;
  ClientWritableStream.prototype.getPeer = getPeer;
  ClientDuplexStream.prototype.getPeer = getPeer;

  /**
   * Any client call type
   * @typedef {(grpc~ClientUnaryCall|grpc~ClientReadableStream|
   *            grpc~ClientWritableStream|grpc~ClientDuplexStream)}
   *     grpc.Client~Call
   */

  /**
   * Options that can be set on a call.
   * @typedef {Object} grpc.Client~CallOptions
   * @property {grpc~Deadline} deadline The deadline for the entire call to
   *     complete.
   * @property {string} host Server hostname to set on the call. Only meaningful
   *     if different from the server address used to construct the client.
   * @property {grpc.Client~Call} parent Parent call. Used in servers when
   *     making a call as part of the process of handling a call. Used to
   *     propagate some information automatically, as specified by
   *     propagate_flags.
   * @property {number} propagate_flags Indicates which properties of a parent
   *     call should propagate to this call. Bitwise combination of flags in
   *     {@link grpc.propagate}.
   * @property {grpc.credentials~CallCredentials} credentials The credentials that
   *     should be used to make this particular call.
   */

  /**
   * A generic gRPC client. Primarily useful as a base class for generated clients
   * @memberof grpc
   * @constructor
   * @param {string} address Server address to connect to
   * @param {grpc.credentials~ChannelCredentials} credentials Credentials to use
   *     to connect to the server
   * @param {Object} options Options to apply to channel creation
   */
  function Client(address, credentials, options) {
    var self = this;
    if (!options) {
      options = {};
    }
    /* Append the grpc-node user agent string after the application user agent
     * string, and put the combination at the beginning of the user agent string
     */
    if (options['grpc.primary_user_agent']) {
      options['grpc.primary_user_agent'] += ' ';
    } else {
      options['grpc.primary_user_agent'] = '';
    }
    options['grpc.primary_user_agent'] += 'grpc-node/' + version$4;

    // Resolve interceptor options and assign interceptors to each method
    if (lodash.isArray(options.interceptor_providers) && lodash.isArray(options.interceptors)) {
      throw new client_interceptors.InterceptorConfigurationError(
        'Both interceptors and interceptor_providers were passed as options ' +
        'to the client constructor. Only one of these is allowed.');
    }
    self.$interceptors = options.interceptors || [];
    self.$interceptor_providers = options.interceptor_providers || [];
    lodash.each(self.$method_definitions, function(method_definition, method_name) {
      self[method_name].interceptors = client_interceptors
        .resolveInterceptorProviders(self.$interceptor_providers, method_definition)
        .concat(self.$interceptors);
    });
    // Exclude interceptor options which have already been consumed
    var channel_options = lodash.omit(options,
       ['interceptors', 'interceptor_providers']);
    /* Private fields use $ as a prefix instead of _ because it is an invalid
     * prefix of a method name */
    this.$channel = new grpc_extension.Channel(address, credentials, channel_options);
  }

  var Client_1 = Client;

  Client.prototype.resolveCallInterceptors = function(method_definition, interceptors, interceptor_providers) {
    if (lodash.isArray(interceptors) && lodash.isArray(interceptor_providers)) {
      throw new client_interceptors.InterceptorConfigurationError(
        'Both interceptors and interceptor_providers were passed as call ' +
        'options. Only one of these is allowed.');
    }
    if (lodash.isArray(interceptors) || lodash.isArray(interceptor_providers)) {
      interceptors = interceptors || [];
      interceptor_providers = interceptor_providers || [];
      return client_interceptors.resolveInterceptorProviders(interceptor_providers, method_definition).concat(interceptors);
    } else {
      return client_interceptors.resolveInterceptorProviders(this.$interceptor_providers, method_definition).concat(this.$interceptors);
    }
  };

  /**
   * @callback grpc.Client~requestCallback
   * @param {?grpc~ServiceError} error The error, if the call
   *     failed
   * @param {*} value The response value, if the call succeeded
   */

  /**
   * Make a unary request to the given method, using the given serialize
   * and deserialize functions, with the given argument.
   * @param {string} path The path of the method to request
   * @param {grpc~serialize} serialize The serialization function for
   *     inputs
   * @param {grpc~deserialize} deserialize The deserialization
   *     function for outputs
   * @param {*} argument The argument to the call. Should be serializable with
   *     serialize
   * @param {grpc.Metadata=} metadata Metadata to add to the call
   * @param {grpc.Client~CallOptions=} options Options map
   * @param {grpc.Client~requestCallback} callback The callback
   *     for when the response is received
   * @return {grpc~ClientUnaryCall} An event emitter for stream related events
   */
  Client.prototype.makeUnaryRequest = function(path, serialize, deserialize,
                                               argument, metadata$$1, options,
                                               callback) {
    if (lodash.isFunction(options)) {
      callback = options;
      if (metadata$$1 instanceof metadata) {
        options = {};
      } else {
        options = metadata$$1;
        metadata$$1 = new metadata();
      }
    } else if (lodash.isFunction(metadata$$1)) {
      callback = metadata$$1;
      metadata$$1 = new metadata();
      options = {};
    }
    if (!metadata$$1) {
      metadata$$1 = new metadata();
    }
    if (!options) {
      options = {};
    }
    if (!((metadata$$1 instanceof metadata) &&
          (options instanceof Object) &&
          (lodash.isFunction(callback)))) {
      throw new Error('Argument mismatch in makeUnaryRequest');
    }

    var method_definition = options.method_definition = {
      path: path,
      requestStream: false,
      responseStream: false,
      requestSerialize: serialize,
      responseDeserialize: deserialize
    };

    metadata$$1 = metadata$$1.clone();

    var intercepting_call = client_interceptors.getInterceptingCall(
      method_definition,
      options,
      Client.prototype.resolveCallInterceptors.call(this, method_definition, options.interceptors, options.interceptor_providers),
      this.$channel,
      callback
    );
    var emitter = new ClientUnaryCall(intercepting_call);
    var last_listener = client_interceptors.getLastListener(
      method_definition,
      emitter,
      callback
    );

    intercepting_call.start(metadata$$1, last_listener);
    intercepting_call.sendMessage(argument);
    intercepting_call.halfClose();

    return emitter;
  };

  /**
   * Make a client stream request to the given method, using the given serialize
   * and deserialize functions, with the given argument.
   * @param {string} path The path of the method to request
   * @param {grpc~serialize} serialize The serialization function for
   *     inputs
   * @param {grpc~deserialize} deserialize The deserialization
   *     function for outputs
   * @param {grpc.Metadata=} metadata Array of metadata key/value pairs to add to
   *     the call
   * @param {grpc.Client~CallOptions=} options Options map
   * @param {grpc.Client~requestCallback} callback The callback for when the
   *     response is received
   * @return {grpc~ClientWritableStream} An event emitter for stream related
   *     events
   */
  Client.prototype.makeClientStreamRequest = function(path, serialize,
                                                      deserialize, metadata$$1,
                                                      options, callback) {
    if (lodash.isFunction(options)) {
      callback = options;
      if (metadata$$1 instanceof metadata) {
        options = {};
      } else {
        options = metadata$$1;
        metadata$$1 = new metadata();
      }
    } else if (lodash.isFunction(metadata$$1)) {
      callback = metadata$$1;
      metadata$$1 = new metadata();
      options = {};
    }
    if (!metadata$$1) {
      metadata$$1 = new metadata();
    }
    if (!options) {
      options = {};
    }
    if (!((metadata$$1 instanceof metadata) &&
         (options instanceof Object) &&
         (lodash.isFunction(callback)))) {
      throw new Error('Argument mismatch in makeClientStreamRequest');
    }

    var method_definition = options.method_definition = {
      path: path,
      requestStream: true,
      responseStream: false,
      requestSerialize: serialize,
      responseDeserialize: deserialize
    };

    metadata$$1 = metadata$$1.clone();

    var intercepting_call = client_interceptors.getInterceptingCall(
      method_definition,
      options,
      Client.prototype.resolveCallInterceptors.call(this, method_definition, options.interceptors, options.interceptor_providers),
      this.$channel,
      callback
    );
    var emitter = new ClientWritableStream(intercepting_call);
    var last_listener = client_interceptors.getLastListener(
      method_definition,
      emitter,
      callback
    );

    intercepting_call.start(metadata$$1, last_listener);

    return emitter;
  };

  /**
   * Make a server stream request to the given method, with the given serialize
   * and deserialize function, using the given argument
   * @param {string} path The path of the method to request
   * @param {grpc~serialize} serialize The serialization function for inputs
   * @param {grpc~deserialize} deserialize The deserialization
   *     function for outputs
   * @param {*} argument The argument to the call. Should be serializable with
   *     serialize
   * @param {grpc.Metadata=} metadata Array of metadata key/value pairs to add to
   *     the call
   * @param {grpc.Client~CallOptions=} options Options map
   * @return {grpc~ClientReadableStream} An event emitter for stream related
   *     events
   */
  Client.prototype.makeServerStreamRequest = function(path, serialize,
                                                      deserialize, argument,
                                                      metadata$$1, options) {
    if (!(metadata$$1 instanceof metadata)) {
      options = metadata$$1;
      metadata$$1 = new metadata();
    }
    if (!(options instanceof Object)) {
      options = {};
    }
    if (!((metadata$$1 instanceof metadata) && (options instanceof Object))) {
      throw new Error('Argument mismatch in makeServerStreamRequest');
    }

    var method_definition = options.method_definition = {
      path: path,
      requestStream: false,
      responseStream: true,
      requestSerialize: serialize,
      responseDeserialize: deserialize
    };

    metadata$$1 = metadata$$1.clone();

    var emitter = new ClientReadableStream();
    var intercepting_call = client_interceptors.getInterceptingCall(
      method_definition,
      options,
      Client.prototype.resolveCallInterceptors.call(this, method_definition, options.interceptors, options.interceptor_providers),
      this.$channel,
      emitter
    );
    emitter.call = intercepting_call;
    var last_listener = client_interceptors.getLastListener(
      method_definition,
      emitter
    );

    intercepting_call.start(metadata$$1, last_listener);
    intercepting_call.sendMessage(argument);
    intercepting_call.halfClose();

    return emitter;
  };

  /**
   * Make a bidirectional stream request with this method on the given channel.
   * @param {string} path The path of the method to request
   * @param {grpc~serialize} serialize The serialization function for inputs
   * @param {grpc~deserialize} deserialize The deserialization
   *     function for outputs
   * @param {grpc.Metadata=} metadata Array of metadata key/value
   *     pairs to add to the call
   * @param {grpc.Client~CallOptions=} options Options map
   * @return {grpc~ClientDuplexStream} An event emitter for stream related events
   */
  Client.prototype.makeBidiStreamRequest = function(path, serialize,
                                                    deserialize, metadata$$1,
                                                    options) {
    if (!(metadata$$1 instanceof metadata)) {
      options = metadata$$1;
      metadata$$1 = new metadata();
    }
    if (!(options instanceof Object)) {
      options = {};
    }
    if (!((metadata$$1 instanceof metadata) && (options instanceof Object))) {
      throw new Error('Argument mismatch in makeBidiStreamRequest');
    }

    var method_definition = options.method_definition = {
      path: path,
      requestStream: true,
      responseStream: true,
      requestSerialize: serialize,
      responseDeserialize: deserialize
    };

    metadata$$1 = metadata$$1.clone();

    var emitter = new ClientDuplexStream();
    var intercepting_call = client_interceptors.getInterceptingCall(
      method_definition,
      options,
      Client.prototype.resolveCallInterceptors.call(this, method_definition, options.interceptors, options.interceptor_providers),
      this.$channel,
      emitter
    );
    emitter.call = intercepting_call;
    var last_listener = client_interceptors.getLastListener(
      method_definition,
      emitter
    );

    intercepting_call.start(metadata$$1, last_listener);

    return emitter;
  };

  /**
   * Close this client.
   */
  Client.prototype.close = function() {
    this.$channel.close();
  };

  /**
   * Return the underlying channel object for the specified client
   * @return {Channel} The channel
   */
  Client.prototype.getChannel = function() {
    return this.$channel;
  };

  /**
   * Wait for the client to be ready. The callback will be called when the
   * client has successfully connected to the server, and it will be called
   * with an error if the attempt to connect to the server has unrecoverablly
   * failed or if the deadline expires. This function will make the channel
   * start connecting if it has not already done so.
   * @param {grpc~Deadline} deadline When to stop waiting for a connection.
   * @param {function(Error)} callback The callback to call when done attempting
   *     to connect.
   */
  Client.prototype.waitForReady = function(deadline, callback) {
    var self = this;
    var checkState = function(err) {
      if (err) {
        callback(new Error('Failed to connect before the deadline'));
        return;
      }
      var new_state = self.$channel.getConnectivityState(true);
      if (new_state === grpc_extension.connectivityState.READY) {
        callback();
      } else if (new_state === grpc_extension.connectivityState.FATAL_FAILURE) {
        callback(new Error('Failed to connect to server'));
      } else {
        self.$channel.watchConnectivityState(new_state, deadline, checkState);
      }
    };
    /* Force a single round of polling to ensure that the channel state is up
     * to date */
    grpc_extension.forcePoll();
    setImmediate(checkState);
  };

  /**
   * Map with short names for each of the requester maker functions. Used in
   * makeClientConstructor
   * @private
   */
  var requester_funcs = {
    [methodTypes$2.UNARY]: Client.prototype.makeUnaryRequest,
    [methodTypes$2.CLIENT_STREAMING]: Client.prototype.makeClientStreamRequest,
    [methodTypes$2.SERVER_STREAMING]: Client.prototype.makeServerStreamRequest,
    [methodTypes$2.BIDI_STREAMING]: Client.prototype.makeBidiStreamRequest
  };

  function getDefaultValues(metadata$$1, options) {
    var res = {};
    res.metadata = metadata$$1 || new metadata();
    res.options = options || {};
    return res;
  }

  /**
   * Map with wrappers for each type of requester function to make it use the old
   * argument order with optional arguments after the callback.
   * @access private
   */
  var deprecated_request_wrap = {
    [methodTypes$2.UNARY]: function(makeUnaryRequest) {
      return function makeWrappedUnaryRequest(argument, callback,
                                              metadata$$1, options) {
        /* jshint validthis: true */
        var opt_args = getDefaultValues(metadata$$1, metadata$$1);
        return makeUnaryRequest.call(this, argument, opt_args.metadata,
                                     opt_args.options, callback);
      };
    },
    [methodTypes$2.CLIENT_STREAMING]: function(makeServerStreamRequest) {
      return function makeWrappedClientStreamRequest(callback, metadata$$1,
                                                     options) {
        /* jshint validthis: true */
        var opt_args = getDefaultValues(metadata$$1, options);
        return makeServerStreamRequest.call(this, opt_args.metadata,
                                            opt_args.options, callback);
      };
    },
    [methodTypes$2.SERVER_STREAMING]: lodash.identity,
    [methodTypes$2.BIDI_STREAMING]: lodash.identity
  };

  /**
   * Creates a constructor for a client with the given methods, as specified in
   * the methods argument. The resulting class will have an instance method for
   * each method in the service, which is a partial application of one of the
   * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`
   * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`
   * arguments predefined.
   * @memberof grpc
   * @alias grpc~makeGenericClientConstructor
   * @param {grpc~ServiceDefinition} methods An object mapping method names to
   *     method attributes
   * @param {string} serviceName The fully qualified name of the service
   * @param {Object} class_options An options object.
   * @param {boolean=} [class_options.deprecatedArgumentOrder=false] Indicates
   *     that the old argument order should be used for methods, with optional
   *     arguments at the end instead of the callback at the end. This option
   *     is only a temporary stopgap measure to smooth an API breakage.
   *     It is deprecated, and new code should not use it.
   * @return {function} New client constructor, which is a subclass of
   *     {@link grpc.Client}, and has the same arguments as that constructor.
   */
  var makeClientConstructor = function(methods, serviceName,
                                           class_options) {
    if (!class_options) {
      class_options = {};
    }

    function ServiceClient(address, credentials, options) {
      Client.call(this, address, credentials, options);
    }

    require$$1$1.inherits(ServiceClient, Client);
    ServiceClient.prototype.$method_definitions = methods;
    ServiceClient.prototype.$method_names = {};

    lodash.each(methods, function(attrs, name) {
      if (lodash.startsWith(name, '$')) {
        throw new Error('Method names cannot start with $');
      }
      var method_type = common$1.getMethodType(attrs);
      var method_func = lodash.partial(requester_funcs[method_type], attrs.path,
                                  attrs.requestSerialize,
                                  attrs.responseDeserialize);
      if (class_options.deprecatedArgumentOrder) {
        ServiceClient.prototype[name] =
          deprecated_request_wrap[method_type](method_func);
      } else {
        ServiceClient.prototype[name] = method_func;
      }
      ServiceClient.prototype.$method_names[attrs.path] = name;
      // Associate all provided attributes with the method
      lodash.assign(ServiceClient.prototype[name], attrs);
      if (attrs.originalName) {
        ServiceClient.prototype[attrs.originalName] =
          ServiceClient.prototype[name];
      }
    });

    ServiceClient.service = methods;

    return ServiceClient;
  };

  /**
   * Return the underlying channel object for the specified client
   * @memberof grpc
   * @alias grpc~getClientChannel
   * @param {grpc.Client} client The client
   * @return {Channel} The channel
   * @see grpc.Client#getChannel
   */
  var getClientChannel = function(client) {
    return Client.prototype.getChannel.call(client);
  };

  /**
   * Gets a map of client method names to interceptor stacks.
   * @param {grpc.Client} client
   * @returns {Object.<string, Interceptor[]>}
   */
  var getClientInterceptors = function(client) {
    return lodash.mapValues(client.$method_definitions, function(def, name) {
      return client[name].interceptors;
    });
  };

  /**
   * Wait for the client to be ready. The callback will be called when the
   * client has successfully connected to the server, and it will be called
   * with an error if the attempt to connect to the server has unrecoverablly
   * failed or if the deadline expires. This function will make the channel
   * start connecting if it has not already done so.
   * @memberof grpc
   * @alias grpc~waitForClientReady
   * @param {grpc.Client} client The client to wait on
   * @param {grpc~Deadline} deadline When to stop waiting for a connection. Pass
   *     Infinity to wait forever.
   * @param {function(Error)} callback The callback to call when done attempting
   *     to connect.
   * @see grpc.Client#waitForReady
   */
  var waitForClientReady = function(client, deadline, callback) {
    Client.prototype.waitForReady.call(client, deadline, callback);
  };

  var StatusBuilder$1 = client_interceptors.StatusBuilder;
  var ListenerBuilder$1 = client_interceptors.ListenerBuilder;
  var RequesterBuilder$1 = client_interceptors.RequesterBuilder;
  var InterceptingCall$1 = client_interceptors.InterceptingCall;

  var client = {
  	Client: Client_1,
  	makeClientConstructor: makeClientConstructor,
  	getClientChannel: getClientChannel,
  	getClientInterceptors: getClientInterceptors,
  	waitForClientReady: waitForClientReady,
  	StatusBuilder: StatusBuilder$1,
  	ListenerBuilder: ListenerBuilder$1,
  	RequesterBuilder: RequesterBuilder$1,
  	InterceptingCall: InterceptingCall$1
  };

  var protobuf_js_5_common = createCommonjsModule(function (module, exports) {




  /**
   * Get a function that deserializes a specific type of protobuf.
   * @param {function()} cls The constructor of the message type to deserialize
   * @param {bool=} binaryAsBase64 Deserialize bytes fields as base64 strings
   *     instead of Buffers. Defaults to false
   * @param {bool=} longsAsStrings Deserialize long values as strings instead of
   *     objects. Defaults to true
   * @return {function(Buffer):cls} The deserialization function
   */
  exports.deserializeCls = function deserializeCls(cls, options) {
    /**
     * Deserialize a buffer to a message object
     * @param {Buffer} arg_buf The buffer to deserialize
     * @return {cls} The resulting object
     */
    return function deserialize(arg_buf) {
      // Convert to a native object with binary fields as Buffers (first argument)
      // and longs as strings (second argument)
      return cls.decode(arg_buf).toRaw(options.binaryAsBase64,
                                       options.longsAsStrings);
    };
  };

  var deserializeCls = exports.deserializeCls;

  /**
   * Get a function that serializes objects to a buffer by protobuf class.
   * @param {function()} Cls The constructor of the message type to serialize
   * @return {function(Cls):Buffer} The serialization function
   */
  exports.serializeCls = function serializeCls(Cls) {
    /**
     * Serialize an object to a Buffer
     * @param {Object} arg The object to serialize
     * @return {Buffer} The serialized object
     */
    return function serialize(arg) {
      return new Buffer(new Cls(arg).encode().toBuffer());
    };
  };

  var serializeCls = exports.serializeCls;

  /**
   * Get the fully qualified (dotted) name of a ProtoBuf.Reflect value.
   * @param {ProtoBuf.Reflect.Namespace} value The value to get the name of
   * @return {string} The fully qualified name of the value
   */
  exports.fullyQualifiedName = function fullyQualifiedName(value) {
    if (value === null || value === undefined) {
      return '';
    }
    var name = value.name;
    var parent_name = fullyQualifiedName(value.parent);
    if (parent_name !== '') {
      name = parent_name + '.' + name;
    }
    return name;
  };

  var fullyQualifiedName = exports.fullyQualifiedName;

  /**
   * Return a map from method names to method attributes for the service.
   * @param {ProtoBuf.Reflect.Service} service The service to get attributes for
   * @param {Object=} options Options to apply to these attributes
   * @return {Object} The attributes map
   */
  exports.getProtobufServiceAttrs = function getProtobufServiceAttrs(service,
                                                                     options) {
    var prefix = '/' + fullyQualifiedName(service) + '/';
    var binaryAsBase64, longsAsStrings;
    if (options) {
      binaryAsBase64 = options.binaryAsBase64;
      longsAsStrings = options.longsAsStrings;
    }
    /* This slightly awkward construction is used to make sure we only use
       lodash@3.10.1-compatible functions. A previous version used
       _.fromPairs, which would be cleaner, but was introduced in lodash
       version 4 */
    return lodash.zipObject(lodash.map(service.children, function(method) {
      return lodash.camelCase(method.name);
    }), lodash.map(service.children, function(method) {
      return {
        originalName: method.name,
        path: prefix + method.name,
        requestStream: method.requestStream,
        responseStream: method.responseStream,
        requestType: method.resolvedRequestType,
        responseType: method.resolvedResponseType,
        requestSerialize: serializeCls(method.resolvedRequestType.build()),
        requestDeserialize: deserializeCls(method.resolvedRequestType.build(),
                                           options),
        responseSerialize: serializeCls(method.resolvedResponseType.build()),
        responseDeserialize: deserializeCls(method.resolvedResponseType.build(),
                                            options)
      };
    }));
  };

  var getProtobufServiceAttrs = exports.getProtobufServiceAttrs;

  /**
   * Load a gRPC object from an existing ProtoBuf.Reflect object.
   * @param {ProtoBuf.Reflect.Namespace} value The ProtoBuf object to load.
   * @param {Object=} options Options to apply to the loaded object
   * @return {Object<string, *>} The resulting gRPC object
   */
  exports.loadObject = function loadObject(value, options) {
    var result = {};
    if (!value) {
      return value;
    }
    if (value.hasOwnProperty('ns')) {
      return loadObject(value.ns, options);
    }
    if (value.className === 'Namespace') {
      lodash.each(value.children, function(child) {
        result[child.name] = loadObject(child, options);
      });
      return result;
    } else if (value.className === 'Service') {
      return client.makeClientConstructor(getProtobufServiceAttrs(value, options),
                                          options);
    } else if (value.className === 'Message' || value.className === 'Enum') {
      return value.build();
    } else {
      return value;
    }
  };

  /**
   * The primary purpose of this method is to distinguish between reflection
   * objects from different versions of ProtoBuf.js. This is just a heuristic,
   * checking for properties that are (currently) specific to this version of
   * ProtoBuf.js
   * @param {Object} obj The object to check
   * @return {boolean} Whether the object appears to be a Protobuf.js 5
   *   ReflectionObject
   */
  exports.isProbablyProtobufJs5 = function isProbablyProtobufJs5(obj) {
    return lodash.isArray(obj.children) && (typeof obj.build === 'function');
  };
  });
  var protobuf_js_5_common_1 = protobuf_js_5_common.deserializeCls;
  var protobuf_js_5_common_2 = protobuf_js_5_common.serializeCls;
  var protobuf_js_5_common_3 = protobuf_js_5_common.fullyQualifiedName;
  var protobuf_js_5_common_4 = protobuf_js_5_common.getProtobufServiceAttrs;
  var protobuf_js_5_common_5 = protobuf_js_5_common.loadObject;
  var protobuf_js_5_common_6 = protobuf_js_5_common.isProbablyProtobufJs5;

  var protobuf_js_6_common = createCommonjsModule(function (module, exports) {




  /**
   * Get a function that deserializes a specific type of protobuf.
   * @param {function()} cls The constructor of the message type to deserialize
   * @param {bool=} binaryAsBase64 Deserialize bytes fields as base64 strings
   *     instead of Buffers. Defaults to false
   * @param {bool=} longsAsStrings Deserialize long values as strings instead of
   *     objects. Defaults to true
   * @return {function(Buffer):cls} The deserialization function
   */
  exports.deserializeCls = function deserializeCls(cls, options) {
    var conversion_options = {
      defaults: true,
      bytes: options.binaryAsBase64 ? String : Buffer,
      longs: options.longsAsStrings ? String : null,
      enums: options.enumsAsStrings ? String : null,
      oneofs: true
    };
    /**
     * Deserialize a buffer to a message object
     * @param {Buffer} arg_buf The buffer to deserialize
     * @return {cls} The resulting object
     */
    return function deserialize(arg_buf) {
      return cls.toObject(cls.decode(arg_buf), conversion_options);
    };
  };

  var deserializeCls = exports.deserializeCls;

  /**
   * Get a function that serializes objects to a buffer by protobuf class.
   * @param {function()} Cls The constructor of the message type to serialize
   * @return {function(Cls):Buffer} The serialization function
   */
  exports.serializeCls = function serializeCls(cls) {
    /**
     * Serialize an object to a Buffer
     * @param {Object} arg The object to serialize
     * @return {Buffer} The serialized object
     */
    return function serialize(arg) {
      var message = cls.fromObject(arg);
      return cls.encode(message).finish();
    };
  };

  var serializeCls = exports.serializeCls;

  /**
   * Get the fully qualified (dotted) name of a ProtoBuf.Reflect value.
   * @param {ProtoBuf.ReflectionObject} value The value to get the name of
   * @return {string} The fully qualified name of the value
   */
  exports.fullyQualifiedName = function fullyQualifiedName(value) {
    if (value === null || value === undefined) {
      return '';
    }
    var name = value.name;
    var parent_fqn = fullyQualifiedName(value.parent);
    if (parent_fqn !== '') {
      name = parent_fqn + '.' + name;
    }
    return name;
  };

  var fullyQualifiedName = exports.fullyQualifiedName;

  /**
   * Return a map from method names to method attributes for the service.
   * @param {ProtoBuf.Service} service The service to get attributes for
   * @param {Object=} options Options to apply to these attributes
   * @return {Object} The attributes map
   */
  exports.getProtobufServiceAttrs = function getProtobufServiceAttrs(service,
                                                                     options) {
    var prefix = '/' + fullyQualifiedName(service) + '/';
    service.resolveAll();
    return lodash.zipObject(lodash.map(service.methods, function(method) {
      return lodash.camelCase(method.name);
    }), lodash.map(service.methods, function(method) {
      return {
        originalName: method.name,
        path: prefix + method.name,
        requestStream: !!method.requestStream,
        responseStream: !!method.responseStream,
        requestType: method.resolvedRequestType,
        responseType: method.resolvedResponseType,
        requestSerialize: serializeCls(method.resolvedRequestType),
        requestDeserialize: deserializeCls(method.resolvedRequestType, options),
        responseSerialize: serializeCls(method.resolvedResponseType),
        responseDeserialize: deserializeCls(method.resolvedResponseType, options)
      };
    }));
  };

  var getProtobufServiceAttrs = exports.getProtobufServiceAttrs;

  exports.loadObject = function loadObject(value, options) {
    var result = {};
    if (!value) {
      return value;
    }
    if (value.hasOwnProperty('methods')) {
      // It's a service object
      var service_attrs = getProtobufServiceAttrs(value, options);
      return client.makeClientConstructor(service_attrs);
    }

    if (value.hasOwnProperty('nested')) {
      // It's a namespace or root object
      lodash.each(value.nested, function(nested, name) {
        result[name] = loadObject(nested, options);
      });
      return result;
    }

    // Otherwise, it's not something we need to change
    return value;
  };

  /**
   * The primary purpose of this method is to distinguish between reflection
   * objects from different versions of ProtoBuf.js. This is just a heuristic,
   * checking for properties that are (currently) specific to this version of
   * ProtoBuf.js
   * @param {Object} obj The object to check
   * @return {boolean} Whether the object appears to be a Protobuf.js 6
   *   ReflectionObject
   */
  exports.isProbablyProtobufJs6 = function isProbablyProtobufJs6(obj) {
    return (typeof obj.root === 'object') && (typeof obj.resolve === 'function');
  };
  });
  var protobuf_js_6_common_1 = protobuf_js_6_common.deserializeCls;
  var protobuf_js_6_common_2 = protobuf_js_6_common.serializeCls;
  var protobuf_js_6_common_3 = protobuf_js_6_common.fullyQualifiedName;
  var protobuf_js_6_common_4 = protobuf_js_6_common.getProtobufServiceAttrs;
  var protobuf_js_6_common_5 = protobuf_js_6_common.loadObject;
  var protobuf_js_6_common_6 = protobuf_js_6_common.isProbablyProtobufJs6;

  var Readable$2 = require$$1.Readable;
  var Writable$2 = require$$1.Writable;
  var Duplex$2 = require$$1.Duplex;


  var EventEmitter$3 = require$$0$1.EventEmitter;

  /**
   * Handle an error on a call by sending it as a status
   * @private
   * @param {grpc.internal~Call} call The call to send the error on
   * @param {(Object|Error)} error The error object
   */
  function handleError(call, error) {
    var statusMetadata = new metadata();
    var status = {
      code: constants.status.UNKNOWN,
      details: 'Unknown Error'
    };
    if (error.hasOwnProperty('message')) {
      status.details = error.message;
    }
    if (error.hasOwnProperty('code')) {
      status.code = error.code;
      if (error.hasOwnProperty('details')) {
        status.details = error.details;
      }
    }
    if (error.hasOwnProperty('metadata')) {
      statusMetadata = error.metadata;
    }
    status.metadata = statusMetadata._getCoreRepresentation();
    var error_batch = {};
    if (!call.metadataSent) {
      error_batch[grpc_extension.opType.SEND_INITIAL_METADATA] =
          (new metadata())._getCoreRepresentation();
    }
    error_batch[grpc_extension.opType.SEND_STATUS_FROM_SERVER] = status;
    call.startBatch(error_batch, function(){});
  }

  /**
   * Send a response to a unary or client streaming call.
   * @private
   * @param {grpc.Call} call The call to respond on
   * @param {*} value The value to respond with
   * @param {grpc~serialize} serialize Serialization function for the
   *     response
   * @param {grpc.Metadata=} metadata Optional trailing metadata to send with
   *     status
   * @param {number=} [flags=0] Flags for modifying how the message is sent.
   */
  function sendUnaryResponse(call, value, serialize, metadata$$1, flags) {
    var end_batch = {};
    var statusMetadata = new metadata();
    var status = {
      code: constants.status.OK,
      details: 'OK'
    };
    if (metadata$$1) {
      statusMetadata = metadata$$1;
    }
    var message;
    try {
      message = serialize(value);
    } catch (e) {
      e.code = constants.status.INTERNAL;
      handleError(call, e);
      return;
    }
    status.metadata = statusMetadata._getCoreRepresentation();
    if (!call.metadataSent) {
      end_batch[grpc_extension.opType.SEND_INITIAL_METADATA] =
          (new metadata())._getCoreRepresentation();
      call.metadataSent = true;
    }
    message.grpcWriteFlags = flags;
    end_batch[grpc_extension.opType.SEND_MESSAGE] = message;
    end_batch[grpc_extension.opType.SEND_STATUS_FROM_SERVER] = status;
    call.startBatch(end_batch, function (){});
  }

  /**
   * Initialize a writable stream. This is used for both the writable and duplex
   * stream constructors.
   * @private
   * @param {Writable} stream The stream to set up
   * @param {function(*):Buffer=} Serialization function for responses
   */
  function setUpWritable(stream, serialize) {
    stream.finished = false;
    stream.status = {
      code : constants.status.OK,
      details : 'OK',
      metadata : new metadata()
    };
    stream.serialize = common$1.wrapIgnoreNull(serialize);
    function sendStatus() {
      var batch = {};
      if (!stream.call.metadataSent) {
        stream.call.metadataSent = true;
        batch[grpc_extension.opType.SEND_INITIAL_METADATA] =
            (new metadata())._getCoreRepresentation();
      }

      if (stream.status.metadata) {
        stream.status.metadata = stream.status.metadata._getCoreRepresentation();
      }
      batch[grpc_extension.opType.SEND_STATUS_FROM_SERVER] = stream.status;
      stream.call.startBatch(batch, function(){});
    }
    stream.on('finish', sendStatus);
    /**
     * Set the pending status to a given error status. If the error does not have
     * code or details properties, the code will be set to grpc.status.UNKNOWN
     * and the details will be set to 'Unknown Error'.
     * @param {Error} err The error object
     */
    function setStatus(err) {
      var code = constants.status.UNKNOWN;
      var details = 'Unknown Error';
      var metadata$$1 = new metadata();
      if (err.hasOwnProperty('message')) {
        details = err.message;
      }
      if (err.hasOwnProperty('code')) {
        code = err.code;
        if (err.hasOwnProperty('details')) {
          details = err.details;
        }
      }
      if (err.hasOwnProperty('metadata')) {
        metadata$$1 = err.metadata;
      }
      stream.status = {code: code, details: details, metadata: metadata$$1};
    }
    /**
     * Terminate the call. This includes indicating that reads are done, draining
     * all pending writes, and sending the given error as a status
     * @param {Error} err The error object
     * @this GrpcServerStream
     */
    function terminateCall(err) {
      // Drain readable data
      setStatus(err);
      stream.end();
    }
    stream.on('error', terminateCall);
    /**
     * Override of Writable#end method that allows for sending metadata with a
     * success status.
     * @param {Metadata=} metadata Metadata to send with the status
     */
    stream.end = function(metadata$$1) {
      if (metadata$$1) {
        stream.status.metadata = metadata$$1;
      }
      Writable$2.prototype.end.call(this);
    };
  }

  /**
   * Initialize a readable stream. This is used for both the readable and duplex
   * stream constructors.
   * @private
   * @param {Readable} stream The stream to initialize
   * @param {grpc~deserialize} deserialize Deserialization function for
   *     incoming data.
   */
  function setUpReadable(stream, deserialize) {
    stream.deserialize = common$1.wrapIgnoreNull(deserialize);
    stream.finished = false;
    stream.reading = false;

    stream.terminate = function() {
      stream.finished = true;
      stream.on('data', function() {});
    };

    stream.on('cancelled', function() {
      stream.terminate();
    });
  }

  /**
   * Emitted when the call has been cancelled. After this has been emitted, the
   * call's `cancelled` property will be set to `true`.
   * @event grpc~ServerUnaryCall~cancelled
   */

  require$$1$1.inherits(ServerUnaryCall, EventEmitter$3);

  /**
   * An EventEmitter. Used for unary calls.
   * @constructor grpc~ServerUnaryCall
   * @extends external:EventEmitter
   * @param {grpc.internal~Call} call The call object associated with the request
   * @param {grpc.Metadata} metadata The request metadata from the client
   */
  function ServerUnaryCall(call, metadata$$1) {
    EventEmitter$3.call(this);
    this.call = call;
    /**
     * Indicates if the call has been cancelled
     * @member {boolean} grpc~ServerUnaryCall#cancelled
     */
    this.cancelled = false;
    /**
     * The request metadata from the client
     * @member {grpc.Metadata} grpc~ServerUnaryCall#metadata
     */
    this.metadata = metadata$$1;
    /**
     * The request message from the client
     * @member {*} grpc~ServerUnaryCall#request
     */
    this.request = undefined;
  }

  /**
   * Emitted when the call has been cancelled. After this has been emitted, the
   * call's `cancelled` property will be set to `true`.
   * @event grpc~ServerWritableStream~cancelled
   */

  require$$1$1.inherits(ServerWritableStream, Writable$2);

  /**
   * A stream that the server can write to. Used for calls that are streaming from
   * the server side.
   * @constructor grpc~ServerWritableStream
   * @extends external:Writable
   * @borrows grpc~ServerUnaryCall#sendMetadata as
   *     grpc~ServerWritableStream#sendMetadata
   * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerWritableStream#getPeer
   * @param {grpc.internal~Call} call The call object to send data with
   * @param {grpc.Metadata} metadata The request metadata from the client
   * @param {grpc~serialize} serialize Serialization function for writes
   */
  function ServerWritableStream(call, metadata$$1, serialize) {
    Writable$2.call(this, {objectMode: true});
    this.call = call;

    this.finished = false;
    setUpWritable(this, serialize);
    /**
     * Indicates if the call has been cancelled
     * @member {boolean} grpc~ServerWritableStream#cancelled
     */
    this.cancelled = false;
    /**
     * The request metadata from the client
     * @member {grpc.Metadata} grpc~ServerWritableStream#metadata
     */
    this.metadata = metadata$$1;
    /**
     * The request message from the client
     * @member {*} grpc~ServerWritableStream#request
     */
    this.request = undefined;
  }

  /**
   * Start writing a chunk of data. This is an implementation of a method required
   * for implementing stream.Writable.
   * @private
   * @param {Buffer} chunk The chunk of data to write
   * @param {string} encoding Used to pass write flags
   * @param {function(Error=)} callback Callback to indicate that the write is
   *     complete
   */
  function _write$1(chunk, encoding, callback) {
    /* jshint validthis: true */
    var batch = {};
    var self = this;
    var message;
    try {
      message = this.serialize(chunk);
    } catch (e) {
      e.code = constants.status.INTERNAL;
      callback(e);
      return;
    }
    if (!this.call.metadataSent) {
      batch[grpc_extension.opType.SEND_INITIAL_METADATA] =
          (new metadata())._getCoreRepresentation();
      this.call.metadataSent = true;
    }
    if (lodash.isFinite(encoding)) {
      /* Attach the encoding if it is a finite number. This is the closest we
       * can get to checking that it is valid flags */
      message.grpcWriteFlags = encoding;
    }
    batch[grpc_extension.opType.SEND_MESSAGE] = message;
    this.call.startBatch(batch, function(err, value) {
      if (err) {
        self.emit('error', err);
        return;
      }
      callback();
    });
  }

  ServerWritableStream.prototype._write = _write$1;

  /**
   * Emitted when the call has been cancelled. After this has been emitted, the
   * call's `cancelled` property will be set to `true`.
   * @event grpc~ServerReadableStream~cancelled
   */

  require$$1$1.inherits(ServerReadableStream, Readable$2);

  /**
   * A stream that the server can read from. Used for calls that are streaming
   * from the client side.
   * @constructor grpc~ServerReadableStream
   * @extends external:Readable
   * @borrows grpc~ServerUnaryCall#sendMetadata as
   *     grpc~ServerReadableStream#sendMetadata
   * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerReadableStream#getPeer
   * @param {grpc.internal~Call} call The call object to read data with
   * @param {grpc.Metadata} metadata The request metadata from the client
   * @param {grpc~deserialize} deserialize Deserialization function for reads
   */
  function ServerReadableStream(call, metadata$$1, deserialize) {
    Readable$2.call(this, {objectMode: true});
    this.call = call;
    setUpReadable(this, deserialize);
    /**
     * Indicates if the call has been cancelled
     * @member {boolean} grpc~ServerReadableStream#cancelled
     */
    this.cancelled = false;
    /**
     * The request metadata from the client
     * @member {grpc.Metadata} grpc~ServerReadableStream#metadata
     */
    this.metadata = metadata$$1;
  }

  /**
   * Start reading from the gRPC data source. This is an implementation of a
   * method required for implementing stream.Readable
   * @access private
   * @param {number} size Ignored
   */
  function _read$1(size) {
    /* jshint validthis: true */
    var self = this;
    /**
     * Callback to be called when a READ event is received. Pushes the data onto
     * the read queue and starts reading again if applicable
     * @param {grpc.Event} event READ event object
     */
    function readCallback(err, event) {
      if (err) {
        self.terminate();
        return;
      }
      if (self.finished) {
        self.push(null);
        return;
      }
      var data = event.read;
      var deserialized;
      try {
        deserialized = self.deserialize(data);
      } catch (e) {
        e.code = constants.status.INTERNAL;
        self.emit('error', e);
        return;
      }
      if (self.push(deserialized) && data !== null) {
        var read_batch = {};
        read_batch[grpc_extension.opType.RECV_MESSAGE] = true;
        self.call.startBatch(read_batch, readCallback);
      } else {
        self.reading = false;
      }
    }
    if (self.finished) {
      self.push(null);
    } else {
      if (!self.reading) {
        self.reading = true;
        var batch = {};
        batch[grpc_extension.opType.RECV_MESSAGE] = true;
        self.call.startBatch(batch, readCallback);
      }
    }
  }

  ServerReadableStream.prototype._read = _read$1;

  /**
   * Emitted when the call has been cancelled. After this has been emitted, the
   * call's `cancelled` property will be set to `true`.
   * @event grpc~ServerDuplexStream~cancelled
   */

  require$$1$1.inherits(ServerDuplexStream, Duplex$2);

  /**
   * A stream that the server can read from or write to. Used for calls with
   * duplex streaming.
   * @constructor grpc~ServerDuplexStream
   * @extends external:Duplex
   * @borrows grpc~ServerUnaryCall#sendMetadata as
   *     grpc~ServerDuplexStream#sendMetadata
   * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerDuplexStream#getPeer
   * @param {grpc.internal~Call} call Call object to proxy
   * @param {grpc.Metadata} metadata The request metadata from the client
   * @param {grpc~serialize} serialize Serialization function for requests
   * @param {grpc~deserialize} deserialize Deserialization function for
   *     responses
   */
  function ServerDuplexStream(call, metadata$$1, serialize, deserialize) {
    Duplex$2.call(this, {objectMode: true});
    this.call = call;
    setUpWritable(this, serialize);
    setUpReadable(this, deserialize);
    /**
     * Indicates if the call has been cancelled
     * @member {boolean} grpc~ServerReadableStream#cancelled
     */
    this.cancelled = false;
    /**
     * The request metadata from the client
     * @member {grpc.Metadata} grpc~ServerReadableStream#metadata
     */
    this.metadata = metadata$$1;
  }

  ServerDuplexStream.prototype._read = _read$1;
  ServerDuplexStream.prototype._write = _write$1;

  /**
   * Send the initial metadata for a writable stream.
   * @alias grpc~ServerUnaryCall#sendMetadata
   * @param {grpc.Metadata} responseMetadata Metadata to send
   */
  function sendMetadata(responseMetadata) {
    /* jshint validthis: true */
    var self = this;
    if (!this.call.metadataSent) {
      this.call.metadataSent = true;
      var batch = {};
      batch[grpc_extension.opType.SEND_INITIAL_METADATA] =
          responseMetadata._getCoreRepresentation();
      this.call.startBatch(batch, function(err) {
        if (err) {
          self.emit('error', err);
          return;
        }
      });
    }
  }

  ServerUnaryCall.prototype.sendMetadata = sendMetadata;
  ServerWritableStream.prototype.sendMetadata = sendMetadata;
  ServerReadableStream.prototype.sendMetadata = sendMetadata;
  ServerDuplexStream.prototype.sendMetadata = sendMetadata;

  /**
   * Get the endpoint this call/stream is connected to.
   * @alias grpc~ServerUnaryCall#getPeer
   * @return {string} The URI of the endpoint
   */
  function getPeer$1() {
    /* jshint validthis: true */
    return this.call.getPeer();
  }

  ServerUnaryCall.prototype.getPeer = getPeer$1;
  ServerReadableStream.prototype.getPeer = getPeer$1;
  ServerWritableStream.prototype.getPeer = getPeer$1;
  ServerDuplexStream.prototype.getPeer = getPeer$1;

  /**
   * Wait for the client to close, then emit a cancelled event if the client
   * cancelled.
   * @private
   */
  function waitForCancel() {
    /* jshint validthis: true */
    var self = this;
    var cancel_batch = {};
    cancel_batch[grpc_extension.opType.RECV_CLOSE_ON_SERVER] = true;
    self.call.startBatch(cancel_batch, function(err, result) {
      if (err) {
        self.emit('error', err);
      }
      if (result.cancelled) {
        self.cancelled = true;
        self.emit('cancelled');
      }
    });
  }

  ServerUnaryCall.prototype.waitForCancel = waitForCancel;
  ServerReadableStream.prototype.waitForCancel = waitForCancel;
  ServerWritableStream.prototype.waitForCancel = waitForCancel;
  ServerDuplexStream.prototype.waitForCancel = waitForCancel;

  /**
   * Callback function passed to server handlers that handle methods with unary
   * responses.
   * @callback grpc.Server~sendUnaryData
   * @param {grpc~ServiceError} error An error, if the call failed
   * @param {*} value The response value. Must be a valid argument to the
   *     `responseSerialize` method of the method that is being handled
   * @param {grpc.Metadata=} trailer Trailing metadata to send, if applicable
   * @param {grpc.writeFlags=} flags Flags to modify writing the response
   */

  /**
   * User-provided method to handle unary requests on a server
   * @callback grpc.Server~handleUnaryCall
   * @param {grpc~ServerUnaryCall} call The call object
   * @param {grpc.Server~sendUnaryData} callback The callback to call to respond
   *     to the request
   */

  /**
   * Fully handle a unary call
   * @private
   * @param {grpc.internal~Call} call The call to handle
   * @param {Object} handler Request handler object for the method that was called
   * @param {grpc~Server.handleUnaryCall} handler.func The handler function
   * @param {grpc~deserialize} handler.deserialize The deserialization function
   *     for request data
   * @param {grpc~serialize} handler.serialize The serialization function for
   *     response data
   * @param {grpc.Metadata} metadata Metadata from the client
   */
  function handleUnary(call, handler, metadata$$1) {
    var emitter = new ServerUnaryCall(call, metadata$$1);
    emitter.on('error', function(error) {
      handleError(call, error);
    });
    emitter.waitForCancel();
    var batch = {};
    batch[grpc_extension.opType.RECV_MESSAGE] = true;
    call.startBatch(batch, function(err, result) {
      if (err) {
        handleError(call, err);
        return;
      }
      try {
        emitter.request = handler.deserialize(result.read);
      } catch (e) {
        e.code = constants.status.INTERNAL;
        handleError(call, e);
        return;
      }
      if (emitter.cancelled) {
        return;
      }
      handler.func(emitter, function sendUnaryData(err, value, trailer, flags) {
        if (err) {
          if (trailer) {
            err.metadata = trailer;
          }
          handleError(call, err);
        } else {
          sendUnaryResponse(call, value, handler.serialize, trailer, flags);
        }
      });
    });
  }

  /**
   * User provided method to handle server streaming methods on the server.
   * @callback grpc.Server~handleServerStreamingCall
   * @param {grpc~ServerWritableStream} call The call object
   */

  /**
   * Fully handle a server streaming call
   * @private
   * @param {grpc.internal~Call} call The call to handle
   * @param {Object} handler Request handler object for the method that was called
   * @param {grpc~Server.handleServerStreamingCall} handler.func The handler
   *     function
   * @param {grpc~deserialize} handler.deserialize The deserialization function
   *     for request data
   * @param {grpc~serialize} handler.serialize The serialization function for
   *     response data
   * @param {grpc.Metadata} metadata Metadata from the client
   */
  function handleServerStreaming(call, handler, metadata$$1) {
    var stream = new ServerWritableStream(call, metadata$$1, handler.serialize);
    stream.waitForCancel();
    var batch = {};
    batch[grpc_extension.opType.RECV_MESSAGE] = true;
    call.startBatch(batch, function(err, result) {
      if (err) {
        stream.emit('error', err);
        return;
      }
      try {
        stream.request = handler.deserialize(result.read);
      } catch (e) {
        e.code = constants.status.INTERNAL;
        stream.emit('error', e);
        return;
      }
      handler.func(stream);
    });
  }

  /**
   * User provided method to handle client streaming methods on the server.
   * @callback grpc.Server~handleClientStreamingCall
   * @param {grpc~ServerReadableStream} call The call object
   * @param {grpc.Server~sendUnaryData} callback The callback to call to respond
   *     to the request
   */

  /**
   * Fully handle a client streaming call
   * @access private
   * @param {grpc.internal~Call} call The call to handle
   * @param {Object} handler Request handler object for the method that was called
   * @param {grpc~Server.handleClientStreamingCall} handler.func The handler
   *     function
   * @param {grpc~deserialize} handler.deserialize The deserialization function
   *     for request data
   * @param {grpc~serialize} handler.serialize The serialization function for
   *     response data
   * @param {grpc.Metadata} metadata Metadata from the client
   */
  function handleClientStreaming(call, handler, metadata$$1) {
    var stream = new ServerReadableStream(call, metadata$$1, handler.deserialize);
    stream.on('error', function(error) {
      handleError(call, error);
    });
    stream.waitForCancel();
    handler.func(stream, function(err, value, trailer, flags) {
      stream.terminate();
      if (err) {
        if (trailer) {
          err.metadata = trailer;
        }
        handleError(call, err);
      } else {
        sendUnaryResponse(call, value, handler.serialize, trailer, flags);
      }
    });
  }

  /**
   * User provided method to handle bidirectional streaming calls on the server.
   * @callback grpc.Server~handleBidiStreamingCall
   * @param {grpc~ServerDuplexStream} call The call object
   */

  /**
   * Fully handle a bidirectional streaming call
   * @private
   * @param {grpc.internal~Call} call The call to handle
   * @param {Object} handler Request handler object for the method that was called
   * @param {grpc~Server.handleBidiStreamingCall} handler.func The handler
   *     function
   * @param {grpc~deserialize} handler.deserialize The deserialization function
   *     for request data
   * @param {grpc~serialize} handler.serialize The serialization function for
   *     response data
   * @param {Metadata} metadata Metadata from the client
   */
  function handleBidiStreaming(call, handler, metadata$$1) {
    var stream = new ServerDuplexStream(call, metadata$$1, handler.serialize,
                                        handler.deserialize);
    stream.waitForCancel();
    handler.func(stream);
  }

  var streamHandlers = {
    unary: handleUnary,
    server_stream: handleServerStreaming,
    client_stream: handleClientStreaming,
    bidi: handleBidiStreaming
  };

  /**
   * Constructs a server object that stores request handlers and delegates
   * incoming requests to those handlers
   * @memberof grpc
   * @constructor
   * @param {Object=} options Options that should be passed to the internal server
   *     implementation
   * @example
   * var server = new grpc.Server();
   * server.addProtoService(protobuf_service_descriptor, service_implementation);
   * server.bind('address:port', server_credential);
   * server.start();
   */
  function Server(options) {
    this.handlers = {};
    var server = new grpc_extension.Server(options);
    this._server = server;
    this.started = false;
  }

  /**
   * Start the server and begin handling requests
   */
  Server.prototype.start = function() {
    if (this.started) {
      throw new Error('Server is already running');
    }
    var self = this;
    this.started = true;
    this._server.start();
    /**
     * Handles the SERVER_RPC_NEW event. If there is a handler associated with
     * the requested method, use that handler to respond to the request. Then
     * wait for the next request
     * @param {grpc.internal~Event} event The event to handle with tag
     *     SERVER_RPC_NEW
     */
    function handleNewCall(err, event) {
      if (err) {
        return;
      }
      var details = event.new_call;
      var call = details.call;
      var method = details.method;
      var metadata$$1 = metadata._fromCoreRepresentation(details.metadata);
      if (method === null) {
        return;
      }
      self._server.requestCall(handleNewCall);
      var handler;
      if (self.handlers.hasOwnProperty(method)) {
        handler = self.handlers[method];
      } else {
        var batch = {};
        batch[grpc_extension.opType.SEND_INITIAL_METADATA] =
            (new metadata())._getCoreRepresentation();
        batch[grpc_extension.opType.SEND_STATUS_FROM_SERVER] = {
          code: constants.status.UNIMPLEMENTED,
          details: 'RPC method not implemented ' + method,
          metadata: {}
        };
        batch[grpc_extension.opType.RECV_CLOSE_ON_SERVER] = true;
        call.startBatch(batch, function() {});
        return;
      }
      streamHandlers[handler.type](call, handler, metadata$$1);
    }
    this._server.requestCall(handleNewCall);
  };

  /**
   * Unified type for application handlers for all types of calls
   * @typedef {(grpc.Server~handleUnaryCall
   *            |grpc.Server~handleClientStreamingCall
   *            |grpc.Server~handleServerStreamingCall
   *            |grpc.Server~handleBidiStreamingCall)} grpc.Server~handleCall
   */

  /**
   * Registers a handler to handle the named method. Fails if there already is
   * a handler for the given method. Returns true on success
   * @param {string} name The name of the method that the provided function should
   *     handle/respond to.
   * @param {grpc.Server~handleCall} handler Function that takes a stream of
   *     request values and returns a stream of response values
   * @param {grpc~serialize} serialize Serialization function for responses
   * @param {grpc~deserialize} deserialize Deserialization function for requests
   * @param {string} type The streaming type of method that this handles
   * @return {boolean} True if the handler was set. False if a handler was already
   *     set for that name.
   */
  Server.prototype.register = function(name, handler, serialize, deserialize,
                                       type) {
    if (this.handlers.hasOwnProperty(name)) {
      return false;
    }
    this.handlers[name] = {
      func: handler,
      serialize: serialize,
      deserialize: deserialize,
      type: type
    };
    return true;
  };

  /**
   * Gracefully shuts down the server. The server will stop receiving new calls,
   * and any pending calls will complete. The callback will be called when all
   * pending calls have completed and the server is fully shut down. This method
   * is idempotent with itself and forceShutdown.
   * @param {function()} callback The shutdown complete callback
   */
  Server.prototype.tryShutdown = function(callback) {
    this._server.tryShutdown(callback);
  };

  /**
   * Forcibly shuts down the server. The server will stop receiving new calls
   * and cancel all pending calls. When it returns, the server has shut down.
   * This method is idempotent with itself and tryShutdown, and it will trigger
   * any outstanding tryShutdown callbacks.
   */
  Server.prototype.forceShutdown = function() {
    this._server.forceShutdown();
  };

  var unimplementedStatusResponse = {
    code: constants.status.UNIMPLEMENTED,
    details: 'The server does not implement this method'
  };

  var defaultHandler = {
    unary: function(call, callback) {
      callback(unimplementedStatusResponse);
    },
    client_stream: function(call, callback) {
      callback(unimplementedStatusResponse);
    },
    server_stream: function(call) {
      call.emit('error', unimplementedStatusResponse);
    },
    bidi: function(call) {
      call.emit('error', unimplementedStatusResponse);
    }
  };

  /**
   * Add a service to the server, with a corresponding implementation.
   * @param {grpc~ServiceDefinition} service The service descriptor
   * @param {Object<String, grpc.Server~handleCall>} implementation Map of method
   *     names to method implementation for the provided service.
   */
  Server.prototype.addService = function(service, implementation) {
    if (!lodash.isObject(service) || !lodash.isObject(implementation)) {
      throw new Error('addService requires two objects as arguments');
    }
    if (lodash.keys(service).length === 0) {
      throw new Error('Cannot add an empty service to a server');
    }
    if (this.started) {
      throw new Error('Can\'t add a service to a started server.');
    }
    var self = this;
    lodash.forOwn(service, function(attrs, name) {
      var method_type;
      if (attrs.requestStream) {
        if (attrs.responseStream) {
          method_type = 'bidi';
        } else {
          method_type = 'client_stream';
        }
      } else {
        if (attrs.responseStream) {
          method_type = 'server_stream';
        } else {
          method_type = 'unary';
        }
      }
      var impl;
      if (implementation[name] === undefined) {
        /* Handle the case where the method is passed with the name exactly as
           written in the proto file, instead of using JavaScript function
           naming style */
        if (implementation[attrs.originalName] === undefined) {
          common$1.log(constants.logVerbosity.ERROR, 'Method handler ' + name +
              ' for ' + attrs.path + ' expected but not provided');
          impl = defaultHandler[method_type];
        } else {
          impl = lodash.bind(implementation[attrs.originalName], implementation);
        }
      } else {
        impl = lodash.bind(implementation[name], implementation);
      }
      var serialize = attrs.responseSerialize;
      var deserialize = attrs.requestDeserialize;
      var register_success = self.register(attrs.path, impl, serialize,
                                           deserialize, method_type);
      if (!register_success) {
        throw new Error('Method handler for ' + attrs.path +
            ' already provided.');
      }
    });
  };

  /**
   * Add a proto service to the server, with a corresponding implementation
   * @deprecated Use {@link grpc.Server#addService} instead
   * @param {Protobuf.Reflect.Service} service The proto service descriptor
   * @param {Object<String, grpc.Server~handleCall>} implementation Map of method
   *     names to method implementation for the provided service.
   */
  Server.prototype.addProtoService = require$$1$1.deprecate(function(service,
                                                             implementation) {
    var options;
    var protobuf_js_5_common$$1 = protobuf_js_5_common;
    var protobuf_js_6_common$$1 = protobuf_js_6_common;
    if (protobuf_js_5_common$$1.isProbablyProtobufJs5(service)) {
      options = lodash.defaults(service.grpc_options, common$1.defaultGrpcOptions);
      this.addService(
          protobuf_js_5_common$$1.getProtobufServiceAttrs(service, options),
          implementation);
    } else if (protobuf_js_6_common$$1.isProbablyProtobufJs6(service)) {
      options = lodash.defaults(service.grpc_options, common$1.defaultGrpcOptions);
      this.addService(
          protobuf_js_6_common$$1.getProtobufServiceAttrs(service, options),
          implementation);
    } else {
      // We assume that this is a service attributes object
      this.addService(service, implementation);
    }
  }, 'Server#addProtoService: Use Server#addService instead');

  /**
   * Binds the server to the given port, with SSL disabled if creds is an
   * insecure credentials object
   * @param {string} port The port that the server should bind on, in the format
   *     "address:port"
   * @param {grpc.ServerCredentials} creds Server credential object to be used for
   *     SSL. Pass an insecure credentials object for an insecure port.
   */
  Server.prototype.bind = function(port, creds) {
    if (this.started) {
      throw new Error('Can\'t bind an already running server to an address');
    }
    return this._server.addHttp2Port(port, creds);
  };

  var Server_1 = Server;

  var server = {
  	Server: Server_1
  };

  var credentials = createCommonjsModule(function (module, exports) {



  /**
   * This cannot be constructed directly. Instead, instances of this class should
   * be created using the factory functions in {@link grpc.credentials}
   * @constructor grpc.credentials~CallCredentials
   */
  var CallCredentials = grpc_extension.CallCredentials;

  /**
   * This cannot be constructed directly. Instead, instances of this class should
   * be created using the factory functions in {@link grpc.credentials}
   * @constructor grpc.credentials~ChannelCredentials
   */
  var ChannelCredentials = grpc_extension.ChannelCredentials;









  /**
   * @external GoogleCredential
   * @see https://github.com/google/google-auth-library-nodejs
   */

  /**
   * Create an SSL Credentials object. If using a client-side certificate, both
   * the second and third arguments must be passed.
   * @memberof grpc.credentials
   * @alias grpc.credentials.createSsl
   * @kind function
   * @param {Buffer=} root_certs The root certificate data
   * @param {Buffer=} private_key The client certificate private key, if
   *     applicable
   * @param {Buffer=} cert_chain The client certificate cert chain, if applicable
   * @return {grpc.credentials~ChannelCredentials} The SSL Credentials object
   */
  exports.createSsl = ChannelCredentials.createSsl;

  /**
   * @callback grpc.credentials~metadataCallback
   * @param {Error} error The error, if getting metadata failed
   * @param {grpc.Metadata} metadata The metadata
   */

  /**
   * @callback grpc.credentials~generateMetadata
   * @param {Object} params Parameters that can modify metadata generation
   * @param {string} params.service_url The URL of the service that the call is
   *     going to
   * @param {grpc.credentials~metadataCallback} callback
   */

  /**
   * Create a gRPC credentials object from a metadata generation function. This
   * function gets the service URL and a callback as parameters. The error
   * passed to the callback can optionally have a 'code' value attached to it,
   * which corresponds to a status code that this library uses.
   * @memberof grpc.credentials
   * @alias grpc.credentials.createFromMetadataGenerator
   * @param {grpc.credentials~generateMetadata} metadata_generator The function
   *     that generates metadata
   * @return {grpc.credentials~CallCredentials} The credentials object
   */
  exports.createFromMetadataGenerator = function(metadata_generator) {
    return CallCredentials.createFromPlugin(function(service_url, cb_data,
                                                     callback) {
      metadata_generator({service_url: service_url}, function(error, metadata$$1) {
        var code = constants.status.OK;
        var message = '';
        if (error) {
          message = error.message;
          if (error.hasOwnProperty('code') && lodash.isFinite(error.code)) {
            code = error.code;
          } else {
            code = constants.status.UNAUTHENTICATED;
          }
          if (!metadata$$1) {
            metadata$$1 = new metadata();
          }
        }
        callback(code, message, metadata$$1._getCoreRepresentation(), cb_data);
      });
    });
  };

  /**
   * Create a gRPC credential from a Google credential object.
   * @memberof grpc.credentials
   * @alias grpc.credentials.createFromGoogleCredential
   * @param {external:GoogleCredential} google_credential The Google credential
   *     object to use
   * @return {grpc.credentials~CallCredentials} The resulting credentials object
   */
  exports.createFromGoogleCredential = function(google_credential) {
    return exports.createFromMetadataGenerator(function(auth_context, callback) {
      var service_url = auth_context.service_url;
      google_credential.getRequestMetadata(service_url, function(err, header) {
        if (err) {
          common$1.log(constants.logVerbosity.INFO, 'Auth error:' + err);
          callback(err);
          return;
        }
        var metadata$$1 = new metadata();
        metadata$$1.add('authorization', header.Authorization);
        callback(null, metadata$$1);
      });
    });
  };

  /**
   * Combine a ChannelCredentials with any number of CallCredentials into a single
   * ChannelCredentials object.
   * @memberof grpc.credentials
   * @alias grpc.credentials.combineChannelCredentials
   * @param {grpc.credentials~ChannelCredentials} channel_credential The ChannelCredentials to
   *     start with
   * @param {...grpc.credentials~CallCredentials} credentials The CallCredentials to compose
   * @return {grpc.credentials~ChannelCredentials} A credentials object that combines all of the
   *     input credentials
   */
  exports.combineChannelCredentials = function(channel_credential) {
    var current = channel_credential;
    for (var i = 1; i < arguments.length; i++) {
      current = current.compose(arguments[i]);
    }
    return current;
  };

  /**
   * Combine any number of CallCredentials into a single CallCredentials object
   * @memberof grpc.credentials
   * @alias grpc.credentials.combineCallCredentials
   * @param {...grpc.credentials~CallCredentials} credentials The CallCredentials to compose
   * @return {grpc.credentials~CallCredentials} A credentials object that combines all of the input
   *     credentials
   */
  exports.combineCallCredentials = function() {
    var current = arguments[0];
    for (var i = 1; i < arguments.length; i++) {
      current = current.compose(arguments[i]);
    }
    return current;
  };

  /**
   * Create an insecure credentials object. This is used to create a channel that
   * does not use SSL. This cannot be composed with anything.
   * @memberof grpc.credentials
   * @alias grpc.credentials.createInsecure
   * @kind function
   * @return {grpc.credentials~ChannelCredentials} The insecure credentials object
   */
  exports.createInsecure = ChannelCredentials.createInsecure;
  });
  var credentials_1 = credentials.createSsl;
  var credentials_2 = credentials.createFromMetadataGenerator;
  var credentials_3 = credentials.createFromGoogleCredential;
  var credentials_4 = credentials.combineChannelCredentials;
  var credentials_5 = credentials.combineCallCredentials;
  var credentials_6 = credentials.createInsecure;

  var grpc_1 = createCommonjsModule(function (module, exports) {





  var SSL_ROOTS_PATH = pathModule.resolve(__dirname, 'deps', 'grpc', 'etc', 'roots.pem');




















  grpc_extension.setDefaultRootsPem(fs.readFileSync(SSL_ROOTS_PATH, 'ascii'));

  /**
   * @namespace grpc
   */

  /**
   * Load a ProtoBuf.js object as a gRPC object.
   * @memberof grpc
   * @alias grpc.loadObject
   * @param {Object} value The ProtoBuf.js reflection object to load
   * @param {Object=} options Options to apply to the loaded file
   * @param {bool=} [options.binaryAsBase64=false] deserialize bytes values as
   *     base64 strings instead of Buffers
   * @param {bool=} [options.longsAsStrings=true] deserialize long values as
   *     strings instead of objects
   * @param {bool=} [options.enumsAsStrings=true] deserialize enum values as
   *     strings instead of numbers. Only works with Protobuf.js 6 values.
   * @param {bool=} [options.deprecatedArgumentOrder=false] use the beta method
   *     argument order for client methods, with optional arguments after the
   *     callback. This option is only a temporary stopgap measure to smooth an
   *     API breakage. It is deprecated, and new code should not use it.
   * @param {(number|string)=} [options.protobufjsVersion='detect'] 5 and 6
   *     respectively indicate that an object from the corresponding version of
   *     Protobuf.js is provided in the value argument. If the option is 'detect',
   *     gRPC will guess what the version is based on the structure of the value.
   * @return {Object<string, *>} The resulting gRPC object.
   */
  exports.loadObject = function loadObject(value, options) {
    options = lodash.defaults(options, common$1.defaultGrpcOptions);
    options = lodash.defaults(options, {'protobufjsVersion': 'detect'});
    var protobufjsVersion;
    if (options.protobufjsVersion === 'detect') {
      if (protobuf_js_6_common.isProbablyProtobufJs6(value)) {
        protobufjsVersion = 6;
      } else if (protobuf_js_5_common.isProbablyProtobufJs5(value)) {
        protobufjsVersion = 5;
      } else {
        var error_message = 'Could not detect ProtoBuf.js version. Please ' +
            'specify the version number with the "protobufjsVersion" option';
        throw new Error(error_message);
      }
    } else {
      protobufjsVersion = options.protobufjsVersion;
    }
    switch (protobufjsVersion) {
      case 6: return protobuf_js_6_common.loadObject(value, options);
      case 5:
      return protobuf_js_5_common.loadObject(value, options);
      default:
      throw new Error('Unrecognized protobufjsVersion', protobufjsVersion);
    }
  };

  var loadObject = exports.loadObject;

  /**
   * Load a gRPC object from a .proto file.
   * @memberof grpc
   * @alias grpc.load
   * @param {string|{root: string, file: string}} filename The file to load
   * @param {string=} format The file format to expect. Must be either 'proto' or
   *     'json'. Defaults to 'proto'
   * @param {Object=} options Options to apply to the loaded file
   * @param {bool=} [options.convertFieldsToCamelCase=false] Load this file with
   *     field names in camel case instead of their original case
   * @param {bool=} [options.binaryAsBase64=false] deserialize bytes values as
   *     base64 strings instead of Buffers
   * @param {bool=} [options.longsAsStrings=true] deserialize long values as
   *     strings instead of objects
   * @param {bool=} [options.deprecatedArgumentOrder=false] use the beta method
   *     argument order for client methods, with optional arguments after the
   *     callback. This option is only a temporary stopgap measure to smooth an
   *     API breakage. It is deprecated, and new code should not use it.
   * @return {Object<string, *>} The resulting gRPC object
   */
  exports.load = require$$1$1.deprecate(function load(filename, format, options) {
    options = lodash.defaults(options, common$1.defaultGrpcOptions);
    options.protobufjsVersion = 5;
    if (!format) {
      format = 'proto';
    }
    var convertFieldsToCamelCaseOriginal = protobuf.convertFieldsToCamelCase;
    if(options && options.hasOwnProperty('convertFieldsToCamelCase')) {
      protobuf.convertFieldsToCamelCase = options.convertFieldsToCamelCase;
    }
    var builder;
    try {
      switch(format) {
        case 'proto':
        builder = protobuf.loadProtoFile(filename);
        break;
        case 'json':
        builder = protobuf.loadJsonFile(filename);
        break;
        default:
        throw new Error('Unrecognized format "' + format + '"');
      }
    } finally {
      protobuf.convertFieldsToCamelCase = convertFieldsToCamelCaseOriginal;
    }

    if (!builder) {
      throw new Error('Could not load file "' + filename + '"');
    }

    return loadObject(builder.ns, options);
  }, 'grpc.load: Use the @grpc/proto-loader module with grpc.loadPackageDefinition instead');

  /**
   * Load a gRPC package definition as a gRPC object hierarchy
   * @param packageDef grpc~PackageDefinition The package definition object
   * @return {Object<string, *>} The resulting gRPC object
   */
  exports.loadPackageDefinition = function loadPackageDefintion(packageDef) {
    const result = {};
    for (const serviceFqn in packageDef) {
      const service = packageDef[serviceFqn];
      const nameComponents = serviceFqn.split('.');
      const serviceName = nameComponents[nameComponents.length-1];
      let current = result;
      for (const packageName of nameComponents.slice(0, -1)) {
        if (!current[packageName]) {
          current[packageName] = {};
        }
        current = current[packageName];
      }
      current[serviceName] = client.makeClientConstructor(service, serviceName, {});
    }
    return result;
  };

  var log_template = function(args) {
    var file = args.file;
    var line = args.line;
    var severity = args.severity;
    var message = args.message;
    var timestamp = args.timestamp;
    return `${severity} ${timestamp}\t${file}:${line}]\t${message}`;
  };

  /**
   * Sets the logger function for the gRPC module. For debugging purposes, the C
   * core will log synchronously directly to stdout unless this function is
   * called. Note: the output format here is intended to be informational, and
   * is not guaranteed to stay the same in the future.
   * Logs will be directed to logger.error.
   * @memberof grpc
   * @alias grpc.setLogger
   * @param {Console} logger A Console-like object.
   */
  exports.setLogger = function setLogger(logger) {
    common$1.logger = logger;
    grpc_extension.setDefaultLoggerCallback(function(file, line, severity,
                                           message, timestamp) {
      logger.error(log_template({
        file: pathModule.basename(file),
        line: line,
        severity: severity,
        message: message,
        timestamp: timestamp.toISOString()
      }));
    });
  };

  /**
   * Sets the logger verbosity for gRPC module logging. The options are members
   * of the grpc.logVerbosity map.
   * @memberof grpc
   * @alias grpc.setLogVerbosity
   * @param {Number} verbosity The minimum severity to log
   */
  exports.setLogVerbosity = function setLogVerbosity(verbosity) {
    common$1.logVerbosity = verbosity;
    grpc_extension.setLogVerbosity(verbosity);
  };

  exports.Server = server.Server;

  exports.Metadata = metadata;

  exports.status = constants.status;

  exports.propagate = constants.propagate;

  exports.callError = constants.callError;

  exports.writeFlags = constants.writeFlags;

  exports.logVerbosity = constants.logVerbosity;

  exports.methodTypes = constants.methodTypes;

  exports.credentials = credentials;

  /**
   * ServerCredentials factories
   * @constructor ServerCredentials
   * @memberof grpc
   */
  exports.ServerCredentials = grpc_extension.ServerCredentials;

  /**
   * Create insecure server credentials
   * @name grpc.ServerCredentials.createInsecure
   * @kind function
   * @return {grpc.ServerCredentials}
   */

  /**
   * A private key and certificate pair
   * @typedef {Object} grpc.ServerCredentials~keyCertPair
   * @property {Buffer} private_key The server's private key
   * @property {Buffer} cert_chain The server's certificate chain
   */

  /**
   * Create SSL server credentials
   * @name grpc.ServerCredentials.createSsl
   * @kind function
   * @param {?Buffer} rootCerts Root CA certificates for validating client
   *     certificates
   * @param {Array<grpc.ServerCredentials~keyCertPair>} keyCertPairs A list of
   *     private key and certificate chain pairs to be used for authenticating
   *     the server
   * @param {boolean} [checkClientCertificate=false] Indicates that the server
   *     should request and verify the client's certificates
   * @return {grpc.ServerCredentials}
   */

  exports.makeGenericClientConstructor = client.makeClientConstructor;

  exports.getClientChannel = client.getClientChannel;

  exports.waitForClientReady = client.waitForClientReady;

  exports.StatusBuilder = client.StatusBuilder;
  exports.ListenerBuilder = client.ListenerBuilder;
  exports.RequesterBuilder = client.RequesterBuilder;
  exports.InterceptingCall = client.InterceptingCall;

  /**
   * @memberof grpc
   * @alias grpc.closeClient
   * @param {grpc.Client} client_obj The client to close
   */
  exports.closeClient = function closeClient(client_obj) {
    client.Client.prototype.close.apply(client_obj);
  };

  exports.Client = client.Client;
  });
  var grpc_2 = grpc_1.loadObject;
  var grpc_3 = grpc_1.load;
  var grpc_4 = grpc_1.loadPackageDefinition;
  var grpc_5 = grpc_1.setLogger;
  var grpc_6 = grpc_1.setLogVerbosity;
  var grpc_7 = grpc_1.Server;
  var grpc_8 = grpc_1.Metadata;
  var grpc_9 = grpc_1.status;
  var grpc_10 = grpc_1.propagate;
  var grpc_11 = grpc_1.callError;
  var grpc_12 = grpc_1.writeFlags;
  var grpc_13 = grpc_1.logVerbosity;
  var grpc_14 = grpc_1.methodTypes;
  var grpc_15 = grpc_1.credentials;
  var grpc_16 = grpc_1.ServerCredentials;
  var grpc_17 = grpc_1.makeGenericClientConstructor;
  var grpc_18 = grpc_1.getClientChannel;
  var grpc_19 = grpc_1.waitForClientReady;
  var grpc_20 = grpc_1.StatusBuilder;
  var grpc_21 = grpc_1.ListenerBuilder;
  var grpc_22 = grpc_1.RequesterBuilder;
  var grpc_23 = grpc_1.InterceptingCall;
  var grpc_24 = grpc_1.closeClient;
  var grpc_25 = grpc_1.Client;

  function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties$1(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass$1(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties$1(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread$1(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      });
    }

    return target;
  }

  function _inherits$1(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf$1(subClass, superClass);
  }

  function _getPrototypeOf$1(o) {
    _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf$$1(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf$1(o);
  }

  function _setPrototypeOf$1(o, p) {
    _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf$$1(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf$1(o, p);
  }

  function _assertThisInitialized$1(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn$1(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized$1(self);
  }

  function _toConsumableArray$1(arr) {
    return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _nonIterableSpread$1();
  }

  function _arrayWithoutHoles$1(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
  }

  function _iterableToArray$1(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread$1() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function createCommonjsModule$1(fn, module) {
    return module = {
      exports: {}
    }, fn(module, module.exports), module.exports;
  }

  var blockchain_pb = createCommonjsModule$1(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.exportSymbol('proto.types.ABI', null, global);
    goog.exportSymbol('proto.types.Block', null, global);
    goog.exportSymbol('proto.types.BlockBody', null, global);
    goog.exportSymbol('proto.types.BlockHeader', null, global);
    goog.exportSymbol('proto.types.FnArgument', null, global);
    goog.exportSymbol('proto.types.Function', null, global);
    goog.exportSymbol('proto.types.Query', null, global);
    goog.exportSymbol('proto.types.Receipt', null, global);
    goog.exportSymbol('proto.types.State', null, global);
    goog.exportSymbol('proto.types.Tx', null, global);
    goog.exportSymbol('proto.types.TxBody', null, global);
    goog.exportSymbol('proto.types.TxIdx', null, global);
    goog.exportSymbol('proto.types.TxInBlock', null, global);
    goog.exportSymbol('proto.types.TxList', null, global);
    goog.exportSymbol('proto.types.TxType', null, global);
    goog.exportSymbol('proto.types.Vote', null, global);
    goog.exportSymbol('proto.types.VoteList', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.Block = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Block, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Block.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Block.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Block} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Block.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          hash: msg.getHash_asB64(),
          header: (f = msg.getHeader()) && proto.types.BlockHeader.toObject(includeInstance, f),
          body: (f = msg.getBody()) && proto.types.BlockBody.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Block}
     */


    proto.types.Block.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Block();
      return proto.types.Block.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Block} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Block}
     */


    proto.types.Block.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value = new proto.types.BlockHeader();
            reader.readMessage(value, proto.types.BlockHeader.deserializeBinaryFromReader);
            msg.setHeader(value);
            break;

          case 3:
            var value = new proto.types.BlockBody();
            reader.readMessage(value, proto.types.BlockBody.deserializeBinaryFromReader);
            msg.setBody(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Block.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Block.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Block} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Block.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getHeader();

      if (f != null) {
        writer.writeMessage(2, f, proto.types.BlockHeader.serializeBinaryToWriter);
      }

      f = message.getBody();

      if (f != null) {
        writer.writeMessage(3, f, proto.types.BlockBody.serializeBinaryToWriter);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Block.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.Block.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.Block.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Block.prototype.setHash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional BlockHeader header = 2;
     * @return {?proto.types.BlockHeader}
     */


    proto.types.Block.prototype.getHeader = function () {
      return (
        /** @type{?proto.types.BlockHeader} */
        googleProtobuf.Message.getWrapperField(this, proto.types.BlockHeader, 2)
      );
    };
    /** @param {?proto.types.BlockHeader|undefined} value */


    proto.types.Block.prototype.setHeader = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.Block.prototype.clearHeader = function () {
      this.setHeader(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.Block.prototype.hasHeader = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * optional BlockBody body = 3;
     * @return {?proto.types.BlockBody}
     */


    proto.types.Block.prototype.getBody = function () {
      return (
        /** @type{?proto.types.BlockBody} */
        googleProtobuf.Message.getWrapperField(this, proto.types.BlockBody, 3)
      );
    };
    /** @param {?proto.types.BlockBody|undefined} value */


    proto.types.Block.prototype.setBody = function (value) {
      googleProtobuf.Message.setWrapperField(this, 3, value);
    };

    proto.types.Block.prototype.clearBody = function () {
      this.setBody(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.Block.prototype.hasBody = function () {
      return googleProtobuf.Message.getField(this, 3) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockHeader = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.BlockHeader, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockHeader.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockHeader.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockHeader} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockHeader.toObject = function (includeInstance, msg) {
        var obj = {
          prevblockhash: msg.getPrevblockhash_asB64(),
          blockno: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          timestamp: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          blocksroothash: msg.getBlocksroothash_asB64(),
          txsroothash: msg.getTxsroothash_asB64(),
          confirms: googleProtobuf.Message.getFieldWithDefault(msg, 6, 0),
          pubkey: msg.getPubkey_asB64(),
          sign: msg.getSign_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockHeader}
     */


    proto.types.BlockHeader.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockHeader();
      return proto.types.BlockHeader.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockHeader} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockHeader}
     */


    proto.types.BlockHeader.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPrevblockhash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBlockno(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readInt64();
            msg.setTimestamp(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBlocksroothash(value);
            break;

          case 5:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setTxsroothash(value);
            break;

          case 6:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setConfirms(value);
            break;

          case 7:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPubkey(value);
            break;

          case 8:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setSign(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockHeader.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockHeader} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockHeader.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getPrevblockhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getBlockno();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }

      f = message.getTimestamp();

      if (f !== 0) {
        writer.writeInt64(3, f);
      }

      f = message.getBlocksroothash_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }

      f = message.getTxsroothash_asU8();

      if (f.length > 0) {
        writer.writeBytes(5, f);
      }

      f = message.getConfirms();

      if (f !== 0) {
        writer.writeUint64(6, f);
      }

      f = message.getPubkey_asU8();

      if (f.length > 0) {
        writer.writeBytes(7, f);
      }

      f = message.getSign_asU8();

      if (f.length > 0) {
        writer.writeBytes(8, f);
      }
    };
    /**
     * optional bytes prevBlockHash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getPrevblockhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes prevBlockHash = 1;
     * This is a type-conversion wrapper around `getPrevblockhash()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getPrevblockhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPrevblockhash())
      );
    };
    /**
     * optional bytes prevBlockHash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPrevblockhash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getPrevblockhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPrevblockhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setPrevblockhash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional uint64 blockNo = 2;
     * @return {number}
     */


    proto.types.BlockHeader.prototype.getBlockno = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockHeader.prototype.setBlockno = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional int64 timestamp = 3;
     * @return {number}
     */


    proto.types.BlockHeader.prototype.getTimestamp = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockHeader.prototype.setTimestamp = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * optional bytes blocksRootHash = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getBlocksroothash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes blocksRootHash = 4;
     * This is a type-conversion wrapper around `getBlocksroothash()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getBlocksroothash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBlocksroothash())
      );
    };
    /**
     * optional bytes blocksRootHash = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBlocksroothash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getBlocksroothash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBlocksroothash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setBlocksroothash = function (value) {
      googleProtobuf.Message.setField(this, 4, value);
    };
    /**
     * optional bytes txsRootHash = 5;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getTxsroothash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, "")
      );
    };
    /**
     * optional bytes txsRootHash = 5;
     * This is a type-conversion wrapper around `getTxsroothash()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getTxsroothash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getTxsroothash())
      );
    };
    /**
     * optional bytes txsRootHash = 5;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getTxsroothash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getTxsroothash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getTxsroothash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setTxsroothash = function (value) {
      googleProtobuf.Message.setField(this, 5, value);
    };
    /**
     * optional uint64 confirms = 6;
     * @return {number}
     */


    proto.types.BlockHeader.prototype.getConfirms = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockHeader.prototype.setConfirms = function (value) {
      googleProtobuf.Message.setField(this, 6, value);
    };
    /**
     * optional bytes pubKey = 7;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getPubkey = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, "")
      );
    };
    /**
     * optional bytes pubKey = 7;
     * This is a type-conversion wrapper around `getPubkey()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getPubkey_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPubkey())
      );
    };
    /**
     * optional bytes pubKey = 7;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPubkey()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getPubkey_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPubkey())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setPubkey = function (value) {
      googleProtobuf.Message.setField(this, 7, value);
    };
    /**
     * optional bytes sign = 8;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getSign = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 8, "")
      );
    };
    /**
     * optional bytes sign = 8;
     * This is a type-conversion wrapper around `getSign()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getSign_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getSign())
      );
    };
    /**
     * optional bytes sign = 8;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getSign()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getSign_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getSign())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setSign = function (value) {
      googleProtobuf.Message.setField(this, 8, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockBody = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.BlockBody.repeatedFields_, null);
    };

    goog.inherits(proto.types.BlockBody, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.BlockBody.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockBody.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockBody.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockBody} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockBody.toObject = function (includeInstance, msg) {
        var obj = {
          txsList: googleProtobuf.Message.toObjectList(msg.getTxsList(), proto.types.Tx.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockBody}
     */


    proto.types.BlockBody.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockBody();
      return proto.types.BlockBody.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockBody} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockBody}
     */


    proto.types.BlockBody.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Tx();
            reader.readMessage(value, proto.types.Tx.deserializeBinaryFromReader);
            msg.addTxs(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockBody.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockBody.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockBody} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockBody.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTxsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.Tx.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Tx txs = 1;
     * @return {!Array.<!proto.types.Tx>}
     */


    proto.types.BlockBody.prototype.getTxsList = function () {
      return (
        /** @type{!Array.<!proto.types.Tx>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Tx, 1)
      );
    };
    /** @param {!Array.<!proto.types.Tx>} value */


    proto.types.BlockBody.prototype.setTxsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Tx=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Tx}
     */


    proto.types.BlockBody.prototype.addTxs = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Tx, opt_index);
    };

    proto.types.BlockBody.prototype.clearTxsList = function () {
      this.setTxsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.TxList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.TxList.repeatedFields_, null);
    };

    goog.inherits(proto.types.TxList, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.TxList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.TxList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.TxList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.TxList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.TxList.toObject = function (includeInstance, msg) {
        var obj = {
          txsList: googleProtobuf.Message.toObjectList(msg.getTxsList(), proto.types.Tx.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.TxList}
     */


    proto.types.TxList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.TxList();
      return proto.types.TxList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.TxList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.TxList}
     */


    proto.types.TxList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Tx();
            reader.readMessage(value, proto.types.Tx.deserializeBinaryFromReader);
            msg.addTxs(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.TxList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.TxList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.TxList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.TxList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTxsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.Tx.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Tx txs = 1;
     * @return {!Array.<!proto.types.Tx>}
     */


    proto.types.TxList.prototype.getTxsList = function () {
      return (
        /** @type{!Array.<!proto.types.Tx>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Tx, 1)
      );
    };
    /** @param {!Array.<!proto.types.Tx>} value */


    proto.types.TxList.prototype.setTxsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Tx=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Tx}
     */


    proto.types.TxList.prototype.addTxs = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Tx, opt_index);
    };

    proto.types.TxList.prototype.clearTxsList = function () {
      this.setTxsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Tx = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Tx, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Tx.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Tx.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Tx} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Tx.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          hash: msg.getHash_asB64(),
          body: (f = msg.getBody()) && proto.types.TxBody.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Tx}
     */


    proto.types.Tx.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Tx();
      return proto.types.Tx.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Tx} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Tx}
     */


    proto.types.Tx.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value = new proto.types.TxBody();
            reader.readMessage(value, proto.types.TxBody.deserializeBinaryFromReader);
            msg.setBody(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Tx.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Tx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Tx} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Tx.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getBody();

      if (f != null) {
        writer.writeMessage(2, f, proto.types.TxBody.serializeBinaryToWriter);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Tx.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.Tx.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.Tx.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Tx.prototype.setHash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional TxBody body = 2;
     * @return {?proto.types.TxBody}
     */


    proto.types.Tx.prototype.getBody = function () {
      return (
        /** @type{?proto.types.TxBody} */
        googleProtobuf.Message.getWrapperField(this, proto.types.TxBody, 2)
      );
    };
    /** @param {?proto.types.TxBody|undefined} value */


    proto.types.Tx.prototype.setBody = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.Tx.prototype.clearBody = function () {
      this.setBody(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.Tx.prototype.hasBody = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.TxBody = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.TxBody, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.TxBody.prototype.toObject = function (opt_includeInstance) {
        return proto.types.TxBody.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.TxBody} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.TxBody.toObject = function (includeInstance, msg) {
        var obj = {
          nonce: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          account: msg.getAccount_asB64(),
          recipient: msg.getRecipient_asB64(),
          amount: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
          payload: msg.getPayload_asB64(),
          limit: googleProtobuf.Message.getFieldWithDefault(msg, 6, 0),
          price: googleProtobuf.Message.getFieldWithDefault(msg, 7, 0),
          type: googleProtobuf.Message.getFieldWithDefault(msg, 8, 0),
          sign: msg.getSign_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.TxBody}
     */


    proto.types.TxBody.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.TxBody();
      return proto.types.TxBody.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.TxBody} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.TxBody}
     */


    proto.types.TxBody.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setNonce(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAccount(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setRecipient(value);
            break;

          case 4:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setAmount(value);
            break;

          case 5:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPayload(value);
            break;

          case 6:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setLimit(value);
            break;

          case 7:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setPrice(value);
            break;

          case 8:
            var value =
            /** @type {!proto.types.TxType} */
            reader.readEnum();
            msg.setType(value);
            break;

          case 9:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setSign(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.TxBody.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.TxBody} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.TxBody.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getNonce();

      if (f !== 0) {
        writer.writeUint64(1, f);
      }

      f = message.getAccount_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }

      f = message.getRecipient_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getAmount();

      if (f !== 0) {
        writer.writeUint64(4, f);
      }

      f = message.getPayload_asU8();

      if (f.length > 0) {
        writer.writeBytes(5, f);
      }

      f = message.getLimit();

      if (f !== 0) {
        writer.writeUint64(6, f);
      }

      f = message.getPrice();

      if (f !== 0) {
        writer.writeUint64(7, f);
      }

      f = message.getType();

      if (f !== 0.0) {
        writer.writeEnum(8, f);
      }

      f = message.getSign_asU8();

      if (f.length > 0) {
        writer.writeBytes(9, f);
      }
    };
    /**
     * optional uint64 nonce = 1;
     * @return {number}
     */


    proto.types.TxBody.prototype.getNonce = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.TxBody.prototype.setNonce = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional bytes account = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getAccount = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes account = 2;
     * This is a type-conversion wrapper around `getAccount()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getAccount_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAccount())
      );
    };
    /**
     * optional bytes account = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAccount()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getAccount_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAccount())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setAccount = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional bytes recipient = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getRecipient = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes recipient = 3;
     * This is a type-conversion wrapper around `getRecipient()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getRecipient_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getRecipient())
      );
    };
    /**
     * optional bytes recipient = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getRecipient()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getRecipient_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getRecipient())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setRecipient = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * optional uint64 amount = 4;
     * @return {number}
     */


    proto.types.TxBody.prototype.getAmount = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, 0)
      );
    };
    /** @param {number} value */


    proto.types.TxBody.prototype.setAmount = function (value) {
      googleProtobuf.Message.setField(this, 4, value);
    };
    /**
     * optional bytes payload = 5;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getPayload = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, "")
      );
    };
    /**
     * optional bytes payload = 5;
     * This is a type-conversion wrapper around `getPayload()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getPayload_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPayload())
      );
    };
    /**
     * optional bytes payload = 5;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPayload()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getPayload_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPayload())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setPayload = function (value) {
      googleProtobuf.Message.setField(this, 5, value);
    };
    /**
     * optional uint64 limit = 6;
     * @return {number}
     */


    proto.types.TxBody.prototype.getLimit = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, 0)
      );
    };
    /** @param {number} value */


    proto.types.TxBody.prototype.setLimit = function (value) {
      googleProtobuf.Message.setField(this, 6, value);
    };
    /**
     * optional uint64 price = 7;
     * @return {number}
     */


    proto.types.TxBody.prototype.getPrice = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, 0)
      );
    };
    /** @param {number} value */


    proto.types.TxBody.prototype.setPrice = function (value) {
      googleProtobuf.Message.setField(this, 7, value);
    };
    /**
     * optional TxType type = 8;
     * @return {!proto.types.TxType}
     */


    proto.types.TxBody.prototype.getType = function () {
      return (
        /** @type {!proto.types.TxType} */
        googleProtobuf.Message.getFieldWithDefault(this, 8, 0)
      );
    };
    /** @param {!proto.types.TxType} value */


    proto.types.TxBody.prototype.setType = function (value) {
      googleProtobuf.Message.setField(this, 8, value);
    };
    /**
     * optional bytes sign = 9;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getSign = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 9, "")
      );
    };
    /**
     * optional bytes sign = 9;
     * This is a type-conversion wrapper around `getSign()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getSign_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getSign())
      );
    };
    /**
     * optional bytes sign = 9;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getSign()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getSign_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getSign())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setSign = function (value) {
      googleProtobuf.Message.setField(this, 9, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.TxIdx = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.TxIdx, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.TxIdx.prototype.toObject = function (opt_includeInstance) {
        return proto.types.TxIdx.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.TxIdx} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.TxIdx.toObject = function (includeInstance, msg) {
        var obj = {
          blockhash: msg.getBlockhash_asB64(),
          idx: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.TxIdx}
     */


    proto.types.TxIdx.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.TxIdx();
      return proto.types.TxIdx.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.TxIdx} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.TxIdx}
     */


    proto.types.TxIdx.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBlockhash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readInt32();
            msg.setIdx(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.TxIdx.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.TxIdx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.TxIdx} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.TxIdx.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBlockhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getIdx();

      if (f !== 0) {
        writer.writeInt32(2, f);
      }
    };
    /**
     * optional bytes blockHash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxIdx.prototype.getBlockhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes blockHash = 1;
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {string}
     */


    proto.types.TxIdx.prototype.getBlockhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBlockhash())
      );
    };
    /**
     * optional bytes blockHash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {!Uint8Array}
     */


    proto.types.TxIdx.prototype.getBlockhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBlockhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxIdx.prototype.setBlockhash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional int32 idx = 2;
     * @return {number}
     */


    proto.types.TxIdx.prototype.getIdx = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.TxIdx.prototype.setIdx = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.TxInBlock = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.TxInBlock, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.TxInBlock.prototype.toObject = function (opt_includeInstance) {
        return proto.types.TxInBlock.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.TxInBlock} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.TxInBlock.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          txidx: (f = msg.getTxidx()) && proto.types.TxIdx.toObject(includeInstance, f),
          tx: (f = msg.getTx()) && proto.types.Tx.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.TxInBlock}
     */


    proto.types.TxInBlock.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.TxInBlock();
      return proto.types.TxInBlock.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.TxInBlock} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.TxInBlock}
     */


    proto.types.TxInBlock.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.TxIdx();
            reader.readMessage(value, proto.types.TxIdx.deserializeBinaryFromReader);
            msg.setTxidx(value);
            break;

          case 2:
            var value = new proto.types.Tx();
            reader.readMessage(value, proto.types.Tx.deserializeBinaryFromReader);
            msg.setTx(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.TxInBlock.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.TxInBlock.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.TxInBlock} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.TxInBlock.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTxidx();

      if (f != null) {
        writer.writeMessage(1, f, proto.types.TxIdx.serializeBinaryToWriter);
      }

      f = message.getTx();

      if (f != null) {
        writer.writeMessage(2, f, proto.types.Tx.serializeBinaryToWriter);
      }
    };
    /**
     * optional TxIdx txIdx = 1;
     * @return {?proto.types.TxIdx}
     */


    proto.types.TxInBlock.prototype.getTxidx = function () {
      return (
        /** @type{?proto.types.TxIdx} */
        googleProtobuf.Message.getWrapperField(this, proto.types.TxIdx, 1)
      );
    };
    /** @param {?proto.types.TxIdx|undefined} value */


    proto.types.TxInBlock.prototype.setTxidx = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.TxInBlock.prototype.clearTxidx = function () {
      this.setTxidx(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.TxInBlock.prototype.hasTxidx = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional Tx tx = 2;
     * @return {?proto.types.Tx}
     */


    proto.types.TxInBlock.prototype.getTx = function () {
      return (
        /** @type{?proto.types.Tx} */
        googleProtobuf.Message.getWrapperField(this, proto.types.Tx, 2)
      );
    };
    /** @param {?proto.types.Tx|undefined} value */


    proto.types.TxInBlock.prototype.setTx = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.TxInBlock.prototype.clearTx = function () {
      this.setTx(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.TxInBlock.prototype.hasTx = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.State = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.State, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.State.prototype.toObject = function (opt_includeInstance) {
        return proto.types.State.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.State} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.State.toObject = function (includeInstance, msg) {
        var obj = {
          nonce: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          balance: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          codehash: msg.getCodehash_asB64(),
          storageroot: msg.getStorageroot_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.State}
     */


    proto.types.State.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.State();
      return proto.types.State.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.State} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.State}
     */


    proto.types.State.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setNonce(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBalance(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setCodehash(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setStorageroot(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.State.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.State.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.State} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.State.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getNonce();

      if (f !== 0) {
        writer.writeUint64(1, f);
      }

      f = message.getBalance();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }

      f = message.getCodehash_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getStorageroot_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }
    };
    /**
     * optional uint64 nonce = 1;
     * @return {number}
     */


    proto.types.State.prototype.getNonce = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.State.prototype.setNonce = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional uint64 balance = 2;
     * @return {number}
     */


    proto.types.State.prototype.getBalance = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.State.prototype.setBalance = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional bytes codeHash = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.State.prototype.getCodehash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes codeHash = 3;
     * This is a type-conversion wrapper around `getCodehash()`
     * @return {string}
     */


    proto.types.State.prototype.getCodehash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getCodehash())
      );
    };
    /**
     * optional bytes codeHash = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getCodehash()`
     * @return {!Uint8Array}
     */


    proto.types.State.prototype.getCodehash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getCodehash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.State.prototype.setCodehash = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * optional bytes storageRoot = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.State.prototype.getStorageroot = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes storageRoot = 4;
     * This is a type-conversion wrapper around `getStorageroot()`
     * @return {string}
     */


    proto.types.State.prototype.getStorageroot_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getStorageroot())
      );
    };
    /**
     * optional bytes storageRoot = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getStorageroot()`
     * @return {!Uint8Array}
     */


    proto.types.State.prototype.getStorageroot_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getStorageroot())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.State.prototype.setStorageroot = function (value) {
      googleProtobuf.Message.setField(this, 4, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Receipt = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Receipt, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Receipt.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Receipt.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Receipt} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Receipt.toObject = function (includeInstance, msg) {
        var obj = {
          contractaddress: msg.getContractaddress_asB64(),
          status: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          ret: googleProtobuf.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Receipt}
     */


    proto.types.Receipt.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Receipt();
      return proto.types.Receipt.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Receipt} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Receipt}
     */


    proto.types.Receipt.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setContractaddress(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setStatus(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setRet(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Receipt.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Receipt.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Receipt} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Receipt.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getContractaddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getStatus();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getRet();

      if (f.length > 0) {
        writer.writeString(3, f);
      }
    };
    /**
     * optional bytes contractAddress = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Receipt.prototype.getContractaddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {string}
     */


    proto.types.Receipt.prototype.getContractaddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getContractaddress())
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {!Uint8Array}
     */


    proto.types.Receipt.prototype.getContractaddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getContractaddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Receipt.prototype.setContractaddress = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional string status = 2;
     * @return {string}
     */


    proto.types.Receipt.prototype.getStatus = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.Receipt.prototype.setStatus = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional string ret = 3;
     * @return {string}
     */


    proto.types.Receipt.prototype.getRet = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.Receipt.prototype.setRet = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Vote = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Vote, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Vote.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Vote.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Vote} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Vote.toObject = function (includeInstance, msg) {
        var obj = {
          candidate: msg.getCandidate_asB64(),
          amount: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Vote}
     */


    proto.types.Vote.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Vote();
      return proto.types.Vote.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Vote} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Vote}
     */


    proto.types.Vote.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setCandidate(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setAmount(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Vote.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Vote.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Vote} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Vote.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getCandidate_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getAmount();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }
    };
    /**
     * optional bytes candidate = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Vote.prototype.getCandidate = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes candidate = 1;
     * This is a type-conversion wrapper around `getCandidate()`
     * @return {string}
     */


    proto.types.Vote.prototype.getCandidate_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getCandidate())
      );
    };
    /**
     * optional bytes candidate = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getCandidate()`
     * @return {!Uint8Array}
     */


    proto.types.Vote.prototype.getCandidate_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getCandidate())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Vote.prototype.setCandidate = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional uint64 amount = 2;
     * @return {number}
     */


    proto.types.Vote.prototype.getAmount = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.Vote.prototype.setAmount = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.VoteList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.VoteList.repeatedFields_, null);
    };

    goog.inherits(proto.types.VoteList, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.VoteList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.VoteList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.VoteList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.VoteList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.VoteList.toObject = function (includeInstance, msg) {
        var obj = {
          votesList: googleProtobuf.Message.toObjectList(msg.getVotesList(), proto.types.Vote.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.VoteList}
     */


    proto.types.VoteList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.VoteList();
      return proto.types.VoteList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.VoteList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.VoteList}
     */


    proto.types.VoteList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Vote();
            reader.readMessage(value, proto.types.Vote.deserializeBinaryFromReader);
            msg.addVotes(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.VoteList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.VoteList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.VoteList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.VoteList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getVotesList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.Vote.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Vote votes = 1;
     * @return {!Array.<!proto.types.Vote>}
     */


    proto.types.VoteList.prototype.getVotesList = function () {
      return (
        /** @type{!Array.<!proto.types.Vote>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Vote, 1)
      );
    };
    /** @param {!Array.<!proto.types.Vote>} value */


    proto.types.VoteList.prototype.setVotesList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Vote=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Vote}
     */


    proto.types.VoteList.prototype.addVotes = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Vote, opt_index);
    };

    proto.types.VoteList.prototype.clearVotesList = function () {
      this.setVotesList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.FnArgument = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.FnArgument, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.FnArgument.prototype.toObject = function (opt_includeInstance) {
        return proto.types.FnArgument.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.FnArgument} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.FnArgument.toObject = function (includeInstance, msg) {
        var obj = {
          name: googleProtobuf.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.FnArgument}
     */


    proto.types.FnArgument.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.FnArgument();
      return proto.types.FnArgument.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.FnArgument} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.FnArgument}
     */


    proto.types.FnArgument.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setName(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.FnArgument.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.FnArgument.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.FnArgument} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.FnArgument.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getName();

      if (f.length > 0) {
        writer.writeString(1, f);
      }
    };
    /**
     * optional string name = 1;
     * @return {string}
     */


    proto.types.FnArgument.prototype.getName = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.FnArgument.prototype.setName = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Function = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.Function.repeatedFields_, null);
    };

    goog.inherits(proto.types.Function, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.Function.repeatedFields_ = [2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Function.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Function.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Function} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Function.toObject = function (includeInstance, msg) {
        var obj = {
          name: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          argumentsList: googleProtobuf.Message.toObjectList(msg.getArgumentsList(), proto.types.FnArgument.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Function}
     */


    proto.types.Function.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Function();
      return proto.types.Function.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Function} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Function}
     */


    proto.types.Function.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setName(value);
            break;

          case 2:
            var value = new proto.types.FnArgument();
            reader.readMessage(value, proto.types.FnArgument.deserializeBinaryFromReader);
            msg.addArguments(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Function.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Function.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Function} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Function.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getName();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getArgumentsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.types.FnArgument.serializeBinaryToWriter);
      }
    };
    /**
     * optional string name = 1;
     * @return {string}
     */


    proto.types.Function.prototype.getName = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.Function.prototype.setName = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * repeated FnArgument arguments = 2;
     * @return {!Array.<!proto.types.FnArgument>}
     */


    proto.types.Function.prototype.getArgumentsList = function () {
      return (
        /** @type{!Array.<!proto.types.FnArgument>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.FnArgument, 2)
      );
    };
    /** @param {!Array.<!proto.types.FnArgument>} value */


    proto.types.Function.prototype.setArgumentsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 2, value);
    };
    /**
     * @param {!proto.types.FnArgument=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.FnArgument}
     */


    proto.types.Function.prototype.addArguments = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.FnArgument, opt_index);
    };

    proto.types.Function.prototype.clearArgumentsList = function () {
      this.setArgumentsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ABI = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.ABI.repeatedFields_, null);
    };

    goog.inherits(proto.types.ABI, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.ABI.repeatedFields_ = [3];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ABI.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ABI.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ABI} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ABI.toObject = function (includeInstance, msg) {
        var obj = {
          version: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          language: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          functionsList: googleProtobuf.Message.toObjectList(msg.getFunctionsList(), proto.types.Function.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ABI}
     */


    proto.types.ABI.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ABI();
      return proto.types.ABI.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ABI} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ABI}
     */


    proto.types.ABI.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setVersion(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setLanguage(value);
            break;

          case 3:
            var value = new proto.types.Function();
            reader.readMessage(value, proto.types.Function.deserializeBinaryFromReader);
            msg.addFunctions(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ABI.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ABI.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ABI} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ABI.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getVersion();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getLanguage();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getFunctionsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, proto.types.Function.serializeBinaryToWriter);
      }
    };
    /**
     * optional string version = 1;
     * @return {string}
     */


    proto.types.ABI.prototype.getVersion = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.ABI.prototype.setVersion = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional string language = 2;
     * @return {string}
     */


    proto.types.ABI.prototype.getLanguage = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.ABI.prototype.setLanguage = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * repeated Function functions = 3;
     * @return {!Array.<!proto.types.Function>}
     */


    proto.types.ABI.prototype.getFunctionsList = function () {
      return (
        /** @type{!Array.<!proto.types.Function>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Function, 3)
      );
    };
    /** @param {!Array.<!proto.types.Function>} value */


    proto.types.ABI.prototype.setFunctionsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 3, value);
    };
    /**
     * @param {!proto.types.Function=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Function}
     */


    proto.types.ABI.prototype.addFunctions = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.types.Function, opt_index);
    };

    proto.types.ABI.prototype.clearFunctionsList = function () {
      this.setFunctionsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Query = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Query, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Query.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Query.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Query} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Query.toObject = function (includeInstance, msg) {
        var obj = {
          contractaddress: msg.getContractaddress_asB64(),
          queryinfo: msg.getQueryinfo_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Query}
     */


    proto.types.Query.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Query();
      return proto.types.Query.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Query} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Query}
     */


    proto.types.Query.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setContractaddress(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setQueryinfo(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Query.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Query.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Query} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Query.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getContractaddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getQueryinfo_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }
    };
    /**
     * optional bytes contractAddress = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Query.prototype.getContractaddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {string}
     */


    proto.types.Query.prototype.getContractaddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getContractaddress())
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {!Uint8Array}
     */


    proto.types.Query.prototype.getContractaddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getContractaddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Query.prototype.setContractaddress = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional bytes queryinfo = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Query.prototype.getQueryinfo = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes queryinfo = 2;
     * This is a type-conversion wrapper around `getQueryinfo()`
     * @return {string}
     */


    proto.types.Query.prototype.getQueryinfo_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getQueryinfo())
      );
    };
    /**
     * optional bytes queryinfo = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getQueryinfo()`
     * @return {!Uint8Array}
     */


    proto.types.Query.prototype.getQueryinfo_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getQueryinfo())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Query.prototype.setQueryinfo = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * @enum {number}
     */


    proto.types.TxType = {
      NORMAL: 0,
      GOVERNANCE: 1
    };
    goog.object.extend(exports, proto.types);
  });
  var account_pb = createCommonjsModule$1(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.exportSymbol('proto.types.Account', null, global);
    goog.exportSymbol('proto.types.AccountList', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.Account = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Account, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Account.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Account.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Account} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Account.toObject = function (includeInstance, msg) {
        var obj = {
          address: msg.getAddress_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Account}
     */


    proto.types.Account.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Account();
      return proto.types.Account.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Account} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Account}
     */


    proto.types.Account.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAddress(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Account.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Account.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Account} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Account.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getAddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }
    };
    /**
     * optional bytes address = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Account.prototype.getAddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes address = 1;
     * This is a type-conversion wrapper around `getAddress()`
     * @return {string}
     */


    proto.types.Account.prototype.getAddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAddress())
      );
    };
    /**
     * optional bytes address = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAddress()`
     * @return {!Uint8Array}
     */


    proto.types.Account.prototype.getAddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Account.prototype.setAddress = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.AccountList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.AccountList.repeatedFields_, null);
    };

    goog.inherits(proto.types.AccountList, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.AccountList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.AccountList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.AccountList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.AccountList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.AccountList.toObject = function (includeInstance, msg) {
        var obj = {
          accountsList: googleProtobuf.Message.toObjectList(msg.getAccountsList(), proto.types.Account.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.AccountList}
     */


    proto.types.AccountList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.AccountList();
      return proto.types.AccountList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.AccountList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.AccountList}
     */


    proto.types.AccountList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Account();
            reader.readMessage(value, proto.types.Account.deserializeBinaryFromReader);
            msg.addAccounts(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.AccountList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.AccountList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.AccountList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.AccountList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getAccountsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.Account.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Account accounts = 1;
     * @return {!Array.<!proto.types.Account>}
     */


    proto.types.AccountList.prototype.getAccountsList = function () {
      return (
        /** @type{!Array.<!proto.types.Account>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Account, 1)
      );
    };
    /** @param {!Array.<!proto.types.Account>} value */


    proto.types.AccountList.prototype.setAccountsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Account=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Account}
     */


    proto.types.AccountList.prototype.addAccounts = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Account, opt_index);
    };

    proto.types.AccountList.prototype.clearAccountsList = function () {
      this.setAccountsList([]);
    };

    goog.object.extend(exports, proto.types);
  });
  var node_pb = createCommonjsModule$1(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.exportSymbol('proto.types.PeerAddress', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.PeerAddress = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.PeerAddress, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.PeerAddress.prototype.toObject = function (opt_includeInstance) {
        return proto.types.PeerAddress.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.PeerAddress} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.PeerAddress.toObject = function (includeInstance, msg) {
        var obj = {
          address: msg.getAddress_asB64(),
          port: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          peerid: msg.getPeerid_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.PeerAddress}
     */


    proto.types.PeerAddress.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.PeerAddress();
      return proto.types.PeerAddress.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.PeerAddress} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.PeerAddress}
     */


    proto.types.PeerAddress.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAddress(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setPort(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPeerid(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.PeerAddress.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.PeerAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.PeerAddress} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.PeerAddress.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getAddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getPort();

      if (f !== 0) {
        writer.writeUint32(2, f);
      }

      f = message.getPeerid_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }
    };
    /**
     * optional bytes address = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.PeerAddress.prototype.getAddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes address = 1;
     * This is a type-conversion wrapper around `getAddress()`
     * @return {string}
     */


    proto.types.PeerAddress.prototype.getAddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAddress())
      );
    };
    /**
     * optional bytes address = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAddress()`
     * @return {!Uint8Array}
     */


    proto.types.PeerAddress.prototype.getAddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.PeerAddress.prototype.setAddress = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional uint32 port = 2;
     * @return {number}
     */


    proto.types.PeerAddress.prototype.getPort = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.PeerAddress.prototype.setPort = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional bytes peerID = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.PeerAddress.prototype.getPeerid = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes peerID = 3;
     * This is a type-conversion wrapper around `getPeerid()`
     * @return {string}
     */


    proto.types.PeerAddress.prototype.getPeerid_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPeerid())
      );
    };
    /**
     * optional bytes peerID = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPeerid()`
     * @return {!Uint8Array}
     */


    proto.types.PeerAddress.prototype.getPeerid_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPeerid())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.PeerAddress.prototype.setPeerid = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };

    goog.object.extend(exports, proto.types);
  });
  var rpc_pb = createCommonjsModule$1(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.exportSymbol('proto.types.BlockHeaderList', null, global);
    goog.exportSymbol('proto.types.BlockchainStatus', null, global);
    goog.exportSymbol('proto.types.CommitResult', null, global);
    goog.exportSymbol('proto.types.CommitResultList', null, global);
    goog.exportSymbol('proto.types.CommitStatus', null, global);
    goog.exportSymbol('proto.types.Empty', null, global);
    goog.exportSymbol('proto.types.ImportFormat', null, global);
    goog.exportSymbol('proto.types.Input', null, global);
    goog.exportSymbol('proto.types.ListParams', null, global);
    goog.exportSymbol('proto.types.Output', null, global);
    goog.exportSymbol('proto.types.PeerList', null, global);
    goog.exportSymbol('proto.types.Personal', null, global);
    goog.exportSymbol('proto.types.SingleBytes', null, global);
    goog.exportSymbol('proto.types.VerifyResult', null, global);
    goog.exportSymbol('proto.types.VerifyStatus', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.BlockchainStatus = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.BlockchainStatus, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockchainStatus.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockchainStatus.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockchainStatus} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockchainStatus.toObject = function (includeInstance, msg) {
        var obj = {
          bestBlockHash: msg.getBestBlockHash_asB64(),
          bestHeight: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockchainStatus}
     */


    proto.types.BlockchainStatus.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockchainStatus();
      return proto.types.BlockchainStatus.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockchainStatus} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockchainStatus}
     */


    proto.types.BlockchainStatus.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBestBlockHash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBestHeight(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockchainStatus.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockchainStatus.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockchainStatus} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockchainStatus.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBestBlockHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getBestHeight();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }
    };
    /**
     * optional bytes best_block_hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockchainStatus.prototype.getBestBlockHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes best_block_hash = 1;
     * This is a type-conversion wrapper around `getBestBlockHash()`
     * @return {string}
     */


    proto.types.BlockchainStatus.prototype.getBestBlockHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBestBlockHash())
      );
    };
    /**
     * optional bytes best_block_hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBestBlockHash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockchainStatus.prototype.getBestBlockHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBestBlockHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockchainStatus.prototype.setBestBlockHash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional uint64 best_height = 2;
     * @return {number}
     */


    proto.types.BlockchainStatus.prototype.getBestHeight = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockchainStatus.prototype.setBestHeight = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Input = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.Input.repeatedFields_, null);
    };

    goog.inherits(proto.types.Input, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.Input.repeatedFields_ = [2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Input.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Input.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Input} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Input.toObject = function (includeInstance, msg) {
        var obj = {
          hash: msg.getHash_asB64(),
          addressList: msg.getAddressList_asB64(),
          value: msg.getValue_asB64(),
          script: msg.getScript_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Input}
     */


    proto.types.Input.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Input();
      return proto.types.Input.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Input} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Input}
     */


    proto.types.Input.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addAddress(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setValue(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setScript(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Input.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Input.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Input} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Input.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getAddressList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(2, f);
      }

      f = message.getValue_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getScript_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Input.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.Input.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.Input.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Input.prototype.setHash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * repeated bytes address = 2;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.Input.prototype.getAddressList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 2)
      );
    };
    /**
     * repeated bytes address = 2;
     * This is a type-conversion wrapper around `getAddressList()`
     * @return {!Array.<string>}
     */


    proto.types.Input.prototype.getAddressList_asB64 = function () {
      return (
        /** @type {!Array.<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getAddressList())
      );
    };
    /**
     * repeated bytes address = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAddressList()`
     * @return {!Array.<!Uint8Array>}
     */


    proto.types.Input.prototype.getAddressList_asU8 = function () {
      return (
        /** @type {!Array.<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getAddressList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.Input.prototype.setAddressList = function (value) {
      googleProtobuf.Message.setField(this, 2, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.Input.prototype.addAddress = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 2, value, opt_index);
    };

    proto.types.Input.prototype.clearAddressList = function () {
      this.setAddressList([]);
    };
    /**
     * optional bytes value = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Input.prototype.getValue = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes value = 3;
     * This is a type-conversion wrapper around `getValue()`
     * @return {string}
     */


    proto.types.Input.prototype.getValue_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getValue())
      );
    };
    /**
     * optional bytes value = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getValue()`
     * @return {!Uint8Array}
     */


    proto.types.Input.prototype.getValue_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getValue())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Input.prototype.setValue = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * optional bytes script = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Input.prototype.getScript = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes script = 4;
     * This is a type-conversion wrapper around `getScript()`
     * @return {string}
     */


    proto.types.Input.prototype.getScript_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getScript())
      );
    };
    /**
     * optional bytes script = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getScript()`
     * @return {!Uint8Array}
     */


    proto.types.Input.prototype.getScript_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getScript())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Input.prototype.setScript = function (value) {
      googleProtobuf.Message.setField(this, 4, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Output = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Output, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Output.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Output.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Output} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Output.toObject = function (includeInstance, msg) {
        var obj = {
          index: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          address: msg.getAddress_asB64(),
          value: msg.getValue_asB64(),
          script: msg.getScript_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Output}
     */


    proto.types.Output.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Output();
      return proto.types.Output.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Output} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Output}
     */


    proto.types.Output.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setIndex(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAddress(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setValue(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setScript(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Output.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Output.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Output} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Output.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getIndex();

      if (f !== 0) {
        writer.writeUint32(1, f);
      }

      f = message.getAddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }

      f = message.getValue_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getScript_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }
    };
    /**
     * optional uint32 index = 1;
     * @return {number}
     */


    proto.types.Output.prototype.getIndex = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.Output.prototype.setIndex = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional bytes address = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Output.prototype.getAddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes address = 2;
     * This is a type-conversion wrapper around `getAddress()`
     * @return {string}
     */


    proto.types.Output.prototype.getAddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAddress())
      );
    };
    /**
     * optional bytes address = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAddress()`
     * @return {!Uint8Array}
     */


    proto.types.Output.prototype.getAddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Output.prototype.setAddress = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional bytes value = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Output.prototype.getValue = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes value = 3;
     * This is a type-conversion wrapper around `getValue()`
     * @return {string}
     */


    proto.types.Output.prototype.getValue_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getValue())
      );
    };
    /**
     * optional bytes value = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getValue()`
     * @return {!Uint8Array}
     */


    proto.types.Output.prototype.getValue_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getValue())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Output.prototype.setValue = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * optional bytes script = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Output.prototype.getScript = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes script = 4;
     * This is a type-conversion wrapper around `getScript()`
     * @return {string}
     */


    proto.types.Output.prototype.getScript_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getScript())
      );
    };
    /**
     * optional bytes script = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getScript()`
     * @return {!Uint8Array}
     */


    proto.types.Output.prototype.getScript_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getScript())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Output.prototype.setScript = function (value) {
      googleProtobuf.Message.setField(this, 4, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Empty = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Empty, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Empty.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Empty.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Empty} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Empty.toObject = function (includeInstance, msg) {
        var obj = {};

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Empty}
     */


    proto.types.Empty.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Empty();
      return proto.types.Empty.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Empty} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Empty}
     */


    proto.types.Empty.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Empty.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Empty.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Empty} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Empty.serializeBinaryToWriter = function (message, writer) {};
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.SingleBytes = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.SingleBytes, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.SingleBytes.prototype.toObject = function (opt_includeInstance) {
        return proto.types.SingleBytes.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.SingleBytes} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.SingleBytes.toObject = function (includeInstance, msg) {
        var obj = {
          value: msg.getValue_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.SingleBytes}
     */


    proto.types.SingleBytes.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.SingleBytes();
      return proto.types.SingleBytes.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.SingleBytes} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.SingleBytes}
     */


    proto.types.SingleBytes.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setValue(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.SingleBytes.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.SingleBytes.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.SingleBytes} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.SingleBytes.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getValue_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }
    };
    /**
     * optional bytes value = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.SingleBytes.prototype.getValue = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes value = 1;
     * This is a type-conversion wrapper around `getValue()`
     * @return {string}
     */


    proto.types.SingleBytes.prototype.getValue_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getValue())
      );
    };
    /**
     * optional bytes value = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getValue()`
     * @return {!Uint8Array}
     */


    proto.types.SingleBytes.prototype.getValue_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getValue())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.SingleBytes.prototype.setValue = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.PeerList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.PeerList.repeatedFields_, null);
    };

    goog.inherits(proto.types.PeerList, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.PeerList.repeatedFields_ = [1, 2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.PeerList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.PeerList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.PeerList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.PeerList.toObject = function (includeInstance, msg) {
        var obj = {
          peersList: googleProtobuf.Message.toObjectList(msg.getPeersList(), node_pb.PeerAddress.toObject, includeInstance),
          statesList: googleProtobuf.Message.getRepeatedField(msg, 2)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.PeerList}
     */


    proto.types.PeerList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.PeerList();
      return proto.types.PeerList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.PeerList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.PeerList}
     */


    proto.types.PeerList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new node_pb.PeerAddress();
            reader.readMessage(value, node_pb.PeerAddress.deserializeBinaryFromReader);
            msg.addPeers(value);
            break;

          case 2:
            var value =
            /** @type {!Array.<number>} */
            reader.readPackedInt32();
            msg.setStatesList(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.PeerList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.PeerList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.PeerList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.PeerList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getPeersList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, node_pb.PeerAddress.serializeBinaryToWriter);
      }

      f = message.getStatesList();

      if (f.length > 0) {
        writer.writePackedInt32(2, f);
      }
    };
    /**
     * repeated PeerAddress peers = 1;
     * @return {!Array.<!proto.types.PeerAddress>}
     */


    proto.types.PeerList.prototype.getPeersList = function () {
      return (
        /** @type{!Array.<!proto.types.PeerAddress>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, node_pb.PeerAddress, 1)
      );
    };
    /** @param {!Array.<!proto.types.PeerAddress>} value */


    proto.types.PeerList.prototype.setPeersList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.PeerAddress=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.PeerAddress}
     */


    proto.types.PeerList.prototype.addPeers = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.PeerAddress, opt_index);
    };

    proto.types.PeerList.prototype.clearPeersList = function () {
      this.setPeersList([]);
    };
    /**
     * repeated int32 states = 2;
     * @return {!Array.<number>}
     */


    proto.types.PeerList.prototype.getStatesList = function () {
      return (
        /** @type {!Array.<number>} */
        googleProtobuf.Message.getRepeatedField(this, 2)
      );
    };
    /** @param {!Array.<number>} value */


    proto.types.PeerList.prototype.setStatesList = function (value) {
      googleProtobuf.Message.setField(this, 2, value || []);
    };
    /**
     * @param {!number} value
     * @param {number=} opt_index
     */


    proto.types.PeerList.prototype.addStates = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 2, value, opt_index);
    };

    proto.types.PeerList.prototype.clearStatesList = function () {
      this.setStatesList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ListParams = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.ListParams, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ListParams.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ListParams.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ListParams} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ListParams.toObject = function (includeInstance, msg) {
        var obj = {
          hash: msg.getHash_asB64(),
          height: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          size: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          offset: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
          asc: googleProtobuf.Message.getFieldWithDefault(msg, 5, false)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ListParams}
     */


    proto.types.ListParams.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ListParams();
      return proto.types.ListParams.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ListParams} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ListParams}
     */


    proto.types.ListParams.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setHeight(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setSize(value);
            break;

          case 4:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setOffset(value);
            break;

          case 5:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setAsc(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ListParams.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ListParams.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ListParams} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ListParams.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getHeight();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }

      f = message.getSize();

      if (f !== 0) {
        writer.writeUint32(3, f);
      }

      f = message.getOffset();

      if (f !== 0) {
        writer.writeUint32(4, f);
      }

      f = message.getAsc();

      if (f) {
        writer.writeBool(5, f);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ListParams.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.ListParams.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.ListParams.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ListParams.prototype.setHash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional uint64 height = 2;
     * @return {number}
     */


    proto.types.ListParams.prototype.getHeight = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.ListParams.prototype.setHeight = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional uint32 size = 3;
     * @return {number}
     */


    proto.types.ListParams.prototype.getSize = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.ListParams.prototype.setSize = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * optional uint32 offset = 4;
     * @return {number}
     */


    proto.types.ListParams.prototype.getOffset = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, 0)
      );
    };
    /** @param {number} value */


    proto.types.ListParams.prototype.setOffset = function (value) {
      googleProtobuf.Message.setField(this, 4, value);
    };
    /**
     * optional bool asc = 5;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.ListParams.prototype.getAsc = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, false)
      );
    };
    /** @param {boolean} value */


    proto.types.ListParams.prototype.setAsc = function (value) {
      googleProtobuf.Message.setField(this, 5, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockHeaderList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.BlockHeaderList.repeatedFields_, null);
    };

    goog.inherits(proto.types.BlockHeaderList, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.BlockHeaderList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockHeaderList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockHeaderList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockHeaderList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockHeaderList.toObject = function (includeInstance, msg) {
        var obj = {
          blocksList: googleProtobuf.Message.toObjectList(msg.getBlocksList(), blockchain_pb.Block.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockHeaderList}
     */


    proto.types.BlockHeaderList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockHeaderList();
      return proto.types.BlockHeaderList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockHeaderList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockHeaderList}
     */


    proto.types.BlockHeaderList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new blockchain_pb.Block();
            reader.readMessage(value, blockchain_pb.Block.deserializeBinaryFromReader);
            msg.addBlocks(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockHeaderList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockHeaderList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockHeaderList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockHeaderList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBlocksList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, blockchain_pb.Block.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Block blocks = 1;
     * @return {!Array.<!proto.types.Block>}
     */


    proto.types.BlockHeaderList.prototype.getBlocksList = function () {
      return (
        /** @type{!Array.<!proto.types.Block>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, blockchain_pb.Block, 1)
      );
    };
    /** @param {!Array.<!proto.types.Block>} value */


    proto.types.BlockHeaderList.prototype.setBlocksList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Block=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Block}
     */


    proto.types.BlockHeaderList.prototype.addBlocks = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Block, opt_index);
    };

    proto.types.BlockHeaderList.prototype.clearBlocksList = function () {
      this.setBlocksList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.CommitResult = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.CommitResult, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.CommitResult.prototype.toObject = function (opt_includeInstance) {
        return proto.types.CommitResult.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.CommitResult} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.CommitResult.toObject = function (includeInstance, msg) {
        var obj = {
          hash: msg.getHash_asB64(),
          error: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.CommitResult}
     */


    proto.types.CommitResult.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.CommitResult();
      return proto.types.CommitResult.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.CommitResult} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.CommitResult}
     */


    proto.types.CommitResult.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value =
            /** @type {!proto.types.CommitStatus} */
            reader.readEnum();
            msg.setError(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.CommitResult.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.CommitResult.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.CommitResult} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.CommitResult.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getError();

      if (f !== 0.0) {
        writer.writeEnum(2, f);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.CommitResult.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.CommitResult.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.CommitResult.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.CommitResult.prototype.setHash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional CommitStatus error = 2;
     * @return {!proto.types.CommitStatus}
     */


    proto.types.CommitResult.prototype.getError = function () {
      return (
        /** @type {!proto.types.CommitStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {!proto.types.CommitStatus} value */


    proto.types.CommitResult.prototype.setError = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.CommitResultList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.CommitResultList.repeatedFields_, null);
    };

    goog.inherits(proto.types.CommitResultList, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.CommitResultList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.CommitResultList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.CommitResultList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.CommitResultList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.CommitResultList.toObject = function (includeInstance, msg) {
        var obj = {
          resultsList: googleProtobuf.Message.toObjectList(msg.getResultsList(), proto.types.CommitResult.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.CommitResultList}
     */


    proto.types.CommitResultList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.CommitResultList();
      return proto.types.CommitResultList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.CommitResultList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.CommitResultList}
     */


    proto.types.CommitResultList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.CommitResult();
            reader.readMessage(value, proto.types.CommitResult.deserializeBinaryFromReader);
            msg.addResults(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.CommitResultList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.CommitResultList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.CommitResultList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.CommitResultList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getResultsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.CommitResult.serializeBinaryToWriter);
      }
    };
    /**
     * repeated CommitResult results = 1;
     * @return {!Array.<!proto.types.CommitResult>}
     */


    proto.types.CommitResultList.prototype.getResultsList = function () {
      return (
        /** @type{!Array.<!proto.types.CommitResult>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.CommitResult, 1)
      );
    };
    /** @param {!Array.<!proto.types.CommitResult>} value */


    proto.types.CommitResultList.prototype.setResultsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.CommitResult=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.CommitResult}
     */


    proto.types.CommitResultList.prototype.addResults = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.CommitResult, opt_index);
    };

    proto.types.CommitResultList.prototype.clearResultsList = function () {
      this.setResultsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.VerifyResult = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.VerifyResult, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.VerifyResult.prototype.toObject = function (opt_includeInstance) {
        return proto.types.VerifyResult.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.VerifyResult} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.VerifyResult.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          tx: (f = msg.getTx()) && blockchain_pb.Tx.toObject(includeInstance, f),
          error: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.VerifyResult}
     */


    proto.types.VerifyResult.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.VerifyResult();
      return proto.types.VerifyResult.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.VerifyResult} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.VerifyResult}
     */


    proto.types.VerifyResult.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new blockchain_pb.Tx();
            reader.readMessage(value, blockchain_pb.Tx.deserializeBinaryFromReader);
            msg.setTx(value);
            break;

          case 2:
            var value =
            /** @type {!proto.types.VerifyStatus} */
            reader.readEnum();
            msg.setError(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.VerifyResult.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.VerifyResult.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.VerifyResult} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.VerifyResult.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTx();

      if (f != null) {
        writer.writeMessage(1, f, blockchain_pb.Tx.serializeBinaryToWriter);
      }

      f = message.getError();

      if (f !== 0.0) {
        writer.writeEnum(2, f);
      }
    };
    /**
     * optional Tx tx = 1;
     * @return {?proto.types.Tx}
     */


    proto.types.VerifyResult.prototype.getTx = function () {
      return (
        /** @type{?proto.types.Tx} */
        googleProtobuf.Message.getWrapperField(this, blockchain_pb.Tx, 1)
      );
    };
    /** @param {?proto.types.Tx|undefined} value */


    proto.types.VerifyResult.prototype.setTx = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.VerifyResult.prototype.clearTx = function () {
      this.setTx(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.VerifyResult.prototype.hasTx = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional VerifyStatus error = 2;
     * @return {!proto.types.VerifyStatus}
     */


    proto.types.VerifyResult.prototype.getError = function () {
      return (
        /** @type {!proto.types.VerifyStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {!proto.types.VerifyStatus} value */


    proto.types.VerifyResult.prototype.setError = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Personal = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Personal, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Personal.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Personal.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Personal} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Personal.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          passphrase: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          account: (f = msg.getAccount()) && account_pb.Account.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Personal}
     */


    proto.types.Personal.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Personal();
      return proto.types.Personal.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Personal} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Personal}
     */


    proto.types.Personal.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setPassphrase(value);
            break;

          case 2:
            var value = new account_pb.Account();
            reader.readMessage(value, account_pb.Account.deserializeBinaryFromReader);
            msg.setAccount(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Personal.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Personal.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Personal} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Personal.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getPassphrase();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getAccount();

      if (f != null) {
        writer.writeMessage(2, f, account_pb.Account.serializeBinaryToWriter);
      }
    };
    /**
     * optional string passphrase = 1;
     * @return {string}
     */


    proto.types.Personal.prototype.getPassphrase = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.Personal.prototype.setPassphrase = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional Account account = 2;
     * @return {?proto.types.Account}
     */


    proto.types.Personal.prototype.getAccount = function () {
      return (
        /** @type{?proto.types.Account} */
        googleProtobuf.Message.getWrapperField(this, account_pb.Account, 2)
      );
    };
    /** @param {?proto.types.Account|undefined} value */


    proto.types.Personal.prototype.setAccount = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.Personal.prototype.clearAccount = function () {
      this.setAccount(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.Personal.prototype.hasAccount = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ImportFormat = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.ImportFormat, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ImportFormat.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ImportFormat.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ImportFormat} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ImportFormat.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          wif: (f = msg.getWif()) && proto.types.SingleBytes.toObject(includeInstance, f),
          oldpass: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          newpass: googleProtobuf.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ImportFormat}
     */


    proto.types.ImportFormat.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ImportFormat();
      return proto.types.ImportFormat.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ImportFormat} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ImportFormat}
     */


    proto.types.ImportFormat.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.SingleBytes();
            reader.readMessage(value, proto.types.SingleBytes.deserializeBinaryFromReader);
            msg.setWif(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setOldpass(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setNewpass(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ImportFormat.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ImportFormat.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ImportFormat} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ImportFormat.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getWif();

      if (f != null) {
        writer.writeMessage(1, f, proto.types.SingleBytes.serializeBinaryToWriter);
      }

      f = message.getOldpass();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getNewpass();

      if (f.length > 0) {
        writer.writeString(3, f);
      }
    };
    /**
     * optional SingleBytes wif = 1;
     * @return {?proto.types.SingleBytes}
     */


    proto.types.ImportFormat.prototype.getWif = function () {
      return (
        /** @type{?proto.types.SingleBytes} */
        googleProtobuf.Message.getWrapperField(this, proto.types.SingleBytes, 1)
      );
    };
    /** @param {?proto.types.SingleBytes|undefined} value */


    proto.types.ImportFormat.prototype.setWif = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.ImportFormat.prototype.clearWif = function () {
      this.setWif(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.ImportFormat.prototype.hasWif = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional string oldpass = 2;
     * @return {string}
     */


    proto.types.ImportFormat.prototype.getOldpass = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.ImportFormat.prototype.setOldpass = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional string newpass = 3;
     * @return {string}
     */


    proto.types.ImportFormat.prototype.getNewpass = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.ImportFormat.prototype.setNewpass = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * @enum {number}
     */


    proto.types.CommitStatus = {
      TX_OK: 0,
      TX_NONCE_TOO_LOW: 1,
      TX_ALREADY_EXISTS: 2,
      TX_INVALID_HASH: 3,
      TX_INVALID_FORMAT: 4,
      TX_INSUFFICIENT_BALANCE: 5,
      TX_INTERNAL_ERROR: 6
    };
    /**
     * @enum {number}
     */

    proto.types.VerifyStatus = {
      VERIFY_STATUS_OK: 0,
      VERIFY_STATUS_SIGN_NOT_MATCH: 1,
      VERIFY_STATUS_INVALID_HASH: 2
    };
    goog.object.extend(exports, proto.types);
  });
  var rpc_pb_1 = rpc_pb.Empty;
  var rpc_pb_2 = rpc_pb.Personal;
  var rpc_pb_3 = rpc_pb.Account;
  var rpc_pb_4 = rpc_pb.SingleBytes;
  var rpc_pb_5 = rpc_pb.TxList;
  var rpc_pb_6 = rpc_pb.TxBody;
  var rpc_pb_7 = rpc_pb.Tx;
  var rpc_pb_8 = rpc_pb.CommitStatus;
  var typesNode =
  /*#__PURE__*/
  Object.freeze({
    default: rpc_pb,
    __moduleExports: rpc_pb,
    Empty: rpc_pb_1,
    Personal: rpc_pb_2,
    Account: rpc_pb_3,
    SingleBytes: rpc_pb_4,
    TxList: rpc_pb_5,
    TxBody: rpc_pb_6,
    Tx: rpc_pb_7,
    CommitStatus: rpc_pb_8
  });
  var blockchain_pb$1 = createCommonjsModule$1(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.exportSymbol('proto.types.ABI', null, global);
    goog.exportSymbol('proto.types.Block', null, global);
    goog.exportSymbol('proto.types.BlockBody', null, global);
    goog.exportSymbol('proto.types.BlockHeader', null, global);
    goog.exportSymbol('proto.types.FnArgument', null, global);
    goog.exportSymbol('proto.types.Function', null, global);
    goog.exportSymbol('proto.types.Query', null, global);
    goog.exportSymbol('proto.types.Receipt', null, global);
    goog.exportSymbol('proto.types.State', null, global);
    goog.exportSymbol('proto.types.Tx', null, global);
    goog.exportSymbol('proto.types.TxBody', null, global);
    goog.exportSymbol('proto.types.TxIdx', null, global);
    goog.exportSymbol('proto.types.TxInBlock', null, global);
    goog.exportSymbol('proto.types.TxList', null, global);
    goog.exportSymbol('proto.types.TxType', null, global);
    goog.exportSymbol('proto.types.Vote', null, global);
    goog.exportSymbol('proto.types.VoteList', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.Block = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Block, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Block.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Block.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Block} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Block.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          hash: msg.getHash_asB64(),
          header: (f = msg.getHeader()) && proto.types.BlockHeader.toObject(includeInstance, f),
          body: (f = msg.getBody()) && proto.types.BlockBody.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Block}
     */


    proto.types.Block.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Block();
      return proto.types.Block.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Block} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Block}
     */


    proto.types.Block.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value = new proto.types.BlockHeader();
            reader.readMessage(value, proto.types.BlockHeader.deserializeBinaryFromReader);
            msg.setHeader(value);
            break;

          case 3:
            var value = new proto.types.BlockBody();
            reader.readMessage(value, proto.types.BlockBody.deserializeBinaryFromReader);
            msg.setBody(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Block.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Block.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Block} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Block.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getHeader();

      if (f != null) {
        writer.writeMessage(2, f, proto.types.BlockHeader.serializeBinaryToWriter);
      }

      f = message.getBody();

      if (f != null) {
        writer.writeMessage(3, f, proto.types.BlockBody.serializeBinaryToWriter);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Block.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.Block.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.Block.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Block.prototype.setHash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional BlockHeader header = 2;
     * @return {?proto.types.BlockHeader}
     */


    proto.types.Block.prototype.getHeader = function () {
      return (
        /** @type{?proto.types.BlockHeader} */
        googleProtobuf.Message.getWrapperField(this, proto.types.BlockHeader, 2)
      );
    };
    /** @param {?proto.types.BlockHeader|undefined} value */


    proto.types.Block.prototype.setHeader = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.Block.prototype.clearHeader = function () {
      this.setHeader(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.Block.prototype.hasHeader = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * optional BlockBody body = 3;
     * @return {?proto.types.BlockBody}
     */


    proto.types.Block.prototype.getBody = function () {
      return (
        /** @type{?proto.types.BlockBody} */
        googleProtobuf.Message.getWrapperField(this, proto.types.BlockBody, 3)
      );
    };
    /** @param {?proto.types.BlockBody|undefined} value */


    proto.types.Block.prototype.setBody = function (value) {
      googleProtobuf.Message.setWrapperField(this, 3, value);
    };

    proto.types.Block.prototype.clearBody = function () {
      this.setBody(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.Block.prototype.hasBody = function () {
      return googleProtobuf.Message.getField(this, 3) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockHeader = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.BlockHeader, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockHeader.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockHeader.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockHeader} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockHeader.toObject = function (includeInstance, msg) {
        var obj = {
          prevblockhash: msg.getPrevblockhash_asB64(),
          blockno: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          timestamp: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          blocksroothash: msg.getBlocksroothash_asB64(),
          txsroothash: msg.getTxsroothash_asB64(),
          confirms: googleProtobuf.Message.getFieldWithDefault(msg, 6, 0),
          pubkey: msg.getPubkey_asB64(),
          sign: msg.getSign_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockHeader}
     */


    proto.types.BlockHeader.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockHeader();
      return proto.types.BlockHeader.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockHeader} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockHeader}
     */


    proto.types.BlockHeader.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPrevblockhash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBlockno(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readInt64();
            msg.setTimestamp(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBlocksroothash(value);
            break;

          case 5:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setTxsroothash(value);
            break;

          case 6:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setConfirms(value);
            break;

          case 7:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPubkey(value);
            break;

          case 8:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setSign(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockHeader.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockHeader} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockHeader.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getPrevblockhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getBlockno();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }

      f = message.getTimestamp();

      if (f !== 0) {
        writer.writeInt64(3, f);
      }

      f = message.getBlocksroothash_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }

      f = message.getTxsroothash_asU8();

      if (f.length > 0) {
        writer.writeBytes(5, f);
      }

      f = message.getConfirms();

      if (f !== 0) {
        writer.writeUint64(6, f);
      }

      f = message.getPubkey_asU8();

      if (f.length > 0) {
        writer.writeBytes(7, f);
      }

      f = message.getSign_asU8();

      if (f.length > 0) {
        writer.writeBytes(8, f);
      }
    };
    /**
     * optional bytes prevBlockHash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getPrevblockhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes prevBlockHash = 1;
     * This is a type-conversion wrapper around `getPrevblockhash()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getPrevblockhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPrevblockhash())
      );
    };
    /**
     * optional bytes prevBlockHash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPrevblockhash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getPrevblockhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPrevblockhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setPrevblockhash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional uint64 blockNo = 2;
     * @return {number}
     */


    proto.types.BlockHeader.prototype.getBlockno = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockHeader.prototype.setBlockno = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional int64 timestamp = 3;
     * @return {number}
     */


    proto.types.BlockHeader.prototype.getTimestamp = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockHeader.prototype.setTimestamp = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * optional bytes blocksRootHash = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getBlocksroothash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes blocksRootHash = 4;
     * This is a type-conversion wrapper around `getBlocksroothash()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getBlocksroothash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBlocksroothash())
      );
    };
    /**
     * optional bytes blocksRootHash = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBlocksroothash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getBlocksroothash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBlocksroothash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setBlocksroothash = function (value) {
      googleProtobuf.Message.setField(this, 4, value);
    };
    /**
     * optional bytes txsRootHash = 5;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getTxsroothash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, "")
      );
    };
    /**
     * optional bytes txsRootHash = 5;
     * This is a type-conversion wrapper around `getTxsroothash()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getTxsroothash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getTxsroothash())
      );
    };
    /**
     * optional bytes txsRootHash = 5;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getTxsroothash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getTxsroothash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getTxsroothash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setTxsroothash = function (value) {
      googleProtobuf.Message.setField(this, 5, value);
    };
    /**
     * optional uint64 confirms = 6;
     * @return {number}
     */


    proto.types.BlockHeader.prototype.getConfirms = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockHeader.prototype.setConfirms = function (value) {
      googleProtobuf.Message.setField(this, 6, value);
    };
    /**
     * optional bytes pubKey = 7;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getPubkey = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, "")
      );
    };
    /**
     * optional bytes pubKey = 7;
     * This is a type-conversion wrapper around `getPubkey()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getPubkey_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPubkey())
      );
    };
    /**
     * optional bytes pubKey = 7;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPubkey()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getPubkey_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPubkey())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setPubkey = function (value) {
      googleProtobuf.Message.setField(this, 7, value);
    };
    /**
     * optional bytes sign = 8;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getSign = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 8, "")
      );
    };
    /**
     * optional bytes sign = 8;
     * This is a type-conversion wrapper around `getSign()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getSign_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getSign())
      );
    };
    /**
     * optional bytes sign = 8;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getSign()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getSign_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getSign())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setSign = function (value) {
      googleProtobuf.Message.setField(this, 8, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockBody = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.BlockBody.repeatedFields_, null);
    };

    goog.inherits(proto.types.BlockBody, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.BlockBody.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockBody.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockBody.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockBody} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockBody.toObject = function (includeInstance, msg) {
        var obj = {
          txsList: googleProtobuf.Message.toObjectList(msg.getTxsList(), proto.types.Tx.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockBody}
     */


    proto.types.BlockBody.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockBody();
      return proto.types.BlockBody.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockBody} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockBody}
     */


    proto.types.BlockBody.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Tx();
            reader.readMessage(value, proto.types.Tx.deserializeBinaryFromReader);
            msg.addTxs(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockBody.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockBody.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockBody} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockBody.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTxsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.Tx.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Tx txs = 1;
     * @return {!Array.<!proto.types.Tx>}
     */


    proto.types.BlockBody.prototype.getTxsList = function () {
      return (
        /** @type{!Array.<!proto.types.Tx>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Tx, 1)
      );
    };
    /** @param {!Array.<!proto.types.Tx>} value */


    proto.types.BlockBody.prototype.setTxsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Tx=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Tx}
     */


    proto.types.BlockBody.prototype.addTxs = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Tx, opt_index);
    };

    proto.types.BlockBody.prototype.clearTxsList = function () {
      this.setTxsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.TxList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.TxList.repeatedFields_, null);
    };

    goog.inherits(proto.types.TxList, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.TxList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.TxList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.TxList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.TxList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.TxList.toObject = function (includeInstance, msg) {
        var obj = {
          txsList: googleProtobuf.Message.toObjectList(msg.getTxsList(), proto.types.Tx.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.TxList}
     */


    proto.types.TxList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.TxList();
      return proto.types.TxList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.TxList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.TxList}
     */


    proto.types.TxList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Tx();
            reader.readMessage(value, proto.types.Tx.deserializeBinaryFromReader);
            msg.addTxs(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.TxList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.TxList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.TxList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.TxList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTxsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.Tx.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Tx txs = 1;
     * @return {!Array.<!proto.types.Tx>}
     */


    proto.types.TxList.prototype.getTxsList = function () {
      return (
        /** @type{!Array.<!proto.types.Tx>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Tx, 1)
      );
    };
    /** @param {!Array.<!proto.types.Tx>} value */


    proto.types.TxList.prototype.setTxsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Tx=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Tx}
     */


    proto.types.TxList.prototype.addTxs = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Tx, opt_index);
    };

    proto.types.TxList.prototype.clearTxsList = function () {
      this.setTxsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Tx = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Tx, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Tx.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Tx.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Tx} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Tx.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          hash: msg.getHash_asB64(),
          body: (f = msg.getBody()) && proto.types.TxBody.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Tx}
     */


    proto.types.Tx.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Tx();
      return proto.types.Tx.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Tx} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Tx}
     */


    proto.types.Tx.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value = new proto.types.TxBody();
            reader.readMessage(value, proto.types.TxBody.deserializeBinaryFromReader);
            msg.setBody(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Tx.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Tx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Tx} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Tx.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getBody();

      if (f != null) {
        writer.writeMessage(2, f, proto.types.TxBody.serializeBinaryToWriter);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Tx.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.Tx.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.Tx.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Tx.prototype.setHash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional TxBody body = 2;
     * @return {?proto.types.TxBody}
     */


    proto.types.Tx.prototype.getBody = function () {
      return (
        /** @type{?proto.types.TxBody} */
        googleProtobuf.Message.getWrapperField(this, proto.types.TxBody, 2)
      );
    };
    /** @param {?proto.types.TxBody|undefined} value */


    proto.types.Tx.prototype.setBody = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.Tx.prototype.clearBody = function () {
      this.setBody(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.Tx.prototype.hasBody = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.TxBody = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.TxBody, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.TxBody.prototype.toObject = function (opt_includeInstance) {
        return proto.types.TxBody.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.TxBody} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.TxBody.toObject = function (includeInstance, msg) {
        var obj = {
          nonce: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          account: msg.getAccount_asB64(),
          recipient: msg.getRecipient_asB64(),
          amount: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
          payload: msg.getPayload_asB64(),
          limit: googleProtobuf.Message.getFieldWithDefault(msg, 6, 0),
          price: googleProtobuf.Message.getFieldWithDefault(msg, 7, 0),
          type: googleProtobuf.Message.getFieldWithDefault(msg, 8, 0),
          sign: msg.getSign_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.TxBody}
     */


    proto.types.TxBody.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.TxBody();
      return proto.types.TxBody.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.TxBody} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.TxBody}
     */


    proto.types.TxBody.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setNonce(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAccount(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setRecipient(value);
            break;

          case 4:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setAmount(value);
            break;

          case 5:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPayload(value);
            break;

          case 6:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setLimit(value);
            break;

          case 7:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setPrice(value);
            break;

          case 8:
            var value =
            /** @type {!proto.types.TxType} */
            reader.readEnum();
            msg.setType(value);
            break;

          case 9:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setSign(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.TxBody.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.TxBody} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.TxBody.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getNonce();

      if (f !== 0) {
        writer.writeUint64(1, f);
      }

      f = message.getAccount_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }

      f = message.getRecipient_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getAmount();

      if (f !== 0) {
        writer.writeUint64(4, f);
      }

      f = message.getPayload_asU8();

      if (f.length > 0) {
        writer.writeBytes(5, f);
      }

      f = message.getLimit();

      if (f !== 0) {
        writer.writeUint64(6, f);
      }

      f = message.getPrice();

      if (f !== 0) {
        writer.writeUint64(7, f);
      }

      f = message.getType();

      if (f !== 0.0) {
        writer.writeEnum(8, f);
      }

      f = message.getSign_asU8();

      if (f.length > 0) {
        writer.writeBytes(9, f);
      }
    };
    /**
     * optional uint64 nonce = 1;
     * @return {number}
     */


    proto.types.TxBody.prototype.getNonce = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.TxBody.prototype.setNonce = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional bytes account = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getAccount = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes account = 2;
     * This is a type-conversion wrapper around `getAccount()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getAccount_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAccount())
      );
    };
    /**
     * optional bytes account = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAccount()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getAccount_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAccount())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setAccount = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional bytes recipient = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getRecipient = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes recipient = 3;
     * This is a type-conversion wrapper around `getRecipient()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getRecipient_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getRecipient())
      );
    };
    /**
     * optional bytes recipient = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getRecipient()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getRecipient_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getRecipient())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setRecipient = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * optional uint64 amount = 4;
     * @return {number}
     */


    proto.types.TxBody.prototype.getAmount = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, 0)
      );
    };
    /** @param {number} value */


    proto.types.TxBody.prototype.setAmount = function (value) {
      googleProtobuf.Message.setField(this, 4, value);
    };
    /**
     * optional bytes payload = 5;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getPayload = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, "")
      );
    };
    /**
     * optional bytes payload = 5;
     * This is a type-conversion wrapper around `getPayload()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getPayload_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPayload())
      );
    };
    /**
     * optional bytes payload = 5;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPayload()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getPayload_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPayload())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setPayload = function (value) {
      googleProtobuf.Message.setField(this, 5, value);
    };
    /**
     * optional uint64 limit = 6;
     * @return {number}
     */


    proto.types.TxBody.prototype.getLimit = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, 0)
      );
    };
    /** @param {number} value */


    proto.types.TxBody.prototype.setLimit = function (value) {
      googleProtobuf.Message.setField(this, 6, value);
    };
    /**
     * optional uint64 price = 7;
     * @return {number}
     */


    proto.types.TxBody.prototype.getPrice = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, 0)
      );
    };
    /** @param {number} value */


    proto.types.TxBody.prototype.setPrice = function (value) {
      googleProtobuf.Message.setField(this, 7, value);
    };
    /**
     * optional TxType type = 8;
     * @return {!proto.types.TxType}
     */


    proto.types.TxBody.prototype.getType = function () {
      return (
        /** @type {!proto.types.TxType} */
        googleProtobuf.Message.getFieldWithDefault(this, 8, 0)
      );
    };
    /** @param {!proto.types.TxType} value */


    proto.types.TxBody.prototype.setType = function (value) {
      googleProtobuf.Message.setField(this, 8, value);
    };
    /**
     * optional bytes sign = 9;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getSign = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 9, "")
      );
    };
    /**
     * optional bytes sign = 9;
     * This is a type-conversion wrapper around `getSign()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getSign_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getSign())
      );
    };
    /**
     * optional bytes sign = 9;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getSign()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getSign_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getSign())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setSign = function (value) {
      googleProtobuf.Message.setField(this, 9, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.TxIdx = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.TxIdx, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.TxIdx.prototype.toObject = function (opt_includeInstance) {
        return proto.types.TxIdx.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.TxIdx} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.TxIdx.toObject = function (includeInstance, msg) {
        var obj = {
          blockhash: msg.getBlockhash_asB64(),
          idx: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.TxIdx}
     */


    proto.types.TxIdx.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.TxIdx();
      return proto.types.TxIdx.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.TxIdx} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.TxIdx}
     */


    proto.types.TxIdx.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBlockhash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readInt32();
            msg.setIdx(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.TxIdx.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.TxIdx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.TxIdx} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.TxIdx.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBlockhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getIdx();

      if (f !== 0) {
        writer.writeInt32(2, f);
      }
    };
    /**
     * optional bytes blockHash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxIdx.prototype.getBlockhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes blockHash = 1;
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {string}
     */


    proto.types.TxIdx.prototype.getBlockhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBlockhash())
      );
    };
    /**
     * optional bytes blockHash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {!Uint8Array}
     */


    proto.types.TxIdx.prototype.getBlockhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBlockhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxIdx.prototype.setBlockhash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional int32 idx = 2;
     * @return {number}
     */


    proto.types.TxIdx.prototype.getIdx = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.TxIdx.prototype.setIdx = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.TxInBlock = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.TxInBlock, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.TxInBlock.prototype.toObject = function (opt_includeInstance) {
        return proto.types.TxInBlock.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.TxInBlock} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.TxInBlock.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          txidx: (f = msg.getTxidx()) && proto.types.TxIdx.toObject(includeInstance, f),
          tx: (f = msg.getTx()) && proto.types.Tx.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.TxInBlock}
     */


    proto.types.TxInBlock.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.TxInBlock();
      return proto.types.TxInBlock.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.TxInBlock} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.TxInBlock}
     */


    proto.types.TxInBlock.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.TxIdx();
            reader.readMessage(value, proto.types.TxIdx.deserializeBinaryFromReader);
            msg.setTxidx(value);
            break;

          case 2:
            var value = new proto.types.Tx();
            reader.readMessage(value, proto.types.Tx.deserializeBinaryFromReader);
            msg.setTx(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.TxInBlock.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.TxInBlock.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.TxInBlock} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.TxInBlock.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTxidx();

      if (f != null) {
        writer.writeMessage(1, f, proto.types.TxIdx.serializeBinaryToWriter);
      }

      f = message.getTx();

      if (f != null) {
        writer.writeMessage(2, f, proto.types.Tx.serializeBinaryToWriter);
      }
    };
    /**
     * optional TxIdx txIdx = 1;
     * @return {?proto.types.TxIdx}
     */


    proto.types.TxInBlock.prototype.getTxidx = function () {
      return (
        /** @type{?proto.types.TxIdx} */
        googleProtobuf.Message.getWrapperField(this, proto.types.TxIdx, 1)
      );
    };
    /** @param {?proto.types.TxIdx|undefined} value */


    proto.types.TxInBlock.prototype.setTxidx = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.TxInBlock.prototype.clearTxidx = function () {
      this.setTxidx(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.TxInBlock.prototype.hasTxidx = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional Tx tx = 2;
     * @return {?proto.types.Tx}
     */


    proto.types.TxInBlock.prototype.getTx = function () {
      return (
        /** @type{?proto.types.Tx} */
        googleProtobuf.Message.getWrapperField(this, proto.types.Tx, 2)
      );
    };
    /** @param {?proto.types.Tx|undefined} value */


    proto.types.TxInBlock.prototype.setTx = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.TxInBlock.prototype.clearTx = function () {
      this.setTx(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.TxInBlock.prototype.hasTx = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.State = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.State, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.State.prototype.toObject = function (opt_includeInstance) {
        return proto.types.State.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.State} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.State.toObject = function (includeInstance, msg) {
        var obj = {
          nonce: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          balance: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          codehash: msg.getCodehash_asB64(),
          storageroot: msg.getStorageroot_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.State}
     */


    proto.types.State.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.State();
      return proto.types.State.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.State} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.State}
     */


    proto.types.State.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setNonce(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBalance(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setCodehash(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setStorageroot(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.State.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.State.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.State} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.State.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getNonce();

      if (f !== 0) {
        writer.writeUint64(1, f);
      }

      f = message.getBalance();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }

      f = message.getCodehash_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getStorageroot_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }
    };
    /**
     * optional uint64 nonce = 1;
     * @return {number}
     */


    proto.types.State.prototype.getNonce = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.State.prototype.setNonce = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional uint64 balance = 2;
     * @return {number}
     */


    proto.types.State.prototype.getBalance = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.State.prototype.setBalance = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional bytes codeHash = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.State.prototype.getCodehash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes codeHash = 3;
     * This is a type-conversion wrapper around `getCodehash()`
     * @return {string}
     */


    proto.types.State.prototype.getCodehash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getCodehash())
      );
    };
    /**
     * optional bytes codeHash = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getCodehash()`
     * @return {!Uint8Array}
     */


    proto.types.State.prototype.getCodehash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getCodehash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.State.prototype.setCodehash = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * optional bytes storageRoot = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.State.prototype.getStorageroot = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes storageRoot = 4;
     * This is a type-conversion wrapper around `getStorageroot()`
     * @return {string}
     */


    proto.types.State.prototype.getStorageroot_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getStorageroot())
      );
    };
    /**
     * optional bytes storageRoot = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getStorageroot()`
     * @return {!Uint8Array}
     */


    proto.types.State.prototype.getStorageroot_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getStorageroot())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.State.prototype.setStorageroot = function (value) {
      googleProtobuf.Message.setField(this, 4, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Receipt = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Receipt, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Receipt.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Receipt.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Receipt} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Receipt.toObject = function (includeInstance, msg) {
        var obj = {
          contractaddress: msg.getContractaddress_asB64(),
          status: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          ret: googleProtobuf.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Receipt}
     */


    proto.types.Receipt.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Receipt();
      return proto.types.Receipt.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Receipt} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Receipt}
     */


    proto.types.Receipt.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setContractaddress(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setStatus(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setRet(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Receipt.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Receipt.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Receipt} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Receipt.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getContractaddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getStatus();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getRet();

      if (f.length > 0) {
        writer.writeString(3, f);
      }
    };
    /**
     * optional bytes contractAddress = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Receipt.prototype.getContractaddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {string}
     */


    proto.types.Receipt.prototype.getContractaddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getContractaddress())
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {!Uint8Array}
     */


    proto.types.Receipt.prototype.getContractaddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getContractaddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Receipt.prototype.setContractaddress = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional string status = 2;
     * @return {string}
     */


    proto.types.Receipt.prototype.getStatus = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.Receipt.prototype.setStatus = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional string ret = 3;
     * @return {string}
     */


    proto.types.Receipt.prototype.getRet = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.Receipt.prototype.setRet = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Vote = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Vote, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Vote.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Vote.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Vote} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Vote.toObject = function (includeInstance, msg) {
        var obj = {
          candidate: msg.getCandidate_asB64(),
          amount: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Vote}
     */


    proto.types.Vote.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Vote();
      return proto.types.Vote.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Vote} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Vote}
     */


    proto.types.Vote.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setCandidate(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setAmount(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Vote.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Vote.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Vote} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Vote.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getCandidate_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getAmount();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }
    };
    /**
     * optional bytes candidate = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Vote.prototype.getCandidate = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes candidate = 1;
     * This is a type-conversion wrapper around `getCandidate()`
     * @return {string}
     */


    proto.types.Vote.prototype.getCandidate_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getCandidate())
      );
    };
    /**
     * optional bytes candidate = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getCandidate()`
     * @return {!Uint8Array}
     */


    proto.types.Vote.prototype.getCandidate_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getCandidate())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Vote.prototype.setCandidate = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional uint64 amount = 2;
     * @return {number}
     */


    proto.types.Vote.prototype.getAmount = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.Vote.prototype.setAmount = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.VoteList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.VoteList.repeatedFields_, null);
    };

    goog.inherits(proto.types.VoteList, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.VoteList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.VoteList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.VoteList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.VoteList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.VoteList.toObject = function (includeInstance, msg) {
        var obj = {
          votesList: googleProtobuf.Message.toObjectList(msg.getVotesList(), proto.types.Vote.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.VoteList}
     */


    proto.types.VoteList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.VoteList();
      return proto.types.VoteList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.VoteList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.VoteList}
     */


    proto.types.VoteList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Vote();
            reader.readMessage(value, proto.types.Vote.deserializeBinaryFromReader);
            msg.addVotes(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.VoteList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.VoteList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.VoteList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.VoteList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getVotesList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.Vote.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Vote votes = 1;
     * @return {!Array.<!proto.types.Vote>}
     */


    proto.types.VoteList.prototype.getVotesList = function () {
      return (
        /** @type{!Array.<!proto.types.Vote>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Vote, 1)
      );
    };
    /** @param {!Array.<!proto.types.Vote>} value */


    proto.types.VoteList.prototype.setVotesList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Vote=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Vote}
     */


    proto.types.VoteList.prototype.addVotes = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Vote, opt_index);
    };

    proto.types.VoteList.prototype.clearVotesList = function () {
      this.setVotesList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.FnArgument = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.FnArgument, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.FnArgument.prototype.toObject = function (opt_includeInstance) {
        return proto.types.FnArgument.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.FnArgument} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.FnArgument.toObject = function (includeInstance, msg) {
        var obj = {
          name: googleProtobuf.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.FnArgument}
     */


    proto.types.FnArgument.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.FnArgument();
      return proto.types.FnArgument.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.FnArgument} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.FnArgument}
     */


    proto.types.FnArgument.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setName(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.FnArgument.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.FnArgument.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.FnArgument} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.FnArgument.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getName();

      if (f.length > 0) {
        writer.writeString(1, f);
      }
    };
    /**
     * optional string name = 1;
     * @return {string}
     */


    proto.types.FnArgument.prototype.getName = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.FnArgument.prototype.setName = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Function = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.Function.repeatedFields_, null);
    };

    goog.inherits(proto.types.Function, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.Function.repeatedFields_ = [2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Function.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Function.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Function} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Function.toObject = function (includeInstance, msg) {
        var obj = {
          name: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          argumentsList: googleProtobuf.Message.toObjectList(msg.getArgumentsList(), proto.types.FnArgument.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Function}
     */


    proto.types.Function.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Function();
      return proto.types.Function.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Function} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Function}
     */


    proto.types.Function.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setName(value);
            break;

          case 2:
            var value = new proto.types.FnArgument();
            reader.readMessage(value, proto.types.FnArgument.deserializeBinaryFromReader);
            msg.addArguments(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Function.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Function.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Function} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Function.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getName();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getArgumentsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.types.FnArgument.serializeBinaryToWriter);
      }
    };
    /**
     * optional string name = 1;
     * @return {string}
     */


    proto.types.Function.prototype.getName = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.Function.prototype.setName = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * repeated FnArgument arguments = 2;
     * @return {!Array.<!proto.types.FnArgument>}
     */


    proto.types.Function.prototype.getArgumentsList = function () {
      return (
        /** @type{!Array.<!proto.types.FnArgument>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.FnArgument, 2)
      );
    };
    /** @param {!Array.<!proto.types.FnArgument>} value */


    proto.types.Function.prototype.setArgumentsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 2, value);
    };
    /**
     * @param {!proto.types.FnArgument=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.FnArgument}
     */


    proto.types.Function.prototype.addArguments = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.FnArgument, opt_index);
    };

    proto.types.Function.prototype.clearArgumentsList = function () {
      this.setArgumentsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ABI = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.ABI.repeatedFields_, null);
    };

    goog.inherits(proto.types.ABI, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.ABI.repeatedFields_ = [3];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ABI.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ABI.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ABI} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ABI.toObject = function (includeInstance, msg) {
        var obj = {
          version: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          language: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          functionsList: googleProtobuf.Message.toObjectList(msg.getFunctionsList(), proto.types.Function.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ABI}
     */


    proto.types.ABI.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ABI();
      return proto.types.ABI.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ABI} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ABI}
     */


    proto.types.ABI.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setVersion(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setLanguage(value);
            break;

          case 3:
            var value = new proto.types.Function();
            reader.readMessage(value, proto.types.Function.deserializeBinaryFromReader);
            msg.addFunctions(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ABI.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ABI.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ABI} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ABI.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getVersion();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getLanguage();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getFunctionsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, proto.types.Function.serializeBinaryToWriter);
      }
    };
    /**
     * optional string version = 1;
     * @return {string}
     */


    proto.types.ABI.prototype.getVersion = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.ABI.prototype.setVersion = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional string language = 2;
     * @return {string}
     */


    proto.types.ABI.prototype.getLanguage = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.ABI.prototype.setLanguage = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * repeated Function functions = 3;
     * @return {!Array.<!proto.types.Function>}
     */


    proto.types.ABI.prototype.getFunctionsList = function () {
      return (
        /** @type{!Array.<!proto.types.Function>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Function, 3)
      );
    };
    /** @param {!Array.<!proto.types.Function>} value */


    proto.types.ABI.prototype.setFunctionsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 3, value);
    };
    /**
     * @param {!proto.types.Function=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Function}
     */


    proto.types.ABI.prototype.addFunctions = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.types.Function, opt_index);
    };

    proto.types.ABI.prototype.clearFunctionsList = function () {
      this.setFunctionsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Query = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Query, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Query.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Query.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Query} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Query.toObject = function (includeInstance, msg) {
        var obj = {
          contractaddress: msg.getContractaddress_asB64(),
          queryinfo: msg.getQueryinfo_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Query}
     */


    proto.types.Query.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Query();
      return proto.types.Query.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Query} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Query}
     */


    proto.types.Query.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setContractaddress(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setQueryinfo(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Query.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Query.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Query} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Query.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getContractaddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getQueryinfo_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }
    };
    /**
     * optional bytes contractAddress = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Query.prototype.getContractaddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {string}
     */


    proto.types.Query.prototype.getContractaddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getContractaddress())
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {!Uint8Array}
     */


    proto.types.Query.prototype.getContractaddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getContractaddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Query.prototype.setContractaddress = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional bytes queryinfo = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Query.prototype.getQueryinfo = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes queryinfo = 2;
     * This is a type-conversion wrapper around `getQueryinfo()`
     * @return {string}
     */


    proto.types.Query.prototype.getQueryinfo_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getQueryinfo())
      );
    };
    /**
     * optional bytes queryinfo = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getQueryinfo()`
     * @return {!Uint8Array}
     */


    proto.types.Query.prototype.getQueryinfo_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getQueryinfo())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Query.prototype.setQueryinfo = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * @enum {number}
     */


    proto.types.TxType = {
      NORMAL: 0,
      GOVERNANCE: 1
    };
    goog.object.extend(exports, proto.types);
  });
  var account_pb$1 = createCommonjsModule$1(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.exportSymbol('proto.types.Account', null, global);
    goog.exportSymbol('proto.types.AccountList', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.Account = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Account, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Account.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Account.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Account} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Account.toObject = function (includeInstance, msg) {
        var obj = {
          address: msg.getAddress_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Account}
     */


    proto.types.Account.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Account();
      return proto.types.Account.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Account} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Account}
     */


    proto.types.Account.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAddress(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Account.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Account.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Account} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Account.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getAddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }
    };
    /**
     * optional bytes address = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Account.prototype.getAddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes address = 1;
     * This is a type-conversion wrapper around `getAddress()`
     * @return {string}
     */


    proto.types.Account.prototype.getAddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAddress())
      );
    };
    /**
     * optional bytes address = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAddress()`
     * @return {!Uint8Array}
     */


    proto.types.Account.prototype.getAddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Account.prototype.setAddress = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.AccountList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.AccountList.repeatedFields_, null);
    };

    goog.inherits(proto.types.AccountList, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.AccountList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.AccountList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.AccountList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.AccountList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.AccountList.toObject = function (includeInstance, msg) {
        var obj = {
          accountsList: googleProtobuf.Message.toObjectList(msg.getAccountsList(), proto.types.Account.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.AccountList}
     */


    proto.types.AccountList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.AccountList();
      return proto.types.AccountList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.AccountList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.AccountList}
     */


    proto.types.AccountList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Account();
            reader.readMessage(value, proto.types.Account.deserializeBinaryFromReader);
            msg.addAccounts(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.AccountList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.AccountList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.AccountList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.AccountList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getAccountsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.Account.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Account accounts = 1;
     * @return {!Array.<!proto.types.Account>}
     */


    proto.types.AccountList.prototype.getAccountsList = function () {
      return (
        /** @type{!Array.<!proto.types.Account>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Account, 1)
      );
    };
    /** @param {!Array.<!proto.types.Account>} value */


    proto.types.AccountList.prototype.setAccountsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Account=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Account}
     */


    proto.types.AccountList.prototype.addAccounts = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Account, opt_index);
    };

    proto.types.AccountList.prototype.clearAccountsList = function () {
      this.setAccountsList([]);
    };

    goog.object.extend(exports, proto.types);
  });
  var node_pb$1 = createCommonjsModule$1(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.exportSymbol('proto.types.PeerAddress', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.PeerAddress = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.PeerAddress, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.PeerAddress.prototype.toObject = function (opt_includeInstance) {
        return proto.types.PeerAddress.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.PeerAddress} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.PeerAddress.toObject = function (includeInstance, msg) {
        var obj = {
          address: msg.getAddress_asB64(),
          port: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          peerid: msg.getPeerid_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.PeerAddress}
     */


    proto.types.PeerAddress.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.PeerAddress();
      return proto.types.PeerAddress.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.PeerAddress} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.PeerAddress}
     */


    proto.types.PeerAddress.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAddress(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setPort(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPeerid(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.PeerAddress.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.PeerAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.PeerAddress} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.PeerAddress.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getAddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getPort();

      if (f !== 0) {
        writer.writeUint32(2, f);
      }

      f = message.getPeerid_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }
    };
    /**
     * optional bytes address = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.PeerAddress.prototype.getAddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes address = 1;
     * This is a type-conversion wrapper around `getAddress()`
     * @return {string}
     */


    proto.types.PeerAddress.prototype.getAddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAddress())
      );
    };
    /**
     * optional bytes address = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAddress()`
     * @return {!Uint8Array}
     */


    proto.types.PeerAddress.prototype.getAddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.PeerAddress.prototype.setAddress = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional uint32 port = 2;
     * @return {number}
     */


    proto.types.PeerAddress.prototype.getPort = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.PeerAddress.prototype.setPort = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional bytes peerID = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.PeerAddress.prototype.getPeerid = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes peerID = 3;
     * This is a type-conversion wrapper around `getPeerid()`
     * @return {string}
     */


    proto.types.PeerAddress.prototype.getPeerid_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPeerid())
      );
    };
    /**
     * optional bytes peerID = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPeerid()`
     * @return {!Uint8Array}
     */


    proto.types.PeerAddress.prototype.getPeerid_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPeerid())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.PeerAddress.prototype.setPeerid = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };

    goog.object.extend(exports, proto.types);
  });
  var rpc_pb$1 = createCommonjsModule$1(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.exportSymbol('proto.types.BlockHeaderList', null, global);
    goog.exportSymbol('proto.types.BlockchainStatus', null, global);
    goog.exportSymbol('proto.types.CommitResult', null, global);
    goog.exportSymbol('proto.types.CommitResultList', null, global);
    goog.exportSymbol('proto.types.CommitStatus', null, global);
    goog.exportSymbol('proto.types.Empty', null, global);
    goog.exportSymbol('proto.types.ImportFormat', null, global);
    goog.exportSymbol('proto.types.Input', null, global);
    goog.exportSymbol('proto.types.ListParams', null, global);
    goog.exportSymbol('proto.types.Output', null, global);
    goog.exportSymbol('proto.types.PeerList', null, global);
    goog.exportSymbol('proto.types.Personal', null, global);
    goog.exportSymbol('proto.types.SingleBytes', null, global);
    goog.exportSymbol('proto.types.VerifyResult', null, global);
    goog.exportSymbol('proto.types.VerifyStatus', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.BlockchainStatus = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.BlockchainStatus, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockchainStatus.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockchainStatus.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockchainStatus} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockchainStatus.toObject = function (includeInstance, msg) {
        var obj = {
          bestBlockHash: msg.getBestBlockHash_asB64(),
          bestHeight: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockchainStatus}
     */


    proto.types.BlockchainStatus.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockchainStatus();
      return proto.types.BlockchainStatus.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockchainStatus} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockchainStatus}
     */


    proto.types.BlockchainStatus.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBestBlockHash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBestHeight(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockchainStatus.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockchainStatus.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockchainStatus} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockchainStatus.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBestBlockHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getBestHeight();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }
    };
    /**
     * optional bytes best_block_hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockchainStatus.prototype.getBestBlockHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes best_block_hash = 1;
     * This is a type-conversion wrapper around `getBestBlockHash()`
     * @return {string}
     */


    proto.types.BlockchainStatus.prototype.getBestBlockHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBestBlockHash())
      );
    };
    /**
     * optional bytes best_block_hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBestBlockHash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockchainStatus.prototype.getBestBlockHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBestBlockHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockchainStatus.prototype.setBestBlockHash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional uint64 best_height = 2;
     * @return {number}
     */


    proto.types.BlockchainStatus.prototype.getBestHeight = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockchainStatus.prototype.setBestHeight = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Input = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.Input.repeatedFields_, null);
    };

    goog.inherits(proto.types.Input, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.Input.repeatedFields_ = [2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Input.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Input.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Input} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Input.toObject = function (includeInstance, msg) {
        var obj = {
          hash: msg.getHash_asB64(),
          addressList: msg.getAddressList_asB64(),
          value: msg.getValue_asB64(),
          script: msg.getScript_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Input}
     */


    proto.types.Input.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Input();
      return proto.types.Input.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Input} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Input}
     */


    proto.types.Input.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addAddress(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setValue(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setScript(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Input.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Input.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Input} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Input.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getAddressList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(2, f);
      }

      f = message.getValue_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getScript_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Input.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.Input.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.Input.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Input.prototype.setHash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * repeated bytes address = 2;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.Input.prototype.getAddressList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 2)
      );
    };
    /**
     * repeated bytes address = 2;
     * This is a type-conversion wrapper around `getAddressList()`
     * @return {!Array.<string>}
     */


    proto.types.Input.prototype.getAddressList_asB64 = function () {
      return (
        /** @type {!Array.<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getAddressList())
      );
    };
    /**
     * repeated bytes address = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAddressList()`
     * @return {!Array.<!Uint8Array>}
     */


    proto.types.Input.prototype.getAddressList_asU8 = function () {
      return (
        /** @type {!Array.<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getAddressList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.Input.prototype.setAddressList = function (value) {
      googleProtobuf.Message.setField(this, 2, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.Input.prototype.addAddress = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 2, value, opt_index);
    };

    proto.types.Input.prototype.clearAddressList = function () {
      this.setAddressList([]);
    };
    /**
     * optional bytes value = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Input.prototype.getValue = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes value = 3;
     * This is a type-conversion wrapper around `getValue()`
     * @return {string}
     */


    proto.types.Input.prototype.getValue_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getValue())
      );
    };
    /**
     * optional bytes value = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getValue()`
     * @return {!Uint8Array}
     */


    proto.types.Input.prototype.getValue_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getValue())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Input.prototype.setValue = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * optional bytes script = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Input.prototype.getScript = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes script = 4;
     * This is a type-conversion wrapper around `getScript()`
     * @return {string}
     */


    proto.types.Input.prototype.getScript_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getScript())
      );
    };
    /**
     * optional bytes script = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getScript()`
     * @return {!Uint8Array}
     */


    proto.types.Input.prototype.getScript_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getScript())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Input.prototype.setScript = function (value) {
      googleProtobuf.Message.setField(this, 4, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Output = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Output, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Output.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Output.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Output} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Output.toObject = function (includeInstance, msg) {
        var obj = {
          index: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          address: msg.getAddress_asB64(),
          value: msg.getValue_asB64(),
          script: msg.getScript_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Output}
     */


    proto.types.Output.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Output();
      return proto.types.Output.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Output} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Output}
     */


    proto.types.Output.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setIndex(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAddress(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setValue(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setScript(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Output.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Output.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Output} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Output.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getIndex();

      if (f !== 0) {
        writer.writeUint32(1, f);
      }

      f = message.getAddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }

      f = message.getValue_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getScript_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }
    };
    /**
     * optional uint32 index = 1;
     * @return {number}
     */


    proto.types.Output.prototype.getIndex = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.Output.prototype.setIndex = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional bytes address = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Output.prototype.getAddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes address = 2;
     * This is a type-conversion wrapper around `getAddress()`
     * @return {string}
     */


    proto.types.Output.prototype.getAddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAddress())
      );
    };
    /**
     * optional bytes address = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAddress()`
     * @return {!Uint8Array}
     */


    proto.types.Output.prototype.getAddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Output.prototype.setAddress = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional bytes value = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Output.prototype.getValue = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes value = 3;
     * This is a type-conversion wrapper around `getValue()`
     * @return {string}
     */


    proto.types.Output.prototype.getValue_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getValue())
      );
    };
    /**
     * optional bytes value = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getValue()`
     * @return {!Uint8Array}
     */


    proto.types.Output.prototype.getValue_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getValue())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Output.prototype.setValue = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * optional bytes script = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Output.prototype.getScript = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes script = 4;
     * This is a type-conversion wrapper around `getScript()`
     * @return {string}
     */


    proto.types.Output.prototype.getScript_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getScript())
      );
    };
    /**
     * optional bytes script = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getScript()`
     * @return {!Uint8Array}
     */


    proto.types.Output.prototype.getScript_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getScript())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Output.prototype.setScript = function (value) {
      googleProtobuf.Message.setField(this, 4, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Empty = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Empty, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Empty.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Empty.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Empty} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Empty.toObject = function (includeInstance, msg) {
        var obj = {};

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Empty}
     */


    proto.types.Empty.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Empty();
      return proto.types.Empty.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Empty} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Empty}
     */


    proto.types.Empty.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Empty.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Empty.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Empty} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Empty.serializeBinaryToWriter = function (message, writer) {};
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.SingleBytes = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.SingleBytes, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.SingleBytes.prototype.toObject = function (opt_includeInstance) {
        return proto.types.SingleBytes.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.SingleBytes} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.SingleBytes.toObject = function (includeInstance, msg) {
        var obj = {
          value: msg.getValue_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.SingleBytes}
     */


    proto.types.SingleBytes.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.SingleBytes();
      return proto.types.SingleBytes.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.SingleBytes} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.SingleBytes}
     */


    proto.types.SingleBytes.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setValue(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.SingleBytes.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.SingleBytes.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.SingleBytes} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.SingleBytes.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getValue_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }
    };
    /**
     * optional bytes value = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.SingleBytes.prototype.getValue = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes value = 1;
     * This is a type-conversion wrapper around `getValue()`
     * @return {string}
     */


    proto.types.SingleBytes.prototype.getValue_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getValue())
      );
    };
    /**
     * optional bytes value = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getValue()`
     * @return {!Uint8Array}
     */


    proto.types.SingleBytes.prototype.getValue_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getValue())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.SingleBytes.prototype.setValue = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.PeerList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.PeerList.repeatedFields_, null);
    };

    goog.inherits(proto.types.PeerList, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.PeerList.repeatedFields_ = [1, 2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.PeerList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.PeerList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.PeerList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.PeerList.toObject = function (includeInstance, msg) {
        var obj = {
          peersList: googleProtobuf.Message.toObjectList(msg.getPeersList(), node_pb$1.PeerAddress.toObject, includeInstance),
          statesList: googleProtobuf.Message.getRepeatedField(msg, 2)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.PeerList}
     */


    proto.types.PeerList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.PeerList();
      return proto.types.PeerList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.PeerList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.PeerList}
     */


    proto.types.PeerList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new node_pb$1.PeerAddress();
            reader.readMessage(value, node_pb$1.PeerAddress.deserializeBinaryFromReader);
            msg.addPeers(value);
            break;

          case 2:
            var value =
            /** @type {!Array.<number>} */
            reader.readPackedInt32();
            msg.setStatesList(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.PeerList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.PeerList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.PeerList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.PeerList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getPeersList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, node_pb$1.PeerAddress.serializeBinaryToWriter);
      }

      f = message.getStatesList();

      if (f.length > 0) {
        writer.writePackedInt32(2, f);
      }
    };
    /**
     * repeated PeerAddress peers = 1;
     * @return {!Array.<!proto.types.PeerAddress>}
     */


    proto.types.PeerList.prototype.getPeersList = function () {
      return (
        /** @type{!Array.<!proto.types.PeerAddress>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, node_pb$1.PeerAddress, 1)
      );
    };
    /** @param {!Array.<!proto.types.PeerAddress>} value */


    proto.types.PeerList.prototype.setPeersList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.PeerAddress=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.PeerAddress}
     */


    proto.types.PeerList.prototype.addPeers = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.PeerAddress, opt_index);
    };

    proto.types.PeerList.prototype.clearPeersList = function () {
      this.setPeersList([]);
    };
    /**
     * repeated int32 states = 2;
     * @return {!Array.<number>}
     */


    proto.types.PeerList.prototype.getStatesList = function () {
      return (
        /** @type {!Array.<number>} */
        googleProtobuf.Message.getRepeatedField(this, 2)
      );
    };
    /** @param {!Array.<number>} value */


    proto.types.PeerList.prototype.setStatesList = function (value) {
      googleProtobuf.Message.setField(this, 2, value || []);
    };
    /**
     * @param {!number} value
     * @param {number=} opt_index
     */


    proto.types.PeerList.prototype.addStates = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 2, value, opt_index);
    };

    proto.types.PeerList.prototype.clearStatesList = function () {
      this.setStatesList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ListParams = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.ListParams, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ListParams.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ListParams.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ListParams} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ListParams.toObject = function (includeInstance, msg) {
        var obj = {
          hash: msg.getHash_asB64(),
          height: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          size: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          offset: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
          asc: googleProtobuf.Message.getFieldWithDefault(msg, 5, false)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ListParams}
     */


    proto.types.ListParams.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ListParams();
      return proto.types.ListParams.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ListParams} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ListParams}
     */


    proto.types.ListParams.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setHeight(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setSize(value);
            break;

          case 4:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setOffset(value);
            break;

          case 5:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setAsc(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ListParams.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ListParams.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ListParams} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ListParams.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getHeight();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }

      f = message.getSize();

      if (f !== 0) {
        writer.writeUint32(3, f);
      }

      f = message.getOffset();

      if (f !== 0) {
        writer.writeUint32(4, f);
      }

      f = message.getAsc();

      if (f) {
        writer.writeBool(5, f);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ListParams.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.ListParams.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.ListParams.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ListParams.prototype.setHash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional uint64 height = 2;
     * @return {number}
     */


    proto.types.ListParams.prototype.getHeight = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.ListParams.prototype.setHeight = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional uint32 size = 3;
     * @return {number}
     */


    proto.types.ListParams.prototype.getSize = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.ListParams.prototype.setSize = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * optional uint32 offset = 4;
     * @return {number}
     */


    proto.types.ListParams.prototype.getOffset = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, 0)
      );
    };
    /** @param {number} value */


    proto.types.ListParams.prototype.setOffset = function (value) {
      googleProtobuf.Message.setField(this, 4, value);
    };
    /**
     * optional bool asc = 5;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.ListParams.prototype.getAsc = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, false)
      );
    };
    /** @param {boolean} value */


    proto.types.ListParams.prototype.setAsc = function (value) {
      googleProtobuf.Message.setField(this, 5, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockHeaderList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.BlockHeaderList.repeatedFields_, null);
    };

    goog.inherits(proto.types.BlockHeaderList, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.BlockHeaderList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockHeaderList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockHeaderList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockHeaderList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockHeaderList.toObject = function (includeInstance, msg) {
        var obj = {
          blocksList: googleProtobuf.Message.toObjectList(msg.getBlocksList(), blockchain_pb$1.Block.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockHeaderList}
     */


    proto.types.BlockHeaderList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockHeaderList();
      return proto.types.BlockHeaderList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockHeaderList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockHeaderList}
     */


    proto.types.BlockHeaderList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new blockchain_pb$1.Block();
            reader.readMessage(value, blockchain_pb$1.Block.deserializeBinaryFromReader);
            msg.addBlocks(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockHeaderList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockHeaderList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockHeaderList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockHeaderList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBlocksList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, blockchain_pb$1.Block.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Block blocks = 1;
     * @return {!Array.<!proto.types.Block>}
     */


    proto.types.BlockHeaderList.prototype.getBlocksList = function () {
      return (
        /** @type{!Array.<!proto.types.Block>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, blockchain_pb$1.Block, 1)
      );
    };
    /** @param {!Array.<!proto.types.Block>} value */


    proto.types.BlockHeaderList.prototype.setBlocksList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Block=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Block}
     */


    proto.types.BlockHeaderList.prototype.addBlocks = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Block, opt_index);
    };

    proto.types.BlockHeaderList.prototype.clearBlocksList = function () {
      this.setBlocksList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.CommitResult = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.CommitResult, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.CommitResult.prototype.toObject = function (opt_includeInstance) {
        return proto.types.CommitResult.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.CommitResult} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.CommitResult.toObject = function (includeInstance, msg) {
        var obj = {
          hash: msg.getHash_asB64(),
          error: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.CommitResult}
     */


    proto.types.CommitResult.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.CommitResult();
      return proto.types.CommitResult.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.CommitResult} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.CommitResult}
     */


    proto.types.CommitResult.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value =
            /** @type {!proto.types.CommitStatus} */
            reader.readEnum();
            msg.setError(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.CommitResult.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.CommitResult.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.CommitResult} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.CommitResult.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getError();

      if (f !== 0.0) {
        writer.writeEnum(2, f);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.CommitResult.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.CommitResult.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.CommitResult.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.CommitResult.prototype.setHash = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional CommitStatus error = 2;
     * @return {!proto.types.CommitStatus}
     */


    proto.types.CommitResult.prototype.getError = function () {
      return (
        /** @type {!proto.types.CommitStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {!proto.types.CommitStatus} value */


    proto.types.CommitResult.prototype.setError = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.CommitResultList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.CommitResultList.repeatedFields_, null);
    };

    goog.inherits(proto.types.CommitResultList, googleProtobuf.Message);
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.CommitResultList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.CommitResultList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.CommitResultList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.CommitResultList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.CommitResultList.toObject = function (includeInstance, msg) {
        var obj = {
          resultsList: googleProtobuf.Message.toObjectList(msg.getResultsList(), proto.types.CommitResult.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.CommitResultList}
     */


    proto.types.CommitResultList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.CommitResultList();
      return proto.types.CommitResultList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.CommitResultList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.CommitResultList}
     */


    proto.types.CommitResultList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.CommitResult();
            reader.readMessage(value, proto.types.CommitResult.deserializeBinaryFromReader);
            msg.addResults(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.CommitResultList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.CommitResultList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.CommitResultList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.CommitResultList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getResultsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.CommitResult.serializeBinaryToWriter);
      }
    };
    /**
     * repeated CommitResult results = 1;
     * @return {!Array.<!proto.types.CommitResult>}
     */


    proto.types.CommitResultList.prototype.getResultsList = function () {
      return (
        /** @type{!Array.<!proto.types.CommitResult>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.CommitResult, 1)
      );
    };
    /** @param {!Array.<!proto.types.CommitResult>} value */


    proto.types.CommitResultList.prototype.setResultsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.CommitResult=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.CommitResult}
     */


    proto.types.CommitResultList.prototype.addResults = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.CommitResult, opt_index);
    };

    proto.types.CommitResultList.prototype.clearResultsList = function () {
      this.setResultsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.VerifyResult = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.VerifyResult, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.VerifyResult.prototype.toObject = function (opt_includeInstance) {
        return proto.types.VerifyResult.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.VerifyResult} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.VerifyResult.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          tx: (f = msg.getTx()) && blockchain_pb$1.Tx.toObject(includeInstance, f),
          error: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.VerifyResult}
     */


    proto.types.VerifyResult.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.VerifyResult();
      return proto.types.VerifyResult.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.VerifyResult} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.VerifyResult}
     */


    proto.types.VerifyResult.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new blockchain_pb$1.Tx();
            reader.readMessage(value, blockchain_pb$1.Tx.deserializeBinaryFromReader);
            msg.setTx(value);
            break;

          case 2:
            var value =
            /** @type {!proto.types.VerifyStatus} */
            reader.readEnum();
            msg.setError(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.VerifyResult.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.VerifyResult.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.VerifyResult} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.VerifyResult.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTx();

      if (f != null) {
        writer.writeMessage(1, f, blockchain_pb$1.Tx.serializeBinaryToWriter);
      }

      f = message.getError();

      if (f !== 0.0) {
        writer.writeEnum(2, f);
      }
    };
    /**
     * optional Tx tx = 1;
     * @return {?proto.types.Tx}
     */


    proto.types.VerifyResult.prototype.getTx = function () {
      return (
        /** @type{?proto.types.Tx} */
        googleProtobuf.Message.getWrapperField(this, blockchain_pb$1.Tx, 1)
      );
    };
    /** @param {?proto.types.Tx|undefined} value */


    proto.types.VerifyResult.prototype.setTx = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.VerifyResult.prototype.clearTx = function () {
      this.setTx(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.VerifyResult.prototype.hasTx = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional VerifyStatus error = 2;
     * @return {!proto.types.VerifyStatus}
     */


    proto.types.VerifyResult.prototype.getError = function () {
      return (
        /** @type {!proto.types.VerifyStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {!proto.types.VerifyStatus} value */


    proto.types.VerifyResult.prototype.setError = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Personal = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Personal, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Personal.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Personal.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Personal} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Personal.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          passphrase: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          account: (f = msg.getAccount()) && account_pb$1.Account.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Personal}
     */


    proto.types.Personal.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Personal();
      return proto.types.Personal.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Personal} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Personal}
     */


    proto.types.Personal.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setPassphrase(value);
            break;

          case 2:
            var value = new account_pb$1.Account();
            reader.readMessage(value, account_pb$1.Account.deserializeBinaryFromReader);
            msg.setAccount(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Personal.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Personal.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Personal} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Personal.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getPassphrase();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getAccount();

      if (f != null) {
        writer.writeMessage(2, f, account_pb$1.Account.serializeBinaryToWriter);
      }
    };
    /**
     * optional string passphrase = 1;
     * @return {string}
     */


    proto.types.Personal.prototype.getPassphrase = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.Personal.prototype.setPassphrase = function (value) {
      googleProtobuf.Message.setField(this, 1, value);
    };
    /**
     * optional Account account = 2;
     * @return {?proto.types.Account}
     */


    proto.types.Personal.prototype.getAccount = function () {
      return (
        /** @type{?proto.types.Account} */
        googleProtobuf.Message.getWrapperField(this, account_pb$1.Account, 2)
      );
    };
    /** @param {?proto.types.Account|undefined} value */


    proto.types.Personal.prototype.setAccount = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.Personal.prototype.clearAccount = function () {
      this.setAccount(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.Personal.prototype.hasAccount = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ImportFormat = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.ImportFormat, googleProtobuf.Message);

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ImportFormat.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ImportFormat.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ImportFormat} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ImportFormat.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          wif: (f = msg.getWif()) && proto.types.SingleBytes.toObject(includeInstance, f),
          oldpass: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          newpass: googleProtobuf.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ImportFormat}
     */


    proto.types.ImportFormat.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ImportFormat();
      return proto.types.ImportFormat.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ImportFormat} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ImportFormat}
     */


    proto.types.ImportFormat.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.SingleBytes();
            reader.readMessage(value, proto.types.SingleBytes.deserializeBinaryFromReader);
            msg.setWif(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setOldpass(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setNewpass(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ImportFormat.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ImportFormat.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ImportFormat} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ImportFormat.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getWif();

      if (f != null) {
        writer.writeMessage(1, f, proto.types.SingleBytes.serializeBinaryToWriter);
      }

      f = message.getOldpass();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getNewpass();

      if (f.length > 0) {
        writer.writeString(3, f);
      }
    };
    /**
     * optional SingleBytes wif = 1;
     * @return {?proto.types.SingleBytes}
     */


    proto.types.ImportFormat.prototype.getWif = function () {
      return (
        /** @type{?proto.types.SingleBytes} */
        googleProtobuf.Message.getWrapperField(this, proto.types.SingleBytes, 1)
      );
    };
    /** @param {?proto.types.SingleBytes|undefined} value */


    proto.types.ImportFormat.prototype.setWif = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.ImportFormat.prototype.clearWif = function () {
      this.setWif(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {!boolean}
     */


    proto.types.ImportFormat.prototype.hasWif = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional string oldpass = 2;
     * @return {string}
     */


    proto.types.ImportFormat.prototype.getOldpass = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.ImportFormat.prototype.setOldpass = function (value) {
      googleProtobuf.Message.setField(this, 2, value);
    };
    /**
     * optional string newpass = 3;
     * @return {string}
     */


    proto.types.ImportFormat.prototype.getNewpass = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.ImportFormat.prototype.setNewpass = function (value) {
      googleProtobuf.Message.setField(this, 3, value);
    };
    /**
     * @enum {number}
     */


    proto.types.CommitStatus = {
      TX_OK: 0,
      TX_NONCE_TOO_LOW: 1,
      TX_ALREADY_EXISTS: 2,
      TX_INVALID_HASH: 3,
      TX_INVALID_FORMAT: 4,
      TX_INSUFFICIENT_BALANCE: 5,
      TX_INTERNAL_ERROR: 6
    };
    /**
     * @enum {number}
     */

    proto.types.VerifyStatus = {
      VERIFY_STATUS_OK: 0,
      VERIFY_STATUS_SIGN_NOT_MATCH: 1,
      VERIFY_STATUS_INVALID_HASH: 2
    };
    goog.object.extend(exports, proto.types);
  });
  var typesWeb =
  /*#__PURE__*/
  Object.freeze({
    default: rpc_pb$1,
    __moduleExports: rpc_pb$1
  });
  var platformWeb = typeof process === 'undefined' || process.env.TARGET == 'web';
  var rpcTypes = platformWeb ? typesWeb : typesNode;
  var ADDRESS_PREFIXES = {
    ACCOUNT: 0x42
  };

  var encodeAddress = function encodeAddress(byteArray) {
    var buf = Buffer.from([ADDRESS_PREFIXES.ACCOUNT].concat(_toConsumableArray$1(byteArray)));
    return bs58check.encode(buf);
  };

  var decodeAddress = function decodeAddress(address) {
    return bs58check.decode(address).slice(1);
  };
  /*
  tansaction = {
      hash : byte of base64 
      nonce : uint
      from : byte of base58
      to : byte of base58
      amount : uint
      payload : byte of base64
      sign : byte of base64
      type : int
  }
  */


  function transactionToTx(tx) {
    var msgtxbody = new rpcTypes.TxBody();
    msgtxbody.setNonce(tx.nonce);
    msgtxbody.setAccount(decodeAddress(tx.from));
    msgtxbody.setRecipient(decodeAddress(tx.to));
    msgtxbody.setAmount(tx.amount);

    if (tx.payload != null) {
      msgtxbody.setPayload(tx.payload);
    }

    if (typeof tx.sign === 'string') {
      msgtxbody.setSign(Buffer.from(tx.sign, 'base64'));
    } else {
      msgtxbody.setSign(tx.sign);
    }

    msgtxbody.setType(tx.type);
    var msgtx = new rpcTypes.Tx();

    if (tx.hash != null) {
      msgtx.setHash(tx.hash);
    }

    msgtx.setBody(msgtxbody);
    return msgtx;
  }

  function txToTransaction(tx) {
    var transaction = {};
    transaction.hash = tx.getHash_asB64();
    transaction.nonce = tx.getBody().getNonce();
    transaction.from = encodeAddress(tx.getBody().getAccount_asU8());
    transaction.to = encodeAddress(tx.getBody().getRecipient_asU8());
    transaction.amount = tx.getBody().getAmount();
    transaction.payload = tx.getBody().getPayload();
    transaction.sign = tx.getBody().getSign_asB64();
    transaction.type = tx.getBody().getType();
    return transaction;
  }

  var CommitStatus = rpcTypes.CommitStatus;

  var fromHexString = function fromHexString(hexString) {
    return new Uint8Array(hexString.match(/.{1,2}/g).map(function (byte) {
      return parseInt(byte, 16);
    }));
  };

  var toHexString = function toHexString(bytes) {
    return bytes.reduce(function (str, byte) {
      return str + byte.toString(16).padStart(2, '0');
    }, '');
  };

  var fromNumber = function fromNumber(d) {
    if (d >= Math.pow(2, 64)) {
      throw new Error('Number exeeds uint64 range');
    }

    var arr = new Uint8Array(8);

    for (var i = 0, j = 1; i < 8; i++, j *= 0x100) {
      arr[i] = d / j & 0xff;
    }

    return arr;
  };

  var errorMessageForCode = function errorMessageForCode(code) {
    var errorMessage = 'UNDEFINED_ERROR';

    if (code && code < Object.values(CommitStatus).length) {
      errorMessage = Object.keys(CommitStatus)[Object.values(CommitStatus).indexOf(code)];
    }

    return errorMessage;
  };
  /**
   * Accounts controller.
   */


  var Accounts =
  /*#__PURE__*/
  function () {
    function Accounts(aergo) {
      _classCallCheck$1(this, Accounts);

      this.client = aergo.client;
    }
    /**
     * Create a new account in the node.
     * @param {string} passphrase 
     * @returns {Promise<string>} newly created account address
     */


    _createClass$1(Accounts, [{
      key: "create",
      value: function create(passphrase) {
        var _this = this;

        return new Promise(function (resolve, reject) {
          var personal = new rpc_pb_2();
          personal.setPassphrase(passphrase);

          try {
            _this.client.createAccount(personal, function (err, rsp) {
              if (err) {
                reject(err);
              } else {
                var createdAddress = rsp.getAddress_asU8();
                resolve(encodeAddress(createdAddress));
              }
            });
          } catch (exception) {
            reject(exception);
          }
        });
      }
      /**
       * Get list of accounts.
       * @returns {Promise<string[]>} list of account addresses
       */

    }, {
      key: "get",
      value: function get() {
        var _this2 = this;

        return new Promise(function (resolve, reject) {
          var empty = new rpc_pb_1();

          try {
            _this2.client.getAccounts(empty, function (err, rsp) {
              if (err) {
                reject(err);
              } else {
                var accounts = rsp.getAccountsList();
                var addresses = accounts.map(function (account) {
                  return encodeAddress(account.getAddress_asU8());
                });
                resolve(addresses);
              }
            });
          } catch (exception) {
            reject(exception);
          }
        });
      }
      /**
       * Unlock account.
       * @param {string} address 
       * @param {string} passphrase 
       * @returns {Promise<string>} unlocked account address
       */

    }, {
      key: "unlock",
      value: function unlock(address, passphrase) {
        var _this3 = this;

        return new Promise(function (resolve, reject) {
          var account = new rpc_pb_3();
          account.setAddress(decodeAddress(address));
          var personal = new rpc_pb_2();
          personal.setPassphrase(passphrase);
          personal.setAccount(account);

          try {
            _this3.client.unlockAccount(personal, function (err, rsp) {
              if (err) {
                reject(err);
              } else {
                var createdAddress = rsp.getAddress_asU8();
                resolve(encodeAddress(createdAddress));
              }
            });
          } catch (exception) {
            reject(exception);
          }
        });
      }
      /**
       * Lock account.
       * @param {string} address 
       * @param {string} passphrase 
       * @returns {Promise<string>} locked account address
       */

    }, {
      key: "lock",
      value: function lock(address, passphrase) {
        var _this4 = this;

        return new Promise(function (resolve, reject) {
          var account = new rpc_pb_3();
          account.setAddress(decodeAddress(address));
          var personal = new rpc_pb_2();
          personal.setPassphrase(passphrase);
          personal.setAccount(account);

          try {
            _this4.client.lockAccount(personal, function (err, rsp) {
              if (err) {
                reject(err);
              } else {
                var createdAddress = rsp.getAddress_asU8();
                resolve(encodeAddress(createdAddress));
              }
            });
          } catch (exception) {
            reject(exception);
          }
        });
      }
      /**
       * Convenience method to send transaction from account.
       * This method automatically retrieves the nonce, signs the transaction, and sends it to the network.
       * @param {object} tx transaction data
       * @returns {Promise<string>} transaction hash
       */

    }, {
      key: "sendTransaction",
      value: function sendTransaction(tx) {
        var _this5 = this;

        return new Promise(function (resolve, reject) {
          var msgtxbody = new rpc_pb_6();
          msgtxbody.setAccount(decodeAddress(tx.from));
          msgtxbody.setRecipient(decodeAddress(tx.to));
          msgtxbody.setAmount(tx.amount);
          msgtxbody.setPayload(tx.payload);
          msgtxbody.setType(tx.type);
          var msgtx = new rpc_pb_7();
          msgtx.setBody(msgtxbody);

          _this5.client.sendTX(msgtx, function (err, result) {
            if (err) {
              reject(err);
            } else {
              resolve(result.getHash_asB64());
            }
          });
        });
      }
      /**
       * Sign transaction.
       * @param {object} tx transaction data
       * @returns {Promise<object>} transaction data including signature
       */

    }, {
      key: "signTransaction",
      value: function signTransaction(tx) {
        var _this6 = this;

        return new Promise(function (resolve, reject) {
          var msgtxbody = new rpc_pb_6();
          msgtxbody.setNonce(tx.nonce);
          msgtxbody.setAccount(decodeAddress(tx.from));
          msgtxbody.setRecipient(decodeAddress(tx.to));
          msgtxbody.setAmount(tx.amount);
          msgtxbody.setPayload(tx.payload);
          msgtxbody.setType(tx.type);
          var msgtx = new rpc_pb_7();
          msgtx.setBody(msgtxbody);

          _this6.client.signTX(msgtx, function (err, signedtx) {
            if (err == null) {
              resolve(txToTransaction(signedtx));
            } else {
              reject(err);
            }
          });
        });
      }
    }]);

    return Accounts;
  }();

  var kCustomPromisifiedSymbol = Symbol('util.promisify.custom');

  function promisify(original, context) {
    if (typeof context === 'undefined') {
      context = this;
    }

    if (typeof original !== 'function') {
      throw new Error('original', 'Function', original);
    }

    function fn() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return new Promise(function (resolve, reject) {
        original.call.apply(original, [context].concat(args, [function (err, value) {
          if (err) {
            return reject(err);
          }

          resolve(value);
        }]));
      });
    }

    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return Object.defineProperties(fn, Object.getOwnPropertyDescriptors(original));
  }

  var CommitStatus$1 = rpcTypes.CommitStatus;
  /**
   * Main aergo client controller.
   */

  var AergoClient =
  /*#__PURE__*/
  function () {
    /**
     * Create a new auto-configured client with:
     * 
     * .. code-block:: javascript
     * 
     *     import AergoClient from 'herajs';
     *     const aergo = new AergoClient();
     * 
     * @param [object] configuration. Unused at the moment.
     * @param [Provider] custom configured provider. By default a provider is configured automatically depending on the environment.
     */
    function AergoClient(config) {
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      _classCallCheck$1(this, AergoClient);

      this.version = 0.1;
      this.config = _objectSpread$1({}, config);
      this.client = provider || this.defaultProvider();
      this.accounts = new Accounts(this);
    }

    _createClass$1(AergoClient, [{
      key: "defaultProvider",
      value: function defaultProvider() {} // Platform-specific override, see ../platforms/**
      // for auto-configuration of a provider.
      // Can also manually pass provider to constructor.

      /**
       * Set a new provider
       * @param {Provider} provider
       */

    }, {
      key: "setProvider",
      value: function setProvider(provider) {
        this.client = provider;
      }
    }, {
      key: "getConfig",
      value: function getConfig() {
        return this.config;
      }
    }, {
      key: "isConnected",
      value: function isConnected() {
        return false;
      }
      /**
       * Request current status of blockchain.
       * @returns {Promise<object>} an object detailing the current status
       */

    }, {
      key: "blockchain",
      value: function blockchain() {
        var empty = new rpcTypes.Empty();
        return promisify(this.client.blockchain, this.client)(empty).then(function (result) {
          return _objectSpread$1({}, result.toObject(), {
            bestBlockHash: toHexString(result.getBestBlockHash_asU8())
          });
        });
      }
      /**
       * Get transaction information in the aergo node. 
       * If transaction is in the block return result with block hash and index.
       * @param {string} txhash transaction hash
       * @returns {Promise<object>} transaction details
       */

    }, {
      key: "getTransaction",
      value: function getTransaction(txhash) {
        var _this = this;

        var singleBytes = new rpcTypes.SingleBytes();
        singleBytes.setValue(txhash);
        return new Promise(function (resolve, reject) {
          _this.client.getBlockTX(singleBytes, function (err, result) {
            if (err) {
              _this.client.getTX(singleBytes, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  var res = {};
                  res.tx = txToTransaction(result);
                  resolve(res);
                }
              });
            } else {
              var res = {};
              res.block = result.getTxidx();
              res.tx = txToTransaction(result.getTx());
              resolve(res);
            }
          });
        });
      }
      /**
       * Retrieve information about a block.
       * 
       * @param {string|number} hashOrNumber either 32-byte block hash encoded as a hex string or block height as a number.
       * @returns {Promise<object>} block details
       */

    }, {
      key: "getBlock",
      value: function getBlock(hashOrNumber) {
        if (typeof hashOrNumber === 'string') {
          hashOrNumber = fromHexString(hashOrNumber);

          if (hashOrNumber.length != 32) {
            throw new Error('Invalid block hash. Must be 32 byte encoded in hex. Did you mean to pass a block number?');
          }
        } else if (typeof hashOrNumber === 'number') {
          hashOrNumber = fromNumber(hashOrNumber);
        }

        var singleBytes = new rpcTypes.SingleBytes();
        singleBytes.setValue(hashOrNumber);
        return promisify(this.client.getBlock, this.client)(singleBytes).then(function (result) {
          var obj = result.toObject();
          obj.hash = toHexString(result.getHash_asU8());
          obj.header.prevblockhash = toHexString(result.getHeader().getPrevblockhash_asU8());
          return obj;
        });
      }
    }, {
      key: "getBlockHeaderStream",
      value: function getBlockHeaderStream() {
        var empty = new rpcTypes.Empty();
        var stream = this.client.listBlockHeadersStream(empty);
        stream.on('error', function (error) {
          if (error.code === 1) {
            // grpc.status.CANCELLED
            return;
          }
        });
        return stream;
      }
      /**
       * Retrieve account state, including current balance and nonce.
       * @param {string} address Account address encoded in Base58check
       * @returns {Promise<object>} account state
       */

    }, {
      key: "getState",
      value: function getState(address) {
        var singleBytes = new rpcTypes.SingleBytes();
        singleBytes.setValue(decodeAddress(address));
        return promisify(this.client.getState, this.client)(singleBytes).then(function (state) {
          return state.toObject();
        });
      }
    }, {
      key: "getNonce",
      value: function getNonce(address) {
        var singleBytes = new rpcTypes.SingleBytes();
        singleBytes.setValue(decodeAddress(address));
        return promisify(this.client.getState, this.client)(singleBytes).then(function (state) {
          return state.getNonce();
        });
      }
    }, {
      key: "verifyTransaction",
      value: function verifyTransaction(tx) {
        return promisify(this.client.verifyTX, this.client)(transactionToTx(tx));
      }
      /**
       * Send a signed transaction to the network.
       * @param {Transaction} tx signed transaction
       * @returns {Promise<string>} transaction hash
       */

    }, {
      key: "sendSignedTransaction",
      value: function sendSignedTransaction(tx) {
        var _this2 = this;

        return new Promise(function (resolve, reject) {
          var txs = new rpcTypes.TxList();
          txs.addTxs(transactionToTx(tx), 0);

          _this2.client.commitTX(txs, function (err, result) {
            if (err == null && result.getResultsList()[0].getError()) {
              err = new Error();
              err.code = result.getResultsList()[0].getError();
              err.message = errorMessageForCode(err.code);
            }

            if (err) {
              reject(err);
            } else {
              resolve(result.getResultsList()[0].getHash_asB64());
            }
          });
        });
      }
    }, {
      key: "getTransactionReceipt",
      value: function getTransactionReceipt(hash, callback) {
        // eslint-disable-line
        return true;
      }
    }]);

    return AergoClient;
  }();

  var Provider = function Provider(config) {
    _classCallCheck$1(this, Provider);

    this.config = _objectSpread$1({}, this.defaultConfig, config); // Proxy that passes method calls to the provider's client object

    return new Proxy(this, {
      get: function get(obj, field) {
        if (field in obj) return obj[field];
        return obj.client[field];
      }
    });
  };

  var rpc_grpc_pb = createCommonjsModule$1(function (module, exports) {
    function serialize_types_ABI(arg) {
      if (!(arg instanceof blockchain_pb.ABI)) {
        throw new Error('Expected argument of type types.ABI');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_ABI(buffer_arg) {
      return blockchain_pb.ABI.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_Account(arg) {
      if (!(arg instanceof account_pb.Account)) {
        throw new Error('Expected argument of type types.Account');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_Account(buffer_arg) {
      return account_pb.Account.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_AccountList(arg) {
      if (!(arg instanceof account_pb.AccountList)) {
        throw new Error('Expected argument of type types.AccountList');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_AccountList(buffer_arg) {
      return account_pb.AccountList.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_Block(arg) {
      if (!(arg instanceof blockchain_pb.Block)) {
        throw new Error('Expected argument of type types.Block');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_Block(buffer_arg) {
      return blockchain_pb.Block.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_BlockHeader(arg) {
      if (!(arg instanceof blockchain_pb.BlockHeader)) {
        throw new Error('Expected argument of type types.BlockHeader');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_BlockHeader(buffer_arg) {
      return blockchain_pb.BlockHeader.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_BlockHeaderList(arg) {
      if (!(arg instanceof rpc_pb.BlockHeaderList)) {
        throw new Error('Expected argument of type types.BlockHeaderList');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_BlockHeaderList(buffer_arg) {
      return rpc_pb.BlockHeaderList.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_BlockchainStatus(arg) {
      if (!(arg instanceof rpc_pb.BlockchainStatus)) {
        throw new Error('Expected argument of type types.BlockchainStatus');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_BlockchainStatus(buffer_arg) {
      return rpc_pb.BlockchainStatus.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_CommitResult(arg) {
      if (!(arg instanceof rpc_pb.CommitResult)) {
        throw new Error('Expected argument of type types.CommitResult');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_CommitResult(buffer_arg) {
      return rpc_pb.CommitResult.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_CommitResultList(arg) {
      if (!(arg instanceof rpc_pb.CommitResultList)) {
        throw new Error('Expected argument of type types.CommitResultList');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_CommitResultList(buffer_arg) {
      return rpc_pb.CommitResultList.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_Empty(arg) {
      if (!(arg instanceof rpc_pb.Empty)) {
        throw new Error('Expected argument of type types.Empty');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_Empty(buffer_arg) {
      return rpc_pb.Empty.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_ImportFormat(arg) {
      if (!(arg instanceof rpc_pb.ImportFormat)) {
        throw new Error('Expected argument of type types.ImportFormat');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_ImportFormat(buffer_arg) {
      return rpc_pb.ImportFormat.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_ListParams(arg) {
      if (!(arg instanceof rpc_pb.ListParams)) {
        throw new Error('Expected argument of type types.ListParams');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_ListParams(buffer_arg) {
      return rpc_pb.ListParams.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_PeerList(arg) {
      if (!(arg instanceof rpc_pb.PeerList)) {
        throw new Error('Expected argument of type types.PeerList');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_PeerList(buffer_arg) {
      return rpc_pb.PeerList.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_Personal(arg) {
      if (!(arg instanceof rpc_pb.Personal)) {
        throw new Error('Expected argument of type types.Personal');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_Personal(buffer_arg) {
      return rpc_pb.Personal.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_Query(arg) {
      if (!(arg instanceof blockchain_pb.Query)) {
        throw new Error('Expected argument of type types.Query');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_Query(buffer_arg) {
      return blockchain_pb.Query.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_Receipt(arg) {
      if (!(arg instanceof blockchain_pb.Receipt)) {
        throw new Error('Expected argument of type types.Receipt');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_Receipt(buffer_arg) {
      return blockchain_pb.Receipt.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_SingleBytes(arg) {
      if (!(arg instanceof rpc_pb.SingleBytes)) {
        throw new Error('Expected argument of type types.SingleBytes');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_SingleBytes(buffer_arg) {
      return rpc_pb.SingleBytes.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_State(arg) {
      if (!(arg instanceof blockchain_pb.State)) {
        throw new Error('Expected argument of type types.State');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_State(buffer_arg) {
      return blockchain_pb.State.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_Tx(arg) {
      if (!(arg instanceof blockchain_pb.Tx)) {
        throw new Error('Expected argument of type types.Tx');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_Tx(buffer_arg) {
      return blockchain_pb.Tx.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_TxInBlock(arg) {
      if (!(arg instanceof blockchain_pb.TxInBlock)) {
        throw new Error('Expected argument of type types.TxInBlock');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_TxInBlock(buffer_arg) {
      return blockchain_pb.TxInBlock.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_TxList(arg) {
      if (!(arg instanceof blockchain_pb.TxList)) {
        throw new Error('Expected argument of type types.TxList');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_TxList(buffer_arg) {
      return blockchain_pb.TxList.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_VerifyResult(arg) {
      if (!(arg instanceof rpc_pb.VerifyResult)) {
        throw new Error('Expected argument of type types.VerifyResult');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_VerifyResult(buffer_arg) {
      return rpc_pb.VerifyResult.deserializeBinary(new Uint8Array(buffer_arg));
    }

    function serialize_types_VoteList(arg) {
      if (!(arg instanceof blockchain_pb.VoteList)) {
        throw new Error('Expected argument of type types.VoteList');
      }

      return new Buffer(arg.serializeBinary());
    }

    function deserialize_types_VoteList(buffer_arg) {
      return blockchain_pb.VoteList.deserializeBinary(new Uint8Array(buffer_arg));
    } // BlockService serves APIs that aergosvr provides.
    // Some methods optionally contains context path if it is also provided by REST API.


    var AergoRPCServiceService = exports.AergoRPCServiceService = {
      nodeState: {
        path: '/types.AergoRPCService/NodeState',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.SingleBytes,
        responseType: rpc_pb.SingleBytes,
        requestSerialize: serialize_types_SingleBytes,
        requestDeserialize: deserialize_types_SingleBytes,
        responseSerialize: serialize_types_SingleBytes,
        responseDeserialize: deserialize_types_SingleBytes
      },
      blockchain: {
        path: '/types.AergoRPCService/Blockchain',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.Empty,
        responseType: rpc_pb.BlockchainStatus,
        requestSerialize: serialize_types_Empty,
        requestDeserialize: deserialize_types_Empty,
        responseSerialize: serialize_types_BlockchainStatus,
        responseDeserialize: deserialize_types_BlockchainStatus
      },
      // option (google.api.http) = {
      //   get: "/blockchain"
      // };
      listBlockHeaders: {
        path: '/types.AergoRPCService/ListBlockHeaders',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.ListParams,
        responseType: rpc_pb.BlockHeaderList,
        requestSerialize: serialize_types_ListParams,
        requestDeserialize: deserialize_types_ListParams,
        responseSerialize: serialize_types_BlockHeaderList,
        responseDeserialize: deserialize_types_BlockHeaderList
      },
      listBlockHeadersStream: {
        path: '/types.AergoRPCService/ListBlockHeadersStream',
        requestStream: false,
        responseStream: true,
        requestType: rpc_pb.Empty,
        responseType: blockchain_pb.BlockHeader,
        requestSerialize: serialize_types_Empty,
        requestDeserialize: deserialize_types_Empty,
        responseSerialize: serialize_types_BlockHeader,
        responseDeserialize: deserialize_types_BlockHeader
      },
      getBlock: {
        path: '/types.AergoRPCService/GetBlock',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.SingleBytes,
        responseType: blockchain_pb.Block,
        requestSerialize: serialize_types_SingleBytes,
        requestDeserialize: deserialize_types_SingleBytes,
        responseSerialize: serialize_types_Block,
        responseDeserialize: deserialize_types_Block
      },
      // option (google.api.http) = {
      //   get: "/blocks/{blockHash}"
      // };    
      getTX: {
        path: '/types.AergoRPCService/GetTX',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.SingleBytes,
        responseType: blockchain_pb.Tx,
        requestSerialize: serialize_types_SingleBytes,
        requestDeserialize: deserialize_types_SingleBytes,
        responseSerialize: serialize_types_Tx,
        responseDeserialize: deserialize_types_Tx
      },
      // option (google.api.http) = {
      //   get: "/transactions/{value}"
      // };    
      getBlockTX: {
        path: '/types.AergoRPCService/GetBlockTX',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.SingleBytes,
        responseType: blockchain_pb.TxInBlock,
        requestSerialize: serialize_types_SingleBytes,
        requestDeserialize: deserialize_types_SingleBytes,
        responseSerialize: serialize_types_TxInBlock,
        responseDeserialize: deserialize_types_TxInBlock
      },
      getReceipt: {
        path: '/types.AergoRPCService/GetReceipt',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.SingleBytes,
        responseType: blockchain_pb.Receipt,
        requestSerialize: serialize_types_SingleBytes,
        requestDeserialize: deserialize_types_SingleBytes,
        responseSerialize: serialize_types_Receipt,
        responseDeserialize: deserialize_types_Receipt
      },
      getABI: {
        path: '/types.AergoRPCService/GetABI',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.SingleBytes,
        responseType: blockchain_pb.ABI,
        requestSerialize: serialize_types_SingleBytes,
        requestDeserialize: deserialize_types_SingleBytes,
        responseSerialize: serialize_types_ABI,
        responseDeserialize: deserialize_types_ABI
      },
      sendTX: {
        path: '/types.AergoRPCService/SendTX',
        requestStream: false,
        responseStream: false,
        requestType: blockchain_pb.Tx,
        responseType: rpc_pb.CommitResult,
        requestSerialize: serialize_types_Tx,
        requestDeserialize: deserialize_types_Tx,
        responseSerialize: serialize_types_CommitResult,
        responseDeserialize: deserialize_types_CommitResult
      },
      commitTX: {
        path: '/types.AergoRPCService/CommitTX',
        requestStream: false,
        responseStream: false,
        requestType: blockchain_pb.TxList,
        responseType: rpc_pb.CommitResultList,
        requestSerialize: serialize_types_TxList,
        requestDeserialize: deserialize_types_TxList,
        responseSerialize: serialize_types_CommitResultList,
        responseDeserialize: deserialize_types_CommitResultList
      },
      // option (google.api.http) = {
      //   post: "/transactions"
      //   body: "transaction"
      // };    
      getState: {
        path: '/types.AergoRPCService/GetState',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.SingleBytes,
        responseType: blockchain_pb.State,
        requestSerialize: serialize_types_SingleBytes,
        requestDeserialize: deserialize_types_SingleBytes,
        responseSerialize: serialize_types_State,
        responseDeserialize: deserialize_types_State
      },
      createAccount: {
        path: '/types.AergoRPCService/CreateAccount',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.Personal,
        responseType: account_pb.Account,
        requestSerialize: serialize_types_Personal,
        requestDeserialize: deserialize_types_Personal,
        responseSerialize: serialize_types_Account,
        responseDeserialize: deserialize_types_Account
      },
      getAccounts: {
        path: '/types.AergoRPCService/GetAccounts',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.Empty,
        responseType: account_pb.AccountList,
        requestSerialize: serialize_types_Empty,
        requestDeserialize: deserialize_types_Empty,
        responseSerialize: serialize_types_AccountList,
        responseDeserialize: deserialize_types_AccountList
      },
      lockAccount: {
        path: '/types.AergoRPCService/LockAccount',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.Personal,
        responseType: account_pb.Account,
        requestSerialize: serialize_types_Personal,
        requestDeserialize: deserialize_types_Personal,
        responseSerialize: serialize_types_Account,
        responseDeserialize: deserialize_types_Account
      },
      unlockAccount: {
        path: '/types.AergoRPCService/UnlockAccount',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.Personal,
        responseType: account_pb.Account,
        requestSerialize: serialize_types_Personal,
        requestDeserialize: deserialize_types_Personal,
        responseSerialize: serialize_types_Account,
        responseDeserialize: deserialize_types_Account
      },
      importAccount: {
        path: '/types.AergoRPCService/ImportAccount',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.ImportFormat,
        responseType: account_pb.Account,
        requestSerialize: serialize_types_ImportFormat,
        requestDeserialize: deserialize_types_ImportFormat,
        responseSerialize: serialize_types_Account,
        responseDeserialize: deserialize_types_Account
      },
      exportAccount: {
        path: '/types.AergoRPCService/ExportAccount',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.Personal,
        responseType: rpc_pb.SingleBytes,
        requestSerialize: serialize_types_Personal,
        requestDeserialize: deserialize_types_Personal,
        responseSerialize: serialize_types_SingleBytes,
        responseDeserialize: deserialize_types_SingleBytes
      },
      signTX: {
        path: '/types.AergoRPCService/SignTX',
        requestStream: false,
        responseStream: false,
        requestType: blockchain_pb.Tx,
        responseType: blockchain_pb.Tx,
        requestSerialize: serialize_types_Tx,
        requestDeserialize: deserialize_types_Tx,
        responseSerialize: serialize_types_Tx,
        responseDeserialize: deserialize_types_Tx
      },
      verifyTX: {
        path: '/types.AergoRPCService/VerifyTX',
        requestStream: false,
        responseStream: false,
        requestType: blockchain_pb.Tx,
        responseType: rpc_pb.VerifyResult,
        requestSerialize: serialize_types_Tx,
        requestDeserialize: deserialize_types_Tx,
        responseSerialize: serialize_types_VerifyResult,
        responseDeserialize: deserialize_types_VerifyResult
      },
      queryContract: {
        path: '/types.AergoRPCService/QueryContract',
        requestStream: false,
        responseStream: false,
        requestType: blockchain_pb.Query,
        responseType: rpc_pb.SingleBytes,
        requestSerialize: serialize_types_Query,
        requestDeserialize: deserialize_types_Query,
        responseSerialize: serialize_types_SingleBytes,
        responseDeserialize: deserialize_types_SingleBytes
      },
      getPeers: {
        path: '/types.AergoRPCService/GetPeers',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.Empty,
        responseType: rpc_pb.PeerList,
        requestSerialize: serialize_types_Empty,
        requestDeserialize: deserialize_types_Empty,
        responseSerialize: serialize_types_PeerList,
        responseDeserialize: deserialize_types_PeerList
      },
      getVotes: {
        path: '/types.AergoRPCService/GetVotes',
        requestStream: false,
        responseStream: false,
        requestType: rpc_pb.SingleBytes,
        responseType: blockchain_pb.VoteList,
        requestSerialize: serialize_types_SingleBytes,
        requestDeserialize: deserialize_types_SingleBytes,
        responseSerialize: serialize_types_VoteList,
        responseDeserialize: deserialize_types_VoteList
      }
    };
    exports.AergoRPCServiceClient = grpc_1.makeGenericClientConstructor(AergoRPCServiceService);
  });
  var rpc_grpc_pb_1 = rpc_grpc_pb.AergoRPCServiceService;
  var rpc_grpc_pb_2 = rpc_grpc_pb.AergoRPCServiceClient;
  /**
   * Provider for standard GRPC connections over HTTP2.
   * This is only compatible with Node.js environments.
   */

  var GrpcProvider =
  /*#__PURE__*/
  function (_Provider) {
    _inherits$1(GrpcProvider, _Provider);
    /**
     * .. code-block:: javascript
     * 
     *     import { GrpcProvider } from 'herajs';
     *     const provider = new GrpcProvider({url: 'localhost:7845'});
     * 
     * @param {object} config
     * @param {string} config.url URL to connect to (excluding protocol)
     */


    function GrpcProvider(config) {
      var _this;

      _classCallCheck$1(this, GrpcProvider);

      _this = _possibleConstructorReturn$1(this, _getPrototypeOf$1(GrpcProvider).call(this, config));
      _this.client = new rpc_grpc_pb_2(_this.config.url, grpc_1.credentials.createInsecure());
      return _this;
    }

    _createClass$1(GrpcProvider, [{
      key: "defaultConfig",
      get: function get() {
        return {
          url: 'localhost:7845'
        };
      }
    }]);

    return GrpcProvider;
  }(Provider);

  AergoClient.prototype.target = 'node';

  AergoClient.prototype.defaultProvider = function () {
    return new GrpcProvider();
  };

  chai.use(chaiAsPromised);
  var assert$3 = chai.assert;
  describe('Aergo.Accounts', function () {
    var aergo = new AergoClient(); //default connect to 127.0.0.1:7845

    var transactionHashLength = 44;
    var testAddress = 'INVALIDADDRESS';
    beforeEach(
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee() {
      var created, unlocked;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return aergo.accounts.create('testpass');

            case 2:
              created = _context.sent;
              _context.next = 5;
              return aergo.accounts.unlock(created, 'testpass');

            case 5:
              unlocked = _context.sent;
              assert$3.equal(created, unlocked);
              testAddress = unlocked;

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
    describe('create()', function () {
      it('should return created base58 encoded address', function (done) {
        aergo.accounts.create('testpass').then(function (address) {
          assert$3.isString(address);
          testAddress = address;
          done();
        });
      });
    });
    describe('get()', function () {
      it('should return address list in the aerge node', function (done) {
        aergo.accounts.get().then(function (accounts) {
          assert$3.isArray(accounts);
          done();
        });
      });
    });
    describe('unlock()', function () {
      it('should return unlocked address', function (done) {
        aergo.accounts.unlock(testAddress, 'testpass').then(function (address) {
          assert$3.isString(address);
          done();
        });
      });
    });
    describe('lock()', function () {
      it('should return locked address', function (done) {
        aergo.accounts.lock(testAddress, 'testpass').then(function (address) {
          assert$3.isString(address);
          done();
        });
      });
    });
    describe('sendTransaction()', function () {
      it('should return hash for signed and comitted tx',
      /*#__PURE__*/
      _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var testtx;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return aergo.accounts.unlock(testAddress, 'testpass');

              case 2:
                testtx = {
                  from: testAddress,
                  to: testAddress,
                  amount: 123,
                  payload: null
                };
                return _context2.abrupt("return", aergo.accounts.sendTransaction(testtx).then(function (txhash) {
                  assert$3.typeOf(txhash, 'string');
                  assert$3.equal(txhash.length, transactionHashLength);
                }));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      })));
    });
    describe('signTX()', function () {
      it('should return tx which has a unlocked account sign', function (done) {
        var testtx = {
          nonce: 1,
          from: testAddress,
          to: testAddress,
          amount: 123,
          payload: null
        };
        aergo.accounts.signTransaction(testtx).then(function (result) {
          assert$3.equal(testtx.nonce, result.nonce);
          assert$3.equal(testtx.from, result.from);
          assert$3.typeOf(result.sign, 'string');
          assert$3.equal(result.sign.length, 96);
          done();
        });
      });
    });
    describe('sendSignedTransaction()', function () {
      it('should sign, commit, and retrieve transaction',
      /*#__PURE__*/
      _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        var createdAddress, address, testtx, tx, txhash, tx2;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return aergo.accounts.create('testpass');

              case 2:
                createdAddress = _context3.sent;
                _context3.next = 5;
                return aergo.accounts.unlock(createdAddress, 'testpass');

              case 5:
                address = _context3.sent;
                assert$3.equal(address, createdAddress);
                testtx = {
                  nonce: 1,
                  from: address,
                  to: address,
                  amount: 123,
                  payload: null
                }; // Tx is signed and submitted correctly

                _context3.next = 10;
                return aergo.accounts.signTransaction(testtx);

              case 10:
                tx = _context3.sent;
                _context3.next = 13;
                return aergo.sendSignedTransaction(tx);

              case 13:
                txhash = _context3.sent;
                assert$3.typeOf(txhash, 'string');
                assert$3.equal(txhash.length, transactionHashLength); // Tx can be retrieved again from mempool

                _context3.next = 18;
                return aergo.getTransaction(tx.hash);

              case 18:
                tx2 = _context3.sent;
                assert$3.equal(tx2.tx.hash, tx.hash);
                assert$3.equal(tx2.tx.amount, tx.amount); // Submitting same tx again should error

                return _context3.abrupt("return", assert$3.isRejected(aergo.sendSignedTransaction(tx)));

              case 22:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      })));
    });
    describe('signTX(),sendSignedTransaction()Multiple', function () {
      it('should not timeout',
      /*#__PURE__*/
      _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4() {
        var createdAddress, address, promises, _loop, i;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return aergo.accounts.create('testpass');

              case 2:
                createdAddress = _context4.sent;
                _context4.next = 5;
                return aergo.accounts.unlock(createdAddress, 'testpass');

              case 5:
                address = _context4.sent;
                promises = [];

                _loop = function _loop(i) {
                  var testtx = {
                    nonce: i,
                    from: address,
                    to: address,
                    amount: i,
                    payload: null
                  };
                  promises.push(new Promise(function (resolve, reject) {
                    aergo.accounts.signTransaction(testtx).then(function (signedtx) {
                      aergo.sendSignedTransaction(signedtx).then(function (txhash) {
                        assert$3.equal(txhash.length, transactionHashLength);
                        resolve();
                      }).catch(reject);
                    }).catch(reject);
                  }));
                };

                for (i = 1; i <= 20; i++) {
                  _loop(i);
                }

                _context4.next = 11;
                return Promise.all(promises);

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }))).timeout(10000);
    });
  });

  //import '../aergo_test';
  mocha.checkLeaks();
  mocha.run();

})));
