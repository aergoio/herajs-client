/*!
 * herajs v0.0.1
 * (c) 2018 AERGO
 * Released under the MIT License.
 */
import jspb from 'google-protobuf';
import 'google-protobuf/google/protobuf/timestamp_pb.js';
import grpcWebClient from 'grpc-web-client';
import Base58 from 'base-58';

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var blockchain_pb = createCommonjsModule(function (module, exports) {
  /**
   * @fileoverview
   * @enhanceable
   * @suppress {messageConventions} JS Compiler reports an error if a variable or
   *     field starts with 'MSG_' and isn't a translatable message.
   * @public
   */
  // GENERATED CODE -- DO NOT EDIT!


  var goog = jspb;
  var global = Function('return this')();

  goog.exportSymbol('proto.types.Block', null, global);
  goog.exportSymbol('proto.types.BlockBody', null, global);
  goog.exportSymbol('proto.types.BlockHeader', null, global);
  goog.exportSymbol('proto.types.State', null, global);
  goog.exportSymbol('proto.types.Tx', null, global);
  goog.exportSymbol('proto.types.TxBody', null, global);
  goog.exportSymbol('proto.types.TxIdx', null, global);
  goog.exportSymbol('proto.types.TxInBlock', null, global);
  goog.exportSymbol('proto.types.TxList', null, global);

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.Block = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.Block, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.Block.displayName = 'proto.types.Block';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.Block.prototype.toObject = function (opt_includeInstance) {
      return proto.types.Block.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.Block} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.Block.toObject = function (includeInstance, msg) {
      var f,
          obj = {
        hash: msg.getHash_asB64(),
        header: (f = msg.getHeader()) && proto.types.BlockHeader.toObject(includeInstance, f),
        body: (f = msg.getBody()) && proto.types.BlockBody.toObject(includeInstance, f)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.Block}
   */
  proto.types.Block.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.Block();
    return proto.types.Block.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.Block} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.Block}
   */
  proto.types.Block.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setHash(value);
          break;
        case 2:
          var value = new proto.types.BlockHeader();
          reader.readMessage(value, proto.types.BlockHeader.deserializeBinaryFromReader);
          msg.setHeader(value);
          break;
        case 3:
          var value = new proto.types.BlockBody();
          reader.readMessage(value, proto.types.BlockBody.deserializeBinaryFromReader);
          msg.setBody(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.Block.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.Block.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.Block} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.Block.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getHash_asU8();
    if (f.length > 0) {
      writer.writeBytes(1, f);
    }
    f = message.getHeader();
    if (f != null) {
      writer.writeMessage(2, f, proto.types.BlockHeader.serializeBinaryToWriter);
    }
    f = message.getBody();
    if (f != null) {
      writer.writeMessage(3, f, proto.types.BlockBody.serializeBinaryToWriter);
    }
  };

  /**
   * optional bytes hash = 1;
   * @return {!(string|Uint8Array)}
   */
  proto.types.Block.prototype.getHash = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /**
   * optional bytes hash = 1;
   * This is a type-conversion wrapper around `getHash()`
   * @return {string}
   */
  proto.types.Block.prototype.getHash_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getHash())
    );
  };

  /**
   * optional bytes hash = 1;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getHash()`
   * @return {!Uint8Array}
   */
  proto.types.Block.prototype.getHash_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getHash())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.Block.prototype.setHash = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
  };

  /**
   * optional BlockHeader header = 2;
   * @return {?proto.types.BlockHeader}
   */
  proto.types.Block.prototype.getHeader = function () {
    return (/** @type{?proto.types.BlockHeader} */jspb.Message.getWrapperField(this, proto.types.BlockHeader, 2)
    );
  };

  /** @param {?proto.types.BlockHeader|undefined} value */
  proto.types.Block.prototype.setHeader = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
  };

  proto.types.Block.prototype.clearHeader = function () {
    this.setHeader(undefined);
  };

  /**
   * Returns whether this field is set.
   * @return {!boolean}
   */
  proto.types.Block.prototype.hasHeader = function () {
    return jspb.Message.getField(this, 2) != null;
  };

  /**
   * optional BlockBody body = 3;
   * @return {?proto.types.BlockBody}
   */
  proto.types.Block.prototype.getBody = function () {
    return (/** @type{?proto.types.BlockBody} */jspb.Message.getWrapperField(this, proto.types.BlockBody, 3)
    );
  };

  /** @param {?proto.types.BlockBody|undefined} value */
  proto.types.Block.prototype.setBody = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
  };

  proto.types.Block.prototype.clearBody = function () {
    this.setBody(undefined);
  };

  /**
   * Returns whether this field is set.
   * @return {!boolean}
   */
  proto.types.Block.prototype.hasBody = function () {
    return jspb.Message.getField(this, 3) != null;
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.BlockHeader = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.BlockHeader, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.BlockHeader.displayName = 'proto.types.BlockHeader';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.BlockHeader.prototype.toObject = function (opt_includeInstance) {
      return proto.types.BlockHeader.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.BlockHeader} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.BlockHeader.toObject = function (includeInstance, msg) {
      var obj = {
        prevblockhash: msg.getPrevblockhash_asB64(),
        blockno: jspb.Message.getFieldWithDefault(msg, 2, 0),
        timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
        blocksroothash: msg.getBlocksroothash_asB64(),
        txsroothash: msg.getTxsroothash_asB64(),
        pubkey: msg.getPubkey_asB64(),
        sign: msg.getSign_asB64()
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.BlockHeader}
   */
  proto.types.BlockHeader.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.BlockHeader();
    return proto.types.BlockHeader.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.BlockHeader} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.BlockHeader}
   */
  proto.types.BlockHeader.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setPrevblockhash(value);
          break;
        case 2:
          var value = /** @type {number} */reader.readUint64();
          msg.setBlockno(value);
          break;
        case 3:
          var value = /** @type {number} */reader.readInt64();
          msg.setTimestamp(value);
          break;
        case 4:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setBlocksroothash(value);
          break;
        case 5:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setTxsroothash(value);
          break;
        case 6:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setPubkey(value);
          break;
        case 7:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setSign(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.BlockHeader.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.BlockHeader.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.BlockHeader} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.BlockHeader.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPrevblockhash_asU8();
    if (f.length > 0) {
      writer.writeBytes(1, f);
    }
    f = message.getBlockno();
    if (f !== 0) {
      writer.writeUint64(2, f);
    }
    f = message.getTimestamp();
    if (f !== 0) {
      writer.writeInt64(3, f);
    }
    f = message.getBlocksroothash_asU8();
    if (f.length > 0) {
      writer.writeBytes(4, f);
    }
    f = message.getTxsroothash_asU8();
    if (f.length > 0) {
      writer.writeBytes(5, f);
    }
    f = message.getPubkey_asU8();
    if (f.length > 0) {
      writer.writeBytes(6, f);
    }
    f = message.getSign_asU8();
    if (f.length > 0) {
      writer.writeBytes(7, f);
    }
  };

  /**
   * optional bytes prevBlockHash = 1;
   * @return {!(string|Uint8Array)}
   */
  proto.types.BlockHeader.prototype.getPrevblockhash = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /**
   * optional bytes prevBlockHash = 1;
   * This is a type-conversion wrapper around `getPrevblockhash()`
   * @return {string}
   */
  proto.types.BlockHeader.prototype.getPrevblockhash_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getPrevblockhash())
    );
  };

  /**
   * optional bytes prevBlockHash = 1;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getPrevblockhash()`
   * @return {!Uint8Array}
   */
  proto.types.BlockHeader.prototype.getPrevblockhash_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getPrevblockhash())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.BlockHeader.prototype.setPrevblockhash = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
  };

  /**
   * optional uint64 blockNo = 2;
   * @return {number}
   */
  proto.types.BlockHeader.prototype.getBlockno = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0)
    );
  };

  /** @param {number} value */
  proto.types.BlockHeader.prototype.setBlockno = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
  };

  /**
   * optional int64 timestamp = 3;
   * @return {number}
   */
  proto.types.BlockHeader.prototype.getTimestamp = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0)
    );
  };

  /** @param {number} value */
  proto.types.BlockHeader.prototype.setTimestamp = function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
  };

  /**
   * optional bytes blocksRootHash = 4;
   * @return {!(string|Uint8Array)}
   */
  proto.types.BlockHeader.prototype.getBlocksroothash = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 4, "")
    );
  };

  /**
   * optional bytes blocksRootHash = 4;
   * This is a type-conversion wrapper around `getBlocksroothash()`
   * @return {string}
   */
  proto.types.BlockHeader.prototype.getBlocksroothash_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getBlocksroothash())
    );
  };

  /**
   * optional bytes blocksRootHash = 4;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getBlocksroothash()`
   * @return {!Uint8Array}
   */
  proto.types.BlockHeader.prototype.getBlocksroothash_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getBlocksroothash())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.BlockHeader.prototype.setBlocksroothash = function (value) {
    jspb.Message.setProto3BytesField(this, 4, value);
  };

  /**
   * optional bytes txsRootHash = 5;
   * @return {!(string|Uint8Array)}
   */
  proto.types.BlockHeader.prototype.getTxsroothash = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 5, "")
    );
  };

  /**
   * optional bytes txsRootHash = 5;
   * This is a type-conversion wrapper around `getTxsroothash()`
   * @return {string}
   */
  proto.types.BlockHeader.prototype.getTxsroothash_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getTxsroothash())
    );
  };

  /**
   * optional bytes txsRootHash = 5;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getTxsroothash()`
   * @return {!Uint8Array}
   */
  proto.types.BlockHeader.prototype.getTxsroothash_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getTxsroothash())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.BlockHeader.prototype.setTxsroothash = function (value) {
    jspb.Message.setProto3BytesField(this, 5, value);
  };

  /**
   * optional bytes pubKey = 6;
   * @return {!(string|Uint8Array)}
   */
  proto.types.BlockHeader.prototype.getPubkey = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 6, "")
    );
  };

  /**
   * optional bytes pubKey = 6;
   * This is a type-conversion wrapper around `getPubkey()`
   * @return {string}
   */
  proto.types.BlockHeader.prototype.getPubkey_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getPubkey())
    );
  };

  /**
   * optional bytes pubKey = 6;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getPubkey()`
   * @return {!Uint8Array}
   */
  proto.types.BlockHeader.prototype.getPubkey_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getPubkey())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.BlockHeader.prototype.setPubkey = function (value) {
    jspb.Message.setProto3BytesField(this, 6, value);
  };

  /**
   * optional bytes sign = 7;
   * @return {!(string|Uint8Array)}
   */
  proto.types.BlockHeader.prototype.getSign = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 7, "")
    );
  };

  /**
   * optional bytes sign = 7;
   * This is a type-conversion wrapper around `getSign()`
   * @return {string}
   */
  proto.types.BlockHeader.prototype.getSign_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getSign())
    );
  };

  /**
   * optional bytes sign = 7;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getSign()`
   * @return {!Uint8Array}
   */
  proto.types.BlockHeader.prototype.getSign_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getSign())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.BlockHeader.prototype.setSign = function (value) {
    jspb.Message.setProto3BytesField(this, 7, value);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.BlockBody = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.types.BlockBody.repeatedFields_, null);
  };
  goog.inherits(proto.types.BlockBody, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.BlockBody.displayName = 'proto.types.BlockBody';
  }
  /**
   * List of repeated fields within this message type.
   * @private {!Array<number>}
   * @const
   */
  proto.types.BlockBody.repeatedFields_ = [1];

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.BlockBody.prototype.toObject = function (opt_includeInstance) {
      return proto.types.BlockBody.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.BlockBody} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.BlockBody.toObject = function (includeInstance, msg) {
      var obj = {
        txsList: jspb.Message.toObjectList(msg.getTxsList(), proto.types.Tx.toObject, includeInstance)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.BlockBody}
   */
  proto.types.BlockBody.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.BlockBody();
    return proto.types.BlockBody.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.BlockBody} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.BlockBody}
   */
  proto.types.BlockBody.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.types.Tx();
          reader.readMessage(value, proto.types.Tx.deserializeBinaryFromReader);
          msg.addTxs(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.BlockBody.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.BlockBody.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.BlockBody} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.BlockBody.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTxsList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(1, f, proto.types.Tx.serializeBinaryToWriter);
    }
  };

  /**
   * repeated Tx txs = 1;
   * @return {!Array<!proto.types.Tx>}
   */
  proto.types.BlockBody.prototype.getTxsList = function () {
    return (/** @type{!Array<!proto.types.Tx>} */jspb.Message.getRepeatedWrapperField(this, proto.types.Tx, 1)
    );
  };

  /** @param {!Array<!proto.types.Tx>} value */
  proto.types.BlockBody.prototype.setTxsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

  /**
   * @param {!proto.types.Tx=} opt_value
   * @param {number=} opt_index
   * @return {!proto.types.Tx}
   */
  proto.types.BlockBody.prototype.addTxs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Tx, opt_index);
  };

  proto.types.BlockBody.prototype.clearTxsList = function () {
    this.setTxsList([]);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.TxList = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.types.TxList.repeatedFields_, null);
  };
  goog.inherits(proto.types.TxList, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.TxList.displayName = 'proto.types.TxList';
  }
  /**
   * List of repeated fields within this message type.
   * @private {!Array<number>}
   * @const
   */
  proto.types.TxList.repeatedFields_ = [1];

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.TxList.prototype.toObject = function (opt_includeInstance) {
      return proto.types.TxList.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.TxList} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.TxList.toObject = function (includeInstance, msg) {
      var obj = {
        txsList: jspb.Message.toObjectList(msg.getTxsList(), proto.types.Tx.toObject, includeInstance)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.TxList}
   */
  proto.types.TxList.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.TxList();
    return proto.types.TxList.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.TxList} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.TxList}
   */
  proto.types.TxList.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.types.Tx();
          reader.readMessage(value, proto.types.Tx.deserializeBinaryFromReader);
          msg.addTxs(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.TxList.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.TxList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.TxList} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.TxList.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTxsList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(1, f, proto.types.Tx.serializeBinaryToWriter);
    }
  };

  /**
   * repeated Tx txs = 1;
   * @return {!Array<!proto.types.Tx>}
   */
  proto.types.TxList.prototype.getTxsList = function () {
    return (/** @type{!Array<!proto.types.Tx>} */jspb.Message.getRepeatedWrapperField(this, proto.types.Tx, 1)
    );
  };

  /** @param {!Array<!proto.types.Tx>} value */
  proto.types.TxList.prototype.setTxsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

  /**
   * @param {!proto.types.Tx=} opt_value
   * @param {number=} opt_index
   * @return {!proto.types.Tx}
   */
  proto.types.TxList.prototype.addTxs = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Tx, opt_index);
  };

  proto.types.TxList.prototype.clearTxsList = function () {
    this.setTxsList([]);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.Tx = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.Tx, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.Tx.displayName = 'proto.types.Tx';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.Tx.prototype.toObject = function (opt_includeInstance) {
      return proto.types.Tx.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.Tx} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.Tx.toObject = function (includeInstance, msg) {
      var f,
          obj = {
        hash: msg.getHash_asB64(),
        body: (f = msg.getBody()) && proto.types.TxBody.toObject(includeInstance, f),
        size: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.Tx}
   */
  proto.types.Tx.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.Tx();
    return proto.types.Tx.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.Tx} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.Tx}
   */
  proto.types.Tx.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setHash(value);
          break;
        case 2:
          var value = new proto.types.TxBody();
          reader.readMessage(value, proto.types.TxBody.deserializeBinaryFromReader);
          msg.setBody(value);
          break;
        case 3:
          var value = /** @type {number} */reader.readUint64();
          msg.setSize(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.Tx.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.Tx.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.Tx} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.Tx.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getHash_asU8();
    if (f.length > 0) {
      writer.writeBytes(1, f);
    }
    f = message.getBody();
    if (f != null) {
      writer.writeMessage(2, f, proto.types.TxBody.serializeBinaryToWriter);
    }
    f = message.getSize();
    if (f !== 0) {
      writer.writeUint64(3, f);
    }
  };

  /**
   * optional bytes hash = 1;
   * @return {!(string|Uint8Array)}
   */
  proto.types.Tx.prototype.getHash = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /**
   * optional bytes hash = 1;
   * This is a type-conversion wrapper around `getHash()`
   * @return {string}
   */
  proto.types.Tx.prototype.getHash_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getHash())
    );
  };

  /**
   * optional bytes hash = 1;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getHash()`
   * @return {!Uint8Array}
   */
  proto.types.Tx.prototype.getHash_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getHash())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.Tx.prototype.setHash = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
  };

  /**
   * optional TxBody body = 2;
   * @return {?proto.types.TxBody}
   */
  proto.types.Tx.prototype.getBody = function () {
    return (/** @type{?proto.types.TxBody} */jspb.Message.getWrapperField(this, proto.types.TxBody, 2)
    );
  };

  /** @param {?proto.types.TxBody|undefined} value */
  proto.types.Tx.prototype.setBody = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
  };

  proto.types.Tx.prototype.clearBody = function () {
    this.setBody(undefined);
  };

  /**
   * Returns whether this field is set.
   * @return {!boolean}
   */
  proto.types.Tx.prototype.hasBody = function () {
    return jspb.Message.getField(this, 2) != null;
  };

  /**
   * optional uint64 size = 3;
   * @return {number}
   */
  proto.types.Tx.prototype.getSize = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0)
    );
  };

  /** @param {number} value */
  proto.types.Tx.prototype.setSize = function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.TxBody = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.TxBody, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.TxBody.displayName = 'proto.types.TxBody';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.TxBody.prototype.toObject = function (opt_includeInstance) {
      return proto.types.TxBody.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.TxBody} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.TxBody.toObject = function (includeInstance, msg) {
      var obj = {
        nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
        account: msg.getAccount_asB64(),
        recipient: msg.getRecipient_asB64(),
        amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
        payload: msg.getPayload_asB64(),
        limit: jspb.Message.getFieldWithDefault(msg, 6, 0),
        price: jspb.Message.getFieldWithDefault(msg, 7, 0),
        sign: msg.getSign_asB64()
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.TxBody}
   */
  proto.types.TxBody.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.TxBody();
    return proto.types.TxBody.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.TxBody} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.TxBody}
   */
  proto.types.TxBody.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {number} */reader.readUint64();
          msg.setNonce(value);
          break;
        case 2:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setAccount(value);
          break;
        case 3:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setRecipient(value);
          break;
        case 4:
          var value = /** @type {number} */reader.readUint64();
          msg.setAmount(value);
          break;
        case 5:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setPayload(value);
          break;
        case 6:
          var value = /** @type {number} */reader.readUint64();
          msg.setLimit(value);
          break;
        case 7:
          var value = /** @type {number} */reader.readUint64();
          msg.setPrice(value);
          break;
        case 8:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setSign(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.TxBody.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.TxBody.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.TxBody} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.TxBody.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getNonce();
    if (f !== 0) {
      writer.writeUint64(1, f);
    }
    f = message.getAccount_asU8();
    if (f.length > 0) {
      writer.writeBytes(2, f);
    }
    f = message.getRecipient_asU8();
    if (f.length > 0) {
      writer.writeBytes(3, f);
    }
    f = message.getAmount();
    if (f !== 0) {
      writer.writeUint64(4, f);
    }
    f = message.getPayload_asU8();
    if (f.length > 0) {
      writer.writeBytes(5, f);
    }
    f = message.getLimit();
    if (f !== 0) {
      writer.writeUint64(6, f);
    }
    f = message.getPrice();
    if (f !== 0) {
      writer.writeUint64(7, f);
    }
    f = message.getSign_asU8();
    if (f.length > 0) {
      writer.writeBytes(8, f);
    }
  };

  /**
   * optional uint64 nonce = 1;
   * @return {number}
   */
  proto.types.TxBody.prototype.getNonce = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0)
    );
  };

  /** @param {number} value */
  proto.types.TxBody.prototype.setNonce = function (value) {
    jspb.Message.setProto3IntField(this, 1, value);
  };

  /**
   * optional bytes account = 2;
   * @return {!(string|Uint8Array)}
   */
  proto.types.TxBody.prototype.getAccount = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "")
    );
  };

  /**
   * optional bytes account = 2;
   * This is a type-conversion wrapper around `getAccount()`
   * @return {string}
   */
  proto.types.TxBody.prototype.getAccount_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getAccount())
    );
  };

  /**
   * optional bytes account = 2;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getAccount()`
   * @return {!Uint8Array}
   */
  proto.types.TxBody.prototype.getAccount_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAccount())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.TxBody.prototype.setAccount = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
  };

  /**
   * optional bytes recipient = 3;
   * @return {!(string|Uint8Array)}
   */
  proto.types.TxBody.prototype.getRecipient = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 3, "")
    );
  };

  /**
   * optional bytes recipient = 3;
   * This is a type-conversion wrapper around `getRecipient()`
   * @return {string}
   */
  proto.types.TxBody.prototype.getRecipient_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getRecipient())
    );
  };

  /**
   * optional bytes recipient = 3;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getRecipient()`
   * @return {!Uint8Array}
   */
  proto.types.TxBody.prototype.getRecipient_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getRecipient())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.TxBody.prototype.setRecipient = function (value) {
    jspb.Message.setProto3BytesField(this, 3, value);
  };

  /**
   * optional uint64 amount = 4;
   * @return {number}
   */
  proto.types.TxBody.prototype.getAmount = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0)
    );
  };

  /** @param {number} value */
  proto.types.TxBody.prototype.setAmount = function (value) {
    jspb.Message.setProto3IntField(this, 4, value);
  };

  /**
   * optional bytes payload = 5;
   * @return {!(string|Uint8Array)}
   */
  proto.types.TxBody.prototype.getPayload = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 5, "")
    );
  };

  /**
   * optional bytes payload = 5;
   * This is a type-conversion wrapper around `getPayload()`
   * @return {string}
   */
  proto.types.TxBody.prototype.getPayload_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getPayload())
    );
  };

  /**
   * optional bytes payload = 5;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getPayload()`
   * @return {!Uint8Array}
   */
  proto.types.TxBody.prototype.getPayload_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getPayload())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.TxBody.prototype.setPayload = function (value) {
    jspb.Message.setProto3BytesField(this, 5, value);
  };

  /**
   * optional uint64 limit = 6;
   * @return {number}
   */
  proto.types.TxBody.prototype.getLimit = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 6, 0)
    );
  };

  /** @param {number} value */
  proto.types.TxBody.prototype.setLimit = function (value) {
    jspb.Message.setProto3IntField(this, 6, value);
  };

  /**
   * optional uint64 price = 7;
   * @return {number}
   */
  proto.types.TxBody.prototype.getPrice = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 7, 0)
    );
  };

  /** @param {number} value */
  proto.types.TxBody.prototype.setPrice = function (value) {
    jspb.Message.setProto3IntField(this, 7, value);
  };

  /**
   * optional bytes sign = 8;
   * @return {!(string|Uint8Array)}
   */
  proto.types.TxBody.prototype.getSign = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 8, "")
    );
  };

  /**
   * optional bytes sign = 8;
   * This is a type-conversion wrapper around `getSign()`
   * @return {string}
   */
  proto.types.TxBody.prototype.getSign_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getSign())
    );
  };

  /**
   * optional bytes sign = 8;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getSign()`
   * @return {!Uint8Array}
   */
  proto.types.TxBody.prototype.getSign_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getSign())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.TxBody.prototype.setSign = function (value) {
    jspb.Message.setProto3BytesField(this, 8, value);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.TxIdx = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.TxIdx, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.TxIdx.displayName = 'proto.types.TxIdx';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.TxIdx.prototype.toObject = function (opt_includeInstance) {
      return proto.types.TxIdx.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.TxIdx} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.TxIdx.toObject = function (includeInstance, msg) {
      var obj = {
        blockhash: msg.getBlockhash_asB64(),
        idx: jspb.Message.getFieldWithDefault(msg, 2, 0)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.TxIdx}
   */
  proto.types.TxIdx.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.TxIdx();
    return proto.types.TxIdx.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.TxIdx} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.TxIdx}
   */
  proto.types.TxIdx.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setBlockhash(value);
          break;
        case 2:
          var value = /** @type {number} */reader.readInt32();
          msg.setIdx(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.TxIdx.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.TxIdx.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.TxIdx} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.TxIdx.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlockhash_asU8();
    if (f.length > 0) {
      writer.writeBytes(1, f);
    }
    f = message.getIdx();
    if (f !== 0) {
      writer.writeInt32(2, f);
    }
  };

  /**
   * optional bytes blockHash = 1;
   * @return {!(string|Uint8Array)}
   */
  proto.types.TxIdx.prototype.getBlockhash = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /**
   * optional bytes blockHash = 1;
   * This is a type-conversion wrapper around `getBlockhash()`
   * @return {string}
   */
  proto.types.TxIdx.prototype.getBlockhash_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getBlockhash())
    );
  };

  /**
   * optional bytes blockHash = 1;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getBlockhash()`
   * @return {!Uint8Array}
   */
  proto.types.TxIdx.prototype.getBlockhash_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getBlockhash())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.TxIdx.prototype.setBlockhash = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
  };

  /**
   * optional int32 idx = 2;
   * @return {number}
   */
  proto.types.TxIdx.prototype.getIdx = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0)
    );
  };

  /** @param {number} value */
  proto.types.TxIdx.prototype.setIdx = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.TxInBlock = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.TxInBlock, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.TxInBlock.displayName = 'proto.types.TxInBlock';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.TxInBlock.prototype.toObject = function (opt_includeInstance) {
      return proto.types.TxInBlock.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.TxInBlock} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.TxInBlock.toObject = function (includeInstance, msg) {
      var f,
          obj = {
        txidx: (f = msg.getTxidx()) && proto.types.TxIdx.toObject(includeInstance, f),
        tx: (f = msg.getTx()) && proto.types.Tx.toObject(includeInstance, f)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.TxInBlock}
   */
  proto.types.TxInBlock.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.TxInBlock();
    return proto.types.TxInBlock.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.TxInBlock} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.TxInBlock}
   */
  proto.types.TxInBlock.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.types.TxIdx();
          reader.readMessage(value, proto.types.TxIdx.deserializeBinaryFromReader);
          msg.setTxidx(value);
          break;
        case 2:
          var value = new proto.types.Tx();
          reader.readMessage(value, proto.types.Tx.deserializeBinaryFromReader);
          msg.setTx(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.TxInBlock.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.TxInBlock.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.TxInBlock} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.TxInBlock.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTxidx();
    if (f != null) {
      writer.writeMessage(1, f, proto.types.TxIdx.serializeBinaryToWriter);
    }
    f = message.getTx();
    if (f != null) {
      writer.writeMessage(2, f, proto.types.Tx.serializeBinaryToWriter);
    }
  };

  /**
   * optional TxIdx txIdx = 1;
   * @return {?proto.types.TxIdx}
   */
  proto.types.TxInBlock.prototype.getTxidx = function () {
    return (/** @type{?proto.types.TxIdx} */jspb.Message.getWrapperField(this, proto.types.TxIdx, 1)
    );
  };

  /** @param {?proto.types.TxIdx|undefined} value */
  proto.types.TxInBlock.prototype.setTxidx = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
  };

  proto.types.TxInBlock.prototype.clearTxidx = function () {
    this.setTxidx(undefined);
  };

  /**
   * Returns whether this field is set.
   * @return {!boolean}
   */
  proto.types.TxInBlock.prototype.hasTxidx = function () {
    return jspb.Message.getField(this, 1) != null;
  };

  /**
   * optional Tx tx = 2;
   * @return {?proto.types.Tx}
   */
  proto.types.TxInBlock.prototype.getTx = function () {
    return (/** @type{?proto.types.Tx} */jspb.Message.getWrapperField(this, proto.types.Tx, 2)
    );
  };

  /** @param {?proto.types.Tx|undefined} value */
  proto.types.TxInBlock.prototype.setTx = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
  };

  proto.types.TxInBlock.prototype.clearTx = function () {
    this.setTx(undefined);
  };

  /**
   * Returns whether this field is set.
   * @return {!boolean}
   */
  proto.types.TxInBlock.prototype.hasTx = function () {
    return jspb.Message.getField(this, 2) != null;
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.State = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.State, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.State.displayName = 'proto.types.State';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.State.prototype.toObject = function (opt_includeInstance) {
      return proto.types.State.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.State} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.State.toObject = function (includeInstance, msg) {
      var obj = {
        account: msg.getAccount_asB64(),
        nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
        balance: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.State}
   */
  proto.types.State.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.State();
    return proto.types.State.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.State} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.State}
   */
  proto.types.State.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setAccount(value);
          break;
        case 2:
          var value = /** @type {number} */reader.readUint64();
          msg.setNonce(value);
          break;
        case 3:
          var value = /** @type {number} */reader.readUint64();
          msg.setBalance(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.State.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.State.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.State} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.State.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAccount_asU8();
    if (f.length > 0) {
      writer.writeBytes(1, f);
    }
    f = message.getNonce();
    if (f !== 0) {
      writer.writeUint64(2, f);
    }
    f = message.getBalance();
    if (f !== 0) {
      writer.writeUint64(3, f);
    }
  };

  /**
   * optional bytes account = 1;
   * @return {!(string|Uint8Array)}
   */
  proto.types.State.prototype.getAccount = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /**
   * optional bytes account = 1;
   * This is a type-conversion wrapper around `getAccount()`
   * @return {string}
   */
  proto.types.State.prototype.getAccount_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getAccount())
    );
  };

  /**
   * optional bytes account = 1;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getAccount()`
   * @return {!Uint8Array}
   */
  proto.types.State.prototype.getAccount_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAccount())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.State.prototype.setAccount = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
  };

  /**
   * optional uint64 nonce = 2;
   * @return {number}
   */
  proto.types.State.prototype.getNonce = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0)
    );
  };

  /** @param {number} value */
  proto.types.State.prototype.setNonce = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
  };

  /**
   * optional uint64 balance = 3;
   * @return {number}
   */
  proto.types.State.prototype.getBalance = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0)
    );
  };

  /** @param {number} value */
  proto.types.State.prototype.setBalance = function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
  };

  goog.object.extend(exports, proto.types);
});

var account_pb = createCommonjsModule(function (module, exports) {
  /**
   * @fileoverview
   * @enhanceable
   * @suppress {messageConventions} JS Compiler reports an error if a variable or
   *     field starts with 'MSG_' and isn't a translatable message.
   * @public
   */
  // GENERATED CODE -- DO NOT EDIT!


  var goog = jspb;
  var global = Function('return this')();

  goog.exportSymbol('proto.types.Account', null, global);
  goog.exportSymbol('proto.types.AccountList', null, global);

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.Account = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.Account, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.Account.displayName = 'proto.types.Account';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.Account.prototype.toObject = function (opt_includeInstance) {
      return proto.types.Account.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.Account} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.Account.toObject = function (includeInstance, msg) {
      var obj = {
        address: msg.getAddress_asB64()
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.Account}
   */
  proto.types.Account.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.Account();
    return proto.types.Account.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.Account} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.Account}
   */
  proto.types.Account.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setAddress(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.Account.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.Account.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.Account} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.Account.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAddress_asU8();
    if (f.length > 0) {
      writer.writeBytes(1, f);
    }
  };

  /**
   * optional bytes address = 1;
   * @return {!(string|Uint8Array)}
   */
  proto.types.Account.prototype.getAddress = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /**
   * optional bytes address = 1;
   * This is a type-conversion wrapper around `getAddress()`
   * @return {string}
   */
  proto.types.Account.prototype.getAddress_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getAddress())
    );
  };

  /**
   * optional bytes address = 1;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getAddress()`
   * @return {!Uint8Array}
   */
  proto.types.Account.prototype.getAddress_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAddress())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.Account.prototype.setAddress = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.AccountList = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.types.AccountList.repeatedFields_, null);
  };
  goog.inherits(proto.types.AccountList, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.AccountList.displayName = 'proto.types.AccountList';
  }
  /**
   * List of repeated fields within this message type.
   * @private {!Array<number>}
   * @const
   */
  proto.types.AccountList.repeatedFields_ = [1];

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.AccountList.prototype.toObject = function (opt_includeInstance) {
      return proto.types.AccountList.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.AccountList} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.AccountList.toObject = function (includeInstance, msg) {
      var obj = {
        accountsList: jspb.Message.toObjectList(msg.getAccountsList(), proto.types.Account.toObject, includeInstance)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.AccountList}
   */
  proto.types.AccountList.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.AccountList();
    return proto.types.AccountList.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.AccountList} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.AccountList}
   */
  proto.types.AccountList.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.types.Account();
          reader.readMessage(value, proto.types.Account.deserializeBinaryFromReader);
          msg.addAccounts(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.AccountList.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.AccountList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.AccountList} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.AccountList.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAccountsList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(1, f, proto.types.Account.serializeBinaryToWriter);
    }
  };

  /**
   * repeated Account accounts = 1;
   * @return {!Array<!proto.types.Account>}
   */
  proto.types.AccountList.prototype.getAccountsList = function () {
    return (/** @type{!Array<!proto.types.Account>} */jspb.Message.getRepeatedWrapperField(this, proto.types.Account, 1)
    );
  };

  /** @param {!Array<!proto.types.Account>} value */
  proto.types.AccountList.prototype.setAccountsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

  /**
   * @param {!proto.types.Account=} opt_value
   * @param {number=} opt_index
   * @return {!proto.types.Account}
   */
  proto.types.AccountList.prototype.addAccounts = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Account, opt_index);
  };

  proto.types.AccountList.prototype.clearAccountsList = function () {
    this.setAccountsList([]);
  };

  goog.object.extend(exports, proto.types);
});

var node_pb = createCommonjsModule(function (module, exports) {
  /**
   * @fileoverview
   * @enhanceable
   * @suppress {messageConventions} JS Compiler reports an error if a variable or
   *     field starts with 'MSG_' and isn't a translatable message.
   * @public
   */
  // GENERATED CODE -- DO NOT EDIT!


  var goog = jspb;
  var global = Function('return this')();

  goog.exportSymbol('proto.types.PeerAddress', null, global);

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.PeerAddress = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.PeerAddress, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.PeerAddress.displayName = 'proto.types.PeerAddress';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.PeerAddress.prototype.toObject = function (opt_includeInstance) {
      return proto.types.PeerAddress.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.PeerAddress} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.PeerAddress.toObject = function (includeInstance, msg) {
      var obj = {
        address: msg.getAddress_asB64(),
        port: jspb.Message.getFieldWithDefault(msg, 2, 0),
        peerid: msg.getPeerid_asB64()
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.PeerAddress}
   */
  proto.types.PeerAddress.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.PeerAddress();
    return proto.types.PeerAddress.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.PeerAddress} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.PeerAddress}
   */
  proto.types.PeerAddress.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setAddress(value);
          break;
        case 2:
          var value = /** @type {number} */reader.readUint32();
          msg.setPort(value);
          break;
        case 3:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setPeerid(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.PeerAddress.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.PeerAddress.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.PeerAddress} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.PeerAddress.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAddress_asU8();
    if (f.length > 0) {
      writer.writeBytes(1, f);
    }
    f = message.getPort();
    if (f !== 0) {
      writer.writeUint32(2, f);
    }
    f = message.getPeerid_asU8();
    if (f.length > 0) {
      writer.writeBytes(3, f);
    }
  };

  /**
   * optional bytes address = 1;
   * @return {!(string|Uint8Array)}
   */
  proto.types.PeerAddress.prototype.getAddress = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /**
   * optional bytes address = 1;
   * This is a type-conversion wrapper around `getAddress()`
   * @return {string}
   */
  proto.types.PeerAddress.prototype.getAddress_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getAddress())
    );
  };

  /**
   * optional bytes address = 1;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getAddress()`
   * @return {!Uint8Array}
   */
  proto.types.PeerAddress.prototype.getAddress_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAddress())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.PeerAddress.prototype.setAddress = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
  };

  /**
   * optional uint32 port = 2;
   * @return {number}
   */
  proto.types.PeerAddress.prototype.getPort = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0)
    );
  };

  /** @param {number} value */
  proto.types.PeerAddress.prototype.setPort = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
  };

  /**
   * optional bytes peerID = 3;
   * @return {!(string|Uint8Array)}
   */
  proto.types.PeerAddress.prototype.getPeerid = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 3, "")
    );
  };

  /**
   * optional bytes peerID = 3;
   * This is a type-conversion wrapper around `getPeerid()`
   * @return {string}
   */
  proto.types.PeerAddress.prototype.getPeerid_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getPeerid())
    );
  };

  /**
   * optional bytes peerID = 3;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getPeerid()`
   * @return {!Uint8Array}
   */
  proto.types.PeerAddress.prototype.getPeerid_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getPeerid())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.PeerAddress.prototype.setPeerid = function (value) {
    jspb.Message.setProto3BytesField(this, 3, value);
  };

  goog.object.extend(exports, proto.types);
});

var rpc_pb = createCommonjsModule(function (module, exports) {
  /**
   * @fileoverview
   * @enhanceable
   * @suppress {messageConventions} JS Compiler reports an error if a variable or
   *     field starts with 'MSG_' and isn't a translatable message.
   * @public
   */
  // GENERATED CODE -- DO NOT EDIT!


  var goog = jspb;
  var global = Function('return this')();

  goog.exportSymbol('proto.types.BlockHeaderList', null, global);
  goog.exportSymbol('proto.types.BlockchainStatus', null, global);
  goog.exportSymbol('proto.types.CommitResult', null, global);
  goog.exportSymbol('proto.types.CommitResultList', null, global);
  goog.exportSymbol('proto.types.CommitStatus', null, global);
  goog.exportSymbol('proto.types.Empty', null, global);
  goog.exportSymbol('proto.types.Input', null, global);
  goog.exportSymbol('proto.types.InternalStat', null, global);
  goog.exportSymbol('proto.types.ListParams', null, global);
  goog.exportSymbol('proto.types.ModuleStatus', null, global);
  goog.exportSymbol('proto.types.NodeStatus', null, global);
  goog.exportSymbol('proto.types.Output', null, global);
  goog.exportSymbol('proto.types.PeerList', null, global);
  goog.exportSymbol('proto.types.Personal', null, global);
  goog.exportSymbol('proto.types.SingleBytes', null, global);
  goog.exportSymbol('proto.types.VerifyResult', null, global);
  goog.exportSymbol('proto.types.VerifyStatus', null, global);

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.InternalStat = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.InternalStat, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.InternalStat.displayName = 'proto.types.InternalStat';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.InternalStat.prototype.toObject = function (opt_includeInstance) {
      return proto.types.InternalStat.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.InternalStat} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.InternalStat.toObject = function (includeInstance, msg) {
      var obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        stat: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.InternalStat}
   */
  proto.types.InternalStat.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.InternalStat();
    return proto.types.InternalStat.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.InternalStat} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.InternalStat}
   */
  proto.types.InternalStat.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */reader.readString();
          msg.setName(value);
          break;
        case 2:
          var value = /** @type {number} */reader.readDouble();
          msg.setStat(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.InternalStat.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.InternalStat.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.InternalStat} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.InternalStat.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getStat();
    if (f !== 0.0) {
      writer.writeDouble(2, f);
    }
  };

  /**
   * optional string Name = 1;
   * @return {string}
   */
  proto.types.InternalStat.prototype.getName = function () {
    return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /** @param {string} value */
  proto.types.InternalStat.prototype.setName = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
  };

  /**
   * optional double Stat = 2;
   * @return {number}
   */
  proto.types.InternalStat.prototype.getStat = function () {
    return (/** @type {number} */+jspb.Message.getFieldWithDefault(this, 2, 0.0)
    );
  };

  /** @param {number} value */
  proto.types.InternalStat.prototype.setStat = function (value) {
    jspb.Message.setProto3FloatField(this, 2, value);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.ModuleStatus = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.types.ModuleStatus.repeatedFields_, null);
  };
  goog.inherits(proto.types.ModuleStatus, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.ModuleStatus.displayName = 'proto.types.ModuleStatus';
  }
  /**
   * List of repeated fields within this message type.
   * @private {!Array<number>}
   * @const
   */
  proto.types.ModuleStatus.repeatedFields_ = [4];

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.ModuleStatus.prototype.toObject = function (opt_includeInstance) {
      return proto.types.ModuleStatus.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.ModuleStatus} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.ModuleStatus.toObject = function (includeInstance, msg) {
      var obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        statList: jspb.Message.toObjectList(msg.getStatList(), proto.types.InternalStat.toObject, includeInstance)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.ModuleStatus}
   */
  proto.types.ModuleStatus.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.ModuleStatus();
    return proto.types.ModuleStatus.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.ModuleStatus} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.ModuleStatus}
   */
  proto.types.ModuleStatus.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */reader.readString();
          msg.setName(value);
          break;
        case 4:
          var value = new proto.types.InternalStat();
          reader.readMessage(value, proto.types.InternalStat.deserializeBinaryFromReader);
          msg.addStat(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.ModuleStatus.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.ModuleStatus.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.ModuleStatus} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.ModuleStatus.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getStatList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(4, f, proto.types.InternalStat.serializeBinaryToWriter);
    }
  };

  /**
   * optional string Name = 1;
   * @return {string}
   */
  proto.types.ModuleStatus.prototype.getName = function () {
    return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /** @param {string} value */
  proto.types.ModuleStatus.prototype.setName = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
  };

  /**
   * repeated InternalStat Stat = 4;
   * @return {!Array<!proto.types.InternalStat>}
   */
  proto.types.ModuleStatus.prototype.getStatList = function () {
    return (/** @type{!Array<!proto.types.InternalStat>} */jspb.Message.getRepeatedWrapperField(this, proto.types.InternalStat, 4)
    );
  };

  /** @param {!Array<!proto.types.InternalStat>} value */
  proto.types.ModuleStatus.prototype.setStatList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 4, value);
  };

  /**
   * @param {!proto.types.InternalStat=} opt_value
   * @param {number=} opt_index
   * @return {!proto.types.InternalStat}
   */
  proto.types.ModuleStatus.prototype.addStat = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.types.InternalStat, opt_index);
  };

  proto.types.ModuleStatus.prototype.clearStatList = function () {
    this.setStatList([]);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.NodeStatus = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.types.NodeStatus.repeatedFields_, null);
  };
  goog.inherits(proto.types.NodeStatus, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.NodeStatus.displayName = 'proto.types.NodeStatus';
  }
  /**
   * List of repeated fields within this message type.
   * @private {!Array<number>}
   * @const
   */
  proto.types.NodeStatus.repeatedFields_ = [1];

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.NodeStatus.prototype.toObject = function (opt_includeInstance) {
      return proto.types.NodeStatus.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.NodeStatus} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.NodeStatus.toObject = function (includeInstance, msg) {
      var obj = {
        statusList: jspb.Message.toObjectList(msg.getStatusList(), proto.types.ModuleStatus.toObject, includeInstance)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.NodeStatus}
   */
  proto.types.NodeStatus.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.NodeStatus();
    return proto.types.NodeStatus.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.NodeStatus} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.NodeStatus}
   */
  proto.types.NodeStatus.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.types.ModuleStatus();
          reader.readMessage(value, proto.types.ModuleStatus.deserializeBinaryFromReader);
          msg.addStatus(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.NodeStatus.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.NodeStatus.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.NodeStatus} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.NodeStatus.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getStatusList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(1, f, proto.types.ModuleStatus.serializeBinaryToWriter);
    }
  };

  /**
   * repeated ModuleStatus Status = 1;
   * @return {!Array<!proto.types.ModuleStatus>}
   */
  proto.types.NodeStatus.prototype.getStatusList = function () {
    return (/** @type{!Array<!proto.types.ModuleStatus>} */jspb.Message.getRepeatedWrapperField(this, proto.types.ModuleStatus, 1)
    );
  };

  /** @param {!Array<!proto.types.ModuleStatus>} value */
  proto.types.NodeStatus.prototype.setStatusList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

  /**
   * @param {!proto.types.ModuleStatus=} opt_value
   * @param {number=} opt_index
   * @return {!proto.types.ModuleStatus}
   */
  proto.types.NodeStatus.prototype.addStatus = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.ModuleStatus, opt_index);
  };

  proto.types.NodeStatus.prototype.clearStatusList = function () {
    this.setStatusList([]);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.BlockchainStatus = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.BlockchainStatus, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.BlockchainStatus.displayName = 'proto.types.BlockchainStatus';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.BlockchainStatus.prototype.toObject = function (opt_includeInstance) {
      return proto.types.BlockchainStatus.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.BlockchainStatus} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.BlockchainStatus.toObject = function (includeInstance, msg) {
      var obj = {
        bestBlockHash: msg.getBestBlockHash_asB64(),
        bestHeight: jspb.Message.getFieldWithDefault(msg, 2, 0)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.BlockchainStatus}
   */
  proto.types.BlockchainStatus.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.BlockchainStatus();
    return proto.types.BlockchainStatus.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.BlockchainStatus} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.BlockchainStatus}
   */
  proto.types.BlockchainStatus.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setBestBlockHash(value);
          break;
        case 2:
          var value = /** @type {number} */reader.readUint64();
          msg.setBestHeight(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.BlockchainStatus.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.BlockchainStatus.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.BlockchainStatus} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.BlockchainStatus.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBestBlockHash_asU8();
    if (f.length > 0) {
      writer.writeBytes(1, f);
    }
    f = message.getBestHeight();
    if (f !== 0) {
      writer.writeUint64(2, f);
    }
  };

  /**
   * optional bytes best_block_hash = 1;
   * @return {!(string|Uint8Array)}
   */
  proto.types.BlockchainStatus.prototype.getBestBlockHash = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /**
   * optional bytes best_block_hash = 1;
   * This is a type-conversion wrapper around `getBestBlockHash()`
   * @return {string}
   */
  proto.types.BlockchainStatus.prototype.getBestBlockHash_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getBestBlockHash())
    );
  };

  /**
   * optional bytes best_block_hash = 1;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getBestBlockHash()`
   * @return {!Uint8Array}
   */
  proto.types.BlockchainStatus.prototype.getBestBlockHash_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getBestBlockHash())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.BlockchainStatus.prototype.setBestBlockHash = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
  };

  /**
   * optional uint64 best_height = 2;
   * @return {number}
   */
  proto.types.BlockchainStatus.prototype.getBestHeight = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0)
    );
  };

  /** @param {number} value */
  proto.types.BlockchainStatus.prototype.setBestHeight = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.Input = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Input.repeatedFields_, null);
  };
  goog.inherits(proto.types.Input, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.Input.displayName = 'proto.types.Input';
  }
  /**
   * List of repeated fields within this message type.
   * @private {!Array<number>}
   * @const
   */
  proto.types.Input.repeatedFields_ = [2];

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.Input.prototype.toObject = function (opt_includeInstance) {
      return proto.types.Input.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.Input} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.Input.toObject = function (includeInstance, msg) {
      var obj = {
        hash: msg.getHash_asB64(),
        addressList: msg.getAddressList_asB64(),
        value: msg.getValue_asB64(),
        script: msg.getScript_asB64()
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.Input}
   */
  proto.types.Input.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.Input();
    return proto.types.Input.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.Input} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.Input}
   */
  proto.types.Input.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setHash(value);
          break;
        case 2:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.addAddress(value);
          break;
        case 3:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setValue(value);
          break;
        case 4:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setScript(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.Input.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.Input.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.Input} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.Input.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getHash_asU8();
    if (f.length > 0) {
      writer.writeBytes(1, f);
    }
    f = message.getAddressList_asU8();
    if (f.length > 0) {
      writer.writeRepeatedBytes(2, f);
    }
    f = message.getValue_asU8();
    if (f.length > 0) {
      writer.writeBytes(3, f);
    }
    f = message.getScript_asU8();
    if (f.length > 0) {
      writer.writeBytes(4, f);
    }
  };

  /**
   * optional bytes hash = 1;
   * @return {!(string|Uint8Array)}
   */
  proto.types.Input.prototype.getHash = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /**
   * optional bytes hash = 1;
   * This is a type-conversion wrapper around `getHash()`
   * @return {string}
   */
  proto.types.Input.prototype.getHash_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getHash())
    );
  };

  /**
   * optional bytes hash = 1;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getHash()`
   * @return {!Uint8Array}
   */
  proto.types.Input.prototype.getHash_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getHash())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.Input.prototype.setHash = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
  };

  /**
   * repeated bytes address = 2;
   * @return {!(Array<!Uint8Array>|Array<string>)}
   */
  proto.types.Input.prototype.getAddressList = function () {
    return (/** @type {!(Array<!Uint8Array>|Array<string>)} */jspb.Message.getRepeatedField(this, 2)
    );
  };

  /**
   * repeated bytes address = 2;
   * This is a type-conversion wrapper around `getAddressList()`
   * @return {!Array<string>}
   */
  proto.types.Input.prototype.getAddressList_asB64 = function () {
    return (/** @type {!Array<string>} */jspb.Message.bytesListAsB64(this.getAddressList())
    );
  };

  /**
   * repeated bytes address = 2;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getAddressList()`
   * @return {!Array<!Uint8Array>}
   */
  proto.types.Input.prototype.getAddressList_asU8 = function () {
    return (/** @type {!Array<!Uint8Array>} */jspb.Message.bytesListAsU8(this.getAddressList())
    );
  };

  /** @param {!(Array<!Uint8Array>|Array<string>)} value */
  proto.types.Input.prototype.setAddressList = function (value) {
    jspb.Message.setField(this, 2, value || []);
  };

  /**
   * @param {!(string|Uint8Array)} value
   * @param {number=} opt_index
   */
  proto.types.Input.prototype.addAddress = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 2, value, opt_index);
  };

  proto.types.Input.prototype.clearAddressList = function () {
    this.setAddressList([]);
  };

  /**
   * optional bytes value = 3;
   * @return {!(string|Uint8Array)}
   */
  proto.types.Input.prototype.getValue = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 3, "")
    );
  };

  /**
   * optional bytes value = 3;
   * This is a type-conversion wrapper around `getValue()`
   * @return {string}
   */
  proto.types.Input.prototype.getValue_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getValue())
    );
  };

  /**
   * optional bytes value = 3;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getValue()`
   * @return {!Uint8Array}
   */
  proto.types.Input.prototype.getValue_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getValue())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.Input.prototype.setValue = function (value) {
    jspb.Message.setProto3BytesField(this, 3, value);
  };

  /**
   * optional bytes script = 4;
   * @return {!(string|Uint8Array)}
   */
  proto.types.Input.prototype.getScript = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 4, "")
    );
  };

  /**
   * optional bytes script = 4;
   * This is a type-conversion wrapper around `getScript()`
   * @return {string}
   */
  proto.types.Input.prototype.getScript_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getScript())
    );
  };

  /**
   * optional bytes script = 4;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getScript()`
   * @return {!Uint8Array}
   */
  proto.types.Input.prototype.getScript_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getScript())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.Input.prototype.setScript = function (value) {
    jspb.Message.setProto3BytesField(this, 4, value);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.Output = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.Output, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.Output.displayName = 'proto.types.Output';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.Output.prototype.toObject = function (opt_includeInstance) {
      return proto.types.Output.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.Output} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.Output.toObject = function (includeInstance, msg) {
      var obj = {
        index: jspb.Message.getFieldWithDefault(msg, 1, 0),
        address: msg.getAddress_asB64(),
        value: msg.getValue_asB64(),
        script: msg.getScript_asB64()
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.Output}
   */
  proto.types.Output.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.Output();
    return proto.types.Output.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.Output} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.Output}
   */
  proto.types.Output.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {number} */reader.readUint32();
          msg.setIndex(value);
          break;
        case 2:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setAddress(value);
          break;
        case 3:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setValue(value);
          break;
        case 4:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setScript(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.Output.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.Output.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.Output} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.Output.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getIndex();
    if (f !== 0) {
      writer.writeUint32(1, f);
    }
    f = message.getAddress_asU8();
    if (f.length > 0) {
      writer.writeBytes(2, f);
    }
    f = message.getValue_asU8();
    if (f.length > 0) {
      writer.writeBytes(3, f);
    }
    f = message.getScript_asU8();
    if (f.length > 0) {
      writer.writeBytes(4, f);
    }
  };

  /**
   * optional uint32 index = 1;
   * @return {number}
   */
  proto.types.Output.prototype.getIndex = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0)
    );
  };

  /** @param {number} value */
  proto.types.Output.prototype.setIndex = function (value) {
    jspb.Message.setProto3IntField(this, 1, value);
  };

  /**
   * optional bytes address = 2;
   * @return {!(string|Uint8Array)}
   */
  proto.types.Output.prototype.getAddress = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "")
    );
  };

  /**
   * optional bytes address = 2;
   * This is a type-conversion wrapper around `getAddress()`
   * @return {string}
   */
  proto.types.Output.prototype.getAddress_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getAddress())
    );
  };

  /**
   * optional bytes address = 2;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getAddress()`
   * @return {!Uint8Array}
   */
  proto.types.Output.prototype.getAddress_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAddress())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.Output.prototype.setAddress = function (value) {
    jspb.Message.setProto3BytesField(this, 2, value);
  };

  /**
   * optional bytes value = 3;
   * @return {!(string|Uint8Array)}
   */
  proto.types.Output.prototype.getValue = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 3, "")
    );
  };

  /**
   * optional bytes value = 3;
   * This is a type-conversion wrapper around `getValue()`
   * @return {string}
   */
  proto.types.Output.prototype.getValue_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getValue())
    );
  };

  /**
   * optional bytes value = 3;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getValue()`
   * @return {!Uint8Array}
   */
  proto.types.Output.prototype.getValue_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getValue())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.Output.prototype.setValue = function (value) {
    jspb.Message.setProto3BytesField(this, 3, value);
  };

  /**
   * optional bytes script = 4;
   * @return {!(string|Uint8Array)}
   */
  proto.types.Output.prototype.getScript = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 4, "")
    );
  };

  /**
   * optional bytes script = 4;
   * This is a type-conversion wrapper around `getScript()`
   * @return {string}
   */
  proto.types.Output.prototype.getScript_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getScript())
    );
  };

  /**
   * optional bytes script = 4;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getScript()`
   * @return {!Uint8Array}
   */
  proto.types.Output.prototype.getScript_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getScript())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.Output.prototype.setScript = function (value) {
    jspb.Message.setProto3BytesField(this, 4, value);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.Empty = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.Empty, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.Empty.displayName = 'proto.types.Empty';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.Empty.prototype.toObject = function (opt_includeInstance) {
      return proto.types.Empty.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.Empty} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.Empty.toObject = function (includeInstance, msg) {
      var obj = {};

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.Empty}
   */
  proto.types.Empty.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.Empty();
    return proto.types.Empty.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.Empty} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.Empty}
   */
  proto.types.Empty.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.Empty.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.Empty.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.Empty} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.Empty.serializeBinaryToWriter = function (message, writer) {
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.SingleBytes = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.SingleBytes, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.SingleBytes.displayName = 'proto.types.SingleBytes';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.SingleBytes.prototype.toObject = function (opt_includeInstance) {
      return proto.types.SingleBytes.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.SingleBytes} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.SingleBytes.toObject = function (includeInstance, msg) {
      var obj = {
        value: msg.getValue_asB64()
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.SingleBytes}
   */
  proto.types.SingleBytes.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.SingleBytes();
    return proto.types.SingleBytes.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.SingleBytes} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.SingleBytes}
   */
  proto.types.SingleBytes.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setValue(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.SingleBytes.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.SingleBytes.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.SingleBytes} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.SingleBytes.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValue_asU8();
    if (f.length > 0) {
      writer.writeBytes(1, f);
    }
  };

  /**
   * optional bytes value = 1;
   * @return {!(string|Uint8Array)}
   */
  proto.types.SingleBytes.prototype.getValue = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /**
   * optional bytes value = 1;
   * This is a type-conversion wrapper around `getValue()`
   * @return {string}
   */
  proto.types.SingleBytes.prototype.getValue_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getValue())
    );
  };

  /**
   * optional bytes value = 1;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getValue()`
   * @return {!Uint8Array}
   */
  proto.types.SingleBytes.prototype.getValue_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getValue())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.SingleBytes.prototype.setValue = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.Personal = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.Personal, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.Personal.displayName = 'proto.types.Personal';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.Personal.prototype.toObject = function (opt_includeInstance) {
      return proto.types.Personal.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.Personal} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.Personal.toObject = function (includeInstance, msg) {
      var f,
          obj = {
        passphrase: jspb.Message.getFieldWithDefault(msg, 1, ""),
        account: (f = msg.getAccount()) && account_pb.Account.toObject(includeInstance, f)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.Personal}
   */
  proto.types.Personal.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.Personal();
    return proto.types.Personal.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.Personal} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.Personal}
   */
  proto.types.Personal.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */reader.readString();
          msg.setPassphrase(value);
          break;
        case 2:
          var value = new account_pb.Account();
          reader.readMessage(value, account_pb.Account.deserializeBinaryFromReader);
          msg.setAccount(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.Personal.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.Personal.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.Personal} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.Personal.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPassphrase();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getAccount();
    if (f != null) {
      writer.writeMessage(2, f, account_pb.Account.serializeBinaryToWriter);
    }
  };

  /**
   * optional string passphrase = 1;
   * @return {string}
   */
  proto.types.Personal.prototype.getPassphrase = function () {
    return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /** @param {string} value */
  proto.types.Personal.prototype.setPassphrase = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
  };

  /**
   * optional Account account = 2;
   * @return {?proto.types.Account}
   */
  proto.types.Personal.prototype.getAccount = function () {
    return (/** @type{?proto.types.Account} */jspb.Message.getWrapperField(this, account_pb.Account, 2)
    );
  };

  /** @param {?proto.types.Account|undefined} value */
  proto.types.Personal.prototype.setAccount = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
  };

  proto.types.Personal.prototype.clearAccount = function () {
    this.setAccount(undefined);
  };

  /**
   * Returns whether this field is set.
   * @return {!boolean}
   */
  proto.types.Personal.prototype.hasAccount = function () {
    return jspb.Message.getField(this, 2) != null;
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.PeerList = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.types.PeerList.repeatedFields_, null);
  };
  goog.inherits(proto.types.PeerList, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.PeerList.displayName = 'proto.types.PeerList';
  }
  /**
   * List of repeated fields within this message type.
   * @private {!Array<number>}
   * @const
   */
  proto.types.PeerList.repeatedFields_ = [1, 2];

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.PeerList.prototype.toObject = function (opt_includeInstance) {
      return proto.types.PeerList.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.PeerList} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.PeerList.toObject = function (includeInstance, msg) {
      var obj = {
        peersList: jspb.Message.toObjectList(msg.getPeersList(), node_pb.PeerAddress.toObject, includeInstance),
        statesList: jspb.Message.getRepeatedField(msg, 2)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.PeerList}
   */
  proto.types.PeerList.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.PeerList();
    return proto.types.PeerList.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.PeerList} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.PeerList}
   */
  proto.types.PeerList.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new node_pb.PeerAddress();
          reader.readMessage(value, node_pb.PeerAddress.deserializeBinaryFromReader);
          msg.addPeers(value);
          break;
        case 2:
          var value = /** @type {!Array<number>} */reader.readPackedInt32();
          msg.setStatesList(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.PeerList.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.PeerList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.PeerList} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.PeerList.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPeersList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(1, f, node_pb.PeerAddress.serializeBinaryToWriter);
    }
    f = message.getStatesList();
    if (f.length > 0) {
      writer.writePackedInt32(2, f);
    }
  };

  /**
   * repeated PeerAddress peers = 1;
   * @return {!Array<!proto.types.PeerAddress>}
   */
  proto.types.PeerList.prototype.getPeersList = function () {
    return (/** @type{!Array<!proto.types.PeerAddress>} */jspb.Message.getRepeatedWrapperField(this, node_pb.PeerAddress, 1)
    );
  };

  /** @param {!Array<!proto.types.PeerAddress>} value */
  proto.types.PeerList.prototype.setPeersList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

  /**
   * @param {!proto.types.PeerAddress=} opt_value
   * @param {number=} opt_index
   * @return {!proto.types.PeerAddress}
   */
  proto.types.PeerList.prototype.addPeers = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.PeerAddress, opt_index);
  };

  proto.types.PeerList.prototype.clearPeersList = function () {
    this.setPeersList([]);
  };

  /**
   * repeated int32 states = 2;
   * @return {!Array<number>}
   */
  proto.types.PeerList.prototype.getStatesList = function () {
    return (/** @type {!Array<number>} */jspb.Message.getRepeatedField(this, 2)
    );
  };

  /** @param {!Array<number>} value */
  proto.types.PeerList.prototype.setStatesList = function (value) {
    jspb.Message.setField(this, 2, value || []);
  };

  /**
   * @param {!number} value
   * @param {number=} opt_index
   */
  proto.types.PeerList.prototype.addStates = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 2, value, opt_index);
  };

  proto.types.PeerList.prototype.clearStatesList = function () {
    this.setStatesList([]);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.ListParams = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.ListParams, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.ListParams.displayName = 'proto.types.ListParams';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.ListParams.prototype.toObject = function (opt_includeInstance) {
      return proto.types.ListParams.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.ListParams} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.ListParams.toObject = function (includeInstance, msg) {
      var obj = {
        hash: msg.getHash_asB64(),
        height: jspb.Message.getFieldWithDefault(msg, 2, 0),
        size: jspb.Message.getFieldWithDefault(msg, 3, 0),
        offset: jspb.Message.getFieldWithDefault(msg, 4, 0),
        asc: jspb.Message.getFieldWithDefault(msg, 5, false)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.ListParams}
   */
  proto.types.ListParams.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.ListParams();
    return proto.types.ListParams.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.ListParams} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.ListParams}
   */
  proto.types.ListParams.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setHash(value);
          break;
        case 2:
          var value = /** @type {number} */reader.readUint64();
          msg.setHeight(value);
          break;
        case 3:
          var value = /** @type {number} */reader.readUint32();
          msg.setSize(value);
          break;
        case 4:
          var value = /** @type {number} */reader.readUint32();
          msg.setOffset(value);
          break;
        case 5:
          var value = /** @type {boolean} */reader.readBool();
          msg.setAsc(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.ListParams.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.ListParams.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.ListParams} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.ListParams.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getHash_asU8();
    if (f.length > 0) {
      writer.writeBytes(1, f);
    }
    f = message.getHeight();
    if (f !== 0) {
      writer.writeUint64(2, f);
    }
    f = message.getSize();
    if (f !== 0) {
      writer.writeUint32(3, f);
    }
    f = message.getOffset();
    if (f !== 0) {
      writer.writeUint32(4, f);
    }
    f = message.getAsc();
    if (f) {
      writer.writeBool(5, f);
    }
  };

  /**
   * optional bytes hash = 1;
   * @return {!(string|Uint8Array)}
   */
  proto.types.ListParams.prototype.getHash = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /**
   * optional bytes hash = 1;
   * This is a type-conversion wrapper around `getHash()`
   * @return {string}
   */
  proto.types.ListParams.prototype.getHash_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getHash())
    );
  };

  /**
   * optional bytes hash = 1;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getHash()`
   * @return {!Uint8Array}
   */
  proto.types.ListParams.prototype.getHash_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getHash())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.ListParams.prototype.setHash = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
  };

  /**
   * optional uint64 height = 2;
   * @return {number}
   */
  proto.types.ListParams.prototype.getHeight = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0)
    );
  };

  /** @param {number} value */
  proto.types.ListParams.prototype.setHeight = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
  };

  /**
   * optional uint32 size = 3;
   * @return {number}
   */
  proto.types.ListParams.prototype.getSize = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0)
    );
  };

  /** @param {number} value */
  proto.types.ListParams.prototype.setSize = function (value) {
    jspb.Message.setProto3IntField(this, 3, value);
  };

  /**
   * optional uint32 offset = 4;
   * @return {number}
   */
  proto.types.ListParams.prototype.getOffset = function () {
    return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0)
    );
  };

  /** @param {number} value */
  proto.types.ListParams.prototype.setOffset = function (value) {
    jspb.Message.setProto3IntField(this, 4, value);
  };

  /**
   * optional bool asc = 5;
   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
   * You should avoid comparisons like {@code val === true/false} in those cases.
   * @return {boolean}
   */
  proto.types.ListParams.prototype.getAsc = function () {
    return (/** @type {boolean} */jspb.Message.getFieldWithDefault(this, 5, false)
    );
  };

  /** @param {boolean} value */
  proto.types.ListParams.prototype.setAsc = function (value) {
    jspb.Message.setProto3BooleanField(this, 5, value);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.BlockHeaderList = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.types.BlockHeaderList.repeatedFields_, null);
  };
  goog.inherits(proto.types.BlockHeaderList, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.BlockHeaderList.displayName = 'proto.types.BlockHeaderList';
  }
  /**
   * List of repeated fields within this message type.
   * @private {!Array<number>}
   * @const
   */
  proto.types.BlockHeaderList.repeatedFields_ = [1];

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.BlockHeaderList.prototype.toObject = function (opt_includeInstance) {
      return proto.types.BlockHeaderList.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.BlockHeaderList} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.BlockHeaderList.toObject = function (includeInstance, msg) {
      var obj = {
        blocksList: jspb.Message.toObjectList(msg.getBlocksList(), blockchain_pb.Block.toObject, includeInstance)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.BlockHeaderList}
   */
  proto.types.BlockHeaderList.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.BlockHeaderList();
    return proto.types.BlockHeaderList.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.BlockHeaderList} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.BlockHeaderList}
   */
  proto.types.BlockHeaderList.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new blockchain_pb.Block();
          reader.readMessage(value, blockchain_pb.Block.deserializeBinaryFromReader);
          msg.addBlocks(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.BlockHeaderList.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.BlockHeaderList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.BlockHeaderList} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.BlockHeaderList.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBlocksList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(1, f, blockchain_pb.Block.serializeBinaryToWriter);
    }
  };

  /**
   * repeated Block blocks = 1;
   * @return {!Array<!proto.types.Block>}
   */
  proto.types.BlockHeaderList.prototype.getBlocksList = function () {
    return (/** @type{!Array<!proto.types.Block>} */jspb.Message.getRepeatedWrapperField(this, blockchain_pb.Block, 1)
    );
  };

  /** @param {!Array<!proto.types.Block>} value */
  proto.types.BlockHeaderList.prototype.setBlocksList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

  /**
   * @param {!proto.types.Block=} opt_value
   * @param {number=} opt_index
   * @return {!proto.types.Block}
   */
  proto.types.BlockHeaderList.prototype.addBlocks = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Block, opt_index);
  };

  proto.types.BlockHeaderList.prototype.clearBlocksList = function () {
    this.setBlocksList([]);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.CommitResult = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.CommitResult, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.CommitResult.displayName = 'proto.types.CommitResult';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.CommitResult.prototype.toObject = function (opt_includeInstance) {
      return proto.types.CommitResult.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.CommitResult} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.CommitResult.toObject = function (includeInstance, msg) {
      var obj = {
        hash: msg.getHash_asB64(),
        error: jspb.Message.getFieldWithDefault(msg, 2, 0)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.CommitResult}
   */
  proto.types.CommitResult.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.CommitResult();
    return proto.types.CommitResult.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.CommitResult} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.CommitResult}
   */
  proto.types.CommitResult.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setHash(value);
          break;
        case 2:
          var value = /** @type {!proto.types.CommitStatus} */reader.readEnum();
          msg.setError(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.CommitResult.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.CommitResult.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.CommitResult} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.CommitResult.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getHash_asU8();
    if (f.length > 0) {
      writer.writeBytes(1, f);
    }
    f = message.getError();
    if (f !== 0.0) {
      writer.writeEnum(2, f);
    }
  };

  /**
   * optional bytes hash = 1;
   * @return {!(string|Uint8Array)}
   */
  proto.types.CommitResult.prototype.getHash = function () {
    return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "")
    );
  };

  /**
   * optional bytes hash = 1;
   * This is a type-conversion wrapper around `getHash()`
   * @return {string}
   */
  proto.types.CommitResult.prototype.getHash_asB64 = function () {
    return (/** @type {string} */jspb.Message.bytesAsB64(this.getHash())
    );
  };

  /**
   * optional bytes hash = 1;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getHash()`
   * @return {!Uint8Array}
   */
  proto.types.CommitResult.prototype.getHash_asU8 = function () {
    return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getHash())
    );
  };

  /** @param {!(string|Uint8Array)} value */
  proto.types.CommitResult.prototype.setHash = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
  };

  /**
   * optional CommitStatus error = 2;
   * @return {!proto.types.CommitStatus}
   */
  proto.types.CommitResult.prototype.getError = function () {
    return (/** @type {!proto.types.CommitStatus} */jspb.Message.getFieldWithDefault(this, 2, 0)
    );
  };

  /** @param {!proto.types.CommitStatus} value */
  proto.types.CommitResult.prototype.setError = function (value) {
    jspb.Message.setProto3EnumField(this, 2, value);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.CommitResultList = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.types.CommitResultList.repeatedFields_, null);
  };
  goog.inherits(proto.types.CommitResultList, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.CommitResultList.displayName = 'proto.types.CommitResultList';
  }
  /**
   * List of repeated fields within this message type.
   * @private {!Array<number>}
   * @const
   */
  proto.types.CommitResultList.repeatedFields_ = [1];

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.CommitResultList.prototype.toObject = function (opt_includeInstance) {
      return proto.types.CommitResultList.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.CommitResultList} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.CommitResultList.toObject = function (includeInstance, msg) {
      var obj = {
        resultsList: jspb.Message.toObjectList(msg.getResultsList(), proto.types.CommitResult.toObject, includeInstance)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.CommitResultList}
   */
  proto.types.CommitResultList.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.CommitResultList();
    return proto.types.CommitResultList.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.CommitResultList} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.CommitResultList}
   */
  proto.types.CommitResultList.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new proto.types.CommitResult();
          reader.readMessage(value, proto.types.CommitResult.deserializeBinaryFromReader);
          msg.addResults(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.CommitResultList.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.CommitResultList.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.CommitResultList} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.CommitResultList.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getResultsList();
    if (f.length > 0) {
      writer.writeRepeatedMessage(1, f, proto.types.CommitResult.serializeBinaryToWriter);
    }
  };

  /**
   * repeated CommitResult results = 1;
   * @return {!Array<!proto.types.CommitResult>}
   */
  proto.types.CommitResultList.prototype.getResultsList = function () {
    return (/** @type{!Array<!proto.types.CommitResult>} */jspb.Message.getRepeatedWrapperField(this, proto.types.CommitResult, 1)
    );
  };

  /** @param {!Array<!proto.types.CommitResult>} value */
  proto.types.CommitResultList.prototype.setResultsList = function (value) {
    jspb.Message.setRepeatedWrapperField(this, 1, value);
  };

  /**
   * @param {!proto.types.CommitResult=} opt_value
   * @param {number=} opt_index
   * @return {!proto.types.CommitResult}
   */
  proto.types.CommitResultList.prototype.addResults = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.CommitResult, opt_index);
  };

  proto.types.CommitResultList.prototype.clearResultsList = function () {
    this.setResultsList([]);
  };

  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.types.VerifyResult = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.types.VerifyResult, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    proto.types.VerifyResult.displayName = 'proto.types.VerifyResult';
  }

  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.types.VerifyResult.prototype.toObject = function (opt_includeInstance) {
      return proto.types.VerifyResult.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.types.VerifyResult} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.types.VerifyResult.toObject = function (includeInstance, msg) {
      var f,
          obj = {
        tx: (f = msg.getTx()) && blockchain_pb.Tx.toObject(includeInstance, f),
        error: jspb.Message.getFieldWithDefault(msg, 2, 0)
      };

      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.types.VerifyResult}
   */
  proto.types.VerifyResult.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.types.VerifyResult();
    return proto.types.VerifyResult.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.types.VerifyResult} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.types.VerifyResult}
   */
  proto.types.VerifyResult.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = new blockchain_pb.Tx();
          reader.readMessage(value, blockchain_pb.Tx.deserializeBinaryFromReader);
          msg.setTx(value);
          break;
        case 2:
          var value = /** @type {!proto.types.VerifyStatus} */reader.readEnum();
          msg.setError(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.types.VerifyResult.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.types.VerifyResult.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.types.VerifyResult} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.types.VerifyResult.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTx();
    if (f != null) {
      writer.writeMessage(1, f, blockchain_pb.Tx.serializeBinaryToWriter);
    }
    f = message.getError();
    if (f !== 0.0) {
      writer.writeEnum(2, f);
    }
  };

  /**
   * optional Tx tx = 1;
   * @return {?proto.types.Tx}
   */
  proto.types.VerifyResult.prototype.getTx = function () {
    return (/** @type{?proto.types.Tx} */jspb.Message.getWrapperField(this, blockchain_pb.Tx, 1)
    );
  };

  /** @param {?proto.types.Tx|undefined} value */
  proto.types.VerifyResult.prototype.setTx = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
  };

  proto.types.VerifyResult.prototype.clearTx = function () {
    this.setTx(undefined);
  };

  /**
   * Returns whether this field is set.
   * @return {!boolean}
   */
  proto.types.VerifyResult.prototype.hasTx = function () {
    return jspb.Message.getField(this, 1) != null;
  };

  /**
   * optional VerifyStatus error = 2;
   * @return {!proto.types.VerifyStatus}
   */
  proto.types.VerifyResult.prototype.getError = function () {
    return (/** @type {!proto.types.VerifyStatus} */jspb.Message.getFieldWithDefault(this, 2, 0)
    );
  };

  /** @param {!proto.types.VerifyStatus} value */
  proto.types.VerifyResult.prototype.setError = function (value) {
    jspb.Message.setProto3EnumField(this, 2, value);
  };

  /**
   * @enum {number}
   */
  proto.types.CommitStatus = {
    COMMIT_STATUS_OK: 0,
    COMMIT_STATUS_NONCE_TOO_LOW: 1,
    COMMIT_STATUS_INVALID_ARGUMENT: 2,
    COMMIT_STATUS_TX_ALREADY_EXISTS: 3,
    COMMIT_STATUS_TX_INTERNAL_ERROR: 4
  };

  /**
   * @enum {number}
   */
  proto.types.VerifyStatus = {
    VERIFY_STATUS_OK: 0,
    VERIFY_STATUS_SIGN_NOT_MATCH: 1,
    VERIFY_STATUS_INVALID_HASH: 2
  };

  goog.object.extend(exports, proto.types);
});
var rpc_pb_1 = rpc_pb.Empty;
var rpc_pb_2 = rpc_pb.Personal;
var rpc_pb_3 = rpc_pb.Account;
var rpc_pb_4 = rpc_pb.SingleBytes;
var rpc_pb_5 = rpc_pb.TxList;
var rpc_pb_6 = rpc_pb.TxBody;
var rpc_pb_7 = rpc_pb.Tx;
var rpc_pb_8 = rpc_pb.CommitStatus;

// package: types
// file: rpc.proto


var grpc = grpcWebClient.grpc;

var AergoRPCService = function () {
  function AergoRPCService() {}
  AergoRPCService.serviceName = "types.AergoRPCService";
  return AergoRPCService;
}();

AergoRPCService.NodeState = {
  methodName: "NodeState",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: rpc_pb.Empty,
  responseType: rpc_pb.NodeStatus
};

AergoRPCService.Blockchain = {
  methodName: "Blockchain",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: rpc_pb.Empty,
  responseType: rpc_pb.BlockchainStatus
};

AergoRPCService.ListBlockHeaders = {
  methodName: "ListBlockHeaders",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: rpc_pb.ListParams,
  responseType: rpc_pb.BlockHeaderList
};

AergoRPCService.GetBlock = {
  methodName: "GetBlock",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: rpc_pb.SingleBytes,
  responseType: blockchain_pb.Block
};

AergoRPCService.GetTX = {
  methodName: "GetTX",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: rpc_pb.SingleBytes,
  responseType: blockchain_pb.Tx
};

AergoRPCService.GetBlockTX = {
  methodName: "GetBlockTX",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: rpc_pb.SingleBytes,
  responseType: blockchain_pb.TxInBlock
};

AergoRPCService.CommitTX = {
  methodName: "CommitTX",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: blockchain_pb.TxList,
  responseType: rpc_pb.CommitResultList
};

AergoRPCService.GetState = {
  methodName: "GetState",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: rpc_pb.SingleBytes,
  responseType: blockchain_pb.State
};

AergoRPCService.CreateAccount = {
  methodName: "CreateAccount",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: rpc_pb.Personal,
  responseType: account_pb.Account
};

AergoRPCService.GetAccounts = {
  methodName: "GetAccounts",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: rpc_pb.Empty,
  responseType: account_pb.AccountList
};

AergoRPCService.LockAccount = {
  methodName: "LockAccount",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: rpc_pb.Personal,
  responseType: account_pb.Account
};

AergoRPCService.UnlockAccount = {
  methodName: "UnlockAccount",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: rpc_pb.Personal,
  responseType: account_pb.Account
};

AergoRPCService.SignTX = {
  methodName: "SignTX",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: blockchain_pb.Tx,
  responseType: blockchain_pb.Tx
};

AergoRPCService.VerifyTX = {
  methodName: "VerifyTX",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: blockchain_pb.Tx,
  responseType: rpc_pb.VerifyResult
};

AergoRPCService.GetPeers = {
  methodName: "GetPeers",
  service: AergoRPCService,
  requestStream: false,
  responseStream: false,
  requestType: rpc_pb.Empty,
  responseType: rpc_pb.PeerList
};

function AergoRPCServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

AergoRPCServiceClient.prototype.nodeState = function nodeState(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.NodeState, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.blockchain = function blockchain(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.Blockchain, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.listBlockHeaders = function listBlockHeaders(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.ListBlockHeaders, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.getBlock = function getBlock(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.GetBlock, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.getTX = function getTX(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.GetTX, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.getBlockTX = function getBlockTX(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.GetBlockTX, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.commitTX = function commitTX(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.CommitTX, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.getState = function getState(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.GetState, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.createAccount = function createAccount(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.CreateAccount, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.getAccounts = function getAccounts(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.GetAccounts, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.lockAccount = function lockAccount(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.LockAccount, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.unlockAccount = function unlockAccount(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.UnlockAccount, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.signTX = function signTX(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.SignTX, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.verifyTX = function verifyTX(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.VerifyTX, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

AergoRPCServiceClient.prototype.getPeers = function getPeers(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  grpc.unary(AergoRPCService.GetPeers, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function onEnd(response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          callback(Object.assign(new Error(response.statusMessage), { code: response.status, metadata: response.trailers }), null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
};

var AergoRPCServiceClient_1 = AergoRPCServiceClient;

var fromHexString = function fromHexString(hexString) {
    return new Uint8Array(hexString.match(/.{1,2}/g).map(function (byte) {
        return parseInt(byte, 16);
    }));
};

var fromNumber = function fromNumber(d) {
    var arr = new Uint8Array(8);
    for (var i = 0, j = 1; i < 8; i++, j *= 0x100) {
        arr[i] = d / j & 0xff;
    }
    return arr;
};

var kCustomPromisifiedSymbol = Symbol('util.promisify.custom');

function promisify(original, context) {
    if (typeof context === 'undefined') {
        context = this;
    }
    if (typeof original !== 'function') {
        throw new Error('original', 'Function', original);
    }

    function fn() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return new Promise(function (resolve, reject) {
            original.call.apply(original, [context].concat(args, [function (err, value) {
                if (err) {
                    return reject(err);
                }
                resolve(value);
            }]));
        });
    }

    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn, enumerable: false, writable: false, configurable: true
    });
    return Object.defineProperties(fn, Object.getOwnPropertyDescriptors(original));
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var Accounts = function () {
    function Accounts(aergo) {
        classCallCheck(this, Accounts);

        this.client = aergo.client;
    }

    createClass(Accounts, [{
        key: 'create',
        value: function create(passphrase) {
            var _this = this;

            return new Promise(function (resolve, reject) {
                var personal = new rpc_pb_2();
                personal.setPassphrase(passphrase);
                try {
                    _this.client.createAccount(personal, function (err, rsp) {
                        if (err) {
                            reject(err);
                        } else {
                            var createdAddress = rsp.getAddress();
                            resolve(Base58.encode(createdAddress));
                        }
                    });
                } catch (exception) {
                    reject(exception);
                }
            });
        }
    }, {
        key: 'get',
        value: function get$$1() {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                var empty = new rpc_pb_1();
                try {
                    _this2.client.getAccounts(empty, function (err, rsp) {
                        if (err) {
                            reject(err);
                        } else {
                            var accounts = rsp.getAccountsList();
                            var addresses = accounts.map(function (account) {
                                return Base58.encode(account.getAddress());
                            });
                            resolve(addresses);
                        }
                    });
                } catch (exception) {
                    reject(exception);
                }
            });
        }
    }, {
        key: 'unlock',
        value: function unlock(address, passphrase) {
            var _this3 = this;

            return new Promise(function (resolve, reject) {
                var account = new rpc_pb_3();
                account.setAddress(Base58.decode(address));

                var personal = new rpc_pb_2();
                personal.setPassphrase(passphrase);
                personal.setAccount(account);

                try {
                    _this3.client.unlockAccount(personal, function (err, rsp) {
                        if (err) {
                            reject(err);
                        } else {
                            var createdAddress = rsp.getAddress();
                            resolve(Base58.encode(createdAddress));
                        }
                    });
                } catch (exception) {
                    reject(exception);
                }
            });
        }
    }, {
        key: 'lock',
        value: function lock(address, passphrase) {
            var _this4 = this;

            return new Promise(function (resolve, reject) {
                var account = new rpc_pb_3();
                account.setAddress(Base58.decode(address));

                var personal = new rpc_pb_2();
                personal.setPassphrase(passphrase);
                personal.setAccount(account);

                try {
                    _this4.client.lockAccount(personal, function (err, rsp) {
                        if (err) {
                            reject(err);
                        } else {
                            var createdAddress = rsp.getAddress();
                            resolve(Base58.encode(createdAddress));
                        }
                    });
                } catch (exception) {
                    reject(exception);
                }
            });
        }
    }, {
        key: 'signTransaction',
        value: function signTransaction(tx) {
            var _this5 = this;

            return new Promise(function (resolve, reject) {
                var msgtxbody = new rpc_pb_6();
                msgtxbody.setNonce(tx.nonce);
                msgtxbody.setAccount(Base58.decode(tx.from));
                msgtxbody.setRecipient(Base58.decode(tx.to));
                msgtxbody.setAmount(tx.amount);
                msgtxbody.setPayload(tx.payload);

                var msgtx = new rpc_pb_7();
                msgtx.setBody(msgtxbody);

                _this5.client.signTX(msgtx, function (err, signedtx) {
                    if (err == null) {
                        resolve(convertToTransaction(signedtx));
                    } else {
                        reject(err);
                    }
                });
            });
        }
    }]);
    return Accounts;
}();

function convertToTransaction(tx) {
    var transaction = {};
    transaction.hash = tx.getHash();
    transaction.nonce = tx.getBody().getNonce();
    transaction.from = Base58.encode(tx.getBody().getAccount());
    transaction.to = Base58.encode(tx.getBody().getRecipient());
    transaction.amount = tx.getBody().getAmount();
    transaction.payload = tx.getBody().getPayload();
    transaction.sign = tx.getBody().getSign();
    return transaction;
}

var Aergo = function () {
    function Aergo(config) {
        classCallCheck(this, Aergo);

        this.version = 0.1;
        this.config = _extends({
            url: '127.0.0.1:7845'
        }, config);
        this.client = new AergoRPCServiceClient_1(this.config.url);
        this.accounts = new Accounts(this);
    }

    createClass(Aergo, [{
        key: 'getConfig',
        value: function getConfig() {
            return this.config;
        }
    }, {
        key: 'isConnected',
        value: function isConnected() {
            return false;
        }
    }, {
        key: 'blockchain',
        value: function blockchain() {
            var empty = new rpc_pb_1();
            return promisify(this.client.blockchain, this.client)(empty);
        }
    }, {
        key: 'getTransaction',
        value: function getTransaction() {
            var singleBytes = new rpc_pb_4();
            return promisify(this.client.getTX, this.client)(singleBytes);
        }
    }, {
        key: 'getBlock',
        value: function getBlock(hashOrNumber) {
            if (typeof hashOrNumber === 'string') {
                hashOrNumber = fromHexString(hashOrNumber);
            } else if (typeof hashOrNumber === 'number') {
                hashOrNumber = fromNumber(hashOrNumber);
            }
            var singleBytes = new rpc_pb_4();
            singleBytes.setValue(hashOrNumber);
            return promisify(this.client.getBlock, this.client)(singleBytes);
        }
    }, {
        key: 'getBlockTransactionCount',
        value: function getBlockTransactionCount() {
            var singleBytes = new rpc_pb_4();
            return promisify(this.client.getTX, this.client)(singleBytes);
        }
    }, {
        key: 'verifyTransaction',
        value: function verifyTransaction(tx) {
            return promisify(this.client.verifyTX, this.client)(transactionToTx(tx));
        }
    }, {
        key: 'sendTransaction',
        value: function sendTransaction(tx) {
            var _this = this;

            return new Promise(function (resolve, reject) {
                var txs = new rpc_pb_5();
                txs.addTxs(transactionToTx(tx), 0);
                _this.client.commitTX(txs, function (err, result) {
                    if (err == null && result.getResultsList()[0].getError()) {
                        err = new Error();
                        err.code = result.getResultsList()[0].getError();
                    }
                    if (err) {
                        reject(err);
                    } else {
                        resolve(result.getResultsList()[0].getHash());
                    }
                });
            });
        }
    }, {
        key: 'getTransactionReceipt',
        value: function getTransactionReceipt(hash, callback) {
            // eslint-disable-line
            return true;
        }
    }]);
    return Aergo;
}();

function transactionToTx(tx) {
    var msgtxbody = new rpc_pb_6();
    msgtxbody.setNonce(tx.nonce);
    msgtxbody.setAccount(Base58.decode(tx.from));
    msgtxbody.setRecipient(Base58.decode(tx.to));
    msgtxbody.setAmount(tx.amount);
    if (tx.payload != null) {
        msgtxbody.setPayload(tx.payload);
    }
    msgtxbody.setSign(tx.sign);
    var msgtx = new rpc_pb_7();
    msgtx.setHash(tx.hash);
    msgtx.setBody(msgtxbody);

    return msgtx;
}

export default Aergo;
export { rpc_pb_8 as CommitStatus };
