/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.types.ABI', null, global);
goog.exportSymbol('proto.types.AccountProof', null, global);
goog.exportSymbol('proto.types.Block', null, global);
goog.exportSymbol('proto.types.BlockBody', null, global);
goog.exportSymbol('proto.types.BlockHeader', null, global);
goog.exportSymbol('proto.types.ContractVarProof', null, global);
goog.exportSymbol('proto.types.Event', null, global);
goog.exportSymbol('proto.types.FilterInfo', null, global);
goog.exportSymbol('proto.types.FnArgument', null, global);
goog.exportSymbol('proto.types.Function', null, global);
goog.exportSymbol('proto.types.Query', null, global);
goog.exportSymbol('proto.types.Receipt', null, global);
goog.exportSymbol('proto.types.State', null, global);
goog.exportSymbol('proto.types.StateQuery', null, global);
goog.exportSymbol('proto.types.StateQueryProof', null, global);
goog.exportSymbol('proto.types.StateVar', null, global);
goog.exportSymbol('proto.types.Tx', null, global);
goog.exportSymbol('proto.types.TxBody', null, global);
goog.exportSymbol('proto.types.TxIdx', null, global);
goog.exportSymbol('proto.types.TxInBlock', null, global);
goog.exportSymbol('proto.types.TxList', null, global);
goog.exportSymbol('proto.types.TxType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Block.displayName = 'proto.types.Block';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    header: (f = msg.getHeader()) && proto.types.BlockHeader.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.types.BlockBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Block}
 */
proto.types.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Block;
  return proto.types.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Block}
 */
proto.types.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = new proto.types.BlockHeader;
      reader.readMessage(value,proto.types.BlockHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.types.BlockBody;
      reader.readMessage(value,proto.types.BlockBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.BlockHeader.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.types.BlockBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.Block.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.types.Block.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.types.Block.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Block.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional BlockHeader header = 2;
 * @return {?proto.types.BlockHeader}
 */
proto.types.Block.prototype.getHeader = function() {
  return /** @type{?proto.types.BlockHeader} */ (
    jspb.Message.getWrapperField(this, proto.types.BlockHeader, 2));
};


/** @param {?proto.types.BlockHeader|undefined} value */
proto.types.Block.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.types.Block.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.Block.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BlockBody body = 3;
 * @return {?proto.types.BlockBody}
 */
proto.types.Block.prototype.getBody = function() {
  return /** @type{?proto.types.BlockBody} */ (
    jspb.Message.getWrapperField(this, proto.types.BlockBody, 3));
};


/** @param {?proto.types.BlockBody|undefined} value */
proto.types.Block.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.types.Block.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.Block.prototype.hasBody = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.BlockHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.BlockHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.BlockHeader.displayName = 'proto.types.BlockHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.BlockHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.types.BlockHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.BlockHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.BlockHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainid: msg.getChainid_asB64(),
    prevblockhash: msg.getPrevblockhash_asB64(),
    blockno: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blocksroothash: msg.getBlocksroothash_asB64(),
    txsroothash: msg.getTxsroothash_asB64(),
    receiptsroothash: msg.getReceiptsroothash_asB64(),
    confirms: jspb.Message.getFieldWithDefault(msg, 8, 0),
    pubkey: msg.getPubkey_asB64(),
    coinbaseaccount: msg.getCoinbaseaccount_asB64(),
    sign: msg.getSign_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.BlockHeader}
 */
proto.types.BlockHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.BlockHeader;
  return proto.types.BlockHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.BlockHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.BlockHeader}
 */
proto.types.BlockHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevblockhash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockno(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlocksroothash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxsroothash(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiptsroothash(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfirms(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCoinbaseaccount(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.BlockHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.BlockHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.BlockHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.BlockHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPrevblockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBlockno();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getBlocksroothash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getTxsroothash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getReceiptsroothash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getConfirms();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getCoinbaseaccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getSign_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional bytes chainID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.BlockHeader.prototype.getChainid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes chainID = 1;
 * This is a type-conversion wrapper around `getChainid()`
 * @return {string}
 */
proto.types.BlockHeader.prototype.getChainid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainid()));
};


/**
 * optional bytes chainID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainid()`
 * @return {!Uint8Array}
 */
proto.types.BlockHeader.prototype.getChainid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainid()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.BlockHeader.prototype.setChainid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes prevBlockHash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.BlockHeader.prototype.getPrevblockhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes prevBlockHash = 2;
 * This is a type-conversion wrapper around `getPrevblockhash()`
 * @return {string}
 */
proto.types.BlockHeader.prototype.getPrevblockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevblockhash()));
};


/**
 * optional bytes prevBlockHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevblockhash()`
 * @return {!Uint8Array}
 */
proto.types.BlockHeader.prototype.getPrevblockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevblockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.BlockHeader.prototype.setPrevblockhash = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 blockNo = 3;
 * @return {number}
 */
proto.types.BlockHeader.prototype.getBlockno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.types.BlockHeader.prototype.setBlockno = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.types.BlockHeader.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.types.BlockHeader.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes blocksRootHash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.types.BlockHeader.prototype.getBlocksroothash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes blocksRootHash = 5;
 * This is a type-conversion wrapper around `getBlocksroothash()`
 * @return {string}
 */
proto.types.BlockHeader.prototype.getBlocksroothash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlocksroothash()));
};


/**
 * optional bytes blocksRootHash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlocksroothash()`
 * @return {!Uint8Array}
 */
proto.types.BlockHeader.prototype.getBlocksroothash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlocksroothash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.BlockHeader.prototype.setBlocksroothash = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes txsRootHash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.types.BlockHeader.prototype.getTxsroothash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes txsRootHash = 6;
 * This is a type-conversion wrapper around `getTxsroothash()`
 * @return {string}
 */
proto.types.BlockHeader.prototype.getTxsroothash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxsroothash()));
};


/**
 * optional bytes txsRootHash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxsroothash()`
 * @return {!Uint8Array}
 */
proto.types.BlockHeader.prototype.getTxsroothash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxsroothash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.BlockHeader.prototype.setTxsroothash = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes receiptsRootHash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.types.BlockHeader.prototype.getReceiptsroothash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes receiptsRootHash = 7;
 * This is a type-conversion wrapper around `getReceiptsroothash()`
 * @return {string}
 */
proto.types.BlockHeader.prototype.getReceiptsroothash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiptsroothash()));
};


/**
 * optional bytes receiptsRootHash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiptsroothash()`
 * @return {!Uint8Array}
 */
proto.types.BlockHeader.prototype.getReceiptsroothash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiptsroothash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.BlockHeader.prototype.setReceiptsroothash = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint64 confirms = 8;
 * @return {number}
 */
proto.types.BlockHeader.prototype.getConfirms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.types.BlockHeader.prototype.setConfirms = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bytes pubKey = 9;
 * @return {!(string|Uint8Array)}
 */
proto.types.BlockHeader.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes pubKey = 9;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.types.BlockHeader.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubKey = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.types.BlockHeader.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.BlockHeader.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bytes coinbaseAccount = 10;
 * @return {!(string|Uint8Array)}
 */
proto.types.BlockHeader.prototype.getCoinbaseaccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes coinbaseAccount = 10;
 * This is a type-conversion wrapper around `getCoinbaseaccount()`
 * @return {string}
 */
proto.types.BlockHeader.prototype.getCoinbaseaccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCoinbaseaccount()));
};


/**
 * optional bytes coinbaseAccount = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCoinbaseaccount()`
 * @return {!Uint8Array}
 */
proto.types.BlockHeader.prototype.getCoinbaseaccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCoinbaseaccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.BlockHeader.prototype.setCoinbaseaccount = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bytes sign = 11;
 * @return {!(string|Uint8Array)}
 */
proto.types.BlockHeader.prototype.getSign = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes sign = 11;
 * This is a type-conversion wrapper around `getSign()`
 * @return {string}
 */
proto.types.BlockHeader.prototype.getSign_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSign()));
};


/**
 * optional bytes sign = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSign()`
 * @return {!Uint8Array}
 */
proto.types.BlockHeader.prototype.getSign_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSign()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.BlockHeader.prototype.setSign = function(value) {
  jspb.Message.setField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.BlockBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.BlockBody.repeatedFields_, null);
};
goog.inherits(proto.types.BlockBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.BlockBody.displayName = 'proto.types.BlockBody';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.BlockBody.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.BlockBody.prototype.toObject = function(opt_includeInstance) {
  return proto.types.BlockBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.BlockBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.BlockBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.types.Tx.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.BlockBody}
 */
proto.types.BlockBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.BlockBody;
  return proto.types.BlockBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.BlockBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.BlockBody}
 */
proto.types.BlockBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.Tx;
      reader.readMessage(value,proto.types.Tx.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.BlockBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.BlockBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.BlockBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.BlockBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.Tx.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Tx txs = 1;
 * @return {!Array.<!proto.types.Tx>}
 */
proto.types.BlockBody.prototype.getTxsList = function() {
  return /** @type{!Array.<!proto.types.Tx>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Tx, 1));
};


/** @param {!Array.<!proto.types.Tx>} value */
proto.types.BlockBody.prototype.setTxsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.Tx=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Tx}
 */
proto.types.BlockBody.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Tx, opt_index);
};


proto.types.BlockBody.prototype.clearTxsList = function() {
  this.setTxsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TxList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.TxList.repeatedFields_, null);
};
goog.inherits(proto.types.TxList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TxList.displayName = 'proto.types.TxList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.TxList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TxList.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TxList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TxList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TxList.toObject = function(includeInstance, msg) {
  var f, obj = {
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.types.Tx.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TxList}
 */
proto.types.TxList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TxList;
  return proto.types.TxList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TxList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TxList}
 */
proto.types.TxList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.Tx;
      reader.readMessage(value,proto.types.Tx.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TxList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TxList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TxList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TxList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.Tx.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Tx txs = 1;
 * @return {!Array.<!proto.types.Tx>}
 */
proto.types.TxList.prototype.getTxsList = function() {
  return /** @type{!Array.<!proto.types.Tx>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Tx, 1));
};


/** @param {!Array.<!proto.types.Tx>} value */
proto.types.TxList.prototype.setTxsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.Tx=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Tx}
 */
proto.types.TxList.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Tx, opt_index);
};


proto.types.TxList.prototype.clearTxsList = function() {
  this.setTxsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Tx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Tx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Tx.displayName = 'proto.types.Tx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Tx.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Tx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Tx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Tx.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    body: (f = msg.getBody()) && proto.types.TxBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Tx}
 */
proto.types.Tx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Tx;
  return proto.types.Tx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Tx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Tx}
 */
proto.types.Tx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = new proto.types.TxBody;
      reader.readMessage(value,proto.types.TxBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Tx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Tx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Tx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Tx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.TxBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.Tx.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.types.Tx.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.types.Tx.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Tx.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional TxBody body = 2;
 * @return {?proto.types.TxBody}
 */
proto.types.Tx.prototype.getBody = function() {
  return /** @type{?proto.types.TxBody} */ (
    jspb.Message.getWrapperField(this, proto.types.TxBody, 2));
};


/** @param {?proto.types.TxBody|undefined} value */
proto.types.Tx.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.types.Tx.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.Tx.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TxBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.TxBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TxBody.displayName = 'proto.types.TxBody';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TxBody.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TxBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TxBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TxBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    account: msg.getAccount_asB64(),
    recipient: msg.getRecipient_asB64(),
    amount: msg.getAmount_asB64(),
    payload: msg.getPayload_asB64(),
    gaslimit: jspb.Message.getFieldWithDefault(msg, 6, 0),
    gasprice: msg.getGasprice_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 8, 0),
    chainidhash: msg.getChainidhash_asB64(),
    sign: msg.getSign_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TxBody}
 */
proto.types.TxBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TxBody;
  return proto.types.TxBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TxBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TxBody}
 */
proto.types.TxBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecipient(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGaslimit(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasprice(value);
      break;
    case 8:
      var value = /** @type {!proto.types.TxType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainidhash(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSign(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TxBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TxBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TxBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TxBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getRecipient_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getGaslimit();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getGasprice_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getChainidhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getSign_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.types.TxBody.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.types.TxBody.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes account = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.TxBody.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes account = 2;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.types.TxBody.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.types.TxBody.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.TxBody.prototype.setAccount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes recipient = 3;
 * @return {!(string|Uint8Array)}
 */
proto.types.TxBody.prototype.getRecipient = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes recipient = 3;
 * This is a type-conversion wrapper around `getRecipient()`
 * @return {string}
 */
proto.types.TxBody.prototype.getRecipient_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecipient()));
};


/**
 * optional bytes recipient = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecipient()`
 * @return {!Uint8Array}
 */
proto.types.TxBody.prototype.getRecipient_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecipient()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.TxBody.prototype.setRecipient = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes amount = 4;
 * @return {!(string|Uint8Array)}
 */
proto.types.TxBody.prototype.getAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes amount = 4;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.types.TxBody.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.types.TxBody.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.TxBody.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes payload = 5;
 * @return {!(string|Uint8Array)}
 */
proto.types.TxBody.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes payload = 5;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.types.TxBody.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.types.TxBody.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.TxBody.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint64 gasLimit = 6;
 * @return {number}
 */
proto.types.TxBody.prototype.getGaslimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.types.TxBody.prototype.setGaslimit = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes gasPrice = 7;
 * @return {!(string|Uint8Array)}
 */
proto.types.TxBody.prototype.getGasprice = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes gasPrice = 7;
 * This is a type-conversion wrapper around `getGasprice()`
 * @return {string}
 */
proto.types.TxBody.prototype.getGasprice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasprice()));
};


/**
 * optional bytes gasPrice = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasprice()`
 * @return {!Uint8Array}
 */
proto.types.TxBody.prototype.getGasprice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasprice()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.TxBody.prototype.setGasprice = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional TxType type = 8;
 * @return {!proto.types.TxType}
 */
proto.types.TxBody.prototype.getType = function() {
  return /** @type {!proto.types.TxType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.types.TxType} value */
proto.types.TxBody.prototype.setType = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bytes chainIdHash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.types.TxBody.prototype.getChainidhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes chainIdHash = 9;
 * This is a type-conversion wrapper around `getChainidhash()`
 * @return {string}
 */
proto.types.TxBody.prototype.getChainidhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainidhash()));
};


/**
 * optional bytes chainIdHash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainidhash()`
 * @return {!Uint8Array}
 */
proto.types.TxBody.prototype.getChainidhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainidhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.TxBody.prototype.setChainidhash = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bytes sign = 10;
 * @return {!(string|Uint8Array)}
 */
proto.types.TxBody.prototype.getSign = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes sign = 10;
 * This is a type-conversion wrapper around `getSign()`
 * @return {string}
 */
proto.types.TxBody.prototype.getSign_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSign()));
};


/**
 * optional bytes sign = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSign()`
 * @return {!Uint8Array}
 */
proto.types.TxBody.prototype.getSign_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSign()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.TxBody.prototype.setSign = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TxIdx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.TxIdx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TxIdx.displayName = 'proto.types.TxIdx';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TxIdx.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TxIdx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TxIdx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TxIdx.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockhash: msg.getBlockhash_asB64(),
    idx: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TxIdx}
 */
proto.types.TxIdx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TxIdx;
  return proto.types.TxIdx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TxIdx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TxIdx}
 */
proto.types.TxIdx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockhash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TxIdx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TxIdx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TxIdx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TxIdx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIdx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bytes blockHash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.TxIdx.prototype.getBlockhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes blockHash = 1;
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {string}
 */
proto.types.TxIdx.prototype.getBlockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockhash()));
};


/**
 * optional bytes blockHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {!Uint8Array}
 */
proto.types.TxIdx.prototype.getBlockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.TxIdx.prototype.setBlockhash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 idx = 2;
 * @return {number}
 */
proto.types.TxIdx.prototype.getIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.types.TxIdx.prototype.setIdx = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.TxInBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.TxInBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.TxInBlock.displayName = 'proto.types.TxInBlock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.TxInBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.types.TxInBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.TxInBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TxInBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    txidx: (f = msg.getTxidx()) && proto.types.TxIdx.toObject(includeInstance, f),
    tx: (f = msg.getTx()) && proto.types.Tx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.TxInBlock}
 */
proto.types.TxInBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.TxInBlock;
  return proto.types.TxInBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.TxInBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.TxInBlock}
 */
proto.types.TxInBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.TxIdx;
      reader.readMessage(value,proto.types.TxIdx.deserializeBinaryFromReader);
      msg.setTxidx(value);
      break;
    case 2:
      var value = new proto.types.Tx;
      reader.readMessage(value,proto.types.Tx.deserializeBinaryFromReader);
      msg.setTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.TxInBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.TxInBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.TxInBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.TxInBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxidx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.TxIdx.serializeBinaryToWriter
    );
  }
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.Tx.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxIdx txIdx = 1;
 * @return {?proto.types.TxIdx}
 */
proto.types.TxInBlock.prototype.getTxidx = function() {
  return /** @type{?proto.types.TxIdx} */ (
    jspb.Message.getWrapperField(this, proto.types.TxIdx, 1));
};


/** @param {?proto.types.TxIdx|undefined} value */
proto.types.TxInBlock.prototype.setTxidx = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.types.TxInBlock.prototype.clearTxidx = function() {
  this.setTxidx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.TxInBlock.prototype.hasTxidx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Tx tx = 2;
 * @return {?proto.types.Tx}
 */
proto.types.TxInBlock.prototype.getTx = function() {
  return /** @type{?proto.types.Tx} */ (
    jspb.Message.getWrapperField(this, proto.types.Tx, 2));
};


/** @param {?proto.types.Tx|undefined} value */
proto.types.TxInBlock.prototype.setTx = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.types.TxInBlock.prototype.clearTx = function() {
  this.setTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.TxInBlock.prototype.hasTx = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.State = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.State, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.State.displayName = 'proto.types.State';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.State.prototype.toObject = function(opt_includeInstance) {
  return proto.types.State.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.State} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.State.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    balance: msg.getBalance_asB64(),
    codehash: msg.getCodehash_asB64(),
    storageroot: msg.getStorageroot_asB64(),
    sqlrecoverypoint: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.State}
 */
proto.types.State.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.State;
  return proto.types.State.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.State} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.State}
 */
proto.types.State.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBalance(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCodehash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStorageroot(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSqlrecoverypoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.State.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.State.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.State} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.State.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBalance_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCodehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getStorageroot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSqlrecoverypoint();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.types.State.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.types.State.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes balance = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.State.prototype.getBalance = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes balance = 2;
 * This is a type-conversion wrapper around `getBalance()`
 * @return {string}
 */
proto.types.State.prototype.getBalance_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBalance()));
};


/**
 * optional bytes balance = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBalance()`
 * @return {!Uint8Array}
 */
proto.types.State.prototype.getBalance_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBalance()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.State.prototype.setBalance = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes codeHash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.types.State.prototype.getCodehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes codeHash = 3;
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {string}
 */
proto.types.State.prototype.getCodehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCodehash()));
};


/**
 * optional bytes codeHash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {!Uint8Array}
 */
proto.types.State.prototype.getCodehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCodehash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.State.prototype.setCodehash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes storageRoot = 4;
 * @return {!(string|Uint8Array)}
 */
proto.types.State.prototype.getStorageroot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes storageRoot = 4;
 * This is a type-conversion wrapper around `getStorageroot()`
 * @return {string}
 */
proto.types.State.prototype.getStorageroot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStorageroot()));
};


/**
 * optional bytes storageRoot = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStorageroot()`
 * @return {!Uint8Array}
 */
proto.types.State.prototype.getStorageroot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStorageroot()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.State.prototype.setStorageroot = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 sqlRecoveryPoint = 5;
 * @return {number}
 */
proto.types.State.prototype.getSqlrecoverypoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.types.State.prototype.setSqlrecoverypoint = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.AccountProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.AccountProof.repeatedFields_, null);
};
goog.inherits(proto.types.AccountProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.AccountProof.displayName = 'proto.types.AccountProof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.AccountProof.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.AccountProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.AccountProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.AccountProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccountProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.types.State.toObject(includeInstance, f),
    inclusion: jspb.Message.getFieldWithDefault(msg, 2, false),
    key: msg.getKey_asB64(),
    proofkey: msg.getProofkey_asB64(),
    proofval: msg.getProofval_asB64(),
    bitmap: msg.getBitmap_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 7, 0),
    auditpathList: msg.getAuditpathList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.AccountProof}
 */
proto.types.AccountProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.AccountProof;
  return proto.types.AccountProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.AccountProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.AccountProof}
 */
proto.types.AccountProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.State;
      reader.readMessage(value,proto.types.State.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInclusion(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofkey(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofval(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBitmap(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAuditpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.AccountProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.AccountProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.AccountProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.AccountProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.State.serializeBinaryToWriter
    );
  }
  f = message.getInclusion();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProofkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getProofval_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getBitmap_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getAuditpathList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      8,
      f
    );
  }
};


/**
 * optional State state = 1;
 * @return {?proto.types.State}
 */
proto.types.AccountProof.prototype.getState = function() {
  return /** @type{?proto.types.State} */ (
    jspb.Message.getWrapperField(this, proto.types.State, 1));
};


/** @param {?proto.types.State|undefined} value */
proto.types.AccountProof.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.types.AccountProof.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.AccountProof.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool inclusion = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.types.AccountProof.prototype.getInclusion = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.types.AccountProof.prototype.setInclusion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.types.AccountProof.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes key = 3;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.types.AccountProof.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.types.AccountProof.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.AccountProof.prototype.setKey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes proofKey = 4;
 * @return {!(string|Uint8Array)}
 */
proto.types.AccountProof.prototype.getProofkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes proofKey = 4;
 * This is a type-conversion wrapper around `getProofkey()`
 * @return {string}
 */
proto.types.AccountProof.prototype.getProofkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofkey()));
};


/**
 * optional bytes proofKey = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofkey()`
 * @return {!Uint8Array}
 */
proto.types.AccountProof.prototype.getProofkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.AccountProof.prototype.setProofkey = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes proofVal = 5;
 * @return {!(string|Uint8Array)}
 */
proto.types.AccountProof.prototype.getProofval = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes proofVal = 5;
 * This is a type-conversion wrapper around `getProofval()`
 * @return {string}
 */
proto.types.AccountProof.prototype.getProofval_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofval()));
};


/**
 * optional bytes proofVal = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofval()`
 * @return {!Uint8Array}
 */
proto.types.AccountProof.prototype.getProofval_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofval()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.AccountProof.prototype.setProofval = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes bitmap = 6;
 * @return {!(string|Uint8Array)}
 */
proto.types.AccountProof.prototype.getBitmap = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes bitmap = 6;
 * This is a type-conversion wrapper around `getBitmap()`
 * @return {string}
 */
proto.types.AccountProof.prototype.getBitmap_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBitmap()));
};


/**
 * optional bytes bitmap = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBitmap()`
 * @return {!Uint8Array}
 */
proto.types.AccountProof.prototype.getBitmap_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBitmap()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.AccountProof.prototype.setBitmap = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 height = 7;
 * @return {number}
 */
proto.types.AccountProof.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.types.AccountProof.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * repeated bytes auditPath = 8;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.types.AccountProof.prototype.getAuditpathList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * repeated bytes auditPath = 8;
 * This is a type-conversion wrapper around `getAuditpathList()`
 * @return {!Array.<string>}
 */
proto.types.AccountProof.prototype.getAuditpathList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getAuditpathList()));
};


/**
 * repeated bytes auditPath = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuditpathList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.types.AccountProof.prototype.getAuditpathList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAuditpathList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.types.AccountProof.prototype.setAuditpathList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.types.AccountProof.prototype.addAuditpath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.types.AccountProof.prototype.clearAuditpathList = function() {
  this.setAuditpathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.ContractVarProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.ContractVarProof.repeatedFields_, null);
};
goog.inherits(proto.types.ContractVarProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.ContractVarProof.displayName = 'proto.types.ContractVarProof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.ContractVarProof.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.ContractVarProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.ContractVarProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.ContractVarProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ContractVarProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64(),
    inclusion: jspb.Message.getFieldWithDefault(msg, 2, false),
    key: jspb.Message.getFieldWithDefault(msg, 3, ""),
    proofkey: msg.getProofkey_asB64(),
    proofval: msg.getProofval_asB64(),
    bitmap: msg.getBitmap_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 7, 0),
    auditpathList: msg.getAuditpathList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.ContractVarProof}
 */
proto.types.ContractVarProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.ContractVarProof;
  return proto.types.ContractVarProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.ContractVarProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.ContractVarProof}
 */
proto.types.ContractVarProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInclusion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofkey(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofval(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBitmap(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAuditpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.ContractVarProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.ContractVarProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.ContractVarProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ContractVarProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getInclusion();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProofkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getProofval_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getBitmap_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getAuditpathList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      8,
      f
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.ContractVarProof.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.types.ContractVarProof.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.types.ContractVarProof.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.ContractVarProof.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool inclusion = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.types.ContractVarProof.prototype.getInclusion = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.types.ContractVarProof.prototype.setInclusion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.types.ContractVarProof.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.types.ContractVarProof.prototype.setKey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes proofKey = 4;
 * @return {!(string|Uint8Array)}
 */
proto.types.ContractVarProof.prototype.getProofkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes proofKey = 4;
 * This is a type-conversion wrapper around `getProofkey()`
 * @return {string}
 */
proto.types.ContractVarProof.prototype.getProofkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofkey()));
};


/**
 * optional bytes proofKey = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofkey()`
 * @return {!Uint8Array}
 */
proto.types.ContractVarProof.prototype.getProofkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.ContractVarProof.prototype.setProofkey = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes proofVal = 5;
 * @return {!(string|Uint8Array)}
 */
proto.types.ContractVarProof.prototype.getProofval = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes proofVal = 5;
 * This is a type-conversion wrapper around `getProofval()`
 * @return {string}
 */
proto.types.ContractVarProof.prototype.getProofval_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofval()));
};


/**
 * optional bytes proofVal = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofval()`
 * @return {!Uint8Array}
 */
proto.types.ContractVarProof.prototype.getProofval_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofval()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.ContractVarProof.prototype.setProofval = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes bitmap = 6;
 * @return {!(string|Uint8Array)}
 */
proto.types.ContractVarProof.prototype.getBitmap = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes bitmap = 6;
 * This is a type-conversion wrapper around `getBitmap()`
 * @return {string}
 */
proto.types.ContractVarProof.prototype.getBitmap_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBitmap()));
};


/**
 * optional bytes bitmap = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBitmap()`
 * @return {!Uint8Array}
 */
proto.types.ContractVarProof.prototype.getBitmap_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBitmap()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.ContractVarProof.prototype.setBitmap = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 height = 7;
 * @return {number}
 */
proto.types.ContractVarProof.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.types.ContractVarProof.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * repeated bytes auditPath = 8;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.types.ContractVarProof.prototype.getAuditpathList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * repeated bytes auditPath = 8;
 * This is a type-conversion wrapper around `getAuditpathList()`
 * @return {!Array.<string>}
 */
proto.types.ContractVarProof.prototype.getAuditpathList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getAuditpathList()));
};


/**
 * repeated bytes auditPath = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuditpathList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.types.ContractVarProof.prototype.getAuditpathList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAuditpathList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.types.ContractVarProof.prototype.setAuditpathList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.types.ContractVarProof.prototype.addAuditpath = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.types.ContractVarProof.prototype.clearAuditpathList = function() {
  this.setAuditpathList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.StateQueryProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.StateQueryProof.repeatedFields_, null);
};
goog.inherits(proto.types.StateQueryProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.StateQueryProof.displayName = 'proto.types.StateQueryProof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.StateQueryProof.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.StateQueryProof.prototype.toObject = function(opt_includeInstance) {
  return proto.types.StateQueryProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.StateQueryProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.StateQueryProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractproof: (f = msg.getContractproof()) && proto.types.AccountProof.toObject(includeInstance, f),
    varproofsList: jspb.Message.toObjectList(msg.getVarproofsList(),
    proto.types.ContractVarProof.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.StateQueryProof}
 */
proto.types.StateQueryProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.StateQueryProof;
  return proto.types.StateQueryProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.StateQueryProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.StateQueryProof}
 */
proto.types.StateQueryProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.AccountProof;
      reader.readMessage(value,proto.types.AccountProof.deserializeBinaryFromReader);
      msg.setContractproof(value);
      break;
    case 2:
      var value = new proto.types.ContractVarProof;
      reader.readMessage(value,proto.types.ContractVarProof.deserializeBinaryFromReader);
      msg.addVarproofs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.StateQueryProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.StateQueryProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.StateQueryProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.StateQueryProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractproof();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.AccountProof.serializeBinaryToWriter
    );
  }
  f = message.getVarproofsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.types.ContractVarProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountProof contractProof = 1;
 * @return {?proto.types.AccountProof}
 */
proto.types.StateQueryProof.prototype.getContractproof = function() {
  return /** @type{?proto.types.AccountProof} */ (
    jspb.Message.getWrapperField(this, proto.types.AccountProof, 1));
};


/** @param {?proto.types.AccountProof|undefined} value */
proto.types.StateQueryProof.prototype.setContractproof = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.types.StateQueryProof.prototype.clearContractproof = function() {
  this.setContractproof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.types.StateQueryProof.prototype.hasContractproof = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ContractVarProof varProofs = 2;
 * @return {!Array.<!proto.types.ContractVarProof>}
 */
proto.types.StateQueryProof.prototype.getVarproofsList = function() {
  return /** @type{!Array.<!proto.types.ContractVarProof>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.ContractVarProof, 2));
};


/** @param {!Array.<!proto.types.ContractVarProof>} value */
proto.types.StateQueryProof.prototype.setVarproofsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.types.ContractVarProof=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.ContractVarProof}
 */
proto.types.StateQueryProof.prototype.addVarproofs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.ContractVarProof, opt_index);
};


proto.types.StateQueryProof.prototype.clearVarproofsList = function() {
  this.setVarproofsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Receipt.repeatedFields_, null);
};
goog.inherits(proto.types.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Receipt.displayName = 'proto.types.Receipt';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Receipt.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractaddress: msg.getContractaddress_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ret: jspb.Message.getFieldWithDefault(msg, 3, ""),
    txhash: msg.getTxhash_asB64(),
    feeused: msg.getFeeused_asB64(),
    cumulativefeeused: msg.getCumulativefeeused_asB64(),
    bloom: msg.getBloom_asB64(),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.types.Event.toObject, includeInstance),
    blockno: jspb.Message.getFieldWithDefault(msg, 9, 0),
    blockhash: msg.getBlockhash_asB64(),
    txindex: jspb.Message.getFieldWithDefault(msg, 11, 0),
    from: msg.getFrom_asB64(),
    to: msg.getTo_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Receipt}
 */
proto.types.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Receipt;
  return proto.types.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Receipt}
 */
proto.types.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRet(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxhash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeeused(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCumulativefeeused(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBloom(value);
      break;
    case 8:
      var value = new proto.types.Event;
      reader.readMessage(value,proto.types.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockno(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockhash(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTxindex(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRet();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTxhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getFeeused_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getCumulativefeeused_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.types.Event.serializeBinaryToWriter
    );
  }
  f = message.getBlockno();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getBlockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getTxindex();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
};


/**
 * optional bytes contractAddress = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.Receipt.prototype.getContractaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contractAddress = 1;
 * This is a type-conversion wrapper around `getContractaddress()`
 * @return {string}
 */
proto.types.Receipt.prototype.getContractaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractaddress()));
};


/**
 * optional bytes contractAddress = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractaddress()`
 * @return {!Uint8Array}
 */
proto.types.Receipt.prototype.getContractaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractaddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Receipt.prototype.setContractaddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.types.Receipt.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.types.Receipt.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string ret = 3;
 * @return {string}
 */
proto.types.Receipt.prototype.getRet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.types.Receipt.prototype.setRet = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes txHash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.types.Receipt.prototype.getTxhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes txHash = 4;
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {string}
 */
proto.types.Receipt.prototype.getTxhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxhash()));
};


/**
 * optional bytes txHash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {!Uint8Array}
 */
proto.types.Receipt.prototype.getTxhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Receipt.prototype.setTxhash = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes feeUsed = 5;
 * @return {!(string|Uint8Array)}
 */
proto.types.Receipt.prototype.getFeeused = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes feeUsed = 5;
 * This is a type-conversion wrapper around `getFeeused()`
 * @return {string}
 */
proto.types.Receipt.prototype.getFeeused_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeeused()));
};


/**
 * optional bytes feeUsed = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeeused()`
 * @return {!Uint8Array}
 */
proto.types.Receipt.prototype.getFeeused_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeeused()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Receipt.prototype.setFeeused = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes cumulativeFeeUsed = 6;
 * @return {!(string|Uint8Array)}
 */
proto.types.Receipt.prototype.getCumulativefeeused = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes cumulativeFeeUsed = 6;
 * This is a type-conversion wrapper around `getCumulativefeeused()`
 * @return {string}
 */
proto.types.Receipt.prototype.getCumulativefeeused_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCumulativefeeused()));
};


/**
 * optional bytes cumulativeFeeUsed = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCumulativefeeused()`
 * @return {!Uint8Array}
 */
proto.types.Receipt.prototype.getCumulativefeeused_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCumulativefeeused()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Receipt.prototype.setCumulativefeeused = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes bloom = 7;
 * @return {!(string|Uint8Array)}
 */
proto.types.Receipt.prototype.getBloom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes bloom = 7;
 * This is a type-conversion wrapper around `getBloom()`
 * @return {string}
 */
proto.types.Receipt.prototype.getBloom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBloom()));
};


/**
 * optional bytes bloom = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBloom()`
 * @return {!Uint8Array}
 */
proto.types.Receipt.prototype.getBloom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBloom()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Receipt.prototype.setBloom = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * repeated Event events = 8;
 * @return {!Array.<!proto.types.Event>}
 */
proto.types.Receipt.prototype.getEventsList = function() {
  return /** @type{!Array.<!proto.types.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Event, 8));
};


/** @param {!Array.<!proto.types.Event>} value */
proto.types.Receipt.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.types.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Event}
 */
proto.types.Receipt.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.types.Event, opt_index);
};


proto.types.Receipt.prototype.clearEventsList = function() {
  this.setEventsList([]);
};


/**
 * optional uint64 blockNo = 9;
 * @return {number}
 */
proto.types.Receipt.prototype.getBlockno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.types.Receipt.prototype.setBlockno = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bytes blockHash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.types.Receipt.prototype.getBlockhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes blockHash = 10;
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {string}
 */
proto.types.Receipt.prototype.getBlockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockhash()));
};


/**
 * optional bytes blockHash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {!Uint8Array}
 */
proto.types.Receipt.prototype.getBlockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Receipt.prototype.setBlockhash = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional int32 txIndex = 11;
 * @return {number}
 */
proto.types.Receipt.prototype.getTxindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.types.Receipt.prototype.setTxindex = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bytes from = 12;
 * @return {!(string|Uint8Array)}
 */
proto.types.Receipt.prototype.getFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes from = 12;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.types.Receipt.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.types.Receipt.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Receipt.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bytes to = 13;
 * @return {!(string|Uint8Array)}
 */
proto.types.Receipt.prototype.getTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes to = 13;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.types.Receipt.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.types.Receipt.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Receipt.prototype.setTo = function(value) {
  jspb.Message.setField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Event.displayName = 'proto.types.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractaddress: msg.getContractaddress_asB64(),
    eventname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jsonargs: jspb.Message.getFieldWithDefault(msg, 3, ""),
    eventidx: jspb.Message.getFieldWithDefault(msg, 4, 0),
    txhash: msg.getTxhash_asB64(),
    blockhash: msg.getBlockhash_asB64(),
    blockno: jspb.Message.getFieldWithDefault(msg, 7, 0),
    txindex: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Event}
 */
proto.types.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Event;
  return proto.types.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Event}
 */
proto.types.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonargs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventidx(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxhash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockhash(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockno(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTxindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEventname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJsonargs();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEventidx();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTxhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getBlockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBlockno();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getTxindex();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional bytes contractAddress = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.Event.prototype.getContractaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contractAddress = 1;
 * This is a type-conversion wrapper around `getContractaddress()`
 * @return {string}
 */
proto.types.Event.prototype.getContractaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractaddress()));
};


/**
 * optional bytes contractAddress = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractaddress()`
 * @return {!Uint8Array}
 */
proto.types.Event.prototype.getContractaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractaddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Event.prototype.setContractaddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string eventName = 2;
 * @return {string}
 */
proto.types.Event.prototype.getEventname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.types.Event.prototype.setEventname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string jsonArgs = 3;
 * @return {string}
 */
proto.types.Event.prototype.getJsonargs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.types.Event.prototype.setJsonargs = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 eventIdx = 4;
 * @return {number}
 */
proto.types.Event.prototype.getEventidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.types.Event.prototype.setEventidx = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes txHash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.types.Event.prototype.getTxhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes txHash = 5;
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {string}
 */
proto.types.Event.prototype.getTxhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxhash()));
};


/**
 * optional bytes txHash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxhash()`
 * @return {!Uint8Array}
 */
proto.types.Event.prototype.getTxhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Event.prototype.setTxhash = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes blockHash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.types.Event.prototype.getBlockhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes blockHash = 6;
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {string}
 */
proto.types.Event.prototype.getBlockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockhash()));
};


/**
 * optional bytes blockHash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {!Uint8Array}
 */
proto.types.Event.prototype.getBlockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Event.prototype.setBlockhash = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint64 blockNo = 7;
 * @return {number}
 */
proto.types.Event.prototype.getBlockno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.types.Event.prototype.setBlockno = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 txIndex = 8;
 * @return {number}
 */
proto.types.Event.prototype.getTxindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.types.Event.prototype.setTxindex = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.FnArgument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.FnArgument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.FnArgument.displayName = 'proto.types.FnArgument';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.FnArgument.prototype.toObject = function(opt_includeInstance) {
  return proto.types.FnArgument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.FnArgument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.FnArgument.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.FnArgument}
 */
proto.types.FnArgument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.FnArgument;
  return proto.types.FnArgument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.FnArgument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.FnArgument}
 */
proto.types.FnArgument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.FnArgument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.FnArgument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.FnArgument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.FnArgument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.types.FnArgument.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.types.FnArgument.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Function = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Function.repeatedFields_, null);
};
goog.inherits(proto.types.Function, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Function.displayName = 'proto.types.Function';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Function.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Function.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Function.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Function} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Function.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(),
    proto.types.FnArgument.toObject, includeInstance),
    payable: jspb.Message.getFieldWithDefault(msg, 3, false),
    view: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Function}
 */
proto.types.Function.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Function;
  return proto.types.Function.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Function} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Function}
 */
proto.types.Function.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.types.FnArgument;
      reader.readMessage(value,proto.types.FnArgument.deserializeBinaryFromReader);
      msg.addArguments(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPayable(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setView(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Function.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Function.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Function} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Function.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.types.FnArgument.serializeBinaryToWriter
    );
  }
  f = message.getPayable();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getView();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.types.Function.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.types.Function.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated FnArgument arguments = 2;
 * @return {!Array.<!proto.types.FnArgument>}
 */
proto.types.Function.prototype.getArgumentsList = function() {
  return /** @type{!Array.<!proto.types.FnArgument>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.FnArgument, 2));
};


/** @param {!Array.<!proto.types.FnArgument>} value */
proto.types.Function.prototype.setArgumentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.types.FnArgument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.FnArgument}
 */
proto.types.Function.prototype.addArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.FnArgument, opt_index);
};


proto.types.Function.prototype.clearArgumentsList = function() {
  this.setArgumentsList([]);
};


/**
 * optional bool payable = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.types.Function.prototype.getPayable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.types.Function.prototype.setPayable = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool view = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.types.Function.prototype.getView = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.types.Function.prototype.setView = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.StateVar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.StateVar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.StateVar.displayName = 'proto.types.StateVar';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.StateVar.prototype.toObject = function(opt_includeInstance) {
  return proto.types.StateVar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.StateVar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.StateVar.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    len: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.StateVar}
 */
proto.types.StateVar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.StateVar;
  return proto.types.StateVar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.StateVar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.StateVar}
 */
proto.types.StateVar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.StateVar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.StateVar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.StateVar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.StateVar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLen();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.types.StateVar.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.types.StateVar.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.types.StateVar.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.types.StateVar.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 len = 3;
 * @return {number}
 */
proto.types.StateVar.prototype.getLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.types.StateVar.prototype.setLen = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.ABI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.ABI.repeatedFields_, null);
};
goog.inherits(proto.types.ABI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.ABI.displayName = 'proto.types.ABI';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.ABI.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.ABI.prototype.toObject = function(opt_includeInstance) {
  return proto.types.ABI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.ABI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ABI.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    language: jspb.Message.getFieldWithDefault(msg, 2, ""),
    functionsList: jspb.Message.toObjectList(msg.getFunctionsList(),
    proto.types.Function.toObject, includeInstance),
    stateVariablesList: jspb.Message.toObjectList(msg.getStateVariablesList(),
    proto.types.StateVar.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.ABI}
 */
proto.types.ABI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.ABI;
  return proto.types.ABI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.ABI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.ABI}
 */
proto.types.ABI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 3:
      var value = new proto.types.Function;
      reader.readMessage(value,proto.types.Function.deserializeBinaryFromReader);
      msg.addFunctions(value);
      break;
    case 4:
      var value = new proto.types.StateVar;
      reader.readMessage(value,proto.types.StateVar.deserializeBinaryFromReader);
      msg.addStateVariables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.ABI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.ABI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.ABI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ABI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFunctionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.types.Function.serializeBinaryToWriter
    );
  }
  f = message.getStateVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.types.StateVar.serializeBinaryToWriter
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.types.ABI.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.types.ABI.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string language = 2;
 * @return {string}
 */
proto.types.ABI.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.types.ABI.prototype.setLanguage = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Function functions = 3;
 * @return {!Array.<!proto.types.Function>}
 */
proto.types.ABI.prototype.getFunctionsList = function() {
  return /** @type{!Array.<!proto.types.Function>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Function, 3));
};


/** @param {!Array.<!proto.types.Function>} value */
proto.types.ABI.prototype.setFunctionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.types.Function=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Function}
 */
proto.types.ABI.prototype.addFunctions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.types.Function, opt_index);
};


proto.types.ABI.prototype.clearFunctionsList = function() {
  this.setFunctionsList([]);
};


/**
 * repeated StateVar state_variables = 4;
 * @return {!Array.<!proto.types.StateVar>}
 */
proto.types.ABI.prototype.getStateVariablesList = function() {
  return /** @type{!Array.<!proto.types.StateVar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.StateVar, 4));
};


/** @param {!Array.<!proto.types.StateVar>} value */
proto.types.ABI.prototype.setStateVariablesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.types.StateVar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.StateVar}
 */
proto.types.ABI.prototype.addStateVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.types.StateVar, opt_index);
};


proto.types.ABI.prototype.clearStateVariablesList = function() {
  this.setStateVariablesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Query.displayName = 'proto.types.Query';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractaddress: msg.getContractaddress_asB64(),
    queryinfo: msg.getQueryinfo_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Query}
 */
proto.types.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Query;
  return proto.types.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Query}
 */
proto.types.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractaddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setQueryinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getQueryinfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes contractAddress = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.Query.prototype.getContractaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contractAddress = 1;
 * This is a type-conversion wrapper around `getContractaddress()`
 * @return {string}
 */
proto.types.Query.prototype.getContractaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractaddress()));
};


/**
 * optional bytes contractAddress = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractaddress()`
 * @return {!Uint8Array}
 */
proto.types.Query.prototype.getContractaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractaddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Query.prototype.setContractaddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes queryinfo = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.Query.prototype.getQueryinfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes queryinfo = 2;
 * This is a type-conversion wrapper around `getQueryinfo()`
 * @return {string}
 */
proto.types.Query.prototype.getQueryinfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getQueryinfo()));
};


/**
 * optional bytes queryinfo = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getQueryinfo()`
 * @return {!Uint8Array}
 */
proto.types.Query.prototype.getQueryinfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getQueryinfo()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.Query.prototype.setQueryinfo = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.StateQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.StateQuery.repeatedFields_, null);
};
goog.inherits(proto.types.StateQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.StateQuery.displayName = 'proto.types.StateQuery';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.StateQuery.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.StateQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.types.StateQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.StateQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.StateQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractaddress: msg.getContractaddress_asB64(),
    storagekeysList: jspb.Message.getRepeatedField(msg, 2),
    root: msg.getRoot_asB64(),
    compressed: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.StateQuery}
 */
proto.types.StateQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.StateQuery;
  return proto.types.StateQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.StateQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.StateQuery}
 */
proto.types.StateQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addStoragekeys(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoot(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompressed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.StateQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.StateQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.StateQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.StateQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStoragekeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getCompressed();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bytes contractAddress = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.StateQuery.prototype.getContractaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contractAddress = 1;
 * This is a type-conversion wrapper around `getContractaddress()`
 * @return {string}
 */
proto.types.StateQuery.prototype.getContractaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractaddress()));
};


/**
 * optional bytes contractAddress = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractaddress()`
 * @return {!Uint8Array}
 */
proto.types.StateQuery.prototype.getContractaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractaddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.StateQuery.prototype.setContractaddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string storageKeys = 2;
 * @return {!Array.<string>}
 */
proto.types.StateQuery.prototype.getStoragekeysList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<string>} value */
proto.types.StateQuery.prototype.setStoragekeysList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.types.StateQuery.prototype.addStoragekeys = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.types.StateQuery.prototype.clearStoragekeysList = function() {
  this.setStoragekeysList([]);
};


/**
 * optional bytes root = 3;
 * @return {!(string|Uint8Array)}
 */
proto.types.StateQuery.prototype.getRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes root = 3;
 * This is a type-conversion wrapper around `getRoot()`
 * @return {string}
 */
proto.types.StateQuery.prototype.getRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoot()));
};


/**
 * optional bytes root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoot()`
 * @return {!Uint8Array}
 */
proto.types.StateQuery.prototype.getRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoot()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.StateQuery.prototype.setRoot = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool compressed = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.types.StateQuery.prototype.getCompressed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.types.StateQuery.prototype.setCompressed = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.FilterInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.FilterInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.FilterInfo.displayName = 'proto.types.FilterInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.FilterInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.types.FilterInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.FilterInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.FilterInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractaddress: msg.getContractaddress_asB64(),
    eventname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blockfrom: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockto: jspb.Message.getFieldWithDefault(msg, 4, 0),
    desc: jspb.Message.getFieldWithDefault(msg, 5, false),
    argfilter: msg.getArgfilter_asB64(),
    recentblockcnt: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.FilterInfo}
 */
proto.types.FilterInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.FilterInfo;
  return proto.types.FilterInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.FilterInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.FilterInfo}
 */
proto.types.FilterInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockfrom(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockto(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDesc(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setArgfilter(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRecentblockcnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.FilterInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.FilterInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.FilterInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.FilterInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEventname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlockfrom();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBlockto();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getDesc();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getArgfilter_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getRecentblockcnt();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional bytes contractAddress = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.FilterInfo.prototype.getContractaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contractAddress = 1;
 * This is a type-conversion wrapper around `getContractaddress()`
 * @return {string}
 */
proto.types.FilterInfo.prototype.getContractaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractaddress()));
};


/**
 * optional bytes contractAddress = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractaddress()`
 * @return {!Uint8Array}
 */
proto.types.FilterInfo.prototype.getContractaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractaddress()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.FilterInfo.prototype.setContractaddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string eventName = 2;
 * @return {string}
 */
proto.types.FilterInfo.prototype.getEventname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.types.FilterInfo.prototype.setEventname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 blockfrom = 3;
 * @return {number}
 */
proto.types.FilterInfo.prototype.getBlockfrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.types.FilterInfo.prototype.setBlockfrom = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 blockto = 4;
 * @return {number}
 */
proto.types.FilterInfo.prototype.getBlockto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.types.FilterInfo.prototype.setBlockto = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool desc = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.types.FilterInfo.prototype.getDesc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.types.FilterInfo.prototype.setDesc = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes argFilter = 6;
 * @return {!(string|Uint8Array)}
 */
proto.types.FilterInfo.prototype.getArgfilter = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes argFilter = 6;
 * This is a type-conversion wrapper around `getArgfilter()`
 * @return {string}
 */
proto.types.FilterInfo.prototype.getArgfilter_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getArgfilter()));
};


/**
 * optional bytes argFilter = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgfilter()`
 * @return {!Uint8Array}
 */
proto.types.FilterInfo.prototype.getArgfilter_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getArgfilter()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.FilterInfo.prototype.setArgfilter = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 recentBlockCnt = 7;
 * @return {number}
 */
proto.types.FilterInfo.prototype.getRecentblockcnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.types.FilterInfo.prototype.setRecentblockcnt = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.types.TxType = {
  NORMAL: 0,
  GOVERNANCE: 1
};

goog.object.extend(exports, proto.types);
